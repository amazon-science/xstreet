{"id": "GSM8K_0_0c3da8c7d5", "context": "", "options": [], "answer": "18", "reasoning_graph_edges": [{"antecedents": [1, 2, 3, 4], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 & sent3 & sent4 -> int1: Janet sells 16 - 3 - 4 = 9 duck eggs a day.; int1 & sent4 -> int2: She makes 9 * 2 = $18 every day at the farmer’s market.; int2 & sent5 -> int3: The answer is 18;", "textual_logical_units": {"1": "Los patos de Janet ponen 16 huevos al día.", "2": "Come tres en el desayuno todas las mañanas y", "3": "hornea magdalenas para sus amigas todos los días con cuatro.", "4": "Vende el resto en el mercado agrícola todos los días a 2 € por huevo de pato fresco.", "5": "¿Cuánto gana en euros todos los días en el mercado agrícola?", "6": "Janet vende 16 - 3 - 4 = 9 huevos de pato al día.", "7": "Gana 9 * 2 = 18 € todos los días en el mercado agrícola.", "8": "The answer is 18"}, "human_translated": true, "code_input": "####\nfacts = [ 'Los patos de Janet ponen 16\\xa0huevos al día.',\n  'Come tres en el desayuno todas las mañanas y',\n  'hornea magdalenas para sus amigas todos los días con cuatro.',\n  'Vende el resto en el mercado agrícola todos los días a 2\\xa0€ por huevo de pato fresco.']\nquestion = '¿Cuánto gana en euros todos los días en el mercado agrícola?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Los patos de Janet ponen 16\\xa0huevos al día.', 'Come tres en el desayuno todas las mañanas y', 'hornea magdalenas para sus amigas todos los días con cuatro.', 'Vende el resto en el mercado agrícola todos los días a 2\\xa0€ por huevo de pato fresco.']\nnew_fact = infer_new_fact(selected) # 'Janet vende 16 - 3 - 4 = 9 huevos de pato al día.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Vende el resto en el mercado agrícola todos los días a 2\\xa0€ por huevo de pato fresco.', 'Janet vende 16 - 3 - 4 = 9 huevos de pato al día.']\nnew_fact = infer_new_fact(selected) # 'Gana 9\\xa0*\\xa02 = 18\\xa0€ todos los días en el mercado agrícola.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto gana en euros todos los días en el mercado agrícola?', 'Gana 9\\xa0*\\xa02 = 18\\xa0€ todos los días en el mercado agrícola.']\nnew_fact = infer_new_fact(selected) # 'The answer is 18'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '18'"}
{"id": "GSM8K_1_e1817d7abd", "context": "", "options": [], "answer": "3", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [3, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: It takes 2/2=1 bolt of white fiber; int1 & sent3 -> int2: So the total amount of fabric is 2+1=3 bolts of fabric; int2 & sent3 -> int3: The answer is 3;", "textual_logical_units": {"1": "Una bata requiere 2 rollos de fibra azul y", "2": "la mitad de esa cantidad de fibra blanca.", "3": "¿Cuántos rollos en total se necesitan?", "4": "Se necesita 2 / 2 = 1 rollo de fibra blanca", "5": "Así que la cantidad total de tela es 2 + 1 = 3 rollos de tela", "6": "The answer is 3"}, "human_translated": true, "code_input": "####\nfacts = ['Una bata requiere 2 rollos de fibra azul y', 'la mitad de esa cantidad de fibra blanca.']\nquestion = '¿Cuántos rollos en total se necesitan?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Una bata requiere 2 rollos de fibra azul y', 'la mitad de esa cantidad de fibra blanca.']\nnew_fact = infer_new_fact(selected) # 'Se necesita 2\\xa0/\\xa02\\xa0=\\xa01 rollo de fibra blanca'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos rollos en total se necesitan?', 'Se necesita 2\\xa0/\\xa02\\xa0=\\xa01 rollo de fibra blanca']\nnew_fact = infer_new_fact(selected) # 'Así que la cantidad total de tela es 2\\xa0+\\xa01 = 3 rollos de tela'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos rollos en total se necesitan?', 'Así que la cantidad total de tela es 2\\xa0+\\xa01 = 3 rollos de tela']\nnew_fact = infer_new_fact(selected) # 'The answer is 3'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '3'"}
{"id": "GSM8K_2_ecffc3947e", "context": "", "options": [], "answer": "70000", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 6}, {"antecedents": [2, 4], "consequent": 7}, {"antecedents": [7], "consequent": 8}, {"antecedents": [6, 7, 8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: The cost of the house and repairs came out to 80,000+50,000=$130,000; sent2 & sent4 -> int2: He increased the value of the house by 80,000*1.5=120,000; int2 -> int3: So the new value of the house is 120,000+80,000=$200,000; int1 & int2 & int3 -> int4: So he made a profit of 200,000-130,000=$70,000; int4 & sent5 -> int5: The answer is 70000;", "textual_logical_units": {"1": "Josh decide intentar comprar una casa para luego revenderla.", "2": "Compra una casa por 80 000 € y", "3": "luego destina 50 000 € a reparaciones.", "4": "Esto aumentó el valor de la casa en un 150 %.", "5": "¿Cuántos beneficios obtuvo?", "6": "El coste de la casa y las reparaciones ascendió a 80 000 + 50 000 = 130 000 €", "7": "Aumentó el valor de la casa en 80 000 * 1,5 = 120 000", "8": "Así que el nuevo valor de la casa es de 120 000 + 80 000 = 200 000 €", "9": "Por lo que obtuvo un beneficio de 200 000 - 130 000  = 70 000 €", "10": "The answer is 70000"}, "human_translated": true, "code_input": "####\nfacts = [ 'Josh decide intentar comprar una casa para luego revenderla.',\n  'Compra una casa por 80\\xa0000\\xa0€ y',\n  'luego destina 50\\xa0000\\xa0€ a reparaciones.',\n  'Esto aumentó el valor de la casa en un 150\\xa0%.']\nquestion = '¿Cuántos beneficios obtuvo?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Compra una casa por 80\\xa0000\\xa0€ y', 'luego destina 50\\xa0000\\xa0€ a reparaciones.']\nnew_fact = infer_new_fact(selected) # 'El coste de la casa y las reparaciones ascendió a 80\\xa0000\\xa0+\\xa050\\xa0000 = 130\\xa0000\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Compra una casa por 80\\xa0000\\xa0€ y', 'Esto aumentó el valor de la casa en un 150\\xa0%.']\nnew_fact = infer_new_fact(selected) # 'Aumentó el valor de la casa en 80\\xa0000\\xa0*\\xa01,5\\xa0=\\xa0120\\xa0000'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Aumentó el valor de la casa en 80\\xa0000\\xa0*\\xa01,5\\xa0=\\xa0120\\xa0000']\nnew_fact = infer_new_fact(selected) # 'Así que el nuevo valor de la casa es de 120\\xa0000\\xa0+\\xa080\\xa0000 = 200\\xa0000\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El coste de la casa y las reparaciones ascendió a 80\\xa0000\\xa0+\\xa050\\xa0000 = 130\\xa0000\\xa0€', 'Aumentó el valor de la casa en 80\\xa0000\\xa0*\\xa01,5\\xa0=\\xa0120\\xa0000', 'Así que el nuevo valor de la casa es de 120\\xa0000\\xa0+\\xa080\\xa0000 = 200\\xa0000\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Por lo que obtuvo un beneficio de 200\\xa0000 - 130\\xa0000\\xa0 = 70\\xa0000\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos beneficios obtuvo?', 'Por lo que obtuvo un beneficio de 200\\xa0000 - 130\\xa0000\\xa0 = 70\\xa0000\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 70000'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '70000'"}
{"id": "GSM8K_3_ac5e5c9d28", "context": "", "options": [], "answer": "540", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 -> int1: He sprints 3*3=9 times; int1 & sent2 -> int2: So he runs 9*60=540 meters; int2 & sent3 -> int3: The answer is 540;", "textual_logical_units": {"1": "James decide hacer 3 carreras de velocidad 3 veces a la semana.", "2": "Corre 60 metros en cada carrera de velocidad.", "3": "¿Cuántos metros en total corre a la semana?", "4": "Corre 3 * 3 = 9 veces", "5": "Así que corre 9 * 60 = 540 metros", "6": "The answer is 540"}, "human_translated": true, "code_input": "####\nfacts = ['James decide hacer 3 carreras de velocidad 3 veces a la semana.', 'Corre 60 metros en cada carrera de velocidad.']\nquestion = '¿Cuántos metros en total corre a la semana?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['James decide hacer 3 carreras de velocidad 3 veces a la semana.']\nnew_fact = infer_new_fact(selected) # 'Corre 3\\xa0*\\xa03\\xa0=\\xa09\\xa0veces'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Corre 60 metros en cada carrera de velocidad.', 'Corre 3\\xa0*\\xa03\\xa0=\\xa09\\xa0veces']\nnew_fact = infer_new_fact(selected) # 'Así que corre 9\\xa0*\\xa060\\xa0=\\xa0540\\xa0metros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos metros en total corre a la semana?', 'Así que corre 9\\xa0*\\xa060\\xa0=\\xa0540\\xa0metros']\nnew_fact = infer_new_fact(selected) # 'The answer is 540'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '540'"}
{"id": "GSM8K_4_7bec3d29ea", "context": "", "options": [], "answer": "20", "reasoning_graph_edges": [{"antecedents": [1, 6], "consequent": 7}, {"antecedents": [4, 5, 6, 7], "consequent": 8}, {"antecedents": [6, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent1 & sent6 -> int1: If each chicken eats 3 cups of feed per day, then for 20 chickens they would need 3*20=60 cups of feed per day.; int1 & sent4 & sent5 & sent6 -> int2: If she feeds the flock 15 cups of feed in the morning, and 25 cups in the afternoon, then the final meal would require 60-15-25=20 cups of chicken feed.; int2 & sent6 -> int3: The answer is 20;", "textual_logical_units": {"1": "Todos los días, Wendi alimenta a cada uno de sus pollos con tres tazas de pienso mixto para pollos, que contiene semillas, gusanos de la harina y", "2": "verduras para poder mantenerlos saludables.", "3": "Alimenta a los pollos en tres comidas distintas.", "4": "Por la mañana, le da a su parvada de pollos 15 tazas de pienso.", "5": "Por la tarde, les da a sus pollos otras 25 tazas de pienso.", "6": "¿Cuántas tazas de pienso tiene que dar a sus pollos en la última comida del día si el tamaño de la parvada de Wendi es de 20 pollos?", "7": "Si cada pollo come 3 tazas de pienso al día, entonces para 20 pollos necesitaría 3 * 20 = 60 tazas de pienso al día.", "8": "Si alimenta a la parvada con 15 tazas de pienso por la mañana y 25 tazas por la tarde, la comida final requeriría 60 - 15 - 25 = 20 tazas de pienso para pollos.", "9": "The answer is 20"}, "human_translated": true, "code_input": "####\nfacts = [ 'Todos los días, Wendi alimenta a cada uno de sus pollos con tres tazas de pienso mixto para pollos, que contiene semillas, gusanos de la harina y',\n  'verduras para poder mantenerlos saludables.',\n  'Alimenta a los pollos en tres comidas distintas.',\n  'Por la mañana, le da a su parvada de pollos 15 tazas de pienso.',\n  'Por la tarde, les da a sus pollos otras 25 tazas de pienso.']\nquestion = '¿Cuántas tazas de pienso tiene que dar a sus pollos en la última comida del día si el tamaño de la parvada de Wendi es de 20 pollos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Todos los días, Wendi alimenta a cada uno de sus pollos con tres tazas de pienso mixto para pollos, que contiene semillas, gusanos de la harina y', '¿Cuántas tazas de pienso tiene que dar a sus pollos en la última comida del día si el tamaño de la parvada de Wendi es de 20 pollos?']\nnew_fact = infer_new_fact(selected) # 'Si cada pollo come 3 tazas de pienso al día, entonces para 20 pollos necesitaría 3\\xa0*\\xa020 = 60 tazas de pienso al día.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Por la mañana, le da a su parvada de pollos 15 tazas de pienso.', 'Por la tarde, les da a sus pollos otras 25 tazas de pienso.', '¿Cuántas tazas de pienso tiene que dar a sus pollos en la última comida del día si el tamaño de la parvada de Wendi es de 20 pollos?', 'Si cada pollo come 3 tazas de pienso al día, entonces para 20 pollos necesitaría 3\\xa0*\\xa020 = 60 tazas de pienso al día.']\nnew_fact = infer_new_fact(selected) # 'Si alimenta a la parvada con 15 tazas de pienso por la mañana y 25 tazas por la tarde, la comida final requeriría 60\\xa0-\\xa015\\xa0-\\xa025 = 20\\xa0tazas de pienso para pollos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas tazas de pienso tiene que dar a sus pollos en la última comida del día si el tamaño de la parvada de Wendi es de 20 pollos?', 'Si alimenta a la parvada con 15 tazas de pienso por la mañana y 25 tazas por la tarde, la comida final requeriría 60\\xa0-\\xa015\\xa0-\\xa025 = 20\\xa0tazas de pienso para pollos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 20'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '20'"}
{"id": "GSM8K_5_6f13335704", "context": "", "options": [], "answer": "64", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [2, 3], "consequent": 6}, {"antecedents": [5, 6], "consequent": 7}, {"antecedents": [2, 6], "consequent": 8}, {"antecedents": [7, 8], "consequent": 9}, {"antecedents": [4, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: The discount price of one glass is 60/100 * 5 = $3.; sent2 & sent3 -> int2: If every second glass is cheaper, that means Kylar is going to buy 16 / 2 = 8 cheaper glasses.; int1 & int2 -> int3: So for the cheaper glasses, Kylar is going to pay 8 * 3 = $24.; int2 & sent2 -> int4: And for the regular-priced glasses, Kylar will pay 8 * 5 = $40.; int3 & int4 -> int5: So in total Kylar needs to pay 24 + 40 = $64 for the glasses he wants to buy.; int5 & sent4 -> int6: The answer is 64;", "textual_logical_units": {"1": "Kylar fue a la tienda a comprar vasos para su nuevo apartamento.", "2": "Un vaso cuesta 5 €, pero cada segundo vaso cuesta solo el 60 % del precio.", "3": "Kylar quiere comprar 16 vasos.", "4": "¿Cuánto tiene que pagar por ellos?", "5": "El precio de descuento de un vaso es de 60 / 100 * 5 = 3 €.", "6": "Si cada segundo vaso es más barato, significa que Kylar va a comprar 16 / 2 = 8 vasos más baratos.", "7": "Entonces, por los vasos más baratos, Kylar pagará 8 * 3 = 24 €.", "8": "Y por los vasos de precio normal, Kylar pagará 8 * 5 = 40 €.", "9": "Así que, en total, Kylar tiene que pagar 24 + 40 = 64 € por los vasos que quiere comprar.", "10": "The answer is 64"}, "human_translated": true, "code_input": "####\nfacts = [ 'Kylar fue a la tienda a comprar vasos para su nuevo apartamento.',\n  'Un vaso cuesta 5\\xa0€, pero cada segundo vaso cuesta solo el 60\\xa0% del precio.',\n  'Kylar quiere comprar 16 vasos.']\nquestion = '¿Cuánto tiene que pagar por ellos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Kylar fue a la tienda a comprar vasos para su nuevo apartamento.', 'Un vaso cuesta 5\\xa0€, pero cada segundo vaso cuesta solo el 60\\xa0% del precio.']\nnew_fact = infer_new_fact(selected) # 'El precio de descuento de un vaso es de 60\\xa0/\\xa0100\\xa0*\\xa05 = 3\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Un vaso cuesta 5\\xa0€, pero cada segundo vaso cuesta solo el 60\\xa0% del precio.', 'Kylar quiere comprar 16 vasos.']\nnew_fact = infer_new_fact(selected) # 'Si cada segundo vaso es más barato, significa que Kylar va a comprar 16\\xa0/\\xa02 = 8 vasos más baratos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El precio de descuento de un vaso es de 60\\xa0/\\xa0100\\xa0*\\xa05 = 3\\xa0€.', 'Si cada segundo vaso es más barato, significa que Kylar va a comprar 16\\xa0/\\xa02 = 8 vasos más baratos.']\nnew_fact = infer_new_fact(selected) # 'Entonces, por los vasos más baratos, Kylar pagará 8\\xa0*\\xa03\\xa0=\\xa024\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Un vaso cuesta 5\\xa0€, pero cada segundo vaso cuesta solo el 60\\xa0% del precio.', 'Si cada segundo vaso es más barato, significa que Kylar va a comprar 16\\xa0/\\xa02 = 8 vasos más baratos.']\nnew_fact = infer_new_fact(selected) # 'Y por los vasos de precio normal, Kylar pagará 8\\xa0*\\xa05 = 40\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Entonces, por los vasos más baratos, Kylar pagará 8\\xa0*\\xa03\\xa0=\\xa024\\xa0€.', 'Y por los vasos de precio normal, Kylar pagará 8\\xa0*\\xa05 = 40\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Así que, en total, Kylar tiene que pagar 24\\xa0+\\xa040 = 64\\xa0€ por los vasos que quiere comprar.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto tiene que pagar por ellos?', 'Así que, en total, Kylar tiene que pagar 24\\xa0+\\xa040 = 64\\xa0€ por los vasos que quiere comprar.']\nnew_fact = infer_new_fact(selected) # 'The answer is 64'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '64'"}
{"id": "GSM8K_6_8c57a63641", "context": "", "options": [], "answer": "260", "reasoning_graph_edges": [{"antecedents": [2, 4], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [4, 5, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 & sent4 -> int1: If Seattle has 20 sheep, Charleston has 4 * 20 sheep = 80 sheep; int1 & sent1 -> int2: Toulouse has twice as many sheep as Charleston, which is 2 * 80 sheep = 160 sheep; int1 & int2 & sent4 -> int3: Together, the three has 20 sheep + 160 sheep + 80 sheep = 260 sheep; int3 & sent4 -> int4: The answer is 260;", "textual_logical_units": {"1": "Toulouse tiene el doble de ovejas que Charleston.", "2": "Charleston tiene 4 veces más ovejas que Seattle.", "3": "¿Cuántas ovejas tienen en conjunto Toulouse, Charleston,", "4": "y Seattle, si Seattle tiene 20 ovejas?", "5": "Si Seattle tiene 20 ovejas, Charleston tiene 4 * 20 ovejas = 80 ovejas", "6": "Toulouse tiene el doble de ovejas que Charleston, que es 2 * 80 ovejas = 160 ovejas", "7": "En conjunto, las tres tienen 20 ovejas + 160 ovejas + 80 ovejas = 260 ovejas", "8": "The answer is 260"}, "human_translated": true, "code_input": "####\nfacts = [ 'Toulouse tiene el doble de ovejas que Charleston.',\n  'Charleston tiene 4 veces más ovejas que Seattle.',\n  '¿Cuántas ovejas tienen en conjunto Toulouse, Charleston,']\nquestion = 'y Seattle, si Seattle tiene 20 ovejas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Charleston tiene 4 veces más ovejas que Seattle.', 'y Seattle, si Seattle tiene 20 ovejas?']\nnew_fact = infer_new_fact(selected) # 'Si Seattle tiene 20 ovejas, Charleston tiene 4\\xa0*\\xa020 ovejas = 80\\xa0ovejas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Toulouse tiene el doble de ovejas que Charleston.', 'Si Seattle tiene 20 ovejas, Charleston tiene 4\\xa0*\\xa020 ovejas = 80\\xa0ovejas']\nnew_fact = infer_new_fact(selected) # 'Toulouse tiene el doble de ovejas que Charleston, que es 2\\xa0*\\xa080 ovejas = 160\\xa0ovejas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y Seattle, si Seattle tiene 20 ovejas?', 'Si Seattle tiene 20 ovejas, Charleston tiene 4\\xa0*\\xa020 ovejas = 80\\xa0ovejas', 'Toulouse tiene el doble de ovejas que Charleston, que es 2\\xa0*\\xa080 ovejas = 160\\xa0ovejas']\nnew_fact = infer_new_fact(selected) # 'En conjunto, las tres tienen 20 ovejas\\xa0+\\xa0160 ovejas\\xa0+\\xa080 ovejas = 260 ovejas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y Seattle, si Seattle tiene 20 ovejas?', 'En conjunto, las tres tienen 20 ovejas\\xa0+\\xa0160 ovejas\\xa0+\\xa080 ovejas = 260 ovejas']\nnew_fact = infer_new_fact(selected) # 'The answer is 260'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '260'"}
{"id": "GSM8K_7_ec85fd850b", "context": "", "options": [], "answer": "160", "reasoning_graph_edges": [{"antecedents": [1, 3], "consequent": 7}, {"antecedents": [2, 7], "consequent": 8}, {"antecedents": [1, 2, 5], "consequent": 9}, {"antecedents": [4, 8, 9], "consequent": 10}, {"antecedents": [6, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent1 & sent3 -> int1: First find how many gigabytes are in 40% of the file: 200 GB * 40% = 80 GB; int1 & sent2 -> int2: Then divide that number by the download rate to find the time until Windows restarts: 80 GB / 2 GB/minute = 40 minutes; sent1 & sent2 & sent5 -> int3: Then find the time to download the whole file after the restart: 200 GB / 2 GB/minute = 100 minutes; int2 & int3 & sent4 -> int4: Then add the time to download 40% of the file, to download the whole file, and to wait for Windows to update: 40 minutes + 100 minutes + 20 minutes = 160 minutes; int4 & sent6 -> int5: The answer is 160;", "textual_logical_units": {"1": "Carla está descargando un archivo de 200 GB.", "2": "Normalmente puede descargar 2 GB/minuto,", "3": "pero cuando se ha completado el 40 % de la descarga,", "4": "Windows fuerza un reinicio para instalar las actualizaciones, lo que tarda 20 minutos.", "5": "Luego Carla tiene que reiniciar la descarga desde el principio.", "6": "¿Cuánto se tarda en descargar el archivo?", "7": "Primero, descubre cuántos gigabytes hay en el 40 % del archivo: 200 GB * 40 % = 80 GB", "8": "Luego, divide ese número entre la velocidad de descarga para calcular el tiempo que queda hasta que Windows se reinicie: 80 GB / 2 GB/minuto = 40 minutos", "9": "Luego, calcula el tiempo para descargar todo el archivo después del reinicio: 200 GB / 2 GB/minuto = 100 minutos", "10": "A continuación, añade el tiempo necesario para descargar el 40 % del archivo, descargar todo el archivo y esperar a que Windows se actualice: 40 minutos + 100 minutos + 20 minutos = 160 minutos", "11": "The answer is 160"}, "human_translated": true, "code_input": "####\nfacts = [ 'Carla está descargando un archivo de 200\\xa0GB.',\n  'Normalmente puede descargar 2\\xa0GB/minuto,',\n  'pero cuando se ha completado el 40\\xa0% de la descarga,',\n  'Windows fuerza un reinicio para instalar las actualizaciones, lo que tarda 20 minutos.',\n  'Luego Carla tiene que reiniciar la descarga desde el principio.']\nquestion = '¿Cuánto se tarda en descargar el archivo?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Carla está descargando un archivo de 200\\xa0GB.', 'pero cuando se ha completado el 40\\xa0% de la descarga,']\nnew_fact = infer_new_fact(selected) # 'Primero, descubre cuántos gigabytes hay en el 40\\xa0% del archivo: 200\\xa0GB\\xa0*\\xa040\\xa0% = 80\\xa0GB'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Normalmente puede descargar 2\\xa0GB/minuto,', 'Primero, descubre cuántos gigabytes hay en el 40\\xa0% del archivo: 200\\xa0GB\\xa0*\\xa040\\xa0% = 80\\xa0GB']\nnew_fact = infer_new_fact(selected) # 'Luego, divide ese número entre la velocidad de descarga para calcular el tiempo que queda hasta que Windows se reinicie: 80\\xa0GB\\xa0/\\xa02\\xa0GB/minuto = 40\\xa0minutos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Carla está descargando un archivo de 200\\xa0GB.', 'Normalmente puede descargar 2\\xa0GB/minuto,', 'Luego Carla tiene que reiniciar la descarga desde el principio.']\nnew_fact = infer_new_fact(selected) # 'Luego, calcula el tiempo para descargar todo el archivo después del reinicio: 200\\xa0GB\\xa0/\\xa02\\xa0GB/minuto = 100\\xa0minutos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Windows fuerza un reinicio para instalar las actualizaciones, lo que tarda 20 minutos.', 'Luego, divide ese número entre la velocidad de descarga para calcular el tiempo que queda hasta que Windows se reinicie: 80\\xa0GB\\xa0/\\xa02\\xa0GB/minuto = 40\\xa0minutos', 'Luego, calcula el tiempo para descargar todo el archivo después del reinicio: 200\\xa0GB\\xa0/\\xa02\\xa0GB/minuto = 100\\xa0minutos']\nnew_fact = infer_new_fact(selected) # 'A continuación, añade el tiempo necesario para descargar el 40\\xa0% del archivo, descargar todo el archivo y esperar a que Windows se actualice: 40 minutos\\xa0+\\xa0100 minutos\\xa0+\\xa020 minutos = 160\\xa0minutos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto se tarda en descargar el archivo?', 'A continuación, añade el tiempo necesario para descargar el 40\\xa0% del archivo, descargar todo el archivo y esperar a que Windows se actualice: 40 minutos\\xa0+\\xa0100 minutos\\xa0+\\xa020 minutos = 160\\xa0minutos']\nnew_fact = infer_new_fact(selected) # 'The answer is 160'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '160'"}
{"id": "GSM8K_8_f8cdd58483", "context": "", "options": [], "answer": "45", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 7}, {"antecedents": [3], "consequent": 8}, {"antecedents": [4], "consequent": 9}, {"antecedents": [5], "consequent": 10}, {"antecedents": [5, 10], "consequent": 11}, {"antecedents": [9, 11], "consequent": 12}, {"antecedents": [6, 7, 12], "consequent": 13}, {"antecedents": [6, 13], "consequent": 14}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: When he turned around he was 3*60=180 miles from home; sent3 -> int2: He was only able to drive 4-2=2 hours in the first four hours; sent4 -> int3: In half an hour he goes 30*.5=15 miles; sent5 -> int4: He then drives another 2-.5=1.5 hours; int4 & sent5 -> int5: In that time he goes 80*1.5=120 miles; int3 & int5 -> int6: So he drove 120+15=135 miles; int1 & int6 & sent6 -> int7: So he is 180-135=45 miles away from home; int7 & sent6 -> int8: The answer is 45;", "textual_logical_units": {"1": "John conduce durante 3 horas a una velocidad de 60 km/h y,", "2": "luego, se da la vuelta porque se da cuenta de que olvidó algo muy importante en casa.", "3": "Intenta llegar a casa en 4 horas, pero pasa las primeras 2 horas en un atasco.", "4": "Pasa la siguiente media hora conduciendo a una velocidad de 30 km/h", "5": "antes de poder conducir el tiempo restante de las 4 horas a 80 km/h.", "6": "¿A qué distancia está de casa al final de esas 4 horas?", "7": "Cuando se dio la vuelta estaba a 3 * 60 = 180 kilómetros de su casa", "8": "Solo pudo conducir 4 - 2 = 2 horas en las primeras cuatro horas", "9": "En media hora recorre 30 * 0,5 = 15 kilómetros", "10": "Luego conduce durante otra 2 - 0,5 = 1,5 hora", "11": "En ese tiempo recorre 80 * 1,5 = 120 kilómetros", "12": "Así que condujo 120 + 15 = 135 kilómetros", "13": "Por lo que está a 180 - 135 = 45 kilómetros de casa", "14": "The answer is 45"}, "human_translated": true, "code_input": "####\nfacts = [ 'John conduce durante 3 horas a una velocidad de 60\\xa0km/h y,',\n  'luego, se da la vuelta porque se da cuenta de que olvidó algo muy importante en casa.',\n  'Intenta llegar a casa en 4 horas, pero pasa las primeras 2 horas en un atasco.',\n  'Pasa la siguiente media hora conduciendo a una velocidad de 30\\xa0km/h',\n  'antes de poder conducir el tiempo restante de las 4 horas a 80\\xa0km/h.']\nquestion = '¿A qué distancia está de casa al final de esas 4\\xa0horas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['John conduce durante 3 horas a una velocidad de 60\\xa0km/h y,', 'luego, se da la vuelta porque se da cuenta de que olvidó algo muy importante en casa.']\nnew_fact = infer_new_fact(selected) # 'Cuando se dio la vuelta estaba a 3\\xa0*\\xa060 = 180\\xa0kilómetros de su casa'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Intenta llegar a casa en 4 horas, pero pasa las primeras 2 horas en un atasco.']\nnew_fact = infer_new_fact(selected) # 'Solo pudo conducir 4\\xa0-\\xa02 = 2 horas en las primeras cuatro horas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Pasa la siguiente media hora conduciendo a una velocidad de 30\\xa0km/h']\nnew_fact = infer_new_fact(selected) # 'En media hora recorre 30\\xa0*\\xa00,5\\xa0=\\xa015 kilómetros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['antes de poder conducir el tiempo restante de las 4 horas a 80\\xa0km/h.']\nnew_fact = infer_new_fact(selected) # 'Luego conduce durante otra 2\\xa0-\\xa00,5 = 1,5\\xa0hora'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['antes de poder conducir el tiempo restante de las 4 horas a 80\\xa0km/h.', 'Luego conduce durante otra 2\\xa0-\\xa00,5 = 1,5\\xa0hora']\nnew_fact = infer_new_fact(selected) # 'En ese tiempo recorre 80\\xa0*\\xa01,5\\xa0=\\xa0120\\xa0kilómetros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En media hora recorre 30\\xa0*\\xa00,5\\xa0=\\xa015 kilómetros', 'En ese tiempo recorre 80\\xa0*\\xa01,5\\xa0=\\xa0120\\xa0kilómetros']\nnew_fact = infer_new_fact(selected) # 'Así que condujo 120\\xa0+\\xa015 = 135\\xa0kilómetros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿A qué distancia está de casa al final de esas 4\\xa0horas?', 'Cuando se dio la vuelta estaba a 3\\xa0*\\xa060 = 180\\xa0kilómetros de su casa', 'Así que condujo 120\\xa0+\\xa015 = 135\\xa0kilómetros']\nnew_fact = infer_new_fact(selected) # 'Por lo que está a 180\\xa0-\\xa0135 = 45\\xa0kilómetros de casa'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿A qué distancia está de casa al final de esas 4\\xa0horas?', 'Por lo que está a 180\\xa0-\\xa0135 = 45\\xa0kilómetros de casa']\nnew_fact = infer_new_fact(selected) # 'The answer is 45'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '45'"}
{"id": "GSM8K_9_81d0fa7c02", "context": "", "options": [], "answer": "460", "reasoning_graph_edges": [{"antecedents": [1, 3], "consequent": 5}, {"antecedents": [1, 2], "consequent": 6}, {"antecedents": [5, 6], "consequent": 7}, {"antecedents": [1], "consequent": 8}, {"antecedents": [4, 7, 8], "consequent": 9}, {"antecedents": [4, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent1 & sent3 -> int1: Eliza is entitled to 45 -40 = 5 hours overtime pay.; sent1 & sent2 -> int2: Her hourly rate for the overtime pay is $10 x 1.2 = $12.; int1 & int2 -> int3: So, Eliza will receive $12 x 5 =$60 for overtime pay.; sent1 -> int4: Her regular weekly earning is $10 x 40 = $400.; int3 & int4 & sent4 -> int5: Thus, Eliza will receive a total of $400 + $60 = $460 for this week's work.; int5 & sent4 -> int6: The answer is 460;", "textual_logical_units": {"1": "La tarifa de Eliza por hora durante las primeras 40 horas que trabaja cada semana es de 10 €.", "2": "También recibe un pago por horas extra de 1,2 veces su tarifa por hora normal.", "3": "Si Eliza trabajó 45 horas esta semana,", "4": "¿cuáles son sus ganancias de esta semana?", "5": "Eliza tiene derecho a un pago de 45 - 40 = 5 horas extra.", "6": "Su tarifa por hora extra es de 10 € × 1,2 = 12 €.", "7": "Por lo tanto, Eliza recibirá un pago de 12 × 5 = 60 € por horas extras.", "8": "Sus ganancias semanales normales son de 10 € × 40 = 400 €.", "9": "Por lo tanto, Eliza recibirá un total de 400 € + 60 € = 460 € por el trabajo de esta semana.", "10": "The answer is 460"}, "human_translated": true, "code_input": "####\nfacts = [ 'La tarifa de Eliza por hora durante las primeras 40\\xa0horas que trabaja cada semana es de 10\\xa0€.',\n  'También recibe un pago por horas extra de 1,2 veces su tarifa por hora normal.',\n  'Si Eliza trabajó 45 horas esta semana,']\nquestion = '¿cuáles son sus ganancias de esta semana?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['La tarifa de Eliza por hora durante las primeras 40\\xa0horas que trabaja cada semana es de 10\\xa0€.', 'Si Eliza trabajó 45 horas esta semana,']\nnew_fact = infer_new_fact(selected) # 'Eliza tiene derecho a un pago de 45\\xa0-\\xa040 = 5\\xa0horas extra.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La tarifa de Eliza por hora durante las primeras 40\\xa0horas que trabaja cada semana es de 10\\xa0€.', 'También recibe un pago por horas extra de 1,2 veces su tarifa por hora normal.']\nnew_fact = infer_new_fact(selected) # 'Su tarifa por hora extra es de 10\\xa0€\\xa0×\\xa01,2 = 12\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Eliza tiene derecho a un pago de 45\\xa0-\\xa040 = 5\\xa0horas extra.', 'Su tarifa por hora extra es de 10\\xa0€\\xa0×\\xa01,2 = 12\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, Eliza recibirá un pago de 12\\xa0×\\xa05 = 60\\xa0€ por horas extras.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La tarifa de Eliza por hora durante las primeras 40\\xa0horas que trabaja cada semana es de 10\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Sus ganancias semanales normales son de 10\\xa0€\\xa0×\\xa040 = 400\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuáles son sus ganancias de esta semana?', 'Por lo tanto, Eliza recibirá un pago de 12\\xa0×\\xa05 = 60\\xa0€ por horas extras.', 'Sus ganancias semanales normales son de 10\\xa0€\\xa0×\\xa040 = 400\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, Eliza recibirá un total de 400\\xa0€\\xa0+\\xa060\\xa0€ = 460\\xa0€ por el trabajo de esta semana.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuáles son sus ganancias de esta semana?', 'Por lo tanto, Eliza recibirá un total de 400\\xa0€\\xa0+\\xa060\\xa0€ = 460\\xa0€ por el trabajo de esta semana.']\nnew_fact = infer_new_fact(selected) # 'The answer is 460'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '460'"}
{"id": "GSM8K_10_35eaba6383", "context": "", "options": [], "answer": "366", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [3, 5], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}, {"antecedents": [6, 8], "consequent": 9}, {"antecedents": [4, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: The number of downloads of the program in the second month increased to 3*60 = 180; int1 & sent1 -> int2: In the first two months, the total number of downloads of the program was 180+60 = 240; int1 & sent3 -> int3: In the third month, the number of downloads of the program reduced by 30/100*180 = 54; int1 & int3 -> int4: There were 180-54 = 126 downloads in the third month.; int2 & int4 -> int5: In the three months, the total number of downloads of the program was 126+240 = 366; int5 & sent4 -> int6: The answer is 366;", "textual_logical_units": {"1": "Un nuevo programa tuvo 60 descargas en el primer mes.", "2": "El número de descargas en el segundo mes fue tres veces mayor que el del primer mes, pero luego", "3": "se redujo en un 30 % en el tercer mes.", "4": "¿Cuántas descargas tuvo el programa en total durante los tres meses?", "5": "El número de descargas del programa en el segundo mes aumentó a 3 * 60 = 180", "6": "En los dos primeros meses, el número total de descargas del programa fue de 180 + 60 = 240", "7": "En el tercer mes, el número de descargas del programa se redujo en un 30 / 100 * 180 = 54", "8": "Hubo 180 - 54 = 126 descargas en el tercer mes.", "9": "En los tres meses, el número total de descargas del programa fue de 126 + 240 = 366", "10": "The answer is 366"}, "human_translated": true, "code_input": "####\nfacts = [ 'Un nuevo programa tuvo 60 descargas en el primer mes.',\n  'El número de descargas en el segundo mes fue tres veces mayor que el del primer mes, pero luego',\n  'se redujo en un 30\\xa0% en el tercer mes.']\nquestion = '¿Cuántas descargas tuvo el programa en total durante los tres meses?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Un nuevo programa tuvo 60 descargas en el primer mes.', 'El número de descargas en el segundo mes fue tres veces mayor que el del primer mes, pero luego']\nnew_fact = infer_new_fact(selected) # 'El número de descargas del programa en el segundo mes aumentó a 3\\xa0*\\xa060 = 180'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Un nuevo programa tuvo 60 descargas en el primer mes.', 'El número de descargas del programa en el segundo mes aumentó a 3\\xa0*\\xa060 = 180']\nnew_fact = infer_new_fact(selected) # 'En los dos primeros meses, el número total de descargas del programa fue de 180\\xa0+\\xa060 = 240'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['se redujo en un 30\\xa0% en el tercer mes.', 'El número de descargas del programa en el segundo mes aumentó a 3\\xa0*\\xa060 = 180']\nnew_fact = infer_new_fact(selected) # 'En el tercer mes, el número de descargas del programa se redujo en un 30\\xa0/\\xa0100\\xa0*\\xa0180 = 54'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El número de descargas del programa en el segundo mes aumentó a 3\\xa0*\\xa060 = 180', 'En el tercer mes, el número de descargas del programa se redujo en un 30\\xa0/\\xa0100\\xa0*\\xa0180 = 54']\nnew_fact = infer_new_fact(selected) # 'Hubo 180\\xa0-\\xa054\\xa0=\\xa0126 descargas en el tercer mes.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En los dos primeros meses, el número total de descargas del programa fue de 180\\xa0+\\xa060 = 240', 'Hubo 180\\xa0-\\xa054\\xa0=\\xa0126 descargas en el tercer mes.']\nnew_fact = infer_new_fact(selected) # 'En los tres meses, el número total de descargas del programa fue de 126\\xa0+\\xa0240 = 366'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas descargas tuvo el programa en total durante los tres meses?', 'En los tres meses, el número total de descargas del programa fue de 126\\xa0+\\xa0240 = 366']\nnew_fact = infer_new_fact(selected) # 'The answer is 366'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '366'"}
{"id": "GSM8K_11_f765a410ff", "context": "", "options": [], "answer": "694", "reasoning_graph_edges": [{"antecedents": [3], "consequent": 7}, {"antecedents": [4], "consequent": 8}, {"antecedents": [5], "consequent": 9}, {"antecedents": [6, 7, 8, 9], "consequent": 10}, {"antecedents": [6, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent3 -> int1: The total charge for the doughnuts was 3 x $68 = $204.; sent4 -> int2: The total charge for the mini cupcakes was 2 x $80 = $160.; sent5 -> int3: The total charge for the mini cheesecakes was 6 x $55 = $330.; int1 & int2 & int3 & sent6 -> int4: Therefore the total amount Toula paid for the pastries was $204 + $160 + $330 = $694.; int4 & sent6 -> int5: The answer is 694;", "textual_logical_units": {"1": "Toula fue a la panadería y", "2": "compró varios tipos de pasteles.", "3": "Compró 3 docenas de rosquillas que cuestan 68 € la docena,", "4": "2 docenas de minimagdalenas que cuestan 80 € la docena", "5": "y 6 docenas de mini tartas de queso a 55 € la docena.", "6": "¿Cuál fue el coste total?", "7": "El precio total de las rosquillas fue de 3 × 68€ = 204 €.", "8": "El precio total de las minimagdalenas fue de 2 × 80 € = 160 €.", "9": "El coste total de las mini tartas de queso fue de 6 × 55 € = 330 €.", "10": "Por lo tanto, la cantidad total que Toula pagó por los pasteles fue de 204 € + 160 € + 330 € = 694 €.", "11": "The answer is 694"}, "human_translated": true, "code_input": "####\nfacts = [ 'Toula fue a la panadería y',\n  'compró varios tipos de pasteles.',\n  'Compró 3\\xa0docenas de rosquillas que cuestan 68\\xa0€ la docena,',\n  '2 docenas de minimagdalenas que cuestan 80\\xa0€ la docena',\n  'y 6 docenas de mini tartas de queso a 55\\xa0€ la docena.']\nquestion = '¿Cuál fue el coste total?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Compró 3\\xa0docenas de rosquillas que cuestan 68\\xa0€ la docena,']\nnew_fact = infer_new_fact(selected) # 'El precio total de las rosquillas fue de 3\\xa0×\\xa068€ = 204\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['2 docenas de minimagdalenas que cuestan 80\\xa0€ la docena']\nnew_fact = infer_new_fact(selected) # 'El precio total de las minimagdalenas fue de 2\\xa0×\\xa080\\xa0€ = 160\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y 6 docenas de mini tartas de queso a 55\\xa0€ la docena.']\nnew_fact = infer_new_fact(selected) # 'El coste total de las mini tartas de queso fue de 6\\xa0×\\xa055\\xa0€ = 330\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál fue el coste total?', 'El precio total de las rosquillas fue de 3\\xa0×\\xa068€ = 204\\xa0€.', 'El precio total de las minimagdalenas fue de 2\\xa0×\\xa080\\xa0€ = 160\\xa0€.', 'El coste total de las mini tartas de queso fue de 6\\xa0×\\xa055\\xa0€ = 330\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, la cantidad total que Toula pagó por los pasteles fue de 204\\xa0€ + 160\\xa0€ + 330\\xa0€ = 694\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál fue el coste total?', 'Por lo tanto, la cantidad total que Toula pagó por los pasteles fue de 204\\xa0€ + 160\\xa0€ + 330\\xa0€ = 694\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'The answer is 694'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '694'"}
{"id": "GSM8K_12_b192b3e028", "context": "", "options": [], "answer": "13", "reasoning_graph_edges": [{"antecedents": [3, 4], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}, {"antecedents": [2, 6, 8], "consequent": 9}, {"antecedents": [6, 9], "consequent": 10}, {"antecedents": [6, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent3 & sent4 -> int1: He makes $10.5 selling lemons each year because 7 x 1.5 = 10.5; int1 & sent5 -> int2: He earns $7.5 each year from the lemon tree because 10.5 - 3 = 7.5; int2 & sent2 & sent6 -> int3: It will take 12 years to earn enough to pay off the tree because 90 / 7.5 = 12; int3 & sent6 -> int4: He will make money in year 13 because 12 + 1 = 13; int4 & sent6 -> int5: The answer is 13;", "textual_logical_units": {"1": "Carlos está plantando un limonero.", "2": "La plantación del árbol costará 90 €.", "3": "Cada año crecerán 7 limones,", "4": "que puede vender por 1,5 € cada uno.", "5": "Regar y alimentar el árbol cuesta 3 € al año.", "6": "¿Cuántos años pasarán antes de que empiece a ganar dinero con el limonero?", "7": "Gana 10,5 € vendiendo limones cada año porque 7 × 1,5 = 10,5", "8": "Gana 7,5 € cada año con el limonero porque 10,5 - 3 = 7,5", "9": "Se necesitarán 12 años para ganar lo suficiente como para pagar el árbol porque 90 / 7,5 = 12", "10": "Ganará dinero en el año 13 porque 12 + 1 = 13", "11": "The answer is 13"}, "human_translated": true, "code_input": "####\nfacts = [ 'Carlos está plantando un limonero.',\n  'La plantación del árbol costará 90\\xa0€.',\n  'Cada año crecerán 7 limones,',\n  'que puede vender por 1,5\\xa0€ cada uno.',\n  'Regar y alimentar el árbol cuesta 3\\xa0€ al año.']\nquestion = '¿Cuántos años pasarán antes de que empiece a ganar dinero con el limonero?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Cada año crecerán 7 limones,', 'que puede vender por 1,5\\xa0€ cada uno.']\nnew_fact = infer_new_fact(selected) # 'Gana 10,5\\xa0€ vendiendo limones cada año porque 7\\xa0×\\xa01,5 = 10,5'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Regar y alimentar el árbol cuesta 3\\xa0€ al año.', 'Gana 10,5\\xa0€ vendiendo limones cada año porque 7\\xa0×\\xa01,5 = 10,5']\nnew_fact = infer_new_fact(selected) # 'Gana 7,5\\xa0€ cada año con el limonero porque 10,5\\xa0-\\xa03 = 7,5'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La plantación del árbol costará 90\\xa0€.', '¿Cuántos años pasarán antes de que empiece a ganar dinero con el limonero?', 'Gana 7,5\\xa0€ cada año con el limonero porque 10,5\\xa0-\\xa03 = 7,5']\nnew_fact = infer_new_fact(selected) # 'Se necesitarán 12 años para ganar lo suficiente como para pagar el árbol porque 90\\xa0/\\xa07,5 = 12'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos años pasarán antes de que empiece a ganar dinero con el limonero?', 'Se necesitarán 12 años para ganar lo suficiente como para pagar el árbol porque 90\\xa0/\\xa07,5 = 12']\nnew_fact = infer_new_fact(selected) # 'Ganará dinero en el año 13 porque 12\\xa0+\\xa01 = 13'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos años pasarán antes de que empiece a ganar dinero con el limonero?', 'Ganará dinero en el año 13 porque 12\\xa0+\\xa01 = 13']\nnew_fact = infer_new_fact(selected) # 'The answer is 13'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '13'"}
{"id": "GSM8K_13_bf283ac359", "context": "", "options": [], "answer": "18", "reasoning_graph_edges": [{"antecedents": [4, 5], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}, {"antecedents": [2, 8], "consequent": 9}, {"antecedents": [6, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent4 & sent5 -> int1: First multiply the five remaining vacuum cleaners by two to find out how many Melanie had before she visited the orange house: 5 * 2 = 10; int1 & sent3 -> int2: Then add two to figure out how many vacuum cleaners she had before visiting the red house: 10 + 2 = 12; int2 & sent2 -> int3: Now we know that 2/3 * x = 12, where x is the number of vacuum cleaners Melanie started with. We can find x by dividing each side of the equation by 2/3, which produces x = 18; int3 & sent6 -> int4: The answer is 18;", "textual_logical_units": {"1": "Melanie va vendiendo de puerta a puerta.", "2": "Vendió un tercio de sus aspiradoras en la casa verde,", "3": "dos más en la casa roja,", "4": "y la mitad de lo que quedó en la casa naranja.", "5": "Si a Melanie le quedan 5 aspiradoras,", "6": "¿con cuántas empezó?", "7": "Primero, multiplica las cinco aspiradoras restantes por dos para saber cuántas tenía Melanie antes de visitar la casa naranja: 5 * 2 = 10", "8": "Luego, suma dos para saber cuántas aspiradoras tenía antes de visitar la casa roja: 10 + 2 = 12", "9": "Ahora sabemos que 2/3 * x = 12, donde x es la cantidad de aspiradoras con las que comenzó Melanie. Podemos calcular el valor de x dividiendo cada lado de la ecuación entre 2/3, lo que da x = 18", "10": "The answer is 18"}, "human_translated": true, "code_input": "####\nfacts = [ 'Melanie va vendiendo de puerta a puerta.',\n  'Vendió un tercio de sus aspiradoras en la casa verde,',\n  'dos más en la casa roja,',\n  'y la mitad de lo que quedó en la casa naranja.',\n  'Si a Melanie le quedan 5 aspiradoras,']\nquestion = '¿con cuántas empezó?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['y la mitad de lo que quedó en la casa naranja.', 'Si a Melanie le quedan 5 aspiradoras,']\nnew_fact = infer_new_fact(selected) # 'Primero, multiplica las cinco aspiradoras restantes por dos para saber cuántas tenía Melanie antes de visitar la casa naranja: 5\\xa0*\\xa02 = 10'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['dos más en la casa roja,', 'Primero, multiplica las cinco aspiradoras restantes por dos para saber cuántas tenía Melanie antes de visitar la casa naranja: 5\\xa0*\\xa02 = 10']\nnew_fact = infer_new_fact(selected) # 'Luego, suma dos para saber cuántas aspiradoras tenía antes de visitar la casa roja: 10\\xa0+\\xa02 = 12'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Vendió un tercio de sus aspiradoras en la casa verde,', 'Luego, suma dos para saber cuántas aspiradoras tenía antes de visitar la casa roja: 10\\xa0+\\xa02 = 12']\nnew_fact = infer_new_fact(selected) # 'Ahora sabemos que 2/3\\xa0*\\xa0x = 12, donde\\xa0x\\xa0es la cantidad de aspiradoras con las que comenzó Melanie. Podemos calcular el valor de\\xa0x\\xa0dividiendo cada lado de la ecuación entre 2/3, lo que da\\xa0x\\xa0= 18'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿con cuántas empezó?', 'Ahora sabemos que 2/3\\xa0*\\xa0x = 12, donde\\xa0x\\xa0es la cantidad de aspiradoras con las que comenzó Melanie. Podemos calcular el valor de\\xa0x\\xa0dividiendo cada lado de la ecuación entre 2/3, lo que da\\xa0x\\xa0= 18']\nnew_fact = infer_new_fact(selected) # 'The answer is 18'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '18'"}
{"id": "GSM8K_14_e601ee3b3e", "context": "", "options": [], "answer": "60", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 6}, {"antecedents": [3, 4, 6], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}, {"antecedents": [3, 8], "consequent": 9}, {"antecedents": [1, 5, 9], "consequent": 10}, {"antecedents": [5, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: There are 20 x 20/100 = 4 students who enrolled in contemporary dance.; int1 & sent3 & sent4 -> int2: So, 20 - 4 = 16 students are enrolled in either jazz or hip-hop dance.; int2 & sent3 -> int3: There are 16 x 25/100 = 4 students who enrolled in jazz dance.; int3 & sent3 -> int4: Hence, 16 - 4 = 12 students enrolled in hip-hop dance.; int4 & sent1 & sent5 -> int5: This is 12/20 x 100% = 60% of the entire students.; int5 & sent5 -> int6: The answer is 60;", "textual_logical_units": {"1": "En una clase de baile de 20 estudiantes,", "2": "el 20 % está matriculado en danza contemporánea,", "3": "el 25 % restante está matriculado en danza jazz", "4": "y el resto se inscribió en hiphop.", "5": "¿Qué porcentaje del total de estudiantes se matriculó en hiphop?", "6": "Hay 20 × 20/100 = 4 estudiantes matriculados en danza contemporánea.", "7": "Por lo tanto, 20 -4 = 16 estudiantes están matriculados en jazz o hiphop.", "8": "Hay 16 × 25/100 = 4 estudiantes que se matricularon en danza jazz.", "9": "Por lo tanto, hay 16 - 4 = 12 estudiantes matriculados en el hiphop.", "10": "Esto es 12 / 20 × 100 % = 60 % del total de los estudiantes.", "11": "The answer is 60"}, "human_translated": true, "code_input": "####\nfacts = [ 'En una clase de baile de 20 estudiantes,',\n  'el 20\\xa0% está matriculado en danza contemporánea,',\n  'el 25\\xa0% restante está matriculado en danza jazz',\n  'y el resto se inscribió en hiphop.']\nquestion = '¿Qué porcentaje del total de estudiantes se matriculó en hiphop?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['En una clase de baile de 20 estudiantes,', 'el 20\\xa0% está matriculado en danza contemporánea,']\nnew_fact = infer_new_fact(selected) # 'Hay 20\\xa0×\\xa020/100 = 4 estudiantes matriculados en danza contemporánea.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['el 25\\xa0% restante está matriculado en danza jazz', 'y el resto se inscribió en hiphop.', 'Hay 20\\xa0×\\xa020/100 = 4 estudiantes matriculados en danza contemporánea.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, 20\\xa0-4 = 16 estudiantes están matriculados en jazz o hiphop.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['el 25\\xa0% restante está matriculado en danza jazz', 'Por lo tanto, 20\\xa0-4 = 16 estudiantes están matriculados en jazz o hiphop.']\nnew_fact = infer_new_fact(selected) # 'Hay 16\\xa0×\\xa025/100 = 4 estudiantes que se matricularon en danza jazz.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['el 25\\xa0% restante está matriculado en danza jazz', 'Hay 16\\xa0×\\xa025/100 = 4 estudiantes que se matricularon en danza jazz.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, hay 16\\xa0-\\xa04 = 12 estudiantes matriculados en el hiphop.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En una clase de baile de 20 estudiantes,', '¿Qué porcentaje del total de estudiantes se matriculó en hiphop?', 'Por lo tanto, hay 16\\xa0-\\xa04 = 12 estudiantes matriculados en el hiphop.']\nnew_fact = infer_new_fact(selected) # 'Esto es 12\\xa0/\\xa020\\xa0×\\xa0100\\xa0% = 60\\xa0% del total de los estudiantes.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Qué porcentaje del total de estudiantes se matriculó en hiphop?', 'Esto es 12\\xa0/\\xa020\\xa0×\\xa0100\\xa0% = 60\\xa0% del total de los estudiantes.']\nnew_fact = infer_new_fact(selected) # 'The answer is 60'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '60'"}
{"id": "GSM8K_15_213dd01190", "context": "", "options": [], "answer": "125", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [1, 2], "consequent": 6}, {"antecedents": [3, 5, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: If he purchases jewelry, he will make a profit of 2.5% which is $5000*(2.5/100) = $125; sent1 & sent2 -> int2: If he purchases electronic gadgets, he will make a profit of 1.2% which is $8000*(1.2/100) = $96; int1 & int2 & sent3 -> int3: If he wants to maximize profit, since $125 > $96, he will choose to purchase jewelry, thereby making a profit of $125; int3 & sent4 -> int4: The answer is 125;", "textual_logical_units": {"1": "Un comerciante quiere elegir entre 2 planes de compra: joyas por un valor de 5000 € o aparatos electrónicos por un valor de 8000 €.", "2": "Su asesor financiero especula que el mercado de las joyas subirá un 2,5 %, mientras que el mercado de los aparatos electrónicos aumentará un 1,2 % en el mismo mes.", "3": "Si el comerciante busca maximizar los beneficios al final de este mes con su decisión,", "4": "¿cuántos beneficios sacaría?", "5": "Si compra joyas, obtendrá un beneficio del 2,5 %, que es de 5000 € * (2,5 / 100) = 125 €", "6": "Si compra aparatos electrónicos, obtendrá un beneficio del 1,2 %, que es de 8000 € * (1,2 / 100) = 96 €", "7": "Si quiere maximizar los beneficios, ya que 125 € > 96 €, optará por comprar joyas, con lo que obtendría un beneficio de 125 €", "8": "The answer is 125"}, "human_translated": true, "code_input": "####\nfacts = [ 'Un comerciante quiere elegir entre 2 planes de compra: joyas por un valor de 5000\\xa0€ o aparatos electrónicos por un valor de 8000\\xa0€.',\n  'Su asesor financiero especula que el mercado de las joyas subirá un 2,5\\xa0%, mientras que el mercado de los aparatos electrónicos aumentará un 1,2\\xa0% en '\n  'el mismo mes.',\n  'Si el comerciante busca maximizar los beneficios al final de este mes con su decisión,']\nquestion = '¿cuántos beneficios sacaría?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Un comerciante quiere elegir entre 2 planes de compra: joyas por un valor de 5000\\xa0€ o aparatos electrónicos por un valor de 8000\\xa0€.', 'Su asesor financiero especula que el mercado de las joyas subirá un 2,5\\xa0%, mientras que el mercado de los aparatos electrónicos aumentará un 1,2\\xa0% en el mismo mes.']\nnew_fact = infer_new_fact(selected) # 'Si compra joyas, obtendrá un beneficio del 2,5\\xa0%, que es de 5000\\xa0€\\xa0*\\xa0(2,5\\xa0/\\xa0100) = 125\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Un comerciante quiere elegir entre 2 planes de compra: joyas por un valor de 5000\\xa0€ o aparatos electrónicos por un valor de 8000\\xa0€.', 'Su asesor financiero especula que el mercado de las joyas subirá un 2,5\\xa0%, mientras que el mercado de los aparatos electrónicos aumentará un 1,2\\xa0% en el mismo mes.']\nnew_fact = infer_new_fact(selected) # 'Si compra aparatos electrónicos, obtendrá un beneficio del 1,2\\xa0%, que es de 8000\\xa0€\\xa0*\\xa0(1,2\\xa0/\\xa0100) = 96\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si el comerciante busca maximizar los beneficios al final de este mes con su decisión,', 'Si compra joyas, obtendrá un beneficio del 2,5\\xa0%, que es de 5000\\xa0€\\xa0*\\xa0(2,5\\xa0/\\xa0100) = 125\\xa0€', 'Si compra aparatos electrónicos, obtendrá un beneficio del 1,2\\xa0%, que es de 8000\\xa0€\\xa0*\\xa0(1,2\\xa0/\\xa0100) = 96\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Si quiere maximizar los beneficios, ya que 125\\xa0€\\xa0>\\xa096\\xa0€, optará por comprar joyas, con lo que obtendría un beneficio de 125\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos beneficios sacaría?', 'Si quiere maximizar los beneficios, ya que 125\\xa0€\\xa0>\\xa096\\xa0€, optará por comprar joyas, con lo que obtendría un beneficio de 125\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 125'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '125'"}
{"id": "GSM8K_16_ce6da24bec", "context": "", "options": [], "answer": "230", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [1, 3], "consequent": 6}, {"antecedents": [5, 6], "consequent": 7}, {"antecedents": [4, 6, 7], "consequent": 8}, {"antecedents": [4, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: On the first day, the trains covered 2 trains * 80 miles/train = 160 miles together.; sent1 & sent3 -> int2: They also covered 150 miles/train * 2 trains = 300 miles together on the second day.; int1 & int2 -> int3: The combined distance the two trains covered in the two days is 300 miles + 160 miles = 460 miles; int2 & int3 & sent4 -> int4: The average distance for the two days is 460 miles / 2 trains = 230 miles/train; int4 & sent4 -> int5: The answer is 230;", "textual_logical_units": {"1": "Dos trenes salen de San Rafael al mismo tiempo.", "2": "Empiezan a viajar hacia el oeste y ambos recorren 80 kilómetros.", "3": "Al día siguiente, viajan hacia el norte y recorren 150 kilómetros.", "4": "¿Cuál es la distancia recorrida por cada tren en los dos días?", "5": "El primer día, los trenes recorren 2 trenes * 80 kilómetros/tren = 160 kilómetros juntos.", "6": "También recorrieron 150 kilómetros/tren * 2 trenes = 300 kilómetros juntos el segundo día.", "7": "La distancia combinada que recorrieron los dos trenes en los dos días es de 300 kilómetros + 160 kilómetros = 460 kilómetros", "8": "La distancia media de los dos días es de 460 kilómetros / 2 trenes = 230 kilómetros/tren", "9": "The answer is 230"}, "human_translated": true, "code_input": "####\nfacts = [ 'Dos trenes salen de San Rafael al mismo tiempo.',\n  'Empiezan a viajar hacia el oeste y ambos recorren 80\\xa0kilómetros.',\n  'Al día siguiente, viajan hacia el norte y recorren 150\\xa0kilómetros.']\nquestion = '¿Cuál es la distancia recorrida por cada tren en los dos días?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Dos trenes salen de San Rafael al mismo tiempo.', 'Empiezan a viajar hacia el oeste y ambos recorren 80\\xa0kilómetros.']\nnew_fact = infer_new_fact(selected) # 'El primer día, los trenes recorren 2 trenes\\xa0*\\xa080\\xa0kilómetros/tren = 160 kilómetros juntos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Dos trenes salen de San Rafael al mismo tiempo.', 'Al día siguiente, viajan hacia el norte y recorren 150\\xa0kilómetros.']\nnew_fact = infer_new_fact(selected) # 'También recorrieron 150\\xa0kilómetros/tren\\xa0*\\xa02 trenes = 300\\xa0kilómetros juntos el segundo día.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El primer día, los trenes recorren 2 trenes\\xa0*\\xa080\\xa0kilómetros/tren = 160 kilómetros juntos.', 'También recorrieron 150\\xa0kilómetros/tren\\xa0*\\xa02 trenes = 300\\xa0kilómetros juntos el segundo día.']\nnew_fact = infer_new_fact(selected) # 'La distancia combinada que recorrieron los dos trenes en los dos días es de 300 kilómetros\\xa0+\\xa0160\\xa0kilómetros = 460 kilómetros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál es la distancia recorrida por cada tren en los dos días?', 'También recorrieron 150\\xa0kilómetros/tren\\xa0*\\xa02 trenes = 300\\xa0kilómetros juntos el segundo día.', 'La distancia combinada que recorrieron los dos trenes en los dos días es de 300 kilómetros\\xa0+\\xa0160\\xa0kilómetros = 460 kilómetros']\nnew_fact = infer_new_fact(selected) # 'La distancia media de los dos días es de 460 kilómetros\\xa0/\\xa02\\xa0trenes = 230\\xa0kilómetros/tren'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál es la distancia recorrida por cada tren en los dos días?', 'La distancia media de los dos días es de 460 kilómetros\\xa0/\\xa02\\xa0trenes = 230\\xa0kilómetros/tren']\nnew_fact = infer_new_fact(selected) # 'The answer is 230'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '230'"}
{"id": "GSM8K_17_db87bf5161", "context": "", "options": [], "answer": "57500", "reasoning_graph_edges": [{"antecedents": [1, 4], "consequent": 6}, {"antecedents": [2, 5], "consequent": 7}, {"antecedents": [6, 7], "consequent": 8}, {"antecedents": [3, 8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent1 & sent4 -> int1: First find the total amount Jill makes per week teaching: $20/hour * 35 hours/week = $700/week; sent2 & sent5 -> int2: Then find the total amount Jill makes per week coaching: $30/hour * 15 hours/week = $450/week; int1 & int2 -> int3: Then add those two amounts to find the total amount Jill makes per week: $700/week + $450/week = $1150/week; int3 & sent3 -> int4: Then multiply that number by the number of weeks Jill works in a year to find her annual salary: $1150/week * 50 weeks/year = $57,500; int4 & sent5 -> int5: The answer is 57500;", "textual_logical_units": {"1": "A Jill le pagan 20 € por hora por enseñar y", "2": "30 € por entrenar a animadoras.", "3": "Si trabaja 50 semanas al año,", "4": "35 horas a la semana como profesora y", "5": "15 horas a la semana como entrenadora, ¿cuál es su salario anual?", "6": "Primero, calcula la cantidad total que gana Jill por semana enseñando: 20 €/hora * 35 horas/semana = 700 €/semana", "7": "Luego, calcula la cantidad total que Jill gana por semana como entrenadora: 30 €/hora *15 horas/semana = 450 €/semana", "8": "A continuación, suma esas dos cantidades para calcular la cantidad total que gana Jill por semana: 700 €/semana + 450 €/semana = 1150 €/semana", "9": "Después, multiplica ese número por el número de semanas que Jill trabaja en un año para obtener su salario anual: 1150 €/semana * 50 semanas/año = 57 500 €", "10": "The answer is 57500"}, "human_translated": true, "code_input": "####\nfacts = [ 'A Jill le pagan 20\\xa0€ por hora por enseñar y',\n  '30\\xa0€ por entrenar a animadoras.',\n  'Si trabaja 50 semanas al año,',\n  '35 horas a la semana como profesora y']\nquestion = '15 horas a la semana como entrenadora, ¿cuál es su salario anual?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['A Jill le pagan 20\\xa0€ por hora por enseñar y', '35 horas a la semana como profesora y']\nnew_fact = infer_new_fact(selected) # 'Primero, calcula la cantidad total que gana Jill por semana enseñando: 20\\xa0€/hora\\xa0*\\xa035 horas/semana = 700\\xa0€/semana'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['30\\xa0€ por entrenar a animadoras.', '15 horas a la semana como entrenadora, ¿cuál es su salario anual?']\nnew_fact = infer_new_fact(selected) # 'Luego, calcula la cantidad total que Jill gana por semana como entrenadora: 30\\xa0€/hora\\xa0*15 horas/semana = 450\\xa0€/semana'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Primero, calcula la cantidad total que gana Jill por semana enseñando: 20\\xa0€/hora\\xa0*\\xa035 horas/semana = 700\\xa0€/semana', 'Luego, calcula la cantidad total que Jill gana por semana como entrenadora: 30\\xa0€/hora\\xa0*15 horas/semana = 450\\xa0€/semana']\nnew_fact = infer_new_fact(selected) # 'A continuación, suma esas dos cantidades para calcular la cantidad total que gana Jill por semana: 700\\xa0€/semana\\xa0+\\xa0450\\xa0€/semana = 1150\\xa0€/semana'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si trabaja 50 semanas al año,', 'A continuación, suma esas dos cantidades para calcular la cantidad total que gana Jill por semana: 700\\xa0€/semana\\xa0+\\xa0450\\xa0€/semana = 1150\\xa0€/semana']\nnew_fact = infer_new_fact(selected) # 'Después, multiplica ese número por el número de semanas que Jill trabaja en un año para obtener su salario anual: 1150\\xa0€/semana\\xa0*\\xa050 semanas/año = 57\\xa0500\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['15 horas a la semana como entrenadora, ¿cuál es su salario anual?', 'Después, multiplica ese número por el número de semanas que Jill trabaja en un año para obtener su salario anual: 1150\\xa0€/semana\\xa0*\\xa050 semanas/año = 57\\xa0500\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 57500'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '57500'"}
{"id": "GSM8K_18_18856591b9", "context": "", "options": [], "answer": "7", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 3}, {"antecedents": [2, 3], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}, {"antecedents": [2, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 -> int1: She eats 3 eggs every day and there are 7 days in a week so she eats 3*7 = 21 eggs a week; int1 & sent2 -> int2: After 4 weeks she will have eaten 4*21 = 84 eggs; int2 & sent2 -> int3: There are 12 eggs in 1 dozen and she'll eat 84 eggs so that's 84/12 = 7 dozen eggs; int3 & sent2 -> int4: The answer is 7;", "textual_logical_units": {"1": "Claire prepara una tortilla de 3 huevos cada mañana para el desayuno.", "2": "¿Cuántas docenas de huevos comerá en 4 semanas?", "3": "Come 3 huevos todos los días y hay 7 días a la semana, por lo que come 3 * 7 = 21 huevos a la semana", "4": "Después de 4 semanas, habrá comido 4 * 21 = 84 huevos", "5": "Hay 12 huevos en una docena y se comerá 84 huevos, es decir, 84 / 12 = 7 docenas de huevos.", "6": "The answer is 7"}, "human_translated": true, "code_input": "####\nfacts = ['Claire prepara una tortilla de 3 huevos cada mañana para el desayuno.']\nquestion = '¿Cuántas docenas de huevos comerá en 4 semanas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Claire prepara una tortilla de 3 huevos cada mañana para el desayuno.']\nnew_fact = infer_new_fact(selected) # 'Come 3 huevos todos los días y hay 7 días a la semana, por lo que come 3\\xa0*\\xa07 = 21 huevos a la semana'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas docenas de huevos comerá en 4 semanas?', 'Come 3 huevos todos los días y hay 7 días a la semana, por lo que come 3\\xa0*\\xa07 = 21 huevos a la semana']\nnew_fact = infer_new_fact(selected) # 'Después de 4 semanas, habrá comido 4\\xa0*\\xa021 = 84 huevos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas docenas de huevos comerá en 4 semanas?', 'Después de 4 semanas, habrá comido 4\\xa0*\\xa021 = 84 huevos']\nnew_fact = infer_new_fact(selected) # 'Hay 12 huevos en una docena y se comerá 84 huevos, es decir, 84\\xa0/\\xa012 = 7 docenas de huevos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas docenas de huevos comerá en 4 semanas?', 'Hay 12 huevos en una docena y se comerá 84 huevos, es decir, 84\\xa0/\\xa012 = 7 docenas de huevos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 7'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '7'"}
{"id": "GSM8K_19_c5a60611f6", "context": "", "options": [], "answer": "6", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 6}, {"antecedents": [2, 3, 6], "consequent": 7}, {"antecedents": [1, 2, 3], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: First figure out how many hours it takes to hike a 12-mile trail at 4 mph by dividing the distance by the speed: 12 miles / 4 mph = 3 hours; int1 & sent2 & sent3 -> int2: Next subtract the time Marissa already spent walking to find out how much time she has left: 3 hours - 1 hour - 1 hour = 1 hour; sent1 & sent2 & sent3 -> int3: Now figure out how much distance she has left by subtracting the distance she already traveled from the total distance: 12 miles - 4 miles - 2 miles = 6 miles; int3 & sent5 -> int4: Now divide the remaining distance by the remaining time to find out how fast in miles per hour Marissa has to travel: 6 miles / 1 hour = 6 mph; int4 & sent5 -> int5: The answer is 6;", "textual_logical_units": {"1": "Marissa está recorriendo un sendero de 12 kilómetros.", "2": "Tardó 1 hora en recorrer los primeros 4 kilómetros,", "3": "luego otra hora para recorrer los siguientes dos kilómetros.", "4": "Si quiere que su velocidad media sea de 4 kilómetros por hora,", "5": "¿qué velocidad (en kilómetros por hora) necesita para recorrer la distancia restante?", "6": "Primero, calcula cuántas horas se necesitan para recorrer un sendero de 12 kilómetros a 4 km/h dividiendo la distancia entre la velocidad: 12 kilómetros / 4 km/h = 3 horas", "7": "Luego, resta el tiempo que Marissa ya pasó caminando para saber cuánto tiempo le queda: 3 horas - 1 hora - 1 hora = 1 hora", "8": "Ahora calcula cuánta distancia le queda restando la distancia que ya ha recorrido de la distancia total: 12 kilómetros - 4 kilómetros - 2 kilómetros = 6 kilómetros", "9": "Ahora, divide la distancia restante entre el tiempo restante para saber lo rápido que debe caminar Marissa en kilómetros por hora: 6 kilómetros / 1 hora = 6 km/h", "10": "The answer is 6"}, "human_translated": true, "code_input": "####\nfacts = [ 'Marissa está recorriendo un sendero de 12\\xa0kilómetros.',\n  'Tardó 1 hora en recorrer los primeros 4\\xa0kilómetros,',\n  'luego otra hora para recorrer los siguientes dos\\xa0kilómetros.',\n  'Si quiere que su velocidad media sea de 4\\xa0kilómetros por hora,']\nquestion = '¿qué velocidad (en kilómetros por hora) necesita para recorrer la distancia restante?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Marissa está recorriendo un sendero de 12\\xa0kilómetros.', 'Tardó 1 hora en recorrer los primeros 4\\xa0kilómetros,']\nnew_fact = infer_new_fact(selected) # 'Primero, calcula cuántas horas se necesitan para recorrer un sendero de 12\\xa0kilómetros a 4\\xa0km/h dividiendo la distancia entre la velocidad: 12\\xa0kilómetros\\xa0/\\xa04\\xa0km/h = 3\\xa0horas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tardó 1 hora en recorrer los primeros 4\\xa0kilómetros,', 'luego otra hora para recorrer los siguientes dos\\xa0kilómetros.', 'Primero, calcula cuántas horas se necesitan para recorrer un sendero de 12\\xa0kilómetros a 4\\xa0km/h dividiendo la distancia entre la velocidad: 12\\xa0kilómetros\\xa0/\\xa04\\xa0km/h = 3\\xa0horas']\nnew_fact = infer_new_fact(selected) # 'Luego, resta el tiempo que Marissa ya pasó caminando para saber cuánto tiempo le queda: 3 horas\\xa0-\\xa01 hora\\xa0-\\xa01 hora = 1 hora'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Marissa está recorriendo un sendero de 12\\xa0kilómetros.', 'Tardó 1 hora en recorrer los primeros 4\\xa0kilómetros,', 'luego otra hora para recorrer los siguientes dos\\xa0kilómetros.']\nnew_fact = infer_new_fact(selected) # 'Ahora calcula cuánta distancia le queda restando la distancia que ya ha recorrido de la distancia total: 12 kilómetros\\xa0-\\xa04 kilómetros\\xa0-\\xa02 kilómetros = 6\\xa0kilómetros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿qué velocidad (en kilómetros por hora) necesita para recorrer la distancia restante?', 'Ahora calcula cuánta distancia le queda restando la distancia que ya ha recorrido de la distancia total: 12 kilómetros\\xa0-\\xa04 kilómetros\\xa0-\\xa02 kilómetros = 6\\xa0kilómetros']\nnew_fact = infer_new_fact(selected) # 'Ahora, divide la distancia restante entre el tiempo restante para saber lo rápido que debe caminar Marissa en kilómetros por hora: 6\\xa0kilómetros\\xa0/\\xa01 hora = 6\\xa0km/h'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿qué velocidad (en kilómetros por hora) necesita para recorrer la distancia restante?', 'Ahora, divide la distancia restante entre el tiempo restante para saber lo rápido que debe caminar Marissa en kilómetros por hora: 6\\xa0kilómetros\\xa0/\\xa01 hora = 6\\xa0km/h']\nnew_fact = infer_new_fact(selected) # 'The answer is 6'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '6'"}
{"id": "GSM8K_20_ea9cd7843f", "context": "", "options": [], "answer": "15", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 6}, {"antecedents": [1, 4], "consequent": 7}, {"antecedents": [1, 7], "consequent": 8}, {"antecedents": [5, 6, 8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent2 -> int1: There are 15 x 3/5 = 9 liters of water from the 15 liters pineapple drink.; sent1 & sent4 -> int2: After 1 liter of orange drink was spilled, there were 10 - 1 = 9 liters of orange drink left.; int2 & sent1 -> int3: Out of the 9 liters, 9 x 2/3 = 6 liters are water.; int1 & int3 & sent5 -> int4: Thus, there are a total of 9 + 6 = 15 liters of water out of the 24 liters.; int4 & sent5 -> int5: The answer is 15;", "textual_logical_units": {"1": "Tengo 10 litros de bebida de naranja, que son dos tercios de agua, y", "2": "quiero añadirla a 15 litros de bebida de piña, que son tres quintas partes de agua.", "3": "Pero cuando voy a echarla,", "4": "derramo un litro de la bebida de naranja.", "5": "¿Cuánta agua hay en los 24 litros restantes?", "6": "Hay 15 × 3/5 = 9 litros de agua de la bebida de piña de 15 litros.", "7": "Después de derramar 1 litro de bebida de naranja, quedaban 10 - 1 = 9 litros de bebida de naranja.", "8": "De los 9 litros, 9 × 2/3 = 6 litros son agua.", "9": "Por lo tanto, hay un total de 9 + 6 = 15 litros de agua de los 24 litros.", "10": "The answer is 15"}, "human_translated": true, "code_input": "####\nfacts = [ 'Tengo 10\\xa0litros de bebida de naranja, que son dos tercios de agua, y',\n  'quiero añadirla a 15 litros de bebida de piña, que son tres quintas partes de agua.',\n  'Pero cuando voy a echarla,',\n  'derramo un litro de la bebida de naranja.']\nquestion = '¿Cuánta agua hay en los 24 litros restantes?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['quiero añadirla a 15 litros de bebida de piña, que son tres quintas partes de agua.']\nnew_fact = infer_new_fact(selected) # 'Hay 15\\xa0×\\xa03/5 = 9 litros de agua de la bebida de piña de 15 litros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tengo 10\\xa0litros de bebida de naranja, que son dos tercios de agua, y', 'derramo un litro de la bebida de naranja.']\nnew_fact = infer_new_fact(selected) # 'Después de derramar 1 litro de bebida de naranja, quedaban 10\\xa0-\\xa01 = 9 litros de bebida de naranja.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tengo 10\\xa0litros de bebida de naranja, que son dos tercios de agua, y', 'Después de derramar 1 litro de bebida de naranja, quedaban 10\\xa0-\\xa01 = 9 litros de bebida de naranja.']\nnew_fact = infer_new_fact(selected) # 'De los 9 litros, 9\\xa0×\\xa02/3 = 6 litros son agua.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánta agua hay en los 24 litros restantes?', 'Hay 15\\xa0×\\xa03/5 = 9 litros de agua de la bebida de piña de 15 litros.', 'De los 9 litros, 9\\xa0×\\xa02/3 = 6 litros son agua.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, hay un total de 9\\xa0+\\xa06 = 15 litros de agua de los 24 litros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánta agua hay en los 24 litros restantes?', 'Por lo tanto, hay un total de 9\\xa0+\\xa06 = 15 litros de agua de los 24 litros.']\nnew_fact = infer_new_fact(selected) # 'The answer is 15'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '15'"}
{"id": "GSM8K_21_6858311ee4", "context": "", "options": [], "answer": "14", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 6}, {"antecedents": [4, 5, 6], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: When Raymond's son was born Samantha was 23 - 6 = 17 years old.; int1 & sent4 & sent5 -> int2: Thus it has been 31 - 17 = 14 years since Raymond's son was born.; int2 & sent5 -> int3: The answer is 14;", "textual_logical_units": {"1": "Raymond y Samantha son primos.", "2": "Raymond nació 6 años antes que Samantha.", "3": "Raymond tuvo un hijo a los 23 años.", "4": "Si Samantha tiene ahora 31 años,", "5": "¿hace cuántos años nació el hijo de Raymond?", "6": "Cuando nació el hijo de Raymond, Samantha tenía 23 - 6 años = 17 años.", "7": "Por lo tanto, han pasado 31 - 17 = 14 años desde que nació el hijo de Raymond.", "8": "The answer is 14"}, "human_translated": true, "code_input": "####\nfacts = ['Raymond y Samantha son primos.', 'Raymond nació 6 años antes que Samantha.', 'Raymond tuvo un hijo a los 23 años.', 'Si Samantha tiene ahora 31 años,']\nquestion = '¿hace cuántos años nació el hijo de Raymond?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Raymond nació 6 años antes que Samantha.', 'Raymond tuvo un hijo a los 23 años.']\nnew_fact = infer_new_fact(selected) # 'Cuando nació el hijo de Raymond, Samantha tenía 23\\xa0-\\xa06 años = 17 años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Samantha tiene ahora 31 años,', '¿hace cuántos años nació el hijo de Raymond?', 'Cuando nació el hijo de Raymond, Samantha tenía 23\\xa0-\\xa06 años = 17 años.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, han pasado 31\\xa0-\\xa017 = 14 años desde que nació el hijo de Raymond.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿hace cuántos años nació el hijo de Raymond?', 'Por lo tanto, han pasado 31\\xa0-\\xa017 = 14 años desde que nació el hijo de Raymond.']\nnew_fact = infer_new_fact(selected) # 'The answer is 14'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '14'"}
{"id": "GSM8K_22_b2e7b4eecc", "context": "", "options": [], "answer": "7", "reasoning_graph_edges": [{"antecedents": [3], "consequent": 7}, {"antecedents": [4], "consequent": 8}, {"antecedents": [5, 6, 7, 8], "consequent": 9}, {"antecedents": [6, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent3 -> int1: His first 3 customers buy 3 * 1 = 3 DVDs.; sent4 -> int2: His next 2 buy 2 * 2 = 4 DVDs.; int1 & int2 & sent5 & sent6 -> int3: He sells a total of 3 + 4 + 0 = 7 DVDs.; int3 & sent6 -> int4: The answer is 7;", "textual_logical_units": {"1": "Billy vende DVD.", "2": "Tiene 8 clientes el martes.", "3": "Sus primeros 3 clientes compran un DVD cada uno.", "4": "Sus próximos 2 clientes compran 2 DVD cada uno.", "5": "Sus últimos 3 clientes no compran ningún DVD.", "6": "¿Cuántos DVD vendió Billy el martes?", "7": "Sus primeros 3 clientes compran 3 * 1 = 3 DVD.", "8": "Sus próximos 2 compran 2 * 2 = 4 DVD.", "9": "Vende un total de 3 + 4 + 0 = 7 DVD.", "10": "The answer is 7"}, "human_translated": true, "code_input": "####\nfacts = [ 'Billy vende DVD.',\n  'Tiene 8 clientes el martes.',\n  'Sus primeros 3 clientes compran un DVD cada uno.',\n  'Sus próximos 2 clientes compran 2 DVD cada uno.',\n  'Sus últimos 3 clientes no compran ningún DVD.']\nquestion = '¿Cuántos DVD vendió Billy el martes?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Sus primeros 3 clientes compran un DVD cada uno.']\nnew_fact = infer_new_fact(selected) # 'Sus primeros 3 clientes compran 3\\xa0*\\xa01 = 3\\xa0DVD.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Sus próximos 2 clientes compran 2 DVD cada uno.']\nnew_fact = infer_new_fact(selected) # 'Sus próximos 2 compran 2\\xa0*\\xa02 = 4\\xa0DVD.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Sus últimos 3 clientes no compran ningún DVD.', '¿Cuántos DVD vendió Billy el martes?', 'Sus primeros 3 clientes compran 3\\xa0*\\xa01 = 3\\xa0DVD.', 'Sus próximos 2 compran 2\\xa0*\\xa02 = 4\\xa0DVD.']\nnew_fact = infer_new_fact(selected) # 'Vende un total de 3\\xa0+ 4\\xa0+\\xa00 = 7\\xa0DVD.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos DVD vendió Billy el martes?', 'Vende un total de 3\\xa0+ 4\\xa0+\\xa00 = 7\\xa0DVD.']\nnew_fact = infer_new_fact(selected) # 'The answer is 7'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '7'"}
{"id": "GSM8K_23_ddd8cf9c35", "context": "", "options": [], "answer": "8", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 3}, {"antecedents": [1, 3], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}], "metadata": [], "linearized_output_en": "sent2 -> int1: The candle burns for 5 - 1 = 4 hours.; int1 & sent1 -> int2: Thus, the candle will be 2 * 4 = 8 centimeters shorter.; int2 & sent2 -> int3: The answer is 8;", "textual_logical_units": {"1": "Una vela se derrite 2 centímetros cada hora que pasa encendida.", "2": "¿Cuántos centímetros más corta será una vela después estar encendida entre la 13:00 h y las 17:00 h?", "3": "La vela está encendida durante 5 - 1 = 4 horas.", "4": "Por lo tanto, la vela será 2 * 4 = 8 centímetros más corta.", "5": "The answer is 8"}, "human_translated": true, "code_input": "####\nfacts = ['Una vela se derrite 2 centímetros cada hora que pasa encendida.']\nquestion = '¿Cuántos centímetros más corta será una vela después estar encendida entre la 13:00\\xa0h y las 17:00\\xa0h?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['¿Cuántos centímetros más corta será una vela después estar encendida entre la 13:00\\xa0h y las 17:00\\xa0h?']\nnew_fact = infer_new_fact(selected) # 'La vela está encendida durante 5\\xa0-\\xa01 = 4 horas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Una vela se derrite 2 centímetros cada hora que pasa encendida.', 'La vela está encendida durante 5\\xa0-\\xa01 = 4 horas.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, la vela será 2\\xa0*\\xa04 = 8 centímetros más corta.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos centímetros más corta será una vela después estar encendida entre la 13:00\\xa0h y las 17:00\\xa0h?', 'Por lo tanto, la vela será 2\\xa0*\\xa04 = 8 centímetros más corta.']\nnew_fact = infer_new_fact(selected) # 'The answer is 8'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '8'"}
{"id": "GSM8K_24_18a7cbe01d", "context": "", "options": [], "answer": "26", "reasoning_graph_edges": [{"antecedents": [1, 2, 3], "consequent": 4}, {"antecedents": [4], "consequent": 5}, {"antecedents": [5], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 & sent2 & sent3 -> int1: Let X be the original price of the book. The discounted price is X - X*25% = $19.50.; int1 -> int2: Combining like terms, we get .75X = $19.50; int2 -> int3: Dividing both sides by .75, we get X = $26.; int3 & sent3 -> int4: The answer is 26;", "textual_logical_units": {"1": "Kyle compró el libro más vendido del año pasado por 19,50 €.", "2": "Esto es con un descuento del 25 % sobre el precio original.", "3": "¿Cuál era el precio original del libro?", "4": "Si x es el precio original del libro. El precio con descuento es de x - x * 25 % = 19,50 €.", "5": "Al combinar términos semejantes, obtenemos 0,75x = 19,50 €", "6": "Al dividir ambos lados entre 0,75, obtenemos x = 26 €", "7": "The answer is 26"}, "human_translated": true, "code_input": "####\nfacts = ['Kyle compró el libro más vendido del año pasado por 19,50\\xa0€.', 'Esto es con un descuento del 25\\xa0% sobre el precio original.']\nquestion = '¿Cuál era el precio original del libro?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Kyle compró el libro más vendido del año pasado por 19,50\\xa0€.', 'Esto es con un descuento del 25\\xa0% sobre el precio original.', '¿Cuál era el precio original del libro?']\nnew_fact = infer_new_fact(selected) # 'Si\\xa0x\\xa0es el precio original del libro. El precio con descuento es de\\xa0x\\xa0-\\xa0x\\xa0*\\xa025\\xa0% = 19,50\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si\\xa0x\\xa0es el precio original del libro. El precio con descuento es de\\xa0x\\xa0-\\xa0x\\xa0*\\xa025\\xa0% = 19,50\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Al combinar términos semejantes, obtenemos 0,75x = 19,50\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Al combinar términos semejantes, obtenemos 0,75x = 19,50\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Al dividir ambos lados entre 0,75, obtenemos x\\xa0=\\xa026\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál era el precio original del libro?', 'Al dividir ambos lados entre 0,75, obtenemos x\\xa0=\\xa026\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 26'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '26'"}
{"id": "GSM8K_25_c2b12baadd", "context": "", "options": [], "answer": "2", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 7}, {"antecedents": [3], "consequent": 8}, {"antecedents": [1, 7, 8], "consequent": 9}, {"antecedents": [4, 5, 9], "consequent": 10}, {"antecedents": [6, 10], "consequent": 11}, {"antecedents": [6, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent2 -> int1: Five packs of milk cost $3 x 5 = $15.; sent3 -> int2: Four apples cost $1.50 x 4 = $6.; int1 & int2 & sent1 -> int3: The total cost of the chicken meal, milk, and apples is $12 + $15 + $6 = $33.; int3 & sent4 & sent5 -> int4: Thus, the boxes of pizza cost $50 - $33 = $17.; int4 & sent6 -> int5: Therefore, Marie ordered $17/$8.50 = 2 boxes of pizza.; int5 & sent6 -> int6: The answer is 2;", "textual_logical_units": {"1": "Marie pidió un plato de pollo que cuesta 12 €,", "2": "5 paquetes de leche que cuestan 3 € cada uno,", "3": "4 manzanas que cuestan 1,50 € cada una", "4": "y algunas cajas de pizza.", "5": "Marie pagó un total de 50 €.", "6": "¿Cuántas cajas de pizza pidió Marie si cada caja cuesta 8,50 €?", "7": "5 paquetes de leche cuestan 3 × 5 = 15 €.", "8": "4 manzanas cuestan 1,50 € × 4 = 6 €.", "9": "El coste total del plato de pollo, la leche y las manzanas es de 12 € + 15 € + 6 € = 33 €.", "10": "Por lo tanto, las cajas de pizza cuestan 50 € - 33 € = 17 €.", "11": "Por lo tanto, Marie pidió 17 € / 8,50 € = 2 cajas de pizza.", "12": "The answer is 2"}, "human_translated": true, "code_input": "####\nfacts = [ 'Marie pidió un plato de pollo que cuesta 12\\xa0€,',\n  '5 paquetes de leche que cuestan 3\\xa0€ cada uno,',\n  '4 manzanas que cuestan 1,50\\xa0€ cada una',\n  'y algunas cajas de pizza.',\n  'Marie pagó un total de 50\\xa0€.']\nquestion = '¿Cuántas cajas de pizza pidió Marie si cada caja cuesta 8,50\\xa0€?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['5 paquetes de leche que cuestan 3\\xa0€ cada uno,']\nnew_fact = infer_new_fact(selected) # '5 paquetes de leche cuestan 3\\xa0×\\xa05 = 15\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['4 manzanas que cuestan 1,50\\xa0€ cada una']\nnew_fact = infer_new_fact(selected) # '4 manzanas cuestan 1,50\\xa0€\\xa0×\\xa04 = 6\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Marie pidió un plato de pollo que cuesta 12\\xa0€,', '5 paquetes de leche cuestan 3\\xa0×\\xa05 = 15\\xa0€.', '4 manzanas cuestan 1,50\\xa0€\\xa0×\\xa04 = 6\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'El coste total del plato de pollo, la leche y las manzanas es de 12\\xa0€\\xa0+\\xa015\\xa0€\\xa0+\\xa06\\xa0€ = 33\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y algunas cajas de pizza.', 'Marie pagó un total de 50\\xa0€.', 'El coste total del plato de pollo, la leche y las manzanas es de 12\\xa0€\\xa0+\\xa015\\xa0€\\xa0+\\xa06\\xa0€ = 33\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, las cajas de pizza cuestan 50\\xa0€\\xa0-\\xa033\\xa0€ = 17\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas cajas de pizza pidió Marie si cada caja cuesta 8,50\\xa0€?', 'Por lo tanto, las cajas de pizza cuestan 50\\xa0€\\xa0-\\xa033\\xa0€ = 17\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, Marie pidió 17\\xa0€\\xa0/\\xa08,50\\xa0€ = 2 cajas de pizza.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas cajas de pizza pidió Marie si cada caja cuesta 8,50\\xa0€?', 'Por lo tanto, Marie pidió 17\\xa0€\\xa0/\\xa08,50\\xa0€ = 2 cajas de pizza.']\nnew_fact = infer_new_fact(selected) # 'The answer is 2'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '2'"}
{"id": "GSM8K_26_ab1d75e849", "context": "", "options": [], "answer": "243", "reasoning_graph_edges": [{"antecedents": [1, 2, 3, 4, 5], "consequent": 7}, {"antecedents": [6, 7], "consequent": 8}, {"antecedents": [6, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent1 & sent2 & sent3 & sent4 & sent5 -> int1: 3 * (16.50 + 22.50 + 42) = $243; int1 & sent6 -> int2: Mishka spent $243 on clothing.; int2 & sent6 -> int3: The answer is 243;", "textual_logical_units": {"1": "Mishka compró 3 pares de pantalones cortos, 3 pares de pantalones,", "2": "y 3 pares de zapatos.", "3": "Un par de pantalones cortos cuesta 16,50 €.", "4": "Un par de pantalones cuesta 22,50 € y", "5": "un par de zapatos cuesta 42€.", "6": "¿Cuántos euros gastó Mishka en todas las prendas de vestir?", "7": "3 * (16,50 + 22,50 + 42) = 243 €", "8": "Mishka gastó 243 € en ropa.", "9": "The answer is 243"}, "human_translated": true, "code_input": "####\nfacts = [ 'Mishka compró 3 pares de pantalones cortos, 3 pares de pantalones,',\n  'y 3 pares de zapatos.',\n  'Un par de pantalones cortos cuesta 16,50\\xa0€.',\n  'Un par de pantalones cuesta 22,50\\xa0€ y',\n  'un par de zapatos cuesta 42€.']\nquestion = '¿Cuántos euros gastó Mishka en todas las prendas de vestir?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Mishka compró 3 pares de pantalones cortos, 3 pares de pantalones,', 'y 3 pares de zapatos.', 'Un par de pantalones cortos cuesta 16,50\\xa0€.', 'Un par de pantalones cuesta 22,50\\xa0€ y', 'un par de zapatos cuesta 42€.']\nnew_fact = infer_new_fact(selected) # '3\\xa0*\\xa0(16,50\\xa0+\\xa022,50\\xa0+\\xa042) = 243\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos euros gastó Mishka en todas las prendas de vestir?', '3\\xa0*\\xa0(16,50\\xa0+\\xa022,50\\xa0+\\xa042) = 243\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Mishka gastó 243\\xa0€ en ropa.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos euros gastó Mishka en todas las prendas de vestir?', 'Mishka gastó 243\\xa0€ en ropa.']\nnew_fact = infer_new_fact(selected) # 'The answer is 243'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '243'"}
{"id": "GSM8K_27_05688c8d4e", "context": "", "options": [], "answer": "16", "reasoning_graph_edges": [{"antecedents": [1, 2, 3], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 & sent2 & sent3 -> int1: Each container of ice cream has 15 servings and she eats 1 serving a night so after 60 days she will need 60/15 = 4 containers of ice cream; int1 & sent2 -> int2: If each carton costs $4.00 and she needs 4 containers then it will cost her 4*4 = $16.00; int2 & sent3 -> int3: The answer is 16;", "textual_logical_units": {"1": "Cynthia come una ración de helado cada noche.", "2": "Compra cajas de helado con 15 raciones de helado por caja a un coste de 4,00 € por caja.", "3": "Después de 60 días, ¿cuánto gastará en helado?", "4": "Cada recipiente de helado tiene 15 raciones y ella come 1 ración por noche, por lo que después de 60 días necesitará 60 / 15 = 4 recipientes de helado", "5": "Si cada caja cuesta 4,00 € y necesita 4 recipientes, le costará 4 * 4 = 16,00 €", "6": "The answer is 16"}, "human_translated": true, "code_input": "####\nfacts = ['Cynthia come una ración de helado cada noche.', 'Compra cajas de helado con 15 raciones de helado por caja a un coste de 4,00\\xa0€ por caja.']\nquestion = 'Después de 60 días, ¿cuánto gastará en helado?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Cynthia come una ración de helado cada noche.', 'Compra cajas de helado con 15 raciones de helado por caja a un coste de 4,00\\xa0€ por caja.', 'Después de 60 días, ¿cuánto gastará en helado?']\nnew_fact = infer_new_fact(selected) # 'Cada recipiente de helado tiene 15 raciones y ella come 1 ración por noche, por lo que después de 60 días necesitará 60\\xa0/\\xa015 = 4 recipientes de helado'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Compra cajas de helado con 15 raciones de helado por caja a un coste de 4,00\\xa0€ por caja.', 'Cada recipiente de helado tiene 15 raciones y ella come 1 ración por noche, por lo que después de 60 días necesitará 60\\xa0/\\xa015 = 4 recipientes de helado']\nnew_fact = infer_new_fact(selected) # 'Si cada caja cuesta 4,00\\xa0€ y necesita 4 recipientes, le costará 4\\xa0*\\xa04 = 16,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Después de 60 días, ¿cuánto gastará en helado?', 'Si cada caja cuesta 4,00\\xa0€ y necesita 4 recipientes, le costará 4\\xa0*\\xa04 = 16,00\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 16'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '16'"}
{"id": "GSM8K_28_931b3848f4", "context": "", "options": [], "answer": "25", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: He traveled 20 miles + 15 miles = 35 miles not counting the distance between stops.; int1 & sent1 -> int2: Henry traveled 60 miles - 35 miles = 25 miles between his first and second stop.; int2 & sent4 -> int3: The answer is 25;", "textual_logical_units": {"1": "Henry hizo dos paradas durante su viaje en bicicleta de 60 kilómetros.", "2": "Se detuvo por primera vez después de 20 kilómetros.", "3": "Su segunda parada fue 15 kilómetros antes del final del viaje.", "4": "¿Cuántos kilómetros recorrió entre la primera y la segunda parada?", "5": "Recorrió 20 kilómetros + 15 kilómetros = 35 kilómetros sin contar la distancia entre paradas.", "6": "Henry recorrió 60 kilómetros - 35 kilómetros = 25 kilómetros entre su primera y segunda parada.", "7": "The answer is 25"}, "human_translated": true, "code_input": "####\nfacts = [ 'Henry hizo dos paradas durante su viaje en bicicleta de 60\\xa0kilómetros.',\n  'Se detuvo por primera vez después de 20\\xa0kilómetros.',\n  'Su segunda parada fue 15\\xa0kilómetros antes del final del viaje.']\nquestion = '¿Cuántos kilómetros recorrió entre la primera y la segunda parada?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Se detuvo por primera vez después de 20\\xa0kilómetros.', 'Su segunda parada fue 15\\xa0kilómetros antes del final del viaje.']\nnew_fact = infer_new_fact(selected) # 'Recorrió 20\\xa0kilómetros\\xa0+\\xa015\\xa0kilómetros = 35\\xa0kilómetros sin contar la distancia entre paradas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Henry hizo dos paradas durante su viaje en bicicleta de 60\\xa0kilómetros.', 'Recorrió 20\\xa0kilómetros\\xa0+\\xa015\\xa0kilómetros = 35\\xa0kilómetros sin contar la distancia entre paradas.']\nnew_fact = infer_new_fact(selected) # 'Henry recorrió 60 kilómetros\\xa0-\\xa035 kilómetros = 25 kilómetros entre su primera y segunda parada.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos kilómetros recorrió entre la primera y la segunda parada?', 'Henry recorrió 60 kilómetros\\xa0-\\xa035 kilómetros = 25 kilómetros entre su primera y segunda parada.']\nnew_fact = infer_new_fact(selected) # 'The answer is 25'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '25'"}
{"id": "GSM8K_29_bea1855c2f", "context": "", "options": [], "answer": "104", "reasoning_graph_edges": [{"antecedents": [4], "consequent": 7}, {"antecedents": [4, 5, 7], "consequent": 8}, {"antecedents": [2, 3, 8], "consequent": 9}, {"antecedents": [6, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent4 -> int1: The second pair of heels costs 33 * 2 = $66.; int1 & sent4 & sent5 -> int2: The heels together cost 66 + 33 = $99.; int2 & sent2 & sent3 -> int3: The boots cost $5 more than both pairs of heels together, so the boots cost 99 + 5 = $104.; int3 & sent6 -> int4: The answer is 104;", "textual_logical_units": {"1": "Gloria está comprando zapatos cuando se encuentra con un par de botas que se ajustan a su presupuesto.", "2": "Sin embargo, tiene que elegir entre las botas y", "3": "dos pares de tacones altos que juntos cuestan cinco euros menos que las botas.", "4": "Si un par de tacones cuesta 33 € y", "5": "el otro cuesta el doble,", "6": "¿cuántos euros cuestan las botas?", "7": "El segundo par de tacones cuesta 33 * 2 = 66 €.", "8": "Los tacones juntos cuestan 66 + 33 = 99 €.", "9": "Las botas cuestan 5 € más que los dos pares de tacones juntos, por lo que cuestan 99 + 5 = 104 €.", "10": "The answer is 104"}, "human_translated": true, "code_input": "####\nfacts = [ 'Gloria está comprando zapatos cuando se encuentra con un par de botas que se ajustan a su presupuesto.',\n  'Sin embargo, tiene que elegir entre las botas y',\n  'dos pares de tacones altos que juntos cuestan cinco euros menos que las botas.',\n  'Si un par de tacones cuesta 33\\xa0€ y',\n  'el otro cuesta el doble,']\nquestion = '¿cuántos euros cuestan las botas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Si un par de tacones cuesta 33\\xa0€ y']\nnew_fact = infer_new_fact(selected) # 'El segundo par de tacones cuesta 33\\xa0*\\xa02 = 66\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si un par de tacones cuesta 33\\xa0€ y', 'el otro cuesta el doble,', 'El segundo par de tacones cuesta 33\\xa0*\\xa02 = 66\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Los tacones juntos cuestan 66\\xa0+\\xa033 = 99\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Sin embargo, tiene que elegir entre las botas y', 'dos pares de tacones altos que juntos cuestan cinco euros menos que las botas.', 'Los tacones juntos cuestan 66\\xa0+\\xa033 = 99\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Las botas cuestan 5\\xa0€ más que los dos pares de tacones juntos, por lo que cuestan 99\\xa0+\\xa05 = 104\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos euros cuestan las botas?', 'Las botas cuestan 5\\xa0€ más que los dos pares de tacones juntos, por lo que cuestan 99\\xa0+\\xa05 = 104\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'The answer is 104'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '104'"}
{"id": "GSM8K_30_d5513cdd8c", "context": "", "options": [], "answer": "109", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 -> int1: The total ratio representing their ages is 7+11= 18; int1 & sent2 -> int2: Since the fraction of the ratio that represents Allen's age is 11/18, Allen's current age is 11/18*162 = 99; int2 & sent3 -> int3: If Allen is currently 99 years old, in 10 years he will be 99+10 = 109 years old; int3 & sent3 -> int4: The answer is 109;", "textual_logical_units": {"1": "Las edades de Darrell y Allen están en una proporción de 7:11.", "2": "Si su edad total ahora es de 162,", "3": "calcula la edad de Allen dentro de 10 años.", "4": "La proporción total que representa sus edades es 7 + 11 = 18", "5": "Como la fracción de la proporción que representa la edad de Allen es 11/18, la edad actual de Allen es 11 / 18 * 162 = 99", "6": "Si Allen tiene actualmente 99 años, en 10 años tendrá 99 + 10 = 109 años", "7": "The answer is 109"}, "human_translated": true, "code_input": "####\nfacts = ['Las edades de Darrell y Allen están en una proporción de 7:11.', 'Si su edad total ahora es de 162,']\nquestion = 'calcula la edad de Allen dentro de 10 años.'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Las edades de Darrell y Allen están en una proporción de 7:11.']\nnew_fact = infer_new_fact(selected) # 'La proporción total que representa sus edades es 7\\xa0+\\xa011 = 18'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si su edad total ahora es de 162,', 'La proporción total que representa sus edades es 7\\xa0+\\xa011 = 18']\nnew_fact = infer_new_fact(selected) # 'Como la fracción de la proporción que representa la edad de Allen es 11/18, la edad actual de Allen es 11\\xa0/\\xa018\\xa0*\\xa0162 = 99'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['calcula la edad de Allen dentro de 10 años.', 'Como la fracción de la proporción que representa la edad de Allen es 11/18, la edad actual de Allen es 11\\xa0/\\xa018\\xa0*\\xa0162 = 99']\nnew_fact = infer_new_fact(selected) # 'Si Allen tiene actualmente 99 años, en 10 años tendrá 99\\xa0+\\xa010 = 109 años'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['calcula la edad de Allen dentro de 10 años.', 'Si Allen tiene actualmente 99 años, en 10 años tendrá 99\\xa0+\\xa010 = 109 años']\nnew_fact = infer_new_fact(selected) # 'The answer is 109'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '109'"}
{"id": "GSM8K_31_e8508bec13", "context": "", "options": [], "answer": "80", "reasoning_graph_edges": [{"antecedents": [3, 4], "consequent": 7}, {"antecedents": [3, 5], "consequent": 8}, {"antecedents": [3, 7, 8], "consequent": 9}, {"antecedents": [3, 7, 8, 9], "consequent": 10}, {"antecedents": [6, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent3 & sent4 -> int1: The second person guessed 60 because 20 + (80/2)= 60; sent3 & sent5 -> int2: The second guessed 100 because 80 x 1.25 = 100; int1 & int2 & sent3 -> int3: The total amount guessed is 240 because 80 + 60 + 100 = 240; int1 & int2 & int3 & sent3 -> int4: The average amount guessed is 80 because 240 / 3 = 80; int4 & sent6 -> int5: The answer is 80;", "textual_logical_units": {"1": "Gunter está tratando de contar las gominolas de un tarro.", "2": "Pregunta a sus amigos cuántas creen que hay en el tarro.", "3": "Uno dice 80.", "4": "Otro dice 20 más que la mitad del primero.", "5": "Un tercero dice un 25 % más que el primero.", "6": "¿Cuál es la suposición media?", "7": "La segunda persona supuso 60 porque 20 + (80/2) = 60", "8": "El segundo supuso 100 porque 80 × 1,25 = 100", "9": "La cantidad total adivinada es 240 porque 80 + 60 + 100 = 240", "10": "La cantidad media adivinada es 80 porque 240/3 = 80", "11": "The answer is 80"}, "human_translated": true, "code_input": "####\nfacts = [ 'Gunter está tratando de contar las gominolas de un tarro.',\n  'Pregunta a sus amigos cuántas creen que hay en el tarro.',\n  'Uno dice 80.',\n  'Otro dice 20 más que la mitad del primero.',\n  'Un tercero dice un 25\\xa0% más que el primero.']\nquestion = '¿Cuál es la suposición media?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Uno dice 80.', 'Otro dice 20 más que la mitad del primero.']\nnew_fact = infer_new_fact(selected) # 'La segunda persona supuso 60 porque 20\\xa0+\\xa0(80/2) = 60'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Uno dice 80.', 'Un tercero dice un 25\\xa0% más que el primero.']\nnew_fact = infer_new_fact(selected) # 'El segundo supuso 100 porque 80\\xa0×\\xa01,25 = 100'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Uno dice 80.', 'La segunda persona supuso 60 porque 20\\xa0+\\xa0(80/2) = 60', 'El segundo supuso 100 porque 80\\xa0×\\xa01,25 = 100']\nnew_fact = infer_new_fact(selected) # 'La cantidad total adivinada es 240 porque 80\\xa0+\\xa060\\xa0+\\xa0100 = 240'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Uno dice 80.', 'La segunda persona supuso 60 porque 20\\xa0+\\xa0(80/2) = 60', 'El segundo supuso 100 porque 80\\xa0×\\xa01,25 = 100', 'La cantidad total adivinada es 240 porque 80\\xa0+\\xa060\\xa0+\\xa0100 = 240']\nnew_fact = infer_new_fact(selected) # 'La cantidad media adivinada es 80 porque 240/3 = 80'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál es la suposición media?', 'La cantidad media adivinada es 80 porque 240/3 = 80']\nnew_fact = infer_new_fact(selected) # 'The answer is 80'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '80'"}
{"id": "GSM8K_32_89c164c5ae", "context": "", "options": [], "answer": "35", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [4, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: He spends 10*.5=5 hours per day; int1 & sent4 -> int2: That means he spends 5*7=35 hours per week; int2 & sent4 -> int3: The answer is 35;", "textual_logical_units": {"1": "John cuida de 10 perros.", "2": "Necesita 1 hora y media al día para que cada perro pasee y", "3": "haga lo que tenga que hacer.", "4": "¿Cuántas horas a la semana dedica a cuidar perros?", "5": "Dedica 10 * 0,5 = 5 horas al día", "6": "Eso significa que dedica 5 * 7 = 35 horas a la semana", "7": "The answer is 35"}, "human_translated": true, "code_input": "####\nfacts = ['John cuida de 10 perros.', 'Necesita 1\\xa0hora y media al día para que cada perro pasee y', 'haga lo que tenga que hacer.']\nquestion = '¿Cuántas horas a la semana dedica a cuidar perros?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['John cuida de 10 perros.', 'Necesita 1\\xa0hora y media al día para que cada perro pasee y']\nnew_fact = infer_new_fact(selected) # 'Dedica 10\\xa0*\\xa00,5 = 5 horas al día'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas horas a la semana dedica a cuidar perros?', 'Dedica 10\\xa0*\\xa00,5 = 5 horas al día']\nnew_fact = infer_new_fact(selected) # 'Eso significa que dedica 5\\xa0*\\xa07 = 35 horas a la semana'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas horas a la semana dedica a cuidar perros?', 'Eso significa que dedica 5\\xa0*\\xa07 = 35 horas a la semana']\nnew_fact = infer_new_fact(selected) # 'The answer is 35'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '35'"}
{"id": "GSM8K_33_563617ecbf", "context": "", "options": [], "answer": "70", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [6], "consequent": 7}, {"antecedents": [7], "consequent": 8}, {"antecedents": [2, 3, 8], "consequent": 9}, {"antecedents": [3, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Let x be the number of silver coins Gretchen has; int1 & sent2 -> int2: Gretchen has x+30 gold coins.; int2 & sent1 -> int3: x+x+30=110; int3 -> int4: 2*x=80; int4 -> int5: x=40; int5 & sent2 & sent3 -> int6: Gretchen has 40+30=70 gold coins; int6 & sent3 -> int7: The answer is 70;", "textual_logical_units": {"1": "Gretchen tiene 110 monedas.", "2": "Hay 30 monedas de oro más que de plata.", "3": "¿Cuántas monedas de oro tiene Gretchen?", "4": "Si x es el número de monedas de plata que tiene Gretchen,", "5": "Gretchen tiene x + 30 monedas de oro.", "6": "x + x + 30 = 110", "7": "2 * x = 80", "8": "x = 40", "9": "Gretchen tiene 40 + 30 = 70 monedas de oro", "10": "The answer is 70"}, "human_translated": true, "code_input": "####\nfacts = ['Gretchen tiene 110 monedas.', 'Hay 30 monedas de oro más que de plata.']\nquestion = '¿Cuántas monedas de oro tiene Gretchen?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Gretchen tiene 110 monedas.', 'Hay 30 monedas de oro más que de plata.']\nnew_fact = infer_new_fact(selected) # 'Si\\xa0x es\\xa0el número de monedas de plata que tiene Gretchen,'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Hay 30 monedas de oro más que de plata.', 'Si\\xa0x es\\xa0el número de monedas de plata que tiene Gretchen,']\nnew_fact = infer_new_fact(selected) # 'Gretchen tiene x\\xa0+\\xa030 monedas de oro.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Gretchen tiene 110 monedas.', 'Gretchen tiene x\\xa0+\\xa030 monedas de oro.']\nnew_fact = infer_new_fact(selected) # 'x\\xa0+\\xa0x\\xa0+\\xa030 = 110'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['x\\xa0+\\xa0x\\xa0+\\xa030 = 110']\nnew_fact = infer_new_fact(selected) # '2\\xa0*\\xa0x = 80'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['2\\xa0*\\xa0x = 80']\nnew_fact = infer_new_fact(selected) # 'x = 40'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Hay 30 monedas de oro más que de plata.', '¿Cuántas monedas de oro tiene Gretchen?', 'x = 40']\nnew_fact = infer_new_fact(selected) # 'Gretchen tiene 40\\xa0+\\xa030 = 70 monedas de oro'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas monedas de oro tiene Gretchen?', 'Gretchen tiene 40\\xa0+\\xa030 = 70 monedas de oro']\nnew_fact = infer_new_fact(selected) # 'The answer is 70'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '70'"}
{"id": "GSM8K_34_58622fd43b", "context": "", "options": [], "answer": "23", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [2, 5], "consequent": 6}, {"antecedents": [1, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Half of Raymond's jewels is 40/2 = 20; int1 & sent2 -> int2: Since Aaron has 5 more jewels than half of Raymond's jewels, he has 20+5 = 25 jewels.; int2 & sent1 -> int3: If Siobhan has 2 fewer jewels than Aaron, he has 25-2 = 23 jewels.; int3 & sent4 -> int4: The answer is 23;", "textual_logical_units": {"1": "Siobhan tiene 2 joyas menos que Aaron.", "2": "Aaron tiene 5 joyas más que la mitad de las joyas de Raymond.", "3": "Si Raymond tiene 40 joyas,", "4": "¿cuántas joyas tiene Siobhan?", "5": "La mitad de las joyas de Raymond son 40 / 2 = 20", "6": "Como Aaron tiene 5 joyas más que la mitad de las joyas de Raymond, tiene 20 + 5 = 25 joyas.", "7": "Si Siobhan tiene 2 joyas menos que Aaron, tiene 25 - 2 = 23 joyas.", "8": "The answer is 23"}, "human_translated": true, "code_input": "####\nfacts = ['Siobhan tiene 2 joyas menos que Aaron.', 'Aaron tiene 5 joyas más que la mitad de las joyas de Raymond.', 'Si Raymond tiene 40 joyas,']\nquestion = '¿cuántas joyas tiene Siobhan?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Aaron tiene 5 joyas más que la mitad de las joyas de Raymond.', 'Si Raymond tiene 40 joyas,']\nnew_fact = infer_new_fact(selected) # 'La mitad de las joyas de Raymond son 40\\xa0/\\xa02 = 20'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Aaron tiene 5 joyas más que la mitad de las joyas de Raymond.', 'La mitad de las joyas de Raymond son 40\\xa0/\\xa02 = 20']\nnew_fact = infer_new_fact(selected) # 'Como Aaron tiene 5 joyas más que la mitad de las joyas de Raymond, tiene 20 + 5 = 25 joyas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Siobhan tiene 2 joyas menos que Aaron.', 'Como Aaron tiene 5 joyas más que la mitad de las joyas de Raymond, tiene 20 + 5 = 25 joyas.']\nnew_fact = infer_new_fact(selected) # 'Si Siobhan tiene 2 joyas menos que Aaron, tiene 25\\xa0-\\xa02 = 23 joyas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántas joyas tiene Siobhan?', 'Si Siobhan tiene 2 joyas menos que Aaron, tiene 25\\xa0-\\xa02 = 23 joyas.']\nnew_fact = infer_new_fact(selected) # 'The answer is 23'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '23'"}
{"id": "GSM8K_35_9fe2535ed9", "context": "", "options": [], "answer": "9", "reasoning_graph_edges": [{"antecedents": [2, 3, 4], "consequent": 6}, {"antecedents": [3, 4, 6], "consequent": 7}, {"antecedents": [2, 5, 7], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent2 & sent3 & sent4 -> int1: He scored 4*.25=1 point more in the second 20 minutes; int1 & sent3 & sent4 -> int2: So he scored 4+1=5 points in the second 20 minutes; int2 & sent2 & sent5 -> int3: So in total, he scored 4+5=9 points in the 40 minutes; int3 & sent5 -> int4: The answer is 9;", "textual_logical_units": {"1": "Mike juega al tenis de mesa durante 40 minutos.", "2": "En los primeros 20 minutos, anota 4 puntos.", "3": "En los siguientes 20 minutos,", "4": "anota un 25 % más de puntos.", "5": "¿Cuántos puntos en total obtuvo?", "6": "Anotó 4 * 0,25 = 1 punto más en los siguientes 20 minutos", "7": "Así que anotó 4 + 1 = 5 puntos en los siguientes 20 minutos", "8": "Así que, en total, anotó 4 + 5 = 9 puntos en los 40 minutos", "9": "The answer is 9"}, "human_translated": true, "code_input": "####\nfacts = [ 'Mike juega al tenis de mesa durante 40 minutos.',\n  'En los primeros 20 minutos, anota 4 puntos.',\n  'En los siguientes 20 minutos,',\n  'anota un 25\\xa0% más de puntos.']\nquestion = '¿Cuántos puntos en total obtuvo?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['En los primeros 20 minutos, anota 4 puntos.', 'En los siguientes 20 minutos,', 'anota un 25\\xa0% más de puntos.']\nnew_fact = infer_new_fact(selected) # 'Anotó 4\\xa0*\\xa00,25 = 1 punto más en los siguientes 20 minutos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En los siguientes 20 minutos,', 'anota un 25\\xa0% más de puntos.', 'Anotó 4\\xa0*\\xa00,25 = 1 punto más en los siguientes 20 minutos']\nnew_fact = infer_new_fact(selected) # 'Así que anotó 4\\xa0+\\xa01 = 5 puntos en los siguientes 20 minutos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En los primeros 20 minutos, anota 4 puntos.', '¿Cuántos puntos en total obtuvo?', 'Así que anotó 4\\xa0+\\xa01 = 5 puntos en los siguientes 20 minutos']\nnew_fact = infer_new_fact(selected) # 'Así que, en total, anotó 4\\xa0+\\xa05\\xa0=\\xa09 puntos en los 40 minutos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos puntos en total obtuvo?', 'Así que, en total, anotó 4\\xa0+\\xa05\\xa0=\\xa09 puntos en los 40 minutos']\nnew_fact = infer_new_fact(selected) # 'The answer is 9'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '9'"}
{"id": "GSM8K_36_c91a135eb6", "context": "", "options": [], "answer": "75", "reasoning_graph_edges": [{"antecedents": [1, 3], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 & sent3 -> int1: He eats 2 yogurts a day so over 30 days he will need 2*30 = 60 yogurts; int1 & sent2 -> int2: The yogurt is sold as 4 units for $5.00 and he needs 60 yogurts so that’s 60/4 = 15 4-packs; int2 & sent3 -> int3: Each 4-pack is $5.00 and he needs 15 4-packs so he will spend $5*15 = $75.00 on yogurt; int3 & sent3 -> int4: The answer is 75;", "textual_logical_units": {"1": "Terry come 2 yogures al día.", "2": "Actualmente se venden 4 yogures por 5,00 €.", "3": "¿Cuánto gasta en yogur en 30 días?", "4": "Come 2 yogures al día, por lo que en 30 días necesitará 2 * 30 = 60 yogures", "5": "El yogur se vende en 4 unidades por 5,00 € y necesita 60 yogures, es decir, 60 / 4 = 15 paquetes de 4", "6": "Cada paquete de 4 cuesta 5,00 € y necesita 15 paquetes de 4, por lo que gastará 5 € * 15 = 75,00 € en yogur", "7": "The answer is 75"}, "human_translated": true, "code_input": "####\nfacts = ['Terry come 2 yogures al día.', 'Actualmente se venden 4 yogures por 5,00\\xa0€.']\nquestion = '¿Cuánto gasta en yogur en 30 días?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Terry come 2 yogures al día.', '¿Cuánto gasta en yogur en 30 días?']\nnew_fact = infer_new_fact(selected) # 'Come 2 yogures al día, por lo que en 30 días necesitará 2\\xa0*\\xa030 = 60 yogures'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Actualmente se venden 4 yogures por 5,00\\xa0€.', 'Come 2 yogures al día, por lo que en 30 días necesitará 2\\xa0*\\xa030 = 60 yogures']\nnew_fact = infer_new_fact(selected) # 'El yogur se vende en 4 unidades por 5,00\\xa0€ y necesita 60 yogures, es decir, 60\\xa0/\\xa04 = 15 paquetes de 4'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto gasta en yogur en 30 días?', 'El yogur se vende en 4 unidades por 5,00\\xa0€ y necesita 60 yogures, es decir, 60\\xa0/\\xa04 = 15 paquetes de 4']\nnew_fact = infer_new_fact(selected) # 'Cada paquete de 4 cuesta 5,00\\xa0€ y necesita 15 paquetes de 4, por lo que gastará 5\\xa0€\\xa0*\\xa015 = 75,00\\xa0€ en yogur'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto gasta en yogur en 30 días?', 'Cada paquete de 4 cuesta 5,00\\xa0€ y necesita 15 paquetes de 4, por lo que gastará 5\\xa0€\\xa0*\\xa015 = 75,00\\xa0€ en yogur']\nnew_fact = infer_new_fact(selected) # 'The answer is 75'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '75'"}
{"id": "GSM8K_37_3afae2bcd4", "context": "", "options": [], "answer": "2", "reasoning_graph_edges": [{"antecedents": [5], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}, {"antecedents": [3, 4, 8], "consequent": 9}, {"antecedents": [3, 6, 9], "consequent": 10}, {"antecedents": [6, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent5 -> int1: He spent $160 on video games because 8 x 20 = 160; int1 & sent5 -> int2: He earned $165 from his sale because 160 + 5 = 165; int2 & sent3 & sent4 -> int3: He sold 11 lego sets because 11 x 15 = 165; int3 & sent3 & sent6 -> int4: He has 2 sets left because 13 - 11 = 2; int4 & sent6 -> int5: The answer is 2;", "textual_logical_units": {"1": "John planea vender todos sus juguetes y", "2": "usar el dinero para comprar videojuegos.", "3": "Tiene 13 juegos de LEGO y", "4": "los vende a 15 € cada uno.", "5": "Termina comprando 8 videojuegos por 20 € cada uno y le quedan 5 €.", "6": "¿Cuántos juegos de LEGO le quedan?", "7": "Gastó 160 € en videojuegos porque 8 × 20 = 160", "8": "Ganó 165 € con su venta porque 160 + 5 = 165", "9": "Vendió 11 juegos de LEGO porque 11 × 15 = 165", "10": "Le quedan 2 juegos porque 13 - 11 = 2", "11": "The answer is 2"}, "human_translated": true, "code_input": "####\nfacts = [ 'John planea vender todos sus juguetes y',\n  'usar el dinero para comprar videojuegos.',\n  'Tiene 13 juegos de LEGO y',\n  'los vende a 15\\xa0€ cada uno.',\n  'Termina comprando 8 videojuegos por 20\\xa0€ cada uno y le quedan 5\\xa0€.']\nquestion = '¿Cuántos juegos de LEGO le quedan?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Termina comprando 8 videojuegos por 20\\xa0€ cada uno y le quedan 5\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Gastó 160\\xa0€ en videojuegos porque 8\\xa0×\\xa020 = 160'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Termina comprando 8 videojuegos por 20\\xa0€ cada uno y le quedan 5\\xa0€.', 'Gastó 160\\xa0€ en videojuegos porque 8\\xa0×\\xa020 = 160']\nnew_fact = infer_new_fact(selected) # 'Ganó 165\\xa0€ con su venta porque 160\\xa0+\\xa05 = 165'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tiene 13 juegos de LEGO y', 'los vende a 15\\xa0€ cada uno.', 'Ganó 165\\xa0€ con su venta porque 160\\xa0+\\xa05 = 165']\nnew_fact = infer_new_fact(selected) # 'Vendió 11 juegos de LEGO porque 11\\xa0×\\xa015 = 165'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tiene 13 juegos de LEGO y', '¿Cuántos juegos de LEGO le quedan?', 'Vendió 11 juegos de LEGO porque 11\\xa0×\\xa015 = 165']\nnew_fact = infer_new_fact(selected) # 'Le quedan 2 juegos porque 13\\xa0-\\xa011 = 2'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos juegos de LEGO le quedan?', 'Le quedan 2 juegos porque 13\\xa0-\\xa011 = 2']\nnew_fact = infer_new_fact(selected) # 'The answer is 2'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '2'"}
{"id": "GSM8K_38_c326316e50", "context": "", "options": [], "answer": "10", "reasoning_graph_edges": [{"antecedents": [0], "consequent": 6}, {"antecedents": [2], "consequent": 7}, {"antecedents": [3, 4], "consequent": 8}, {"antecedents": [3, 8], "consequent": 9}, {"antecedents": [1, 9], "consequent": 10}, {"antecedents": [5, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent0 -> int1: He has 7-1=6 possible running days.; sent2 -> int2: He runs half of those so he runs 6/2=3 days.; sent3 & sent4 -> int3: So for two days, he runs 3/2=1.5 hours.; int3 & sent3 -> int4: So in total, he runs 3+1.5+1.5=6 hours.; int4 & sent1 -> int5: So he runs 60/6=10 mph.; int5 & sent5 -> int6: The answer is 10;", "textual_logical_units": {"1": "John corre 60 kilómetros a la semana.", "2": "Corre 3 días a la semana.", "3": "Corre 3 horas el primer día y", "4": "la mitad los otros dos días que corre.", "5": "¿Qué tan rápido corre?", "6": "Tiene 7 - 1 = 6 días posibles para correr.", "7": "Corre la mitad de esos, por lo que corre 6 / 2 = 3 días.", "8": "Así que en dos días, corre 3 / 2 = 1,5 horas.", "9": "Así que, en total, corre 3 + 1,5 + 1,5 = 6 horas.", "10": "Así que corre a 60 / 6 = 10 km/h.", "11": "The answer is 10"}, "human_translated": true, "code_input": "####\nfacts = ['John corre 60\\xa0kilómetros a la semana.', 'Corre 3 días a la semana.', 'Corre 3 horas el primer día y', 'la mitad los otros dos días que corre.']\nquestion = '¿Qué tan rápido corre?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "[]\nnew_fact = infer_new_fact(selected) # 'Tiene 7\\xa0-\\xa01 = 6 días posibles para correr.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Corre 3 días a la semana.']\nnew_fact = infer_new_fact(selected) # 'Corre la mitad de esos, por lo que corre 6\\xa0/\\xa02 = 3 días.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Corre 3 horas el primer día y', 'la mitad los otros dos días que corre.']\nnew_fact = infer_new_fact(selected) # 'Así que en dos días, corre 3\\xa0/\\xa02 = 1,5\\xa0horas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Corre 3 horas el primer día y', 'Así que en dos días, corre 3\\xa0/\\xa02 = 1,5\\xa0horas.']\nnew_fact = infer_new_fact(selected) # 'Así que, en total, corre 3\\xa0+\\xa01,5\\xa0+\\xa01,5 = 6 horas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['John corre 60\\xa0kilómetros a la semana.', 'Así que, en total, corre 3\\xa0+\\xa01,5\\xa0+\\xa01,5 = 6 horas.']\nnew_fact = infer_new_fact(selected) # 'Así que corre a 60\\xa0/\\xa06 = 10\\xa0km/h.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Qué tan rápido corre?', 'Así que corre a 60\\xa0/\\xa06 = 10\\xa0km/h.']\nnew_fact = infer_new_fact(selected) # 'The answer is 10'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '10'"}
{"id": "GSM8K_39_99b35180d8", "context": "", "options": [], "answer": "18", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 6}, {"antecedents": [1, 5], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}, {"antecedents": [4, 8], "consequent": 9}, {"antecedents": [4, 6, 9], "consequent": 10}, {"antecedents": [7, 8], "consequent": 11}, {"antecedents": [10, 11], "consequent": 12}, {"antecedents": [3, 4, 12], "consequent": 13}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: If Dana can skip at half the speed she can run, then she can run at 3*2=6 miles per hour.; sent1 & sent5 -> int2: And since she can run at a speed that is 4 times faster than she can walk, this means she can walk at 6/4=1.5 miles per hour.; int2 & sent5 -> int3: If two-thirds of the time is spent walking, then she walks for 6*(2/3)=4 hours.; int3 & sent4 -> int4: If one-third of the time is spent running, then she runs for 6-4=2 hours.; int1 & int4 & sent4 -> int5: Thus, she runs for 2 hours at 6 miles per hour, or 2*6=12 miles.; int2 & int3 -> int6: She walks for 4 hours at 1.5 miles per hour, or 4*1.5=6 miles.; int5 & int6 -> int7: Thus, altogether, she travels 12+6=18 miles.; int7 & sent3 & sent4 -> int8: The answer is 18;", "textual_logical_units": {"1": "Dana puede correr a una velocidad cuatro veces más rápida de lo que puede caminar,", "2": "pero puede andar a paso ligero la mitad de rápido de lo que puede correr.", "3": "Si puede andar a paso ligero a 3 kilómetros por hora,", "4": "¿cuántos kilómetros puede recorrer en seis horas si dedica un tercio del tiempo a correr y", "5": "dos tercios del tiempo a caminar?", "6": "Si Dana puede andar a paso ligero a la mitad de la velocidad a la que puede correr, entonces puede correr a 3 * 2 = 6 kilómetros por hora.", "7": "Y dado que puede correr a una velocidad 4 veces más rápida de la que puede caminar, esto significa que puede caminar a 6 / 4 = 1,5 kilómetros por hora.", "8": "Si pasa dos tercios del tiempo caminando, entonces camina durante 6 * (2/3) = 4 horas.", "9": "Si pasa un tercio del tiempo corriendo, entonces corre durante 6 - 4 = 2 horas.", "10": "Por lo tanto, corre durante 2 horas a 6 kilómetros por hora, o 2 * 6 = 12 kilómetros.", "11": "Camina durante 4 horas a 1,5 kilómetros por hora, o 4 * 1,5 = 6 kilómetros.", "12": "Por lo tanto, en total, recorre 12 + 6 = 18 kilómetros.", "13": "The answer is 18"}, "human_translated": true, "code_input": "####\nfacts = [ 'Dana puede correr a una velocidad cuatro veces más rápida de lo que puede caminar,',\n  'pero puede andar a paso ligero la mitad de rápido de lo que puede correr.',\n  'Si puede andar a paso ligero a 3\\xa0kilómetros por hora,',\n  '¿cuántos kilómetros puede recorrer en seis horas si dedica un tercio del tiempo a correr y']\nquestion = 'dos tercios del tiempo a caminar?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['pero puede andar a paso ligero la mitad de rápido de lo que puede correr.', 'Si puede andar a paso ligero a 3\\xa0kilómetros por hora,']\nnew_fact = infer_new_fact(selected) # 'Si Dana puede andar a paso ligero a la mitad de la velocidad a la que puede correr, entonces puede correr a 3\\xa0*\\xa02 = 6\\xa0kilómetros por hora.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Dana puede correr a una velocidad cuatro veces más rápida de lo que puede caminar,', 'dos tercios del tiempo a caminar?']\nnew_fact = infer_new_fact(selected) # 'Y dado que puede correr a una velocidad 4 veces más rápida de la que puede caminar, esto significa que puede caminar a 6\\xa0/\\xa04 = 1,5\\xa0kilómetros por hora.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['dos tercios del tiempo a caminar?', 'Y dado que puede correr a una velocidad 4 veces más rápida de la que puede caminar, esto significa que puede caminar a 6\\xa0/\\xa04 = 1,5\\xa0kilómetros por hora.']\nnew_fact = infer_new_fact(selected) # 'Si pasa dos tercios del tiempo caminando, entonces camina durante 6\\xa0*\\xa0(2/3) = 4\\xa0horas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos kilómetros puede recorrer en seis horas si dedica un tercio del tiempo a correr y', 'Si pasa dos tercios del tiempo caminando, entonces camina durante 6\\xa0*\\xa0(2/3) = 4\\xa0horas.']\nnew_fact = infer_new_fact(selected) # 'Si pasa un tercio del tiempo corriendo, entonces corre durante 6\\xa0-\\xa04 = 2 horas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos kilómetros puede recorrer en seis horas si dedica un tercio del tiempo a correr y', 'Si Dana puede andar a paso ligero a la mitad de la velocidad a la que puede correr, entonces puede correr a 3\\xa0*\\xa02 = 6\\xa0kilómetros por hora.', 'Si pasa un tercio del tiempo corriendo, entonces corre durante 6\\xa0-\\xa04 = 2 horas.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, corre durante 2 horas a 6\\xa0kilómetros por hora, o 2\\xa0*\\xa06 = 12\\xa0kilómetros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Y dado que puede correr a una velocidad 4 veces más rápida de la que puede caminar, esto significa que puede caminar a 6\\xa0/\\xa04 = 1,5\\xa0kilómetros por hora.', 'Si pasa dos tercios del tiempo caminando, entonces camina durante 6\\xa0*\\xa0(2/3) = 4\\xa0horas.']\nnew_fact = infer_new_fact(selected) # 'Camina durante 4\\xa0horas a 1,5\\xa0kilómetros por hora, o 4\\xa0*\\xa01,5 = 6\\xa0kilómetros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Por lo tanto, corre durante 2 horas a 6\\xa0kilómetros por hora, o 2\\xa0*\\xa06 = 12\\xa0kilómetros.', 'Camina durante 4\\xa0horas a 1,5\\xa0kilómetros por hora, o 4\\xa0*\\xa01,5 = 6\\xa0kilómetros.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, en total, recorre 12\\xa0+\\xa06 = 18\\xa0kilómetros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si puede andar a paso ligero a 3\\xa0kilómetros por hora,', '¿cuántos kilómetros puede recorrer en seis horas si dedica un tercio del tiempo a correr y', 'Por lo tanto, en total, recorre 12\\xa0+\\xa06 = 18\\xa0kilómetros.']\nnew_fact = infer_new_fact(selected) # 'The answer is 18'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '18'"}
{"id": "GSM8K_40_4dfa312de8", "context": "", "options": [], "answer": "8", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Ben’s iPhone is 1*2 = 2 years old.; int1 & sent1 -> int2: Brandon’s iPhone is 4*2 = 8 years old.; int2 & sent4 -> int3: The answer is 8;", "textual_logical_units": {"1": "El iPhone de Brandon es cuatro veces más antiguo que el iPhone de Ben.", "2": "El iPhone de Ben es dos veces más antiguo que el iPhone de Suzy.", "3": "Si el iPhone de Suzy tiene 1 año,", "4": "¿cuántos años tiene el iPhone de Brandon?", "5": "El iPhone de Ben tiene 1 * 2 = 2 años.", "6": "El iPhone de Brandon tiene 4 * 2 = 8 años.", "7": "The answer is 8"}, "human_translated": true, "code_input": "####\nfacts = [ 'El iPhone de Brandon es cuatro veces más antiguo que el iPhone de Ben.',\n  'El iPhone de Ben es dos veces más antiguo que el iPhone de Suzy.',\n  'Si el iPhone de Suzy tiene 1 año,']\nquestion = '¿cuántos años tiene el iPhone de Brandon?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['El iPhone de Ben es dos veces más antiguo que el iPhone de Suzy.', 'Si el iPhone de Suzy tiene 1 año,']\nnew_fact = infer_new_fact(selected) # 'El iPhone de Ben tiene 1\\xa0*\\xa02 = 2 años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El iPhone de Brandon es cuatro veces más antiguo que el iPhone de Ben.', 'El iPhone de Ben tiene 1\\xa0*\\xa02 = 2 años.']\nnew_fact = infer_new_fact(selected) # 'El iPhone de Brandon tiene 4\\xa0*\\xa02 = 8 años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos años tiene el iPhone de Brandon?', 'El iPhone de Brandon tiene 4\\xa0*\\xa02 = 8 años.']\nnew_fact = infer_new_fact(selected) # 'The answer is 8'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '8'"}
{"id": "GSM8K_41_e85a06590c", "context": "", "options": [], "answer": "200", "reasoning_graph_edges": [{"antecedents": [5, 8], "consequent": 11}, {"antecedents": [2, 11], "consequent": 12}, {"antecedents": [9, 10, 12], "consequent": 13}], "metadata": [], "linearized_output_en": "sent5 & sent8 -> int1: With the gemstone, Polly could throw the javelin 3 times farther than 400 feet, for a distance of 3*400=1200 feet.; int1 & sent2 -> int2: 1200 feet is beyond the 1000-foot reach of the dragon's flames by a distance of 1200-1000=200 feet.; int2 & sent10 & sent9 -> int3: The answer is 200;", "textual_logical_units": {"1": "El gran dragón, Perg, se sentaba en lo alto del monte Farbo,", "2": "escupiendo fuego sobre cualquier cosa que se encontrase a una distancia de 1000 metros.", "3": "Polly podía lanzar la jabalina dorada,", "4": "la única arma conocida que podía lanzar derribar al dragón,", "5": "a una distancia de 400 metros,", "6": "bien dentro del alcance de las llamas del dragón.", "7": "Pero cuando Polly sostenía la gema de zafiro,", "8": "podía lanzar la jabalina tres veces más lejos que cuando no sujetaba la gema.", "9": "Si sujetara la gema, ¿a qué distancia del alcance de las llamas del dragón podría estar Polly y", "10": "aún así golpear al dragón con la jabalina dorada?", "11": "Con la gema, Polly podría lanzar la jabalina a una distancia 3 veces mayor que 400 metros, es decir, a una distancia de 3 * 400 = 1200 metros.", "12": "1200 metros están más allá del alcance de las llamas del dragón, que es de 1000 metros, por una distancia de 1200 - 1000 = 200 metros.", "13": "The answer is 200"}, "human_translated": true, "code_input": "####\nfacts = [ 'El gran dragón, Perg, se sentaba en lo alto del monte Farbo,',\n  'escupiendo fuego sobre cualquier cosa que se encontrase a una distancia de 1000\\xa0metros.',\n  'Polly podía lanzar la jabalina dorada,',\n  'la única arma conocida que podía lanzar derribar al dragón,',\n  'a una distancia de 400\\xa0metros,',\n  'bien dentro del alcance de las llamas del dragón.',\n  'Pero cuando Polly sostenía la gema de zafiro,',\n  'podía lanzar la jabalina tres veces más lejos que cuando no sujetaba la gema.',\n  'Si sujetara la gema, ¿a qué distancia del alcance de las llamas del dragón podría estar Polly y']\nquestion = 'aún así golpear al dragón con la jabalina dorada?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['a una distancia de 400\\xa0metros,', 'podía lanzar la jabalina tres veces más lejos que cuando no sujetaba la gema.']\nnew_fact = infer_new_fact(selected) # 'Con la gema, Polly podría lanzar la jabalina a una distancia 3\\xa0veces mayor que 400\\xa0metros, es decir, a una distancia de 3\\xa0*\\xa0400 = 1200\\xa0metros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['escupiendo fuego sobre cualquier cosa que se encontrase a una distancia de 1000\\xa0metros.', 'Con la gema, Polly podría lanzar la jabalina a una distancia 3\\xa0veces mayor que 400\\xa0metros, es decir, a una distancia de 3\\xa0*\\xa0400 = 1200\\xa0metros.']\nnew_fact = infer_new_fact(selected) # '1200\\xa0metros están más allá del alcance de las llamas del dragón, que es de 1000\\xa0metros, por una distancia de 1200\\xa0-\\xa01000 = 200 metros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si sujetara la gema, ¿a qué distancia del alcance de las llamas del dragón podría estar Polly y', 'aún así golpear al dragón con la jabalina dorada?', '1200\\xa0metros están más allá del alcance de las llamas del dragón, que es de 1000\\xa0metros, por una distancia de 1200\\xa0-\\xa01000 = 200 metros.']\nnew_fact = infer_new_fact(selected) # 'The answer is 200'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '200'"}
{"id": "GSM8K_42_0e55dd01d6", "context": "", "options": [], "answer": "26", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 9}, {"antecedents": [7, 8, 9], "consequent": 10}, {"antecedents": [8, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: To start the evening, there were 5 pies, each with 8 pieces, which is 5*8=40 pieces of pie.; int1 & sent7 & sent8 -> int2: If only 14 remained, then 40-14=26 pieces of pie had been taken by guests.; int2 & sent8 -> int3: The answer is 26;", "textual_logical_units": {"1": "La abuela Jones horneó 5 tartas de manzana para el almuerzo de los bomberos.", "2": "Cortó cada tarta en 8 trozos y", "3": "colocó los cinco pasteles sobre la mesa del bufé para que los invitados se sirviesen ellos mismos.", "4": "Al final de la noche,", "5": "después de que los invitados se hubiesen servido y", "6": "comido sus trozos de tarta,", "7": "quedaban 14 trozos de tarta.", "8": "¿Cuántos trozos se llevaron los invitados?", "9": "Al principio de la noche, había 5 tartas, cada una con 8 trozos, lo que equivale a 5 * 8 = 40 trozos de tarta.", "10": "Si solo quedaban 14, los invitados se habían servido 40 - 14 = 26 trozos de tarta.", "11": "The answer is 26"}, "human_translated": true, "code_input": "####\nfacts = [ 'La abuela Jones horneó 5 tartas de manzana para el almuerzo de los bomberos.',\n  'Cortó cada tarta en 8 trozos y',\n  'colocó los cinco pasteles sobre la mesa del bufé para que los invitados se sirviesen ellos mismos.',\n  'Al final de la noche,',\n  'después de que los invitados se hubiesen servido y',\n  'comido sus trozos de tarta,',\n  'quedaban 14 trozos de tarta.']\nquestion = '¿Cuántos trozos se llevaron los invitados?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['La abuela Jones horneó 5 tartas de manzana para el almuerzo de los bomberos.', 'Cortó cada tarta en 8 trozos y']\nnew_fact = infer_new_fact(selected) # 'Al principio de la noche, había 5 tartas, cada una con 8 trozos, lo que equivale a 5\\xa0*\\xa08 = 40 trozos de tarta.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['quedaban 14 trozos de tarta.', '¿Cuántos trozos se llevaron los invitados?', 'Al principio de la noche, había 5 tartas, cada una con 8 trozos, lo que equivale a 5\\xa0*\\xa08 = 40 trozos de tarta.']\nnew_fact = infer_new_fact(selected) # 'Si solo quedaban 14, los invitados se habían servido 40\\xa0-\\xa014 = 26 trozos de tarta.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos trozos se llevaron los invitados?', 'Si solo quedaban 14, los invitados se habían servido 40\\xa0-\\xa014 = 26 trozos de tarta.']\nnew_fact = infer_new_fact(selected) # 'The answer is 26'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '26'"}
{"id": "GSM8K_43_0d9cbd33eb", "context": "", "options": [], "answer": "48", "reasoning_graph_edges": [{"antecedents": [4, 5], "consequent": 6}, {"antecedents": [2, 4, 6], "consequent": 7}, {"antecedents": [3], "consequent": 8}, {"antecedents": [7, 8], "consequent": 9}, {"antecedents": [4, 5, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent4 & sent5 -> int1: If the total calorie target is 2000 and I have consumed 1800 calories then I have 2000-1800 = 200 calories left to eat; int1 & sent2 & sent4 -> int2: If each serving of chips has 250 calories and I only have 200 calories left to eat, then I can only eat 200/250 of a serving = 4/5 of a serving; sent3 -> int3: We also know that a 300g bag of chips has 5 servings, hence each serving has 300g/5 = 60 grams; int2 & int3 -> int4: If I can only eat 4/5 of a serving, then I can eat only 60g * 4/5 = 240g/5 = 48 grams; int4 & sent4 & sent5 -> int5: The answer is 48;", "textual_logical_units": {"1": "Según su información nutricional,", "2": "una bolsa de patatas fritas tiene 250 calorías por ración.", "3": "Si una bolsa de 300 g contiene 5 raciones,", "4": "¿cuántos gramos puedes comer si tu objetivo diario de calorías es de 2000 y", "5": "ya has consumido 1800 calorías?", "6": "Si el objetivo total de calorías es de 2000 y he consumido 1800 calorías, entonces me quedan 2000 - 1800 = 200 calorías por comer", "7": "Si cada ración de patatas fritas tiene 250 calorías y solo me quedan 200 calorías por comer, entonces solo puedo comer 200 / 250 de una ración = 4/5 de una ración", "8": "También sabemos que una bolsa de patatas fritas de 300 g tiene 5 ración, por lo que cada ración tiene 300 g/5 = 60 gramos", "9": "Si solo puedo comer 4/5 de una ración, entonces solo puedo comer 60 g * 4/5 = 240 g/5 = 48 gramos", "10": "The answer is 48"}, "human_translated": true, "code_input": "####\nfacts = [ 'Según su información nutricional,',\n  'una bolsa de patatas fritas tiene 250 calorías por ración.',\n  'Si una bolsa de 300\\xa0g contiene 5 raciones,',\n  '¿cuántos gramos puedes comer si tu objetivo diario de calorías es de 2000 y']\nquestion = 'ya has consumido 1800 calorías?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['¿cuántos gramos puedes comer si tu objetivo diario de calorías es de 2000 y', 'ya has consumido 1800 calorías?']\nnew_fact = infer_new_fact(selected) # 'Si el objetivo total de calorías es de 2000 y he consumido 1800 calorías, entonces me quedan 2000\\xa0-\\xa01800 = 200 calorías por comer'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['una bolsa de patatas fritas tiene 250 calorías por ración.', '¿cuántos gramos puedes comer si tu objetivo diario de calorías es de 2000 y', 'Si el objetivo total de calorías es de 2000 y he consumido 1800 calorías, entonces me quedan 2000\\xa0-\\xa01800 = 200 calorías por comer']\nnew_fact = infer_new_fact(selected) # 'Si cada ración de patatas fritas tiene 250 calorías y solo me quedan 200 calorías por comer, entonces solo puedo comer 200\\xa0/\\xa0250 de una ración = 4/5 de una ración'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si una bolsa de 300\\xa0g contiene 5 raciones,']\nnew_fact = infer_new_fact(selected) # 'También sabemos que una bolsa de patatas fritas de 300\\xa0g tiene 5 ración, por lo que cada ración tiene 300\\xa0g/5 = 60\\xa0gramos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si cada ración de patatas fritas tiene 250 calorías y solo me quedan 200 calorías por comer, entonces solo puedo comer 200\\xa0/\\xa0250 de una ración = 4/5 de una ración', 'También sabemos que una bolsa de patatas fritas de 300\\xa0g tiene 5 ración, por lo que cada ración tiene 300\\xa0g/5 = 60\\xa0gramos']\nnew_fact = infer_new_fact(selected) # 'Si solo puedo comer 4/5 de una ración, entonces solo puedo comer 60\\xa0g\\xa0*\\xa04/5 = 240\\xa0g/5 = 48 gramos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos gramos puedes comer si tu objetivo diario de calorías es de 2000 y', 'ya has consumido 1800 calorías?', 'Si solo puedo comer 4/5 de una ración, entonces solo puedo comer 60\\xa0g\\xa0*\\xa04/5 = 240\\xa0g/5 = 48 gramos']\nnew_fact = infer_new_fact(selected) # 'The answer is 48'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '48'"}
{"id": "GSM8K_44_40def09442", "context": "", "options": [], "answer": "20", "reasoning_graph_edges": [{"antecedents": [2, 3, 7], "consequent": 8}, {"antecedents": [4, 5, 8], "consequent": 9}, {"antecedents": [6, 7], "consequent": 10}, {"antecedents": [7, 9, 10], "consequent": 11}, {"antecedents": [7, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent2 & sent3 & sent7 -> int1: 1 pound of beeswax and the wick make 10 candles and he wants to make 20 candles so he needs 20/10 = 2 pounds of beeswax; int1 & sent4 & sent5 -> int2: 1 pound of beeswax costs $10.00 and he needs 2 pounds so his supplies will cost 10*2 = $20.00; sent6 & sent7 -> int3: He wants to sell each candle for $2.00 each and he's selling 20 candles so that's 2*20 = $40.00; int2 & int3 & sent7 -> int4: If he makes $40.00 selling candles and his supplies cost $20.00 then his net profit is 40-20 = $20.00; int4 & sent7 -> int5: The answer is 20;", "textual_logical_units": {"1": "Charlie quiere vender velas de cera de abejas.", "2": "Por cada kilo de cera de abejas,", "3": "puede hacer 10 velas cónicas.", "4": "Un kilo de cera de abejas y", "5": "las mechas cuestan 10,00 € en suministros.", "6": "Si vende cada vela a 2,00 € cada una,", "7": "¿Cuál es su beneficio neto si fabrica y vende 20 velas?", "8": "1 kilo de cera de abejas y la mecha hacen 10 velas y quiere hacer 20 velas, por lo que necesita 20 / 10 = 2 kilos de cera de abejas", "9": "1 kilo de cera de abejas cuesta 10,00 € y necesita 2 kilos, por lo que sus suministros costarán 10 * 2 = 20,00 €", "10": "Quiere vender cada vela a 2,00 € cada una y va a vender 20 velas, es decir, 2 * 20 = 40,00 €", "11": "Si gana 40,00 € vendiendo velas y sus suministros cuestan 20,00 €, entonces su beneficio neto es de 40 - 20 € = 20,00 €", "12": "The answer is 20"}, "human_translated": true, "code_input": "####\nfacts = [ 'Charlie quiere vender velas de cera de abejas.',\n  'Por cada kilo de cera de abejas,',\n  'puede hacer 10 velas cónicas.',\n  'Un kilo de cera de abejas y',\n  'las mechas cuestan 10,00\\xa0€ en suministros.',\n  'Si vende cada vela a 2,00\\xa0€ cada una,']\nquestion = '¿Cuál es su beneficio neto si fabrica y vende 20 velas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Por cada kilo de cera de abejas,', 'puede hacer 10 velas cónicas.', '¿Cuál es su beneficio neto si fabrica y vende 20 velas?']\nnew_fact = infer_new_fact(selected) # '1 kilo de cera de abejas y la mecha hacen 10 velas y quiere hacer 20 velas, por lo que necesita 20\\xa0/\\xa010 = 2 kilos de cera de abejas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Un kilo de cera de abejas y', 'las mechas cuestan 10,00\\xa0€ en suministros.', '1 kilo de cera de abejas y la mecha hacen 10 velas y quiere hacer 20 velas, por lo que necesita 20\\xa0/\\xa010 = 2 kilos de cera de abejas']\nnew_fact = infer_new_fact(selected) # '1 kilo de cera de abejas cuesta 10,00\\xa0€ y necesita 2 kilos, por lo que sus suministros costarán 10\\xa0*\\xa02 = 20,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si vende cada vela a 2,00\\xa0€ cada una,', '¿Cuál es su beneficio neto si fabrica y vende 20 velas?']\nnew_fact = infer_new_fact(selected) # 'Quiere vender cada vela a 2,00\\xa0€ cada una y va a vender 20 velas, es decir, 2\\xa0*\\xa020 = 40,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál es su beneficio neto si fabrica y vende 20 velas?', '1 kilo de cera de abejas cuesta 10,00\\xa0€ y necesita 2 kilos, por lo que sus suministros costarán 10\\xa0*\\xa02 = 20,00\\xa0€', 'Quiere vender cada vela a 2,00\\xa0€ cada una y va a vender 20 velas, es decir, 2\\xa0*\\xa020 = 40,00\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Si gana 40,00\\xa0€ vendiendo velas y sus suministros cuestan 20,00\\xa0€, entonces su beneficio neto es de 40\\xa0-\\xa020\\xa0€ = 20,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál es su beneficio neto si fabrica y vende 20 velas?', 'Si gana 40,00\\xa0€ vendiendo velas y sus suministros cuestan 20,00\\xa0€, entonces su beneficio neto es de 40\\xa0-\\xa020\\xa0€ = 20,00\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 20'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '20'"}
{"id": "GSM8K_45_b52a924542", "context": "", "options": [], "answer": "104", "reasoning_graph_edges": [{"antecedents": [4, 5], "consequent": 8}, {"antecedents": [8], "consequent": 9}, {"antecedents": [6, 9], "consequent": 10}, {"antecedents": [4, 9, 10], "consequent": 11}, {"antecedents": [3, 7, 11], "consequent": 12}, {"antecedents": [7, 12], "consequent": 13}], "metadata": [], "linearized_output_en": "sent4 & sent5 -> int1: If she wrote five articles on Monday, then on Tuesday she wrote 2/5* 5 = 2 more articles.; int1 -> int2: The total number of articles she wrote on Tuesday is 5+2 = 7; int2 & sent6 -> int3: On Wednesday, the number of articles was twice the number she wrote on Tuesday, so it was 2*7 = 14 articles.; int2 & int3 & sent4 -> int4: Over the three days, she wrote 5+7 +14 = 26 articles.; int4 & sent3 & sent7 -> int5: If each article takes her 4 hours to research and write about, she spent 4*26 = 104 hours on all the articles.; int5 & sent7 -> int6: The answer is 104;", "textual_logical_units": {"1": "Meredith es una bloguera independiente que escribe sobre temas de salud y", "2": "los envía a los clientes todos los días, lo cual es su trabajo permanente.", "3": "Un artículo de blog conlleva un promedio de 4 horas de investigación y escritura.", "4": "La semana pasada, escribió 5 artículos el lunes y", "5": "2/5 veces más artículos el martes que el lunes.", "6": "El miércoles escribió el doble de artículos que el martes.", "7": "Calcula el número total de horas que pasó escribiendo artículos en los tres días.", "8": "Si escribió cinco artículos el lunes, el martes escribió 2/5 * 5 = 2 artículos más.", "9": "El número total de artículos que escribió el martes es 5 + 2 = 7", "10": "El miércoles, el número de artículos era el doble del número que escribió el martes, es decir, 2 * 7 = 14 artículos.", "11": "Durante los tres días, escribió 5 + 7 + 14 = 26 artículos.", "12": "Si cada artículo le conlleva 4 horas de investigación y escritura, dedicó 4 * 26 = 104 horas a todos los artículos.", "13": "The answer is 104"}, "human_translated": true, "code_input": "####\nfacts = [ 'Meredith es una bloguera independiente que escribe sobre temas de salud y',\n  'los envía a los clientes todos los días, lo cual es su trabajo permanente.',\n  'Un artículo de blog conlleva un promedio de 4 horas de investigación y escritura.',\n  'La semana pasada, escribió 5 artículos el lunes y',\n  '2/5 veces más artículos el martes que el lunes.',\n  'El miércoles escribió el doble de artículos que el martes.']\nquestion = 'Calcula el número total de horas que pasó escribiendo artículos en los tres días.'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['La semana pasada, escribió 5 artículos el lunes y', '2/5 veces más artículos el martes que el lunes.']\nnew_fact = infer_new_fact(selected) # 'Si escribió cinco artículos el lunes, el martes escribió 2/5\\xa0*\\xa05 = 2 artículos más.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si escribió cinco artículos el lunes, el martes escribió 2/5\\xa0*\\xa05 = 2 artículos más.']\nnew_fact = infer_new_fact(selected) # 'El número total de artículos que escribió el martes es 5\\xa0+\\xa02 = 7'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El miércoles escribió el doble de artículos que el martes.', 'El número total de artículos que escribió el martes es 5\\xa0+\\xa02 = 7']\nnew_fact = infer_new_fact(selected) # 'El miércoles, el número de artículos era el doble del número que escribió el martes, es decir, 2\\xa0*\\xa07 = 14 artículos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La semana pasada, escribió 5 artículos el lunes y', 'El número total de artículos que escribió el martes es 5\\xa0+\\xa02 = 7', 'El miércoles, el número de artículos era el doble del número que escribió el martes, es decir, 2\\xa0*\\xa07 = 14 artículos.']\nnew_fact = infer_new_fact(selected) # 'Durante los tres días, escribió 5\\xa0+\\xa07\\xa0+\\xa014 = 26 artículos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Un artículo de blog conlleva un promedio de 4 horas de investigación y escritura.', 'Calcula el número total de horas que pasó escribiendo artículos en los tres días.', 'Durante los tres días, escribió 5\\xa0+\\xa07\\xa0+\\xa014 = 26 artículos.']\nnew_fact = infer_new_fact(selected) # 'Si cada artículo le conlleva 4 horas de investigación y escritura, dedicó 4\\xa0*\\xa026 = 104 horas a todos los artículos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Calcula el número total de horas que pasó escribiendo artículos en los tres días.', 'Si cada artículo le conlleva 4 horas de investigación y escritura, dedicó 4\\xa0*\\xa026 = 104 horas a todos los artículos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 104'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '104'"}
{"id": "GSM8K_46_c1d08edad8", "context": "", "options": [], "answer": "163", "reasoning_graph_edges": [{"antecedents": [6], "consequent": 7}, {"antecedents": [1, 7], "consequent": 8}, {"antecedents": [4, 5, 8], "consequent": 9}, {"antecedents": [9], "consequent": 10}, {"antecedents": [6, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent6 -> int1: Let's let x be the number of post-it notes in the package that Candice purchased.; int1 & sent1 -> int2: Then, the total number of post-it notes she had when she left the store was 80+x.; int2 & sent4 & sent5 -> int3: And if she used 220 Post-it notes at work and had 23 left, then 80+x=220+23; int3 -> int4: Subtracting 80 from each side of the equation, we see that x=220+23-80=163 Post-it notes.; int4 & sent6 -> int5: The answer is 163;", "textual_logical_units": {"1": "Candice puso 80 notas adhesivas en su bolso antes de ir a trabajar a la cafetería.", "2": "De camino, se detuvo en la tienda y", "3": "compró un paquete de notas adhesivas; en el trabajo,", "4": "puso una sola nota adhesiva en cada una de las 220 tazas de café diferentes.", "5": "Si le quedaban 23 notas adhesivas en total,", "6": "¿cuántas notas adhesivas había en el paquete que compró?", "7": "Supongamos que x es el número de notas adhesivas en el paquete que compró Candice.", "8": "Entonces, el número total de notas adhesivas que tenía cuando salió de la tienda era 80 + x.", "9": "Y si usó 220 notas adhesivas en el trabajo y le quedaban 23, entonces 80 + x = 220 + 23", "10": "Al restar 80 de cada lado de la ecuación, vemos que x =220 + 23 - 80 = 163 notas adhesivas.", "11": "The answer is 163"}, "human_translated": true, "code_input": "####\nfacts = [ 'Candice puso 80 notas adhesivas en su bolso antes de ir a trabajar a la cafetería.',\n  'De camino, se detuvo en la tienda y',\n  'compró un paquete de notas adhesivas; en el trabajo,',\n  'puso una sola nota adhesiva en cada una de las 220 tazas de café diferentes.',\n  'Si le quedaban 23 notas adhesivas en total,']\nquestion = '¿cuántas notas adhesivas había en el paquete que compró?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['¿cuántas notas adhesivas había en el paquete que compró?']\nnew_fact = infer_new_fact(selected) # 'Supongamos que\\xa0x\\xa0es el número de notas adhesivas en el paquete que compró Candice.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Candice puso 80 notas adhesivas en su bolso antes de ir a trabajar a la cafetería.', 'Supongamos que\\xa0x\\xa0es el número de notas adhesivas en el paquete que compró Candice.']\nnew_fact = infer_new_fact(selected) # 'Entonces, el número total de notas adhesivas que tenía cuando salió de la tienda era 80\\xa0+\\xa0x.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['puso una sola nota adhesiva en cada una de las 220 tazas de café diferentes.', 'Si le quedaban 23 notas adhesivas en total,', 'Entonces, el número total de notas adhesivas que tenía cuando salió de la tienda era 80\\xa0+\\xa0x.']\nnew_fact = infer_new_fact(selected) # 'Y si usó 220 notas adhesivas en el trabajo y le quedaban 23, entonces 80\\xa0+\\xa0x\\xa0=\\xa0220\\xa0+\\xa023'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Y si usó 220 notas adhesivas en el trabajo y le quedaban 23, entonces 80\\xa0+\\xa0x\\xa0=\\xa0220\\xa0+\\xa023']\nnew_fact = infer_new_fact(selected) # 'Al restar 80 de cada lado de la ecuación, vemos que x\\xa0=220\\xa0+\\xa023\\xa0-\\xa080\\xa0=\\xa0163 notas adhesivas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántas notas adhesivas había en el paquete que compró?', 'Al restar 80 de cada lado de la ecuación, vemos que x\\xa0=220\\xa0+\\xa023\\xa0-\\xa080\\xa0=\\xa0163 notas adhesivas.']\nnew_fact = infer_new_fact(selected) # 'The answer is 163'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '163'"}
{"id": "GSM8K_47_6e4d497caa", "context": "", "options": [], "answer": "800", "reasoning_graph_edges": [{"antecedents": [3], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [2, 3], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}, {"antecedents": [6, 8], "consequent": 9}, {"antecedents": [3, 4, 9], "consequent": 10}, {"antecedents": [4, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent3 -> int1: He bought 200 / 40 = 5 blue ties; int1 & sent1 -> int2: So he bought 5 * 2 = 10 red ties; sent2 & sent3 -> int3: Each red tie cost $40 * .5 = $20 more than blue ties; int3 & sent3 -> int4: So they each cost $40 + $20 = $60; int2 & int4 -> int5: So he spent $60 * 10 = $600 on red ties; int5 & sent3 & sent4 -> int6: So he spent $200 + $600 = $800 on ties; int6 & sent4 -> int7: The answer is 800;", "textual_logical_units": {"1": "John compra el doble de corbatas rojas que de azules.", "2": "Las corbatas rojas cuestan un 50 % más que las azules.", "3": "Gastó 200 € en corbatas azules que costaban 40 € cada una.", "4": "¿Cuánto gastó en corbatas?", "5": "Compró 200 / 40 = 5 corbatas azules", "6": "Así que compró 5 * 2 = 10 corbatas rojas", "7": "Cada corbata roja cuesta 40 € * 0,5 € = 20 € más que las corbatas azules", "8": "Así que cada una cuesta 40 € + 20 € = 60 €", "9": "Así que gastó 60 € * 10 = 600 € en corbatas rojas", "10": "Así que gastó 200 € + 600 € = 800 € en corbatas", "11": "The answer is 800"}, "human_translated": true, "code_input": "####\nfacts = [ 'John compra el doble de corbatas rojas que de azules.',\n  'Las corbatas rojas cuestan un 50\\xa0% más que las azules.',\n  'Gastó 200\\xa0€ en corbatas azules que costaban 40\\xa0€ cada una.']\nquestion = '¿Cuánto gastó en corbatas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Gastó 200\\xa0€ en corbatas azules que costaban 40\\xa0€ cada una.']\nnew_fact = infer_new_fact(selected) # 'Compró 200\\xa0/\\xa040 = 5 corbatas azules'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['John compra el doble de corbatas rojas que de azules.', 'Compró 200\\xa0/\\xa040 = 5 corbatas azules']\nnew_fact = infer_new_fact(selected) # 'Así que compró 5\\xa0*\\xa02 = 10 corbatas rojas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Las corbatas rojas cuestan un 50\\xa0% más que las azules.', 'Gastó 200\\xa0€ en corbatas azules que costaban 40\\xa0€ cada una.']\nnew_fact = infer_new_fact(selected) # 'Cada corbata roja cuesta 40\\xa0€\\xa0*\\xa00,5\\xa0€ = 20\\xa0€ más que las corbatas azules'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Gastó 200\\xa0€ en corbatas azules que costaban 40\\xa0€ cada una.', 'Cada corbata roja cuesta 40\\xa0€\\xa0*\\xa00,5\\xa0€ = 20\\xa0€ más que las corbatas azules']\nnew_fact = infer_new_fact(selected) # 'Así que cada una cuesta 40\\xa0€\\xa0+\\xa020\\xa0€ = 60\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Así que compró 5\\xa0*\\xa02 = 10 corbatas rojas', 'Así que cada una cuesta 40\\xa0€\\xa0+\\xa020\\xa0€ = 60\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Así que gastó 60\\xa0€\\xa0*\\xa010 = 600\\xa0€ en corbatas rojas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Gastó 200\\xa0€ en corbatas azules que costaban 40\\xa0€ cada una.', '¿Cuánto gastó en corbatas?', 'Así que gastó 60\\xa0€\\xa0*\\xa010 = 600\\xa0€ en corbatas rojas']\nnew_fact = infer_new_fact(selected) # 'Así que gastó 200\\xa0€\\xa0+\\xa0600\\xa0€ = 800\\xa0€ en corbatas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto gastó en corbatas?', 'Así que gastó 200\\xa0€\\xa0+\\xa0600\\xa0€ = 800\\xa0€ en corbatas']\nnew_fact = infer_new_fact(selected) # 'The answer is 800'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '800'"}
{"id": "GSM8K_48_fb3fb38853", "context": "", "options": [], "answer": "8", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 4}, {"antecedents": [2, 3, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 -> int1: If Tracy used a piece of wire 4 feet long, since 1 foot is equal to 12 inches, the total length of the wire in inches was 12*4=48 inches.; int1 & sent2 & sent3 -> int2: Since the wire was cut into pieces 6 inches long, Tracy obtained 48/6=8 pieces; int2 & sent3 -> int3: The answer is 8;", "textual_logical_units": {"1": "Tracy usó un trozo de alambre de 1 metro de largo para sostener las tomateras del jardín.", "2": "El alambre se cortó en trozos de 10 centímetros de largo.", "3": "¿Cuántos trozos obtuvo?", "4": "Si Tracy utilizaba un trozo de alambre de 1 metro de largo, ya que 1 metro equivale a 100 centímetros, la longitud total del alambre en centímetros era de 100 * 1 = 100 centímetros.", "5": "Como el alambre se cortó en trozos de 10 centímetros largo, Tracy obtuvo 100 / 10 = 10 trozos", "6": "The answer is 8"}, "human_translated": true, "code_input": "####\nfacts = ['Tracy usó un trozo de alambre de 1 metro de largo para sostener las tomateras del jardín.', 'El alambre se cortó en trozos de 10 centímetros de largo.']\nquestion = '¿Cuántos trozos obtuvo?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Tracy usó un trozo de alambre de 1 metro de largo para sostener las tomateras del jardín.']\nnew_fact = infer_new_fact(selected) # 'Si Tracy utilizaba un trozo de alambre de 1 metro de largo, ya que 1 metro equivale a 100 centímetros, la longitud total del alambre en centímetros era de 100\\xa0*\\xa01 = 100 centímetros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El alambre se cortó en trozos de 10 centímetros de largo.', '¿Cuántos trozos obtuvo?', 'Si Tracy utilizaba un trozo de alambre de 1 metro de largo, ya que 1 metro equivale a 100 centímetros, la longitud total del alambre en centímetros era de 100\\xa0*\\xa01 = 100 centímetros.']\nnew_fact = infer_new_fact(selected) # 'Como el alambre se cortó en trozos de 10 centímetros largo, Tracy obtuvo 100\\xa0/\\xa010 = 10 trozos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos trozos obtuvo?', 'Como el alambre se cortó en trozos de 10 centímetros largo, Tracy obtuvo 100\\xa0/\\xa010 = 10 trozos']\nnew_fact = infer_new_fact(selected) # 'The answer is 8'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '8'"}
{"id": "GSM8K_49_856ec86627", "context": "", "options": [], "answer": "30", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [4, 5, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: The total number of units in the building will be 8 units/floor * 15 floors = 120 units.; int1 & sent3 -> int2: If 3/4 of the building is occupied, then the total number of occupied units is 3/4 * 120 units = 90 units.; int1 & int2 & sent4 -> int3: The total number of unoccupied units is 120 units - 90 units = 30 units.; int3 & sent4 -> int4: The answer is 30;", "textual_logical_units": {"1": "Richard vive en un edificio de apartamentos de 15 pisos.", "2": "Cada planta contiene 8 apartamentos,", "3": "y 3/4 del edificio están ocupados.", "4": "¿Cuál es el número total de apartamentos desocupados en el edificio?", "5": "El número total de apartamentos en el edificio será de 8 apartamentos/piso * 15 pisos = 120 apartamentos.", "6": "Si 3/4 del edificio están ocupados, el número total de apartamentos ocupados es 3/4 * 120 apartamentos = 90 apartamentos.", "7": "El número total de apartamentos desocupados es de 120 apartamentos - 90 apartamentos = 30 apartamentos.", "8": "The answer is 30"}, "human_translated": true, "code_input": "####\nfacts = ['Richard vive en un edificio de apartamentos de 15 pisos.', 'Cada planta contiene 8 apartamentos,', 'y 3/4 del edificio están ocupados.']\nquestion = '¿Cuál es el número total de apartamentos desocupados en el edificio?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Richard vive en un edificio de apartamentos de 15 pisos.', 'Cada planta contiene 8 apartamentos,']\nnew_fact = infer_new_fact(selected) # 'El número total de apartamentos en el edificio será de 8 apartamentos/piso\\xa0*\\xa015 pisos = 120 apartamentos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y 3/4 del edificio están ocupados.', 'El número total de apartamentos en el edificio será de 8 apartamentos/piso\\xa0*\\xa015 pisos = 120 apartamentos.']\nnew_fact = infer_new_fact(selected) # 'Si 3/4 del edificio están ocupados, el número total de apartamentos ocupados es 3/4\\xa0*\\xa0120 apartamentos = 90 apartamentos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál es el número total de apartamentos desocupados en el edificio?', 'El número total de apartamentos en el edificio será de 8 apartamentos/piso\\xa0*\\xa015 pisos = 120 apartamentos.', 'Si 3/4 del edificio están ocupados, el número total de apartamentos ocupados es 3/4\\xa0*\\xa0120 apartamentos = 90 apartamentos.']\nnew_fact = infer_new_fact(selected) # 'El número total de apartamentos desocupados es de 120 apartamentos\\xa0-\\xa090 apartamentos = 30 apartamentos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál es el número total de apartamentos desocupados en el edificio?', 'El número total de apartamentos desocupados es de 120 apartamentos\\xa0-\\xa090 apartamentos = 30 apartamentos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 30'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '30'"}
{"id": "GSM8K_50_be1b78e251", "context": "", "options": [], "answer": "294", "reasoning_graph_edges": [{"antecedents": [2, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [3, 4, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 & sent4 -> int1: In a week, Lloyd's egg farm produces 252 x 7 = 1764 eggs.; int1 & sent3 -> int2: There are 1764/12 = 147 dozens of eggs produced in a week.; int2 & sent3 & sent4 -> int3: So, Lloyd makes 147 x $2 = $294 on eggs.; int3 & sent4 -> int4: The answer is 294;", "textual_logical_units": {"1": "Lloyd tiene una granja de huevos.", "2": "Sus gallinas producen 252 huevos al día y", "3": "los vende a 2 € la docena.", "4": "¿Cuánto gana Lloyd con huevos a la semana?", "5": "En una semana, la granja de huevos de Lloyd produce 252 × 7 = 1764 huevos.", "6": "Se producen 1764 / 12 = 147 docenas de huevos a la semana.", "7": "Entonces, Lloyd gana 147 × 2 € = 294 € con los huevos.", "8": "The answer is 294"}, "human_translated": true, "code_input": "####\nfacts = ['Lloyd tiene una granja de huevos.', 'Sus gallinas producen 252 huevos al día y', 'los vende a 2\\xa0€ la docena.']\nquestion = '¿Cuánto gana Lloyd con huevos a la semana?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Sus gallinas producen 252 huevos al día y', '¿Cuánto gana Lloyd con huevos a la semana?']\nnew_fact = infer_new_fact(selected) # 'En una semana, la granja de huevos de Lloyd produce 252\\xa0×\\xa07 = 1764 huevos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['los vende a 2\\xa0€ la docena.', 'En una semana, la granja de huevos de Lloyd produce 252\\xa0×\\xa07 = 1764 huevos.']\nnew_fact = infer_new_fact(selected) # 'Se producen 1764\\xa0/\\xa012 = 147 docenas de huevos a la semana.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['los vende a 2\\xa0€ la docena.', '¿Cuánto gana Lloyd con huevos a la semana?', 'Se producen 1764\\xa0/\\xa012 = 147 docenas de huevos a la semana.']\nnew_fact = infer_new_fact(selected) # 'Entonces, Lloyd gana 147\\xa0×\\xa02\\xa0€ =\\xa0294\\xa0€ con los huevos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto gana Lloyd con huevos a la semana?', 'Entonces, Lloyd gana 147\\xa0×\\xa02\\xa0€ =\\xa0294\\xa0€ con los huevos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 294'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '294'"}
{"id": "GSM8K_51_e4757b3475", "context": "", "options": [], "answer": "5", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [3, 4, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 -> int1: He was travelling at full speed for 4-1=3 hours; int1 & sent1 -> int2: So he went 3*10=30 miles; int2 & sent3 & sent4 -> int3: That means it takes 30/6=5 hours to get back; int3 & sent4 -> int4: The answer is 5;", "textual_logical_units": {"1": "El barco de Tom puede viajar a 10 kilómetros por hora.", "2": "Navega desde la 13:00 h hasta las 16:00 h.", "3": "Luego, viaja de regreso a una velocidad de 6 km/h.", "4": "¿Cuánto tardará en volver?", "5": "Viajó a toda velocidad durante 4 - 1=3 horas", "6": "Así que recorrió 3 * 10 = 30 kilómetros", "7": "Eso significa que se tarda 30 / 6 = 5 horas en regresar", "8": "The answer is 5"}, "human_translated": true, "code_input": "####\nfacts = [ 'El barco de Tom puede viajar a 10\\xa0kilómetros por hora.',\n  'Navega desde la 13:00\\xa0h hasta las 16:00\\xa0h.',\n  'Luego, viaja de regreso a una velocidad de 6\\xa0km/h.']\nquestion = '¿Cuánto tardará en volver?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Navega desde la 13:00\\xa0h hasta las 16:00\\xa0h.']\nnew_fact = infer_new_fact(selected) # 'Viajó a toda velocidad durante 4\\xa0-\\xa01=3 horas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El barco de Tom puede viajar a 10\\xa0kilómetros por hora.', 'Viajó a toda velocidad durante 4\\xa0-\\xa01=3 horas']\nnew_fact = infer_new_fact(selected) # 'Así que recorrió 3\\xa0*\\xa010 = 30\\xa0kilómetros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Luego, viaja de regreso a una velocidad de 6\\xa0km/h.', '¿Cuánto tardará en volver?', 'Así que recorrió 3\\xa0*\\xa010 = 30\\xa0kilómetros']\nnew_fact = infer_new_fact(selected) # 'Eso significa que se tarda 30\\xa0/\\xa06 = 5 horas en regresar'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto tardará en volver?', 'Eso significa que se tarda 30\\xa0/\\xa06 = 5 horas en regresar']\nnew_fact = infer_new_fact(selected) # 'The answer is 5'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '5'"}
{"id": "GSM8K_52_51cab0f5b8", "context": "", "options": [], "answer": "15", "reasoning_graph_edges": [{"antecedents": [3, 5], "consequent": 7}, {"antecedents": [2, 7], "consequent": 8}, {"antecedents": [4, 6, 8], "consequent": 9}, {"antecedents": [6, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent3 & sent5 -> int1: 30 comic books weigh 7.5 pounds because 30 x .25 = 7.5; int1 & sent2 -> int2: He needs to remove 7.5 more pounds because 15 - 7.5 = 7.5; int2 & sent4 & sent6 -> int3: He needs to remove 15 toys because 7.5 / .5 = 15; int3 & sent6 -> int4: The answer is 15;", "textual_logical_units": {"1": "La mochila de Uriah pesa demasiado para él.", "2": "Tiene que hacer que pese 15 kilos menos.", "3": "Sus cómics pesan 1/4 de kilo cada uno y", "4": "sus juguetes pesan 1/2 kilo cada uno.", "5": "Si saca 30 cómics,", "6": "¿cuántos juguetes tiene que sacar?", "7": "30 cómics pesan 7,5 kilos porque 30 × 0,25 = 7,5", "8": "Tiene que hacer que pese 7,5 kilos menos porque 15 - 7,5 = 7,5", "9": "Tiene que sacar 15 juguetes porque 7,5 / 0,5 = 15", "10": "The answer is 15"}, "human_translated": true, "code_input": "####\nfacts = [ 'La mochila de Uriah pesa demasiado para él.',\n  'Tiene que hacer que pese 15\\xa0kilos menos.',\n  'Sus cómics pesan 1/4 de kilo cada uno y',\n  'sus juguetes pesan 1/2 kilo cada uno.',\n  'Si saca 30 cómics,']\nquestion = '¿cuántos juguetes tiene que sacar?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Sus cómics pesan 1/4 de kilo cada uno y', 'Si saca 30 cómics,']\nnew_fact = infer_new_fact(selected) # '30 cómics pesan 7,5\\xa0kilos porque 30\\xa0×\\xa00,25 = 7,5'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tiene que hacer que pese 15\\xa0kilos menos.', '30 cómics pesan 7,5\\xa0kilos porque 30\\xa0×\\xa00,25 = 7,5']\nnew_fact = infer_new_fact(selected) # 'Tiene que hacer que pese 7,5\\xa0kilos menos porque 15\\xa0-\\xa07,5 = 7,5'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['sus juguetes pesan 1/2 kilo cada uno.', '¿cuántos juguetes tiene que sacar?', 'Tiene que hacer que pese 7,5\\xa0kilos menos porque 15\\xa0-\\xa07,5 = 7,5']\nnew_fact = infer_new_fact(selected) # 'Tiene que sacar 15 juguetes porque 7,5\\xa0/\\xa00,5 = 15'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos juguetes tiene que sacar?', 'Tiene que sacar 15 juguetes porque 7,5\\xa0/\\xa00,5 = 15']\nnew_fact = infer_new_fact(selected) # 'The answer is 15'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '15'"}
{"id": "GSM8K_53_b9e40ecd00", "context": "", "options": [], "answer": "40", "reasoning_graph_edges": [{"antecedents": [3, 5, 6], "consequent": 10}, {"antecedents": [5, 7], "consequent": 11}, {"antecedents": [9, 10, 11], "consequent": 12}, {"antecedents": [9, 12], "consequent": 13}], "metadata": [], "linearized_output_en": "sent3 & sent5 & sent6 -> int1: On Thursday the mechanic charged a total of 6*60 + 4*40 = $520.; sent5 & sent7 -> int2: On Friday the mechanic charged a total of 12*40 = $480.; int1 & int2 & sent9 -> int3: Thus, on Thursday, the day with higher revenue, the mechanic had 520-480 = $40 more revenue than on Friday.; int3 & sent9 -> int4: The answer is 40;", "textual_logical_units": {"1": "Un mecánico cobra diferentes tarifas para reparar los neumáticos de camiones y automóviles.", "2": "Por cada neumático de camión que se repare,", "3": "el mecánico cobrará 60 € y,", "4": "por cada neumático de automóvil que se repare,", "5": "el mecánico cobrará 40 €.", "6": "El jueves, el mecánico repara 6 neumáticos de camiones y 4 neumáticos de automóviles.", "7": "El viernes, el mecánico repara 12 neumáticos de automóviles y.", "8": "no repara ningún neumático de camión.", "9": "¿Cuántos ingresos adicionales obtuvo el mecánico el día en que los ingresos fueron más altos?", "10": "El jueves, el mecánico cobró un total de 6 * 60 + 4  * 40 = 520 €.", "11": "El viernes, el mecánico cobró un total de 12 * 40 = 480 €.", "12": "Así, el jueves, el día con mayores ingresos, el mecánico obtuvo 520 - 480 = 40 € más de ingresos que el viernes.", "13": "The answer is 40"}, "human_translated": true, "code_input": "####\nfacts = [ 'Un mecánico cobra diferentes tarifas para reparar los neumáticos de camiones y automóviles.',\n  'Por cada neumático de camión que se repare,',\n  'el mecánico cobrará 60\\xa0€ y,',\n  'por cada neumático de automóvil que se repare,',\n  'el mecánico cobrará 40\\xa0€.',\n  'El jueves, el mecánico repara 6 neumáticos de camiones y 4 neumáticos de automóviles.',\n  'El viernes, el mecánico repara 12 neumáticos de automóviles y.',\n  'no repara ningún neumático de camión.']\nquestion = '¿Cuántos ingresos adicionales obtuvo el mecánico el día en que los ingresos fueron más altos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['el mecánico cobrará 60\\xa0€ y,', 'el mecánico cobrará 40\\xa0€.', 'El jueves, el mecánico repara 6 neumáticos de camiones y 4 neumáticos de automóviles.']\nnew_fact = infer_new_fact(selected) # 'El jueves, el mecánico cobró un total de 6\\xa0*\\xa060\\xa0+\\xa04 \\xa0*\\xa040 = 520\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['el mecánico cobrará 40\\xa0€.', 'El viernes, el mecánico repara 12 neumáticos de automóviles y.']\nnew_fact = infer_new_fact(selected) # 'El viernes, el mecánico cobró un total de 12\\xa0*\\xa040 = 480\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos ingresos adicionales obtuvo el mecánico el día en que los ingresos fueron más altos?', 'El jueves, el mecánico cobró un total de 6\\xa0*\\xa060\\xa0+\\xa04 \\xa0*\\xa040 = 520\\xa0€.', 'El viernes, el mecánico cobró un total de 12\\xa0*\\xa040 = 480\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Así, el jueves, el día con mayores ingresos, el mecánico obtuvo 520\\xa0-\\xa0480 = 40\\xa0€ más de ingresos que el viernes.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos ingresos adicionales obtuvo el mecánico el día en que los ingresos fueron más altos?', 'Así, el jueves, el día con mayores ingresos, el mecánico obtuvo 520\\xa0-\\xa0480 = 40\\xa0€ más de ingresos que el viernes.']\nnew_fact = infer_new_fact(selected) # 'The answer is 40'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '40'"}
{"id": "GSM8K_54_70199a93f0", "context": "", "options": [], "answer": "40", "reasoning_graph_edges": [{"antecedents": [1, 2, 3], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [1, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 & sent3 -> int1: Patchy has just had 3 * 7 = 21 kittens; int1 & sent3 -> int2: Since Trixie's kittens are 12, both cats have 21 +12 = 33 kittens.; int2 & sent1 -> int3: Combining the adopted kittens with those from the two cats, the Doubtfire family now has 7 + 33 = 40 kittens.; int3 & sent4 -> int4: The answer is 40;", "textual_logical_units": {"1": "Las hermanas Doubtfire conducen a casa con 7 gatitos adoptados en el refugio de animales local cuando su madre las llama para informarles de que sus dos gatas domésticas acaban de tener gatitos.", "2": "Dice que Patchy, la primera gata,", "3": "ha tenido el triple de gatitos adoptados, mientras que Trixie, la otra gata, ha tenido 12.", "4": "¿Cuántos gatitos tiene ahora la familia Doubtfire?", "5": "Patchy acaba de tener 3 * 7 = 21 gatitos", "6": "Como los gatitos de Trixie son 12, ambas gatas tienen 21 + 12 = 33 gatitos.", "7": "Si combinamos los gatitos adoptados con los de las dos gatas, la familia Doubtfire ahora tiene 7 + 33 = 40 gatitos.", "8": "The answer is 40"}, "human_translated": true, "code_input": "####\nfacts = [ 'Las hermanas Doubtfire conducen a casa con 7 gatitos adoptados en el refugio de animales local cuando su madre las llama para informarles de que sus dos '\n  'gatas domésticas acaban de tener gatitos.',\n  'Dice que Patchy, la primera gata,',\n  'ha tenido el triple de gatitos adoptados, mientras que Trixie, la otra gata, ha tenido 12.']\nquestion = '¿Cuántos gatitos tiene ahora la familia Doubtfire?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Las hermanas Doubtfire conducen a casa con 7 gatitos adoptados en el refugio de animales local cuando su madre las llama para informarles de que sus dos gatas domésticas acaban de tener gatitos.', 'Dice que Patchy, la primera gata,', 'ha tenido el triple de gatitos adoptados, mientras que Trixie, la otra gata, ha tenido 12.']\nnew_fact = infer_new_fact(selected) # 'Patchy acaba de tener 3\\xa0*\\xa07 = 21 gatitos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['ha tenido el triple de gatitos adoptados, mientras que Trixie, la otra gata, ha tenido 12.', 'Patchy acaba de tener 3\\xa0*\\xa07 = 21 gatitos']\nnew_fact = infer_new_fact(selected) # 'Como los gatitos de Trixie son 12, ambas gatas tienen 21\\xa0+\\xa012 = 33 gatitos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Las hermanas Doubtfire conducen a casa con 7 gatitos adoptados en el refugio de animales local cuando su madre las llama para informarles de que sus dos gatas domésticas acaban de tener gatitos.', 'Como los gatitos de Trixie son 12, ambas gatas tienen 21\\xa0+\\xa012 = 33 gatitos.']\nnew_fact = infer_new_fact(selected) # 'Si combinamos los gatitos adoptados con los de las dos gatas, la familia Doubtfire ahora tiene 7\\xa0+\\xa033 = 40 gatitos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos gatitos tiene ahora la familia Doubtfire?', 'Si combinamos los gatitos adoptados con los de las dos gatas, la familia Doubtfire ahora tiene 7\\xa0+\\xa033 = 40 gatitos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 40'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '40'"}
{"id": "GSM8K_55_3f62913f36", "context": "", "options": [], "answer": "14", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [3, 4, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Jean has 30 - 2 = 28 lollipops; int1 & sent3 & sent4 -> int2: Jean can fill up 28 / 2 = 14 bags with lollipops; int2 & sent4 -> int3: The answer is 14;", "textual_logical_units": {"1": "Jean tiene 30 piruletas.", "2": "Jean se come 2 piruletas.", "3": "Con las piruletas restantes, Jean quiere empaquetar 2 piruletas en una bolsa.", "4": "¿Cuántas bolsas puede llenar Jean?", "5": "Jean tiene 30 - 2 = 28 piruletas", "6": "Jean puede llenar 28 / 2 = 14 bolsas con piruletas", "7": "The answer is 14"}, "human_translated": true, "code_input": "####\nfacts = ['Jean tiene 30 piruletas.', 'Jean se come 2 piruletas.', 'Con las piruletas restantes, Jean quiere empaquetar 2 piruletas en una bolsa.']\nquestion = '¿Cuántas bolsas puede llenar Jean?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Jean tiene 30 piruletas.', 'Jean se come 2 piruletas.']\nnew_fact = infer_new_fact(selected) # 'Jean tiene 30\\xa0-\\xa02 = 28 piruletas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Con las piruletas restantes, Jean quiere empaquetar 2 piruletas en una bolsa.', '¿Cuántas bolsas puede llenar Jean?', 'Jean tiene 30\\xa0-\\xa02 = 28 piruletas']\nnew_fact = infer_new_fact(selected) # 'Jean puede llenar 28\\xa0/\\xa02 = 14 bolsas con piruletas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas bolsas puede llenar Jean?', 'Jean puede llenar 28\\xa0/\\xa02 = 14 bolsas con piruletas']\nnew_fact = infer_new_fact(selected) # 'The answer is 14'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '14'"}
{"id": "GSM8K_56_bac73f4830", "context": "", "options": [], "answer": "3", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 -> int1: It costs him $14 to go to the movies because 7 + 7 = 14; int1 & sent3 -> int2: He can go to the movies 3 times because 42 / 14 = 3; int2 & sent4 -> int3: The answer is 3;", "textual_logical_units": {"1": "Peter planea ir al cine esta semana.", "2": "Siempre compra una entrada por 7 € y palomitas por 7 €.", "3": "Si tiene 42 euros para la semana,", "4": "¿cuántas veces puede ir al cine?", "5": "Le cuesta 14 € ir al cine porque 7 + 7 = 14", "6": "Puede ir al cine 3 veces porque 42 / 14 = 3", "7": "The answer is 3"}, "human_translated": true, "code_input": "####\nfacts = ['Peter planea ir al cine esta semana.', 'Siempre compra una entrada por 7\\xa0€ y palomitas por 7\\xa0€.', 'Si tiene 42\\xa0euros para la semana,']\nquestion = '¿cuántas veces puede ir al cine?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Siempre compra una entrada por 7\\xa0€ y palomitas por 7\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Le cuesta 14\\xa0€ ir al cine porque 7\\xa0+\\xa07 = 14'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si tiene 42\\xa0euros para la semana,', 'Le cuesta 14\\xa0€ ir al cine porque 7\\xa0+\\xa07 = 14']\nnew_fact = infer_new_fact(selected) # 'Puede ir al cine 3 veces porque 42\\xa0/\\xa014 = 3'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántas veces puede ir al cine?', 'Puede ir al cine 3 veces porque 42\\xa0/\\xa014 = 3']\nnew_fact = infer_new_fact(selected) # 'The answer is 3'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '3'"}
{"id": "GSM8K_57_c28d1a27f0", "context": "", "options": [], "answer": "83", "reasoning_graph_edges": [{"antecedents": [1, 4, 5], "consequent": 7}, {"antecedents": [2, 7], "consequent": 8}, {"antecedents": [6, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent1 & sent4 & sent5 -> int1: The boxes can weigh up to 5000 pounds - 3755 pounds = 1245 pounds in total.; int1 & sent2 -> int2: There can be 1245 / 15 = 83 boxes loaded onto the truck without exceeding the bridge's weight limit.; int2 & sent6 -> int3: The answer is 83;", "textual_logical_units": {"1": "Un puente de madera no puede soportar más de 5000 kilos.", "2": "Un camión de reparto lleno de cajas idénticas, cada una con un peso de 15 kilos,", "3": "pasará por el puente.", "4": "El peso combinado del conductor y", "5": "el camión vacío es de 3755 kilos.", "6": "¿Cuál es el número máximo de cajas que se pueden cargar en el camión sin superar el límite de peso del puente?", "7": "Las cajas pueden pesar hasta 5000 kilos - 3755 kilos = 1245 kilos en total.", "8": "Se pueden cargar 1245 / 15 = 83 cajas en el camión sin superar el límite de peso del puente.", "9": "The answer is 83"}, "human_translated": true, "code_input": "####\nfacts = [ 'Un puente de madera no puede soportar más de 5000\\xa0kilos.',\n  'Un camión de reparto lleno de cajas idénticas, cada una con un peso de 15\\xa0kilos,',\n  'pasará por el puente.',\n  'El peso combinado del conductor y',\n  'el camión vacío es de 3755\\xa0kilos.']\nquestion = '¿Cuál es el número máximo de cajas que se pueden cargar en el camión sin superar el límite de peso del puente?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Un puente de madera no puede soportar más de 5000\\xa0kilos.', 'El peso combinado del conductor y', 'el camión vacío es de 3755\\xa0kilos.']\nnew_fact = infer_new_fact(selected) # 'Las cajas pueden pesar hasta 5000\\xa0kilos\\xa0-\\xa03755\\xa0kilos = 1245\\xa0kilos en total.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Un camión de reparto lleno de cajas idénticas, cada una con un peso de 15\\xa0kilos,', 'Las cajas pueden pesar hasta 5000\\xa0kilos\\xa0-\\xa03755\\xa0kilos = 1245\\xa0kilos en total.']\nnew_fact = infer_new_fact(selected) # 'Se pueden cargar 1245\\xa0/\\xa015\\xa0=\\xa083\\xa0cajas en el camión sin superar el límite de peso del puente.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál es el número máximo de cajas que se pueden cargar en el camión sin superar el límite de peso del puente?', 'Se pueden cargar 1245\\xa0/\\xa015\\xa0=\\xa083\\xa0cajas en el camión sin superar el límite de peso del puente.']\nnew_fact = infer_new_fact(selected) # 'The answer is 83'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '83'"}
{"id": "GSM8K_58_ee1c753c43", "context": "", "options": [], "answer": "57", "reasoning_graph_edges": [{"antecedents": [2, 4], "consequent": 8}, {"antecedents": [5, 6], "consequent": 9}, {"antecedents": [8, 9], "consequent": 10}, {"antecedents": [7, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent2 & sent4 -> int1: He spent $40.00 on groceries but they charged him a 25% fee so that's 40*.25 = $10.00; sent5 & sent6 -> int2: There is also a $3.00 delivery fee and a $4.00 tip for an extra $3 + $4 = $7.00 in fees; int1 & int2 -> int3: His groceries were $40.00, there's a $10.00 fee plus another $7.00 in delivery/tip fees for a final total of $40 + $10 + $7 = $57.00; int3 & sent7 -> int4: The answer is 57;", "textual_logical_units": {"1": "Stephen hizo la compra por Internet.", "2": "La factura final fue de 40,00 €.", "3": "Como lo hizo a través de un proveedor de servicios de entrega,", "4": "le agregaron un cargo del 25 % a su total final y", "5": "le cobraron 3,00 € en gastos de envío.", "6": "Stephen también añadió una propina de 4,00 €.", "7": "Después de los cargos adicionales, ¿cuál fue el precio final de la compra de Stephen?", "8": "Gastó 40,00 € en comida, pero le cobraron un cargo del 25 %, es decir, 40 * 0,25 = 10,00 €", "9": "También hay un gasto de envío de 3,00 € y una propina de 4,00 €, lo que supone 3 € + 4 € = 7,00 € de cargos extra.", "10": "La compra costaba 40,00 €, había una cargo de 10,00 € más otros 7,00 € en gastos de envío/propina, lo que sumaba un total final de 40 € + 10 € + 7 € = 57,00 €", "11": "The answer is 57"}, "human_translated": true, "code_input": "####\nfacts = [ 'Stephen hizo la compra por Internet.',\n  'La factura final fue de 40,00\\xa0€.',\n  'Como lo hizo a través de un proveedor de servicios de entrega,',\n  'le agregaron un cargo del 25\\xa0% a su total final y',\n  'le cobraron 3,00\\xa0€ en gastos de envío.',\n  'Stephen también añadió una propina de 4,00\\xa0€.']\nquestion = 'Después de los cargos adicionales, ¿cuál fue el precio final de la compra de Stephen?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['La factura final fue de 40,00\\xa0€.', 'le agregaron un cargo del 25\\xa0% a su total final y']\nnew_fact = infer_new_fact(selected) # 'Gastó 40,00\\xa0€ en comida, pero le cobraron un cargo del 25\\xa0%, es decir, 40\\xa0*\\xa00,25 = 10,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['le cobraron 3,00\\xa0€ en gastos de envío.', 'Stephen también añadió una propina de 4,00\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'También hay un gasto de envío de 3,00\\xa0€ y una propina de 4,00\\xa0€, lo que supone 3\\xa0€\\xa0+\\xa04\\xa0€ = 7,00\\xa0€ de cargos extra.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Gastó 40,00\\xa0€ en comida, pero le cobraron un cargo del 25\\xa0%, es decir, 40\\xa0*\\xa00,25 = 10,00\\xa0€', 'También hay un gasto de envío de 3,00\\xa0€ y una propina de 4,00\\xa0€, lo que supone 3\\xa0€\\xa0+\\xa04\\xa0€ = 7,00\\xa0€ de cargos extra.']\nnew_fact = infer_new_fact(selected) # 'La compra costaba 40,00\\xa0€, había una cargo de 10,00\\xa0€ más otros 7,00\\xa0€ en gastos de envío/propina, lo que sumaba un total final de 40\\xa0€\\xa0+\\xa010\\xa0€\\xa0+\\xa07\\xa0€ = 57,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Después de los cargos adicionales, ¿cuál fue el precio final de la compra de Stephen?', 'La compra costaba 40,00\\xa0€, había una cargo de 10,00\\xa0€ más otros 7,00\\xa0€ en gastos de envío/propina, lo que sumaba un total final de 40\\xa0€\\xa0+\\xa010\\xa0€\\xa0+\\xa07\\xa0€ = 57,00\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 57'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '57'"}
{"id": "GSM8K_59_d2005757cb", "context": "", "options": [], "answer": "187", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 -> int1: First find the number of fruit in clusters: 20 fruit/cluster * 6 clusters = 120 fruit; int1 & sent2 -> int2: Then add the number of individual fruit to find the total number of fruit: 120 fruit + 67 fruit = 187 fruit; int2 & sent3 -> int3: The answer is 187;", "textual_logical_units": {"1": "Un arbusto de frambuesa tiene 6 racimos de 20 frutos cada uno y", "2": "67 frutos individuales esparcidas por el arbusto.", "3": "¿Cuántas frambuesas hay en total?", "4": "Primero, encuentra el número de frutos en racimos: 20 frutos/racimo * 6 racimos = 120 frutos", "5": "Luego, suma el número de frutos individuales para calcular el número total de frutos: 120 frutas + 67 frutas = 187 frutas", "6": "The answer is 187"}, "human_translated": true, "code_input": "####\nfacts = ['Un arbusto de frambuesa tiene 6 racimos de 20 frutos cada uno y', '67 frutos individuales esparcidas por el arbusto.']\nquestion = '¿Cuántas frambuesas hay en total?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Un arbusto de frambuesa tiene 6 racimos de 20 frutos cada uno y']\nnew_fact = infer_new_fact(selected) # 'Primero, encuentra el número de frutos en racimos: 20 frutos/racimo\\xa0*\\xa06 racimos = 120 frutos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['67 frutos individuales esparcidas por el arbusto.', 'Primero, encuentra el número de frutos en racimos: 20 frutos/racimo\\xa0*\\xa06 racimos = 120 frutos']\nnew_fact = infer_new_fact(selected) # 'Luego, suma el número de frutos individuales para calcular el número total de frutos: 120 frutas\\xa0+\\xa067 frutas = 187 frutas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas frambuesas hay en total?', 'Luego, suma el número de frutos individuales para calcular el número total de frutos: 120 frutas\\xa0+\\xa067 frutas = 187 frutas']\nnew_fact = infer_new_fact(selected) # 'The answer is 187'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '187'"}
{"id": "GSM8K_60_b4dc5170cd", "context": "", "options": [], "answer": "17", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 3}, {"antecedents": [1, 3], "consequent": 4}, {"antecedents": [1, 2, 3, 4], "consequent": 5}, {"antecedents": [2, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 -> int1: 20% of 25 oranges is (20/100)*25 = 5 oranges; int1 & sent1 -> int2: The total number of bad, unripe and sour oranges is therefore 1+5+2 = 8 oranges; int1 & int2 & sent1 & sent2 -> int3: The rest which is 25-8 = 17 oranges are good; int3 & sent2 -> int4: The answer is 17;", "textual_logical_units": {"1": "Una cesta contiene 25 naranjas, de las cuales 1 está podrida, el 20 % no está madura, 2 son ácidas y el resto están buenas.", "2": "¿Cuántas naranjas están buenas?", "3": "El 20 % de 25 naranjas es (20 / 100) * 25 = 5 naranjas", "4": "El número total de naranjas podridas, sin madurar y ácidas es, por lo tanto, 1 + 5 + 2 = 8 naranjas", "5": "El resto, que es 25 - 8 = 17 naranjas, están buenas.", "6": "The answer is 17"}, "human_translated": true, "code_input": "####\nfacts = ['Una cesta contiene 25 naranjas, de las cuales 1 está podrida, el 20\\xa0% no está madura, 2 son ácidas y el resto están buenas.']\nquestion = '¿Cuántas naranjas están buenas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Una cesta contiene 25 naranjas, de las cuales 1 está podrida, el 20\\xa0% no está madura, 2 son ácidas y el resto están buenas.']\nnew_fact = infer_new_fact(selected) # 'El 20\\xa0% de 25 naranjas es (20\\xa0/\\xa0100)\\xa0*\\xa025 = 5 naranjas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Una cesta contiene 25 naranjas, de las cuales 1 está podrida, el 20\\xa0% no está madura, 2 son ácidas y el resto están buenas.', 'El 20\\xa0% de 25 naranjas es (20\\xa0/\\xa0100)\\xa0*\\xa025 = 5 naranjas']\nnew_fact = infer_new_fact(selected) # 'El número total de naranjas podridas, sin madurar y ácidas es, por lo tanto, 1\\xa0+\\xa05\\xa0+\\xa02 = 8 naranjas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Una cesta contiene 25 naranjas, de las cuales 1 está podrida, el 20\\xa0% no está madura, 2 son ácidas y el resto están buenas.', '¿Cuántas naranjas están buenas?', 'El 20\\xa0% de 25 naranjas es (20\\xa0/\\xa0100)\\xa0*\\xa025 = 5 naranjas', 'El número total de naranjas podridas, sin madurar y ácidas es, por lo tanto, 1\\xa0+\\xa05\\xa0+\\xa02 = 8 naranjas']\nnew_fact = infer_new_fact(selected) # 'El resto, que es 25\\xa0-\\xa08 = 17 naranjas, están buenas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas naranjas están buenas?', 'El resto, que es 25\\xa0-\\xa08 = 17 naranjas, están buenas.']\nnew_fact = infer_new_fact(selected) # 'The answer is 17'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '17'"}
{"id": "GSM8K_61_6e93c38f35", "context": "", "options": [], "answer": "1430", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}, {"antecedents": [6, 7], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: The total cost of the broch was 500+800=$1300; int1 & sent4 -> int2: The insurance was 1300*.1=$130; int1 & int2 -> int3: So she pays 1300+130=$1430; int3 & sent5 -> int4: The answer is 1430;", "textual_logical_units": {"1": "Janet compra un broche para su hija.", "2": "Paga 500 € por el material para fabricarlo y,", "3": "luego, otros 800 € para que el joyero lo haga.", "4": "Después de eso, paga el 10 % para asegurarlo.", "5": "¿Cuánto pagó?", "6": "El coste total del broche fue de 500 + 800 = 1300 €", "7": "El seguro era de 1300 * 0,1 = 130 €", "8": "Así que paga 1300 + 130 = 1430 €", "9": "The answer is 1430"}, "human_translated": true, "code_input": "####\nfacts = [ 'Janet compra un broche para su hija.',\n  'Paga 500\\xa0€ por el material para fabricarlo y,',\n  'luego, otros 800\\xa0€ para que el joyero lo haga.',\n  'Después de eso, paga el 10\\xa0% para asegurarlo.']\nquestion = '¿Cuánto pagó?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Paga 500\\xa0€ por el material para fabricarlo y,', 'luego, otros 800\\xa0€ para que el joyero lo haga.']\nnew_fact = infer_new_fact(selected) # 'El coste total del broche fue de 500\\xa0+\\xa0800 = 1300\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Después de eso, paga el 10\\xa0% para asegurarlo.', 'El coste total del broche fue de 500\\xa0+\\xa0800 = 1300\\xa0€']\nnew_fact = infer_new_fact(selected) # 'El seguro era de 1300\\xa0* 0,1 = 130\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El coste total del broche fue de 500\\xa0+\\xa0800 = 1300\\xa0€', 'El seguro era de 1300\\xa0* 0,1 = 130\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Así que paga 1300\\xa0+\\xa0130 = 1430\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto pagó?', 'Así que paga 1300\\xa0+\\xa0130 = 1430\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 1430'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '1430'"}
{"id": "GSM8K_62_aa8b921815", "context": "", "options": [], "answer": "25000", "reasoning_graph_edges": [{"antecedents": [3, 4], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}, {"antecedents": [2, 7], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent3 & sent4 -> int1: First find how many years Marcy works after 20 years: 30 years - 20 years = 10 years; int1 & sent3 -> int2: Then multiply that number by the amount of her pension she gets per year: 10 years * 5% = 50%; int2 & sent2 -> int3: Then multiply that percentage by the total amount of the full pension to find how much she gets: $50,000 * 50% = $25,000; int3 & sent5 -> int4: The answer is 25000;", "textual_logical_units": {"1": "Si Marcy trabaja para la misma empresa durante 40 años,", "2": "recibe una pensión anual de 50 000 € al año.", "3": "A partir de 20 años, adquiere derecho al 5 % del valor de la pensión por año.", "4": "Si renuncia después de 30 años,", "5": "¿cuál será su pensión anual?", "6": "Primero, averigua cuántos años trabaja Marcy después de 20 años: 30 años - 20 años = 10 años", "7": "Luego, multiplica ese número por el importe de la pensión que recibe al año: 10 años * 5 % = 50 %", "8": "Luego, multiplica ese porcentaje por el importe total de la pensión completa para averiguar cuánto recibe: 50 000 € * 50 % = 25 000 €", "9": "The answer is 25000"}, "human_translated": true, "code_input": "####\nfacts = [ 'Si Marcy trabaja para la misma empresa durante 40 años,',\n  'recibe una pensión anual de 50\\xa0000\\xa0€ al año.',\n  'A partir de 20 años, adquiere derecho al 5 % del valor de la pensión por año.',\n  'Si renuncia después de 30 años,']\nquestion = '¿cuál será su pensión anual?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['A partir de 20 años, adquiere derecho al 5 % del valor de la pensión por año.', 'Si renuncia después de 30 años,']\nnew_fact = infer_new_fact(selected) # 'Primero, averigua cuántos años trabaja Marcy después de 20 años: 30 años\\xa0-\\xa020 años = 10 años'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['A partir de 20 años, adquiere derecho al 5 % del valor de la pensión por año.', 'Primero, averigua cuántos años trabaja Marcy después de 20 años: 30 años\\xa0-\\xa020 años = 10 años']\nnew_fact = infer_new_fact(selected) # 'Luego, multiplica ese número por el importe de la pensión que recibe al año: 10 años\\xa0*\\xa05\\xa0% = 50\\xa0%'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['recibe una pensión anual de 50\\xa0000\\xa0€ al año.', 'Luego, multiplica ese número por el importe de la pensión que recibe al año: 10 años\\xa0*\\xa05\\xa0% = 50\\xa0%']\nnew_fact = infer_new_fact(selected) # 'Luego, multiplica ese porcentaje por el importe total de la pensión completa para averiguar cuánto recibe: 50\\xa0000\\xa0€\\xa0*\\xa050\\xa0% = 25\\xa0000\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuál será su pensión anual?', 'Luego, multiplica ese porcentaje por el importe total de la pensión completa para averiguar cuánto recibe: 50\\xa0000\\xa0€\\xa0*\\xa050\\xa0% = 25\\xa0000\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 25000'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '25000'"}
{"id": "GSM8K_63_1883b4fc6e", "context": "", "options": [], "answer": "1596", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [1, 3], "consequent": 7}, {"antecedents": [1, 7], "consequent": 8}, {"antecedents": [3, 5, 8], "consequent": 9}, {"antecedents": [6, 9], "consequent": 10}, {"antecedents": [4, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent2 -> int1: A year has twelve months, so a half of the year is 12/2 = 6 months,; int1 & sent1 -> int2: For the first six months, the streaming service charged her a total of 6*140 = $840; sent1 & sent3 -> int3: For the next half of the year, the streaming service company charged her 10/100*140 = $14 less; int3 & sent1 -> int4: She paid $140-$14 = $126 each month for the remaining half of the year,; int1 & int4 & sent3 -> int5: In total, she paid 126*6 = $756 for the other half of the year for the streaming service.; int2 & int5 -> int6: The total amount of money she paid at the end of the year is $840+$756 = $1596; int6 & sent4 -> int7: The answer is 1596;", "textual_logical_units": {"1": "Aleena se suscribió a un servicio de streaming que le cobra 140 € al mes.", "2": "Si la empresa de streaming le cobró el importe inicial de la primera mitad del año y,", "3": "luego, le cobró un 10 % menos de dinero en la segunda mitad del año,", "4": "calcula la cantidad total que había pagado por el servicio de streaming antes de fin de año.", "5": "Un año tiene doce meses, por lo que la mitad del año es 12 / 2 = 6 meses.", "6": "Por los primeros seis meses, el servicio de streaming le cobró un total de 6 * 140 = 840 €", "7": "Por la siguiente mitad del año, la empresa de servicios de streaming le cobró 10 / 100 * 140 = 14 € menos", "8": "Pagó 140 € - 14 € = 126 € cada mes durante la mitad restante del año.", "9": "En total, pagó 126 * 6 = 756 € en la otra mitad del año por el servicio de streaming.", "10": "La cantidad total de dinero que pagó al final del año es de 840 € + 756 € = 1596 €", "11": "The answer is 1596"}, "human_translated": true, "code_input": "####\nfacts = [ 'Aleena se suscribió a un servicio de streaming que le cobra 140\\xa0€ al mes.',\n  'Si la empresa de streaming le cobró el importe inicial de la primera mitad del año y,',\n  'luego, le cobró un 10\\xa0% menos de dinero en la segunda mitad del año,']\nquestion = 'calcula la cantidad total que había pagado por el servicio de streaming antes de fin de año.'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Si la empresa de streaming le cobró el importe inicial de la primera mitad del año y,']\nnew_fact = infer_new_fact(selected) # 'Un año tiene doce meses, por lo que la mitad del año es 12\\xa0/\\xa02 = 6 meses.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Aleena se suscribió a un servicio de streaming que le cobra 140\\xa0€ al mes.', 'Un año tiene doce meses, por lo que la mitad del año es 12\\xa0/\\xa02 = 6 meses.']\nnew_fact = infer_new_fact(selected) # 'Por los primeros seis meses, el servicio de streaming le cobró un total de 6\\xa0*\\xa0140 = 840\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Aleena se suscribió a un servicio de streaming que le cobra 140\\xa0€ al mes.', 'luego, le cobró un 10\\xa0% menos de dinero en la segunda mitad del año,']\nnew_fact = infer_new_fact(selected) # 'Por la siguiente mitad del año, la empresa de servicios de streaming le cobró 10\\xa0/\\xa0100\\xa0*\\xa0140 = 14\\xa0€ menos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Aleena se suscribió a un servicio de streaming que le cobra 140\\xa0€ al mes.', 'Por la siguiente mitad del año, la empresa de servicios de streaming le cobró 10\\xa0/\\xa0100\\xa0*\\xa0140 = 14\\xa0€ menos']\nnew_fact = infer_new_fact(selected) # 'Pagó 140\\xa0€\\xa0-\\xa014\\xa0€ = 126\\xa0€ cada mes durante la mitad restante del año.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['luego, le cobró un 10\\xa0% menos de dinero en la segunda mitad del año,', 'Un año tiene doce meses, por lo que la mitad del año es 12\\xa0/\\xa02 = 6 meses.', 'Pagó 140\\xa0€\\xa0-\\xa014\\xa0€ = 126\\xa0€ cada mes durante la mitad restante del año.']\nnew_fact = infer_new_fact(selected) # 'En total, pagó 126\\xa0*\\xa06 = 756\\xa0€ en la otra mitad del año por el servicio de streaming.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Por los primeros seis meses, el servicio de streaming le cobró un total de 6\\xa0*\\xa0140 = 840\\xa0€', 'En total, pagó 126\\xa0*\\xa06 = 756\\xa0€ en la otra mitad del año por el servicio de streaming.']\nnew_fact = infer_new_fact(selected) # 'La cantidad total de dinero que pagó al final del año es de 840\\xa0€\\xa0+\\xa0756\\xa0€ = 1596\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['calcula la cantidad total que había pagado por el servicio de streaming antes de fin de año.', 'La cantidad total de dinero que pagó al final del año es de 840\\xa0€\\xa0+\\xa0756\\xa0€ = 1596\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 1596'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '1596'"}
{"id": "GSM8K_64_74e8075a62", "context": "", "options": [], "answer": "300", "reasoning_graph_edges": [{"antecedents": [3, 4], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}, {"antecedents": [6, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent3 & sent4 -> int1: To find miles per gallon divide 100 miles / 4 gallons = 25 miles per gallon; int1 & sent5 -> int2: To find how far Olivia can go on a single tank, multiply 25 miles per gallon x 12 gallons = 300 miles; int2 & sent6 -> int3: The answer is 300;", "textual_logical_units": {"1": "Sophia está pensando en hacer un viaje por carretera en su coche", "2": "y le gustaría saber a qué distancia puede conducir con un solo depósito de gasolina.", "3": "Ha viajado 100 kilómetros desde la última vez que llenó su depósito", "4": "y tuvo que poner 4 litros de gasolina para volver a llenarlo.", "5": "El manual del propietario de su automóvil dice que su depósito tiene una capacidad de 12 litros de gasolina.", "6": "¿Cuántos kilómetros puede conducir Sophia con un solo depósito de gasolina?", "7": "Para calcular los kilómetros por litro, divide 100 kilómetros / 4 litros = 25 kilómetros por litro", "8": "Para saber a qué distancia puede llegar Olivia con un solo depósito, multiplica 25 kilómetros por litro × 12 litros = 300 kilómetros", "9": "The answer is 300"}, "human_translated": true, "code_input": "####\nfacts = [ 'Sophia está pensando en hacer un viaje por carretera en su coche',\n  'y le gustaría saber a qué distancia puede conducir con un solo depósito de gasolina.',\n  'Ha viajado 100\\xa0kilómetros desde la última vez que llenó su depósito',\n  'y tuvo que poner 4\\xa0litros de gasolina para volver a llenarlo.',\n  'El manual del propietario de su automóvil dice que su depósito tiene una capacidad de 12\\xa0litros de gasolina.']\nquestion = '¿Cuántos kilómetros puede conducir Sophia con un solo depósito de gasolina?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Ha viajado 100\\xa0kilómetros desde la última vez que llenó su depósito', 'y tuvo que poner 4\\xa0litros de gasolina para volver a llenarlo.']\nnew_fact = infer_new_fact(selected) # 'Para calcular los kilómetros por litro, divide 100\\xa0kilómetros\\xa0/\\xa04 litros = 25\\xa0kilómetros por litro'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El manual del propietario de su automóvil dice que su depósito tiene una capacidad de 12\\xa0litros de gasolina.', 'Para calcular los kilómetros por litro, divide 100\\xa0kilómetros\\xa0/\\xa04 litros = 25\\xa0kilómetros por litro']\nnew_fact = infer_new_fact(selected) # 'Para saber a qué distancia puede llegar Olivia con un solo depósito, multiplica 25\\xa0kilómetros por litro\\xa0×\\xa012\\xa0litros = 300\\xa0kilómetros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos kilómetros puede conducir Sophia con un solo depósito de gasolina?', 'Para saber a qué distancia puede llegar Olivia con un solo depósito, multiplica 25\\xa0kilómetros por litro\\xa0×\\xa012\\xa0litros = 300\\xa0kilómetros']\nnew_fact = infer_new_fact(selected) # 'The answer is 300'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '300'"}
{"id": "GSM8K_65_b2468a824b", "context": "", "options": [], "answer": "36", "reasoning_graph_edges": [{"antecedents": [1, 2, 3], "consequent": 6}, {"antecedents": [1, 3, 6], "consequent": 7}, {"antecedents": [4, 6, 7], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent1 & sent2 & sent3 -> int1: He reads for 2/2=1 hour a night; int1 & sent1 & sent3 -> int2: So he spends 2+1=3 hours on these activities; int1 & int2 & sent4 -> int3: That means he spends 3*3=9 hours a week on them; int3 & sent5 -> int4: So in 4 weeks, he spends 9*4=36 hours on these activities; int4 & sent5 -> int5: The answer is 36;", "textual_logical_units": {"1": "Jim pasa 2 horas viendo la televisión y,", "2": "luego, decide irse a la cama y", "3": "leer la mitad de ese tiempo.", "4": "Lo hace 3 veces a la semana.", "5": "¿Cuántas horas pasa viendo televisión y leyendo en 4 semanas?", "6": "Lee 2 / 2 = 1 hora por noche", "7": "Así que dedica 2 + 1 = 3 horas a estas actividades", "8": "Eso significa que dedica 3 * 3 = 9 horas a la semana en esto", "9": "Así que en 4 semanas, dedica 9 * 4 = 36 horas a estas actividades", "10": "The answer is 36"}, "human_translated": true, "code_input": "####\nfacts = ['Jim pasa 2 horas viendo la televisión y,', 'luego, decide irse a la cama y', 'leer la mitad de ese tiempo.', 'Lo hace 3 veces a la semana.']\nquestion = '¿Cuántas horas pasa viendo televisión y leyendo en 4 semanas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Jim pasa 2 horas viendo la televisión y,', 'luego, decide irse a la cama y', 'leer la mitad de ese tiempo.']\nnew_fact = infer_new_fact(selected) # 'Lee 2\\xa0/\\xa02 = 1 hora por noche'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Jim pasa 2 horas viendo la televisión y,', 'leer la mitad de ese tiempo.', 'Lee 2\\xa0/\\xa02 = 1 hora por noche']\nnew_fact = infer_new_fact(selected) # 'Así que dedica 2\\xa0+\\xa01 = 3 horas a estas actividades'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Lo hace 3 veces a la semana.', 'Lee 2\\xa0/\\xa02 = 1 hora por noche', 'Así que dedica 2\\xa0+\\xa01 = 3 horas a estas actividades']\nnew_fact = infer_new_fact(selected) # 'Eso significa que dedica 3\\xa0*\\xa03 = 9 horas a la semana en esto'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas horas pasa viendo televisión y leyendo en 4 semanas?', 'Eso significa que dedica 3\\xa0*\\xa03 = 9 horas a la semana en esto']\nnew_fact = infer_new_fact(selected) # 'Así que en 4 semanas, dedica 9\\xa0*\\xa04 = 36 horas a estas actividades'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas horas pasa viendo televisión y leyendo en 4 semanas?', 'Así que en 4 semanas, dedica 9\\xa0*\\xa04 = 36 horas a estas actividades']\nnew_fact = infer_new_fact(selected) # 'The answer is 36'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '36'"}
{"id": "GSM8K_66_c163f23711", "context": "", "options": [], "answer": "48", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}, {"antecedents": [2, 3, 5], "consequent": 9}, {"antecedents": [8, 9], "consequent": 10}, {"antecedents": [1, 10], "consequent": 11}, {"antecedents": [6, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Each school has sent 1 girls’ basketball team + 1 boys’ basketball team = 2 teams.; int1 & sent4 -> int2: So each school has sent 2 teams * 5 players per team = 10 players.; sent2 & sent3 & sent5 -> int3: They have also each sent 2 teams * 1 coach per team = 2 coaches.; int2 & int3 -> int4: In total, each school has sent 10 players + 2 coaches = 12 people.; int4 & sent1 -> int5: Therefore, the schools have sent a total of 12 people per school * 4 schools = 48 people.; int5 & sent6 -> int6: The answer is 48;", "textual_logical_units": {"1": "Hay cuatro escuelas que compiten en un torneo de baloncesto.", "2": "Cada escuela ha enviado un equipo de baloncesto femenino y", "3": "un equipo de baloncesto masculino, y", "4": "cada equipo tiene 5 jugadores cada uno.", "5": "Cada escuela también ha enviado un entrenador para cada equipo.", "6": "En total, ¿a cuántas personas han enviado todas las escuelas?", "7": "Cada escuela ha enviado 1 equipo de baloncesto femenino + 1 equipo de baloncesto masculino = 2 equipos.", "8": "Así que cada escuela ha enviado 2 equipos * 5 jugadores por equipo = 10 jugadores.", "9": "También han enviado cada una 2 equipos * 1 entrenador por equipo = 2 entrenadores.", "10": "En total, cada escuela ha enviado 10 jugadores + 2 entrenadores = 12 personas.", "11": "Por lo tanto, las escuelas han enviado un total de 12 personas por escuela * 4 escuelas = 48 personas.", "12": "The answer is 48"}, "human_translated": true, "code_input": "####\nfacts = [ 'Hay cuatro escuelas que compiten en un torneo de baloncesto.',\n  'Cada escuela ha enviado un equipo de baloncesto femenino y',\n  'un equipo de baloncesto masculino, y',\n  'cada equipo tiene 5 jugadores cada uno.',\n  'Cada escuela también ha enviado un entrenador para cada equipo.']\nquestion = 'En total, ¿a cuántas personas han enviado todas las escuelas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Cada escuela ha enviado un equipo de baloncesto femenino y', 'un equipo de baloncesto masculino, y']\nnew_fact = infer_new_fact(selected) # 'Cada escuela ha enviado 1 equipo de baloncesto femenino\\xa0+\\xa01 equipo de baloncesto masculino = 2 equipos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['cada equipo tiene 5 jugadores cada uno.', 'Cada escuela ha enviado 1 equipo de baloncesto femenino\\xa0+\\xa01 equipo de baloncesto masculino = 2 equipos.']\nnew_fact = infer_new_fact(selected) # 'Así que cada escuela ha enviado 2 equipos\\xa0*\\xa05 jugadores por equipo = 10 jugadores.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada escuela ha enviado un equipo de baloncesto femenino y', 'un equipo de baloncesto masculino, y', 'Cada escuela también ha enviado un entrenador para cada equipo.']\nnew_fact = infer_new_fact(selected) # 'También han enviado cada una 2 equipos\\xa0*\\xa01 entrenador por equipo = 2 entrenadores.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Así que cada escuela ha enviado 2 equipos\\xa0*\\xa05 jugadores por equipo = 10 jugadores.', 'También han enviado cada una 2 equipos\\xa0*\\xa01 entrenador por equipo = 2 entrenadores.']\nnew_fact = infer_new_fact(selected) # 'En total, cada escuela ha enviado 10 jugadores\\xa0+\\xa02 entrenadores = 12 personas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Hay cuatro escuelas que compiten en un torneo de baloncesto.', 'En total, cada escuela ha enviado 10 jugadores\\xa0+\\xa02 entrenadores = 12 personas.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, las escuelas han enviado un total de 12 personas por escuela\\xa0*\\xa04 escuelas = 48 personas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En total, ¿a cuántas personas han enviado todas las escuelas?', 'Por lo tanto, las escuelas han enviado un total de 12 personas por escuela\\xa0*\\xa04 escuelas = 48 personas.']\nnew_fact = infer_new_fact(selected) # 'The answer is 48'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '48'"}
{"id": "GSM8K_67_eac7b1ff98", "context": "", "options": [], "answer": "595", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [2, 5, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 -> int1: There were 175 - 35 = 140 rubies in the treasure chest.; int1 & sent3 -> int2: There were 140 x 2 = 280 emeralds in the treasure chest.; int1 & int2 & sent2 -> int3: So, the total number of gems in the treasure chest is 175 + 140 + 280 = 595.; int3 & sent4 -> int4: The answer is 595;", "textual_logical_units": {"1": "Un cazador de tesoros encontró un cofre enterrado lleno de gemas.", "2": "Había 175 diamantes, 35 rubíes menos que diamantes", "3": "y el doble de esmeraldas que de rubíes.", "4": "¿Cuántas gemas había en el cofre?", "5": "Había 175 - 35 = 140 rubíes en el cofre del tesoro.", "6": "Había 140 × 2 = 280 esmeraldas en el cofre del tesoro.", "7": "Por lo tanto, el número total de gemas en el cofre del tesoro es 175 + 140 + 280 = 595.", "8": "The answer is 595"}, "human_translated": true, "code_input": "####\nfacts = [ 'Un cazador de tesoros encontró un cofre enterrado lleno de gemas.',\n  'Había 175 diamantes, 35 rubíes menos que diamantes',\n  'y el doble de esmeraldas que de rubíes.']\nquestion = '¿Cuántas gemas había en el cofre?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Había 175 diamantes, 35 rubíes menos que diamantes']\nnew_fact = infer_new_fact(selected) # 'Había 175\\xa0-\\xa035 = 140 rubíes en el cofre del tesoro.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y el doble de esmeraldas que de rubíes.', 'Había 175\\xa0-\\xa035 = 140 rubíes en el cofre del tesoro.']\nnew_fact = infer_new_fact(selected) # 'Había 140\\xa0×\\xa02 = 280 esmeraldas en el cofre del tesoro.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Había 175 diamantes, 35 rubíes menos que diamantes', 'Había 175\\xa0-\\xa035 = 140 rubíes en el cofre del tesoro.', 'Había 140\\xa0×\\xa02 = 280 esmeraldas en el cofre del tesoro.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, el número total de gemas en el cofre del tesoro es 175\\xa0+\\xa0140\\xa0+\\xa0280 = 595.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas gemas había en el cofre?', 'Por lo tanto, el número total de gemas en el cofre del tesoro es 175\\xa0+\\xa0140\\xa0+\\xa0280 = 595.']\nnew_fact = infer_new_fact(selected) # 'The answer is 595'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '595'"}
{"id": "GSM8K_68_e7bde02c2e", "context": "", "options": [], "answer": "36", "reasoning_graph_edges": [{"antecedents": [1, 3], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent1 & sent3 -> int1: There are twice as many boys as girls, so if there are 60 girls, there are 2*60 = 120 boys; int1 & sent3 -> int2: There are 120 + 60 = 180 students in total; int2 & sent4 -> int3: If there are 5 students to each teacher, then 180 students would need 180/5 = 36 teachers; int3 & sent5 -> int4: The answer is 36;", "textual_logical_units": {"1": "Hay el doble de niños que de niñas en la escuela del Dr.", "2": "Wertz.", "3": "Si hay 60 chicas y", "4": "5 alumnos por cada profesor,", "5": "¿cuántos profesores hay?", "6": "Hay el doble de niños que de niñas, así que si hay 60 niñas, hay 2 * 60 = 120 niños", "7": "Hay 120 + 60 = 180 estudiantes en total", "8": "Si hay 5 estudiantes por profesor, 180 estudiantes necesitarían 180 / 5 = 36 profesores", "9": "The answer is 36"}, "human_translated": true, "code_input": "####\nfacts = ['Hay el doble de niños que de niñas en la escuela del Dr.', 'Wertz.', 'Si hay 60 chicas y', '5 alumnos por cada profesor,']\nquestion = '¿cuántos profesores hay?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Hay el doble de niños que de niñas en la escuela del Dr.', 'Si hay 60 chicas y']\nnew_fact = infer_new_fact(selected) # 'Hay el doble de niños que de niñas, así que si hay 60 niñas, hay 2\\xa0*\\xa060 = 120 niños'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si hay 60 chicas y', 'Hay el doble de niños que de niñas, así que si hay 60 niñas, hay 2\\xa0*\\xa060 = 120 niños']\nnew_fact = infer_new_fact(selected) # 'Hay 120\\xa0+\\xa060 = 180 estudiantes en total'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['5 alumnos por cada profesor,', 'Hay 120\\xa0+\\xa060 = 180 estudiantes en total']\nnew_fact = infer_new_fact(selected) # 'Si hay 5 estudiantes por profesor, 180 estudiantes necesitarían 180\\xa0/\\xa05 = 36 profesores'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos profesores hay?', 'Si hay 5 estudiantes por profesor, 180 estudiantes necesitarían 180\\xa0/\\xa05 = 36 profesores']\nnew_fact = infer_new_fact(selected) # 'The answer is 36'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '36'"}
{"id": "GSM8K_69_3b456d32d8", "context": "", "options": [], "answer": "60", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 6}, {"antecedents": [3, 4, 6], "consequent": 7}, {"antecedents": [3, 4, 5, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 -> int1: In 8 weeks, Bailey receives $5 * 8 = $40 in allowance; int1 & sent3 & sent4 -> int2: Bailey started with $100 - $40 = $60; int2 & sent3 & sent4 & sent5 -> int3: The answer is 60;", "textual_logical_units": {"1": "Bailey empieza con una cierta cantidad de dinero.", "2": "Luego, recibe una asignación semanal de 5 € durante 8 semanas.", "3": "Al final de las 8 semanas,", "4": "si tiene un total de 100 €,", "5": "¿con cuánto dinero empezó Bailey?", "6": "En 8 semanas, Bailey recibe una asignación de 5 € * 8 = 40 €", "7": "Bailey empezó con 100 € - 40 € = 60 €", "8": "The answer is 60"}, "human_translated": true, "code_input": "####\nfacts = [ 'Bailey empieza con una cierta cantidad de dinero.',\n  'Luego, recibe una asignación semanal de 5\\xa0€ durante 8 semanas.',\n  'Al final de las 8 semanas,',\n  'si tiene un total de 100\\xa0€,']\nquestion = '¿con cuánto dinero empezó Bailey?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Luego, recibe una asignación semanal de 5\\xa0€ durante 8 semanas.']\nnew_fact = infer_new_fact(selected) # 'En 8 semanas, Bailey recibe una asignación de 5\\xa0€\\xa0*\\xa08 = 40\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Al final de las 8 semanas,', 'si tiene un total de 100\\xa0€,', 'En 8 semanas, Bailey recibe una asignación de 5\\xa0€\\xa0*\\xa08 = 40\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Bailey empezó con 100\\xa0€\\xa0-\\xa040\\xa0€ = 60\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Al final de las 8 semanas,', 'si tiene un total de 100\\xa0€,', '¿con cuánto dinero empezó Bailey?', 'Bailey empezó con 100\\xa0€\\xa0-\\xa040\\xa0€ = 60\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 60'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '60'"}
{"id": "GSM8K_70_5540274292", "context": "", "options": [], "answer": "7425", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [2, 6], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}, {"antecedents": [2, 3, 4, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent1 -> int1: She teaches 5 dance classes 5 days a week so that's 5*5 = 25 classes; int1 & sent1 -> int2: She teaches 25 classes during the week and 8 classes on Saturday for a total of 25+8 = 33 classes; int2 & sent2 -> int3: There are 15 students in each of the 33 classes so there are 15*33 = 495 students; int3 & sent3 -> int4: Each student pays $15.00 per class and there are 495 students so Judy makes 15*495 = $7,425; int4 & sent2 & sent3 & sent4 -> int5: The answer is 7425;", "textual_logical_units": {"1": "Judy imparte 5 clases de baile, todos los días, de lunes a viernes y 8 clases los sábados.", "2": "Si cada clase tiene 15 estudiantes y", "3": "cobra 15,00 € por estudiante,", "4": "¿cuánto dinero gana en una semana?", "5": "Imparte 5 clases de baile 5 días a la semana, así que son 5 * 5 = 25 clases", "6": "Imparte 25 clases durante la semana y 8 clases los sábados, lo que supone un total de 25 + 8 = 33 clases", "7": "Hay 15 estudiantes en cada una de las 33 clases, por lo que hay 15 * 33 = 495 estudiantes", "8": "Cada estudiante paga 15,00 € por clase y hay 495 estudiantes, por lo que Judy gana 15 * 495 = 7425 €", "9": "The answer is 7425"}, "human_translated": true, "code_input": "####\nfacts = [ 'Judy imparte 5 clases de baile, todos los días, de lunes a viernes y 8 clases los sábados.',\n  'Si cada clase tiene 15 estudiantes y',\n  'cobra 15,00\\xa0€ por estudiante,']\nquestion = '¿cuánto dinero gana en una semana?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Judy imparte 5 clases de baile, todos los días, de lunes a viernes y 8 clases los sábados.']\nnew_fact = infer_new_fact(selected) # 'Imparte 5 clases de baile 5 días a la semana, así que son 5\\xa0*\\xa05 = 25 clases'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Judy imparte 5 clases de baile, todos los días, de lunes a viernes y 8 clases los sábados.', 'Imparte 5 clases de baile 5 días a la semana, así que son 5\\xa0*\\xa05 = 25 clases']\nnew_fact = infer_new_fact(selected) # 'Imparte 25 clases durante la semana y 8 clases los sábados, lo que supone un total de 25\\xa0+\\xa08 = 33 clases'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si cada clase tiene 15 estudiantes y', 'Imparte 25 clases durante la semana y 8 clases los sábados, lo que supone un total de 25\\xa0+\\xa08 = 33 clases']\nnew_fact = infer_new_fact(selected) # 'Hay 15 estudiantes en cada una de las 33 clases, por lo que hay 15\\xa0*\\xa033 = 495 estudiantes'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['cobra 15,00\\xa0€ por estudiante,', 'Hay 15 estudiantes en cada una de las 33 clases, por lo que hay 15\\xa0*\\xa033 = 495 estudiantes']\nnew_fact = infer_new_fact(selected) # 'Cada estudiante paga 15,00\\xa0€ por clase y hay 495 estudiantes, por lo que Judy gana 15\\xa0*\\xa0495 = 7425\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si cada clase tiene 15 estudiantes y', 'cobra 15,00\\xa0€ por estudiante,', '¿cuánto dinero gana en una semana?', 'Cada estudiante paga 15,00\\xa0€ por clase y hay 495 estudiantes, por lo que Judy gana 15\\xa0*\\xa0495 = 7425\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 7425'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '7425'"}
{"id": "GSM8K_71_c4f2bf54b1", "context": "", "options": [], "answer": "60", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [2, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: The second recipe has 2 * 20 instructions = 40 instructions.; int1 & sent2 -> int2: The total for the two dishes is 40 instructions + 20 instructions = 60 instructions.; int2 & sent4 -> int3: The answer is 60;", "textual_logical_units": {"1": "Kelian tiene dos recetas para preparar platos,", "2": "una tiene 20 instrucciones y", "3": "la segunda tiene el doble de instrucciones que la primera.", "4": "¿Cuántas instrucciones debe leer Kelian para preparar los dos platos?", "5": "La segunda receta tiene 2 * 20 instrucciones = 40 instrucciones.", "6": "El total de los dos platos es de 40 instrucciones + 20 instrucciones = 60 instrucciones.", "7": "The answer is 60"}, "human_translated": true, "code_input": "####\nfacts = ['Kelian tiene dos recetas para preparar platos,', 'una tiene 20 instrucciones y', 'la segunda tiene el doble de instrucciones que la primera.']\nquestion = '¿Cuántas instrucciones debe leer Kelian para preparar los dos platos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['una tiene 20 instrucciones y', 'la segunda tiene el doble de instrucciones que la primera.']\nnew_fact = infer_new_fact(selected) # 'La segunda receta tiene 2\\xa0*\\xa020 instrucciones = 40 instrucciones.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['una tiene 20 instrucciones y', 'La segunda receta tiene 2\\xa0*\\xa020 instrucciones = 40 instrucciones.']\nnew_fact = infer_new_fact(selected) # 'El total de los dos platos es de 40 instrucciones\\xa0+\\xa020 instrucciones = 60 instrucciones.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas instrucciones debe leer Kelian para preparar los dos platos?', 'El total de los dos platos es de 40 instrucciones\\xa0+\\xa020 instrucciones = 60 instrucciones.']\nnew_fact = infer_new_fact(selected) # 'The answer is 60'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '60'"}
{"id": "GSM8K_72_53c969e291", "context": "", "options": [], "answer": "221", "reasoning_graph_edges": [{"antecedents": [1, 3], "consequent": 5}, {"antecedents": [2, 3], "consequent": 6}, {"antecedents": [4, 5, 6], "consequent": 7}, {"antecedents": [3, 4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent3 -> int1: Tommy raised 43 brownies x $3/brownie = $129 by selling brownies.; sent2 & sent3 -> int2: Tommy raised 23 slices x $4 = $92 by selling cheesecakes.; int1 & int2 & sent4 -> int3: In total Tommy has raised $129 + $92 = $221; int3 & sent3 & sent4 -> int4: The answer is 221;", "textual_logical_units": {"1": "Tommy está recaudando fondos para su organización benéfica vendiendo brownies a 3 € la porción y", "2": "tartas de queso a 4 € la porción.", "3": "Si Tommy vende 43 brownies y 23 porciones de tarta de queso,", "4": "¿cuánto dinero recauda Tommy?", "5": "Tommy recaudó 43 brownies × 3 €/brownie = 129 € vendiendo brownies.", "6": "Tommy recaudó 23 porciones × 4 € = 92 € vendiendo tartas de queso.", "7": "En total, Tommy ha recaudado 129 € + 92 € = 221 €", "8": "The answer is 221"}, "human_translated": true, "code_input": "####\nfacts = [ 'Tommy está recaudando fondos para su organización benéfica vendiendo brownies a 3\\xa0€ la porción y',\n  'tartas de queso a 4\\xa0€ la porción.',\n  'Si Tommy vende 43 brownies y 23 porciones de tarta de queso,']\nquestion = '¿cuánto dinero recauda Tommy?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Tommy está recaudando fondos para su organización benéfica vendiendo brownies a 3\\xa0€ la porción y', 'Si Tommy vende 43 brownies y 23 porciones de tarta de queso,']\nnew_fact = infer_new_fact(selected) # 'Tommy recaudó 43 brownies\\xa0×\\xa03\\xa0€/brownie = 129\\xa0€ vendiendo brownies.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['tartas de queso a 4\\xa0€ la porción.', 'Si Tommy vende 43 brownies y 23 porciones de tarta de queso,']\nnew_fact = infer_new_fact(selected) # 'Tommy recaudó 23 porciones\\xa0×\\xa04\\xa0€ = 92\\xa0€ vendiendo tartas de queso.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuánto dinero recauda Tommy?', 'Tommy recaudó 43 brownies\\xa0×\\xa03\\xa0€/brownie = 129\\xa0€ vendiendo brownies.', 'Tommy recaudó 23 porciones\\xa0×\\xa04\\xa0€ = 92\\xa0€ vendiendo tartas de queso.']\nnew_fact = infer_new_fact(selected) # 'En total, Tommy ha recaudado 129\\xa0€\\xa0+\\xa092\\xa0€ = 221\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Tommy vende 43 brownies y 23 porciones de tarta de queso,', '¿cuánto dinero recauda Tommy?', 'En total, Tommy ha recaudado 129\\xa0€\\xa0+\\xa092\\xa0€ = 221\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 221'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '221'"}
{"id": "GSM8K_73_5e0a20f343", "context": "", "options": [], "answer": "255", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [1, 4], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: A $150 x 2/100 = $3 interest will be charged for each unit.; int1 & sent1 -> int2: So, each cell phone costs $150 + $3 = $153.; int2 & sent1 -> int3: The total amount to be paid for 5 cell phones is $153 x 5 = $765.; int3 & sent3 -> int4: Thus, Shiela will pay $765/3 = $255 each month.; int4 & sent3 -> int5: The answer is 255;", "textual_logical_units": {"1": "Shiela compró cinco teléfonos móviles a 150 € con un plan de pago a plazos de 3 meses.", "2": "Se cobrará un interés del 2 % por cada unidad.", "3": "¿Cuánto pagará Shiela cada mes durante 3 meses?", "4": "Se cobrará un interés de 150 € × 2 / 100 = 3 € por cada unidad.", "5": "Por lo tanto, cada teléfono móvil cuesta 150 € + 3 € = 153 €.", "6": "El importe total que hay que pagar por 5 teléfonos móviles es de 153 € × 5 = 765 €.", "7": "Por lo tanto, Shiela pagará 765 € / 3 = 255 € cada mes.", "8": "The answer is 255"}, "human_translated": true, "code_input": "####\nfacts = ['Shiela compró cinco teléfonos móviles a 150\\xa0€ con un plan de pago a plazos de 3 meses.', 'Se cobrará un interés del 2\\xa0% por cada unidad.']\nquestion = '¿Cuánto pagará Shiela cada mes durante 3 meses?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Shiela compró cinco teléfonos móviles a 150\\xa0€ con un plan de pago a plazos de 3 meses.', 'Se cobrará un interés del 2\\xa0% por cada unidad.']\nnew_fact = infer_new_fact(selected) # 'Se cobrará un interés de 150\\xa0€\\xa0×\\xa02\\xa0/\\xa0100 = 3\\xa0€ por cada unidad.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Shiela compró cinco teléfonos móviles a 150\\xa0€ con un plan de pago a plazos de 3 meses.', 'Se cobrará un interés de 150\\xa0€\\xa0×\\xa02\\xa0/\\xa0100 = 3\\xa0€ por cada unidad.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, cada teléfono móvil cuesta 150\\xa0€\\xa0+\\xa03\\xa0€ = 153\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Shiela compró cinco teléfonos móviles a 150\\xa0€ con un plan de pago a plazos de 3 meses.', 'Por lo tanto, cada teléfono móvil cuesta 150\\xa0€\\xa0+\\xa03\\xa0€ = 153\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'El importe total que hay que pagar por 5 teléfonos móviles es de 153\\xa0€\\xa0×\\xa05 = 765\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto pagará Shiela cada mes durante 3 meses?', 'El importe total que hay que pagar por 5 teléfonos móviles es de 153\\xa0€\\xa0×\\xa05 = 765\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, Shiela pagará 765\\xa0€\\xa0/\\xa03 = 255\\xa0€ cada mes.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto pagará Shiela cada mes durante 3 meses?', 'Por lo tanto, Shiela pagará 765\\xa0€\\xa0/\\xa03 = 255\\xa0€ cada mes.']\nnew_fact = infer_new_fact(selected) # 'The answer is 255'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '255'"}
{"id": "GSM8K_74_0a4493ada4", "context": "", "options": [], "answer": "88", "reasoning_graph_edges": [{"antecedents": [3, 7], "consequent": 11}, {"antecedents": [4, 7], "consequent": 12}, {"antecedents": [5, 7], "consequent": 13}, {"antecedents": [8, 11], "consequent": 14}, {"antecedents": [9, 12], "consequent": 15}, {"antecedents": [9, 13], "consequent": 16}, {"antecedents": [10, 14, 15, 16], "consequent": 17}, {"antecedents": [8, 9, 10, 17], "consequent": 18}], "metadata": [], "linearized_output_en": "sent3 & sent7 -> int1: Artie will round his marigolds up from $2.74 to $3, since the number following the 2 is 5 or higher.; sent4 & sent7 -> int2: Artie will round his petunias up from $1.87 to $2, since the number following the 1 is 5 or higher.; sent5 & sent7 -> int3: Artie will round his begonias down from $2.12 to $2, since the number following the 2 is less than 5.; int1 & sent8 -> int4: Artie sells 12 marigolds x $3 = $36; int2 & sent9 -> int5: Artie sells 9 petunias x $2 = $18; int3 & sent9 -> int6: Artie sells 17 begonias x $2 = $34; int4 & int5 & int6 & sent10 -> int7: Altogether, Artie will make $36 + $18 + $34 = $88; int7 & sent10 & sent8 & sent9 -> int8: The answer is 88;", "textual_logical_units": {"1": "Artie tiene un puesto de flores en el mercado agrícola.", "2": "Vende tres tipos de flores: caléndulas, petunias y begonias.", "3": "Suele vender caléndulas a 2,74 € la maceta,", "4": "petunias a 1,87 € la maceta y", "5": "begonias a 2,12 € la maceta.", "6": "Artie no tiene cambio hoy,", "7": "por lo que ha decidido redondear todos sus precios al euro más cercano.", "8": "Si Artie vende 12 macetas de caléndulas,", "9": "9 macetas de petunias y 17 macetas de begonias,", "10": "¿cuánto ganará?", "11": "Artie redondeará sus caléndulas al alza de 2,74 a 3 €, ya que el número que sigue al 2 es 5 o superior.", "12": "Artie redondeará sus petunias al alza de 1,87 a 2 €, ya que el número que sigue al 1 es 5 o superior.", "13": "Artie redondeará sus begonias de 2,12 a 2 €, ya que el número que sigue al 2 es inferior a 5.", "14": "Artie vende 12 caléndulas × 3 € = 36 €", "15": "Artie vende 9 petunias × 2 € = 18 €", "16": "Artie vende 17 begonias × 2 € = 34 €", "17": "En total, Artie ganará 36 € + 18 € + 34 € = 88 €", "18": "The answer is 88"}, "human_translated": true, "code_input": "####\nfacts = [ 'Artie tiene un puesto de flores en el mercado agrícola.',\n  'Vende tres tipos de flores: caléndulas, petunias y begonias.',\n  'Suele vender caléndulas a 2,74\\xa0€ la maceta,',\n  'petunias a 1,87\\xa0€ la maceta y',\n  'begonias a 2,12\\xa0€ la maceta.',\n  'Artie no tiene cambio hoy,',\n  'por lo que ha decidido redondear todos sus precios al euro más cercano.',\n  'Si Artie vende 12 macetas de caléndulas,',\n  '9 macetas de petunias y 17 macetas de begonias,']\nquestion = '¿cuánto ganará?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Suele vender caléndulas a 2,74\\xa0€ la maceta,', 'por lo que ha decidido redondear todos sus precios al euro más cercano.']\nnew_fact = infer_new_fact(selected) # 'Artie redondeará sus caléndulas al alza de 2,74 a 3\\xa0€, ya que el número que sigue al 2 es 5 o superior.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['petunias a 1,87\\xa0€ la maceta y', 'por lo que ha decidido redondear todos sus precios al euro más cercano.']\nnew_fact = infer_new_fact(selected) # 'Artie redondeará sus petunias al alza de 1,87 a 2\\xa0€, ya que el número que sigue al 1 es 5 o superior.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['begonias a 2,12\\xa0€ la maceta.', 'por lo que ha decidido redondear todos sus precios al euro más cercano.']\nnew_fact = infer_new_fact(selected) # 'Artie redondeará sus begonias de 2,12 a 2\\xa0€, ya que el número que sigue al 2 es inferior a 5.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Artie vende 12 macetas de caléndulas,', 'Artie redondeará sus caléndulas al alza de 2,74 a 3\\xa0€, ya que el número que sigue al 2 es 5 o superior.']\nnew_fact = infer_new_fact(selected) # 'Artie vende 12 caléndulas\\xa0×\\xa03\\xa0€ = 36\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['9 macetas de petunias y 17 macetas de begonias,', 'Artie redondeará sus petunias al alza de 1,87 a 2\\xa0€, ya que el número que sigue al 1 es 5 o superior.']\nnew_fact = infer_new_fact(selected) # 'Artie vende 9 petunias\\xa0×\\xa02\\xa0€ =\\xa018\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['9 macetas de petunias y 17 macetas de begonias,', 'Artie redondeará sus begonias de 2,12 a 2\\xa0€, ya que el número que sigue al 2 es inferior a 5.']\nnew_fact = infer_new_fact(selected) # 'Artie vende 17 begonias\\xa0×\\xa02\\xa0€ =\\xa034\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuánto ganará?', 'Artie vende 12 caléndulas\\xa0×\\xa03\\xa0€ = 36\\xa0€', 'Artie vende 9 petunias\\xa0×\\xa02\\xa0€ =\\xa018\\xa0€', 'Artie vende 17 begonias\\xa0×\\xa02\\xa0€ =\\xa034\\xa0€']\nnew_fact = infer_new_fact(selected) # 'En total, Artie ganará 36\\xa0€\\xa0+\\xa018\\xa0€\\xa0+\\xa034\\xa0€ = 88\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Artie vende 12 macetas de caléndulas,', '9 macetas de petunias y 17 macetas de begonias,', '¿cuánto ganará?', 'En total, Artie ganará 36\\xa0€\\xa0+\\xa018\\xa0€\\xa0+\\xa034\\xa0€ = 88\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 88'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '88'"}
{"id": "GSM8K_75_df37851fde", "context": "", "options": [], "answer": "60", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [2, 5], "consequent": 6}, {"antecedents": [2, 6], "consequent": 7}, {"antecedents": [3, 5, 6, 7], "consequent": 8}, {"antecedents": [4, 8], "consequent": 9}, {"antecedents": [3, 4, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Level 3 is 32 square feet because 16 x 2 = 32; int1 & sent2 -> int2: Level 2 is 64 square feet because 32 x 2 = 64; int2 & sent2 -> int3: Level 1 is 128 square feet because 64 x 2 = 128; int1 & int2 & int3 & sent3 -> int4: The four levels total to 240 square feet because 128 + 64 + 32 + 16 = 240; int4 & sent4 -> int5: The average square footage of a level is 60 because 240 / 4 = 60; int5 & sent3 & sent4 -> int6: The answer is 60;", "textual_logical_units": {"1": "Luke pasa tiempo en la playa construyendo castillos de arena.", "2": "Finalmente, se da cuenta de que cada nivel de un castillo de arena tendrá la mitad de centímetros cuadrados que el nivel inferior.", "3": "Si hace un castillo de arena de 4 niveles donde el nivel superior tiene 16 centímetros cuadrados,", "4": "¿cuál es el promedio de centímetros cuadrados de un nivel?", "5": "El nivel 3 mide 32 centímetros cuadrados porque 16 × 2 = 32", "6": "El nivel 2 mide 64 centímetros cuadrados porque 32 × 2 = 64", "7": "El nivel 1 mide 128 centímetros cuadrados porque 64 × 2 = 128", "8": "Los cuatro niveles suman un total de 240 centímetros cuadrados porque 128 + 64 + 32 + 16 = 240", "9": "El promedio de centímetros cuadrados de un nivel es de 60 porque 240 / 4 = 60", "10": "The answer is 60"}, "human_translated": true, "code_input": "####\nfacts = [ 'Luke pasa tiempo en la playa construyendo castillos de arena.',\n  'Finalmente, se da cuenta de que cada nivel de un castillo de arena tendrá la mitad de centímetros cuadrados que el nivel inferior.',\n  'Si hace un castillo de arena de 4 niveles donde el nivel superior tiene 16\\xa0centímetros cuadrados,']\nquestion = '¿cuál es el promedio de centímetros cuadrados de un nivel?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Finalmente, se da cuenta de que cada nivel de un castillo de arena tendrá la mitad de centímetros cuadrados que el nivel inferior.', 'Si hace un castillo de arena de 4 niveles donde el nivel superior tiene 16\\xa0centímetros cuadrados,']\nnew_fact = infer_new_fact(selected) # 'El nivel 3 mide 32\\xa0centímetros cuadrados porque 16\\xa0×\\xa02 = 32'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Finalmente, se da cuenta de que cada nivel de un castillo de arena tendrá la mitad de centímetros cuadrados que el nivel inferior.', 'El nivel 3 mide 32\\xa0centímetros cuadrados porque 16\\xa0×\\xa02 = 32']\nnew_fact = infer_new_fact(selected) # 'El nivel 2 mide 64\\xa0centímetros cuadrados porque 32\\xa0×\\xa02 = 64'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Finalmente, se da cuenta de que cada nivel de un castillo de arena tendrá la mitad de centímetros cuadrados que el nivel inferior.', 'El nivel 2 mide 64\\xa0centímetros cuadrados porque 32\\xa0×\\xa02 = 64']\nnew_fact = infer_new_fact(selected) # 'El nivel 1 mide 128\\xa0centímetros cuadrados porque 64\\xa0×\\xa02 = 128'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si hace un castillo de arena de 4 niveles donde el nivel superior tiene 16\\xa0centímetros cuadrados,', 'El nivel 3 mide 32\\xa0centímetros cuadrados porque 16\\xa0×\\xa02 = 32', 'El nivel 2 mide 64\\xa0centímetros cuadrados porque 32\\xa0×\\xa02 = 64', 'El nivel 1 mide 128\\xa0centímetros cuadrados porque 64\\xa0×\\xa02 = 128']\nnew_fact = infer_new_fact(selected) # 'Los cuatro niveles suman un total de 240\\xa0centímetros cuadrados porque 128 + 64 + 32 + 16 = 240'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuál es el promedio de centímetros cuadrados de un nivel?', 'Los cuatro niveles suman un total de 240\\xa0centímetros cuadrados porque 128 + 64 + 32 + 16 = 240']\nnew_fact = infer_new_fact(selected) # 'El promedio de centímetros cuadrados de un nivel es de 60\\xa0porque 240\\xa0/\\xa04 = 60'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si hace un castillo de arena de 4 niveles donde el nivel superior tiene 16\\xa0centímetros cuadrados,', '¿cuál es el promedio de centímetros cuadrados de un nivel?', 'El promedio de centímetros cuadrados de un nivel es de 60\\xa0porque 240\\xa0/\\xa04 = 60']\nnew_fact = infer_new_fact(selected) # 'The answer is 60'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '60'"}
{"id": "GSM8K_76_92aabda037", "context": "", "options": [], "answer": "5", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 6}, {"antecedents": [6], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}, {"antecedents": [6, 8], "consequent": 9}, {"antecedents": [4, 5, 9], "consequent": 10}, {"antecedents": [4, 5, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent2 -> int1: The number of cups of dog food given for the first 180 days is 180 * 1 = 180 cups; int1 -> int2: The number of days left in the year is 365 - 180 = 185; int2 & sent3 -> int3: The number of cups of dog food given for the rest of the first year is 185 * 2 = 370 cups; int1 & int3 -> int4: The total number of cups given in the first year is 180 + 370 = 550 cups; int4 & sent4 & sent5 -> int5: The number of bags of dog food used in the first year is 550 / 110 = 5 bags; int5 & sent4 & sent5 -> int6: The answer is 5;", "textual_logical_units": {"1": "Cecilia acaba de comprar un nuevo cachorro.", "2": "Según su veterinario, tiene que alimentar al cachorro con 1 taza de comida para perros todos los días durante los primeros 180 días.", "3": "Luego, tiene que alimentar al cachorro con 2 tazas de comida para perros todos los días durante el resto de su vida.", "4": "Si una bolsa de comida para perros contiene 110 tazas,", "5": "¿cuántas bolsas de comida para perros usará Cecilia en el primer año?", "6": "El número de tazas de comida para perros administradas durante los primeros 180 días es de 180 * 1 = 180 tazas", "7": "El número de días que quedan en el año es 365 - 180 = 185", "8": "El número de tazas de comida para perros que se administran durante el resto del primer año es de 185 * 2 = 370 tazas", "9": "El número total de tazas que se dan en el primer año es 180 + 370 = 550 tazas", "10": "El número de bolsas de comida para perros utilizadas en el primer año es de 550 / 110 = 5 bolsas", "11": "The answer is 5"}, "human_translated": true, "code_input": "####\nfacts = [ 'Cecilia acaba de comprar un nuevo cachorro.',\n  'Según su veterinario, tiene que alimentar al cachorro con 1 taza de comida para perros todos los días durante los primeros 180 días.',\n  'Luego, tiene que alimentar al cachorro con 2 tazas de comida para perros todos los días durante el resto de su vida.',\n  'Si una bolsa de comida para perros contiene 110 tazas,']\nquestion = '¿cuántas bolsas de comida para perros usará Cecilia en el primer año?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Según su veterinario, tiene que alimentar al cachorro con 1 taza de comida para perros todos los días durante los primeros 180 días.']\nnew_fact = infer_new_fact(selected) # 'El número de tazas de comida para perros administradas durante los primeros 180 días es de 180\\xa0*\\xa01 = 180 tazas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El número de tazas de comida para perros administradas durante los primeros 180 días es de 180\\xa0*\\xa01 = 180 tazas']\nnew_fact = infer_new_fact(selected) # 'El número de días que quedan en el año es 365\\xa0-\\xa0180 = 185'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Luego, tiene que alimentar al cachorro con 2 tazas de comida para perros todos los días durante el resto de su vida.', 'El número de días que quedan en el año es 365\\xa0-\\xa0180 = 185']\nnew_fact = infer_new_fact(selected) # 'El número de tazas de comida para perros que se administran durante el resto del primer año es de 185\\xa0*\\xa02 = 370 tazas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El número de tazas de comida para perros administradas durante los primeros 180 días es de 180\\xa0*\\xa01 = 180 tazas', 'El número de tazas de comida para perros que se administran durante el resto del primer año es de 185\\xa0*\\xa02 = 370 tazas']\nnew_fact = infer_new_fact(selected) # 'El número total de tazas que se dan en el primer año es 180\\xa0+\\xa0370 = 550 tazas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si una bolsa de comida para perros contiene 110 tazas,', '¿cuántas bolsas de comida para perros usará Cecilia en el primer año?', 'El número total de tazas que se dan en el primer año es 180\\xa0+\\xa0370 = 550 tazas']\nnew_fact = infer_new_fact(selected) # 'El número de bolsas de comida para perros utilizadas en el primer año es de 550\\xa0/\\xa0110 = 5 bolsas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si una bolsa de comida para perros contiene 110 tazas,', '¿cuántas bolsas de comida para perros usará Cecilia en el primer año?', 'El número de bolsas de comida para perros utilizadas en el primer año es de 550\\xa0/\\xa0110 = 5 bolsas']\nnew_fact = infer_new_fact(selected) # 'The answer is 5'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '5'"}
{"id": "GSM8K_77_8aff5c238d", "context": "", "options": [], "answer": "100", "reasoning_graph_edges": [{"antecedents": [1, 4], "consequent": 5}, {"antecedents": [2, 4], "consequent": 6}, {"antecedents": [3, 5, 6], "consequent": 7}, {"antecedents": [1, 2, 3, 4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent4 -> int1: If Sarah does 400 pounds of laundry, and Raymond does half as much laundry as Sarah, Raymond does 1/2*400 = 200 pounds of laundry.; sent2 & sent4 -> int2: Sara also does 4 times as much laundry as David, meaning David does 400/4 = 100 pounds of laundry.; int1 & int2 & sent3 -> int3: The difference in the amount of laundry Raymond and David do is 200-100 = 100 pounds; int3 & sent1 & sent2 & sent3 & sent4 -> int4: The answer is 100;", "textual_logical_units": {"1": "Si Raymond lava la mitad de ropa que Sarah", "2": "y Sarah lava 4 veces más ropa que David,", "3": "calcula la diferencia en la cantidad de ropa que Raymond y", "4": "David lavan si Sarah lava 180 kilos de ropa.", "5": "Si Sarah lava 180 kilos de ropa y Raymond lava la mitad que Sarah, Raymond lava 1 / 2 * 180 = 90 kilos de ropa.", "6": "Sara también lava 4 veces más ropa que David, lo que significa que David lava 180 / 4 = 45 kilos de ropa.", "7": "La diferencia en la cantidad de ropa que lavan Raymond y David es de 90 - 45 = 45 kilos", "8": "The answer is 100"}, "human_translated": true, "code_input": "####\nfacts = ['Si Raymond lava la mitad de ropa que Sarah', 'y Sarah lava 4 veces más ropa que David,', 'calcula la diferencia en la cantidad de ropa que Raymond y']\nquestion = 'David lavan si Sarah lava 180 kilos de ropa.'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Si Raymond lava la mitad de ropa que Sarah', 'David lavan si Sarah lava 180 kilos de ropa.']\nnew_fact = infer_new_fact(selected) # 'Si Sarah lava 180 kilos de ropa y Raymond lava la mitad que Sarah, Raymond lava 1\\xa0/\\xa02\\xa0* 180 = 90 kilos de ropa.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y Sarah lava 4 veces más ropa que David,', 'David lavan si Sarah lava 180 kilos de ropa.']\nnew_fact = infer_new_fact(selected) # 'Sara también lava 4 veces más ropa que David, lo que significa que David lava 180\\xa0/\\xa04 = 45 kilos de ropa.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['calcula la diferencia en la cantidad de ropa que Raymond y', 'Si Sarah lava 180 kilos de ropa y Raymond lava la mitad que Sarah, Raymond lava 1\\xa0/\\xa02\\xa0* 180 = 90 kilos de ropa.', 'Sara también lava 4 veces más ropa que David, lo que significa que David lava 180\\xa0/\\xa04 = 45 kilos de ropa.']\nnew_fact = infer_new_fact(selected) # 'La diferencia en la cantidad de ropa que lavan Raymond y David es de 90\\xa0-\\xa045 = 45 kilos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Raymond lava la mitad de ropa que Sarah', 'y Sarah lava 4 veces más ropa que David,', 'calcula la diferencia en la cantidad de ropa que Raymond y', 'David lavan si Sarah lava 180 kilos de ropa.', 'La diferencia en la cantidad de ropa que lavan Raymond y David es de 90\\xa0-\\xa045 = 45 kilos']\nnew_fact = infer_new_fact(selected) # 'The answer is 100'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '100'"}
{"id": "GSM8K_78_6d7b636c76", "context": "", "options": [], "answer": "6", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 3}, {"antecedents": [1, 3], "consequent": 4}, {"antecedents": [1, 2], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [2, 4, 6], "consequent": 7}, {"antecedents": [2, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Find how many packages of 3 would be needed which is 18 ÷ 3 = 6.; int1 & sent1 -> int2: The cost of using packages of 3 is 6 × $2.50 = $15.; sent1 & sent2 -> int3: Find how many packages of 2 would be needed which is 18 ÷ 2 = 9.; int3 & sent1 -> int4: The cost of using packages of 2 is 9 × $1 = $9.; int2 & int4 & sent2 -> int5: Vincent would save $15 - $9 = $6.; int5 & sent2 -> int6: The answer is 6;", "textual_logical_units": {"1": "Vincent puede comprar flores en paquetes de 3 por 2,50 € o en paquetes de 2 por 1 €.", "2": "¿Cuánto dinero se ahorra comprando 18 flores al mejor precio?", "3": "Calcula cuántos paquetes de 3 serían necesarios, lo que equivale a 18 ÷ 3 = 6.", "4": "El coste de usar paquetes de 3 es de 6 × 2,50 € = 15 €.", "5": "Calcula cuántos paquetes de 2 serían necesarios, lo que equivale a 18 ÷ 2 = 9.", "6": "El coste de usar paquetes de 2 es 9 × 1 € = 9 €.", "7": "Vincent ahorraría 15 - 9 € = 6 €.", "8": "The answer is 6"}, "human_translated": true, "code_input": "####\nfacts = ['Vincent puede comprar flores en paquetes de 3 por 2,50\\xa0€ o en paquetes de 2 por 1\\xa0€.']\nquestion = '¿Cuánto dinero se ahorra comprando 18 flores al mejor precio?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Vincent puede comprar flores en paquetes de 3 por 2,50\\xa0€ o en paquetes de 2 por 1\\xa0€.', '¿Cuánto dinero se ahorra comprando 18 flores al mejor precio?']\nnew_fact = infer_new_fact(selected) # 'Calcula cuántos paquetes de 3 serían necesarios, lo que equivale a 18\\xa0÷\\xa03 = 6.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Vincent puede comprar flores en paquetes de 3 por 2,50\\xa0€ o en paquetes de 2 por 1\\xa0€.', 'Calcula cuántos paquetes de 3 serían necesarios, lo que equivale a 18\\xa0÷\\xa03 = 6.']\nnew_fact = infer_new_fact(selected) # 'El coste de usar paquetes de 3 es de 6\\xa0×\\xa02,50\\xa0€ = 15\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Vincent puede comprar flores en paquetes de 3 por 2,50\\xa0€ o en paquetes de 2 por 1\\xa0€.', '¿Cuánto dinero se ahorra comprando 18 flores al mejor precio?']\nnew_fact = infer_new_fact(selected) # 'Calcula cuántos paquetes de 2 serían necesarios, lo que equivale a 18\\xa0÷\\xa02 = 9.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Vincent puede comprar flores en paquetes de 3 por 2,50\\xa0€ o en paquetes de 2 por 1\\xa0€.', 'Calcula cuántos paquetes de 2 serían necesarios, lo que equivale a 18\\xa0÷\\xa02 = 9.']\nnew_fact = infer_new_fact(selected) # 'El coste de usar paquetes de 2 es 9 ×\\xa01\\xa0€ =\\xa09\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto dinero se ahorra comprando 18 flores al mejor precio?', 'El coste de usar paquetes de 3 es de 6\\xa0×\\xa02,50\\xa0€ = 15\\xa0€.', 'El coste de usar paquetes de 2 es 9 ×\\xa01\\xa0€ =\\xa09\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Vincent ahorraría 15\\xa0-\\xa09\\xa0€ = 6\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto dinero se ahorra comprando 18 flores al mejor precio?', 'Vincent ahorraría 15\\xa0-\\xa09\\xa0€ = 6\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'The answer is 6'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '6'"}
{"id": "GSM8K_79_af5edf5e8b", "context": "", "options": [], "answer": "70", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [2, 4, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: The groomer gave a 100*.3=$30 discount; int1 & sent2 & sent4 -> int2: So the grooming cost 100-30=$70; int2 & sent4 -> int3: The answer is 70;", "textual_logical_units": {"1": "John adopta un perro.", "2": "Lleva al perro a la peluquería, lo que cuesta 100 €.", "3": "El peluquero le ofrece un descuento del 30 % por ser nuevo cliente.", "4": "¿Cuánto cuesta la peluquería?", "5": "El peluquero hizo un descuento de 100 * 0,3 = 30 €", "6": "Así que la peluquería cuesta 100 - 30 € = 70 €", "7": "The answer is 70"}, "human_translated": true, "code_input": "####\nfacts = ['John adopta un perro.', 'Lleva al perro a la peluquería, lo que cuesta 100\\xa0€.', 'El peluquero le ofrece un descuento del 30\\xa0% por ser nuevo cliente.']\nquestion = '¿Cuánto cuesta la peluquería?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Lleva al perro a la peluquería, lo que cuesta 100\\xa0€.', 'El peluquero le ofrece un descuento del 30\\xa0% por ser nuevo cliente.']\nnew_fact = infer_new_fact(selected) # 'El peluquero hizo un descuento de 100\\xa0*\\xa00,3 = 30\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Lleva al perro a la peluquería, lo que cuesta 100\\xa0€.', '¿Cuánto cuesta la peluquería?', 'El peluquero hizo un descuento de 100\\xa0*\\xa00,3 = 30\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Así que la peluquería cuesta 100\\xa0-\\xa030\\xa0€ = 70\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto cuesta la peluquería?', 'Así que la peluquería cuesta 100\\xa0-\\xa030\\xa0€ = 70\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 70'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '70'"}
{"id": "GSM8K_80_d57a485b8e", "context": "", "options": [], "answer": "10", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 4}, {"antecedents": [1, 4], "consequent": 5}, {"antecedents": [2, 5], "consequent": 6}, {"antecedents": [1, 3, 6], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 -> int1: Each of the girls got 24 x 1/6 = 4 liters of water.; int1 & sent1 -> int2: So the two girls got a total of 4 x 2 = 8 liters.; int2 & sent2 -> int3: Thus, a total of 8 + 6 = 14 liters of water were gotten by the two girls and the boy.; int3 & sent1 & sent3 -> int4: Therefore, 24 - 14 = 10 liters of water were left.; int4 & sent3 -> int5: The answer is 10;", "textual_logical_units": {"1": "Dos niñas recibieron 1/6 de los 24 litros de agua cada una.", "2": "Luego, un niño recibió 6 litros de agua.", "3": "¿Cuántos litros de agua quedaban?", "4": "Cada una de las chicas recibió 24 × 1/6 = 4 litros de agua.", "5": "Así que las dos chicas obtuvieron un total de 4 × 2 = 8 litros.", "6": "Por lo tanto, las dos niñas y el niño obtuvieron un total de 8 + 6 = 14 litros de agua.", "7": "Por lo tanto, quedaron 24 - 14 = 10 litros de agua.", "8": "The answer is 10"}, "human_translated": true, "code_input": "####\nfacts = ['Dos niñas recibieron 1/6 de los 24 litros de agua cada una.', 'Luego, un niño recibió 6 litros de agua.']\nquestion = '¿Cuántos litros de agua quedaban?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Dos niñas recibieron 1/6 de los 24 litros de agua cada una.']\nnew_fact = infer_new_fact(selected) # 'Cada una de las chicas recibió 24\\xa0×\\xa01/6 = 4 litros de agua.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Dos niñas recibieron 1/6 de los 24 litros de agua cada una.', 'Cada una de las chicas recibió 24\\xa0×\\xa01/6 = 4 litros de agua.']\nnew_fact = infer_new_fact(selected) # 'Así que las dos chicas obtuvieron un total de 4\\xa0×\\xa02 = 8 litros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Luego, un niño recibió 6 litros de agua.', 'Así que las dos chicas obtuvieron un total de 4\\xa0×\\xa02 = 8 litros.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, las dos niñas y el niño obtuvieron un total de 8\\xa0+\\xa06 = 14 litros de agua.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Dos niñas recibieron 1/6 de los 24 litros de agua cada una.', '¿Cuántos litros de agua quedaban?', 'Por lo tanto, las dos niñas y el niño obtuvieron un total de 8\\xa0+\\xa06 = 14 litros de agua.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, quedaron 24\\xa0-\\xa014 = 10 litros de agua.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos litros de agua quedaban?', 'Por lo tanto, quedaron 24\\xa0-\\xa014 = 10 litros de agua.']\nnew_fact = infer_new_fact(selected) # 'The answer is 10'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '10'"}
{"id": "GSM8K_81_2af1562a0a", "context": "", "options": [], "answer": "17", "reasoning_graph_edges": [{"antecedents": [1, 2, 3], "consequent": 7}, {"antecedents": [4, 5], "consequent": 8}, {"antecedents": [6, 7, 8], "consequent": 9}, {"antecedents": [6, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent1 & sent2 & sent3 -> int1: The total number of stickers is 10 + 21 + 23 = 54.; sent4 & sent5 -> int2: The number of stickers given away and used on the greeting card is 9 + 28 = 37.; int1 & int2 & sent6 -> int3: Charlie has 54 − 37 = 17 stickers left.; int3 & sent6 -> int4: The answer is 17;", "textual_logical_units": {"1": "Charlie tenía 10 pegatinas.", "2": "Compró 21 pegatinas en una tienda del centro comercial y", "3": "recibió 23 pegatinas para su cumpleaños.", "4": "Luego, Charlie le dio 9 de las pegatinas a su hermana y", "5": "usó 28 para decorar una tarjeta de felicitación.", "6": "¿Cuántas pegatinas le quedan a Charlie?", "7": "El número total de pegatinas es 10 + 21 + 23 = 54.", "8": "El número de pegatinas regaladas y utilizadas en la tarjeta de felicitación es 9 + 28 = 37.", "9": "A Charlie le quedan 54 − 37 = 17 pegatinas.", "10": "The answer is 17"}, "human_translated": true, "code_input": "####\nfacts = [ 'Charlie tenía 10 pegatinas.',\n  'Compró 21 pegatinas en una tienda del centro comercial y',\n  'recibió 23 pegatinas para su cumpleaños.',\n  'Luego, Charlie le dio 9 de las pegatinas a su hermana y',\n  'usó 28 para decorar una tarjeta de felicitación.']\nquestion = '¿Cuántas pegatinas le quedan a Charlie?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Charlie tenía 10 pegatinas.', 'Compró 21 pegatinas en una tienda del centro comercial y', 'recibió 23 pegatinas para su cumpleaños.']\nnew_fact = infer_new_fact(selected) # 'El número total de pegatinas es 10\\xa0+\\xa021\\xa0+\\xa023 = 54.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Luego, Charlie le dio 9 de las pegatinas a su hermana y', 'usó 28 para decorar una tarjeta de felicitación.']\nnew_fact = infer_new_fact(selected) # 'El número de pegatinas regaladas y utilizadas en la tarjeta de felicitación es 9\\xa0+\\xa028 = 37.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas pegatinas le quedan a Charlie?', 'El número total de pegatinas es 10\\xa0+\\xa021\\xa0+\\xa023 = 54.', 'El número de pegatinas regaladas y utilizadas en la tarjeta de felicitación es 9\\xa0+\\xa028 = 37.']\nnew_fact = infer_new_fact(selected) # 'A Charlie le quedan 54\\xa0−\\xa037 = 17 pegatinas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas pegatinas le quedan a Charlie?', 'A Charlie le quedan 54\\xa0−\\xa037 = 17 pegatinas.']\nnew_fact = infer_new_fact(selected) # 'The answer is 17'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '17'"}
{"id": "GSM8K_82_bb44667f8e", "context": "", "options": [], "answer": "623", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [1, 3, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Alex weighs 125*4-2 = 498.; int1 & sent1 & sent3 -> int2: Their combined weights are 125+498 = 623 pounds.; int2 & sent3 -> int3: The answer is 623;", "textual_logical_units": {"1": "Grace pesa 12,5 kilos.", "2": "Alex pesa 0,2 kilos menos que 4 veces lo que pesa Grace.", "3": "¿Cuáles son sus pesos combinados en kilos?", "4": "Alex pesa 12,5 * 4 - 0,2 = 49,8.", "5": "Sus pesos combinados son 12,5 + 49,8 = 62,3 kilos.", "6": "The answer is 623"}, "human_translated": true, "code_input": "####\nfacts = ['Grace pesa 12,5\\xa0kilos.', 'Alex pesa 0,2\\xa0kilos menos que 4 veces lo que pesa Grace.']\nquestion = '¿Cuáles son sus pesos combinados en kilos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Grace pesa 12,5\\xa0kilos.', 'Alex pesa 0,2\\xa0kilos menos que 4 veces lo que pesa Grace.']\nnew_fact = infer_new_fact(selected) # 'Alex pesa 12,5\\xa0*\\xa04\\xa0-\\xa00,2 = 49,8.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Grace pesa 12,5\\xa0kilos.', '¿Cuáles son sus pesos combinados en kilos?', 'Alex pesa 12,5\\xa0*\\xa04\\xa0-\\xa00,2 = 49,8.']\nnew_fact = infer_new_fact(selected) # 'Sus pesos combinados son 12,5\\xa0+\\xa049,8 = 62,3\\xa0kilos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuáles son sus pesos combinados en kilos?', 'Sus pesos combinados son 12,5\\xa0+\\xa049,8 = 62,3\\xa0kilos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 623'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '623'"}
{"id": "GSM8K_83_b8712f4e3f", "context": "", "options": [], "answer": "600", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [3, 4, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: First find the total number of roses: 3 bushes * 25 roses/bush = 75 roses; int1 & sent3 & sent4 -> int2: Then multiply the number of roses by the number of thorns per rose: 75 roses * 8 thorns/rose = 600 thorns; int2 & sent4 -> int3: The answer is 600;", "textual_logical_units": {"1": "Dan planta 3 rosales.", "2": "Cada rosal tiene 25 rosas.", "3": "Cada rosa tiene 8 espinas.", "4": "¿Cuántas espinas hay en total?", "5": "Primero, calcula el número total de rosas: 3 arbustos * 25 rosas/arbusto = 75 rosas", "6": "Luego, multiplica el número de rosas por el número de espinas por rosa: 75 rosas * 8 espinas/rosa = 600 espinas", "7": "The answer is 600"}, "human_translated": true, "code_input": "####\nfacts = ['Dan planta 3 rosales.', 'Cada rosal tiene 25 rosas.', 'Cada rosa tiene 8 espinas.']\nquestion = '¿Cuántas espinas hay en total?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Dan planta 3 rosales.', 'Cada rosal tiene 25 rosas.']\nnew_fact = infer_new_fact(selected) # 'Primero, calcula el número total de rosas: 3 arbustos\\xa0*\\xa025 rosas/arbusto = 75 rosas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada rosa tiene 8 espinas.', '¿Cuántas espinas hay en total?', 'Primero, calcula el número total de rosas: 3 arbustos\\xa0*\\xa025 rosas/arbusto = 75 rosas']\nnew_fact = infer_new_fact(selected) # 'Luego, multiplica el número de rosas por el número de espinas por rosa: 75 rosas\\xa0*\\xa08 espinas/rosa = 600 espinas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas espinas hay en total?', 'Luego, multiplica el número de rosas por el número de espinas por rosa: 75 rosas\\xa0*\\xa08 espinas/rosa = 600 espinas']\nnew_fact = infer_new_fact(selected) # 'The answer is 600'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '600'"}
{"id": "GSM8K_84_f8021ce9a0", "context": "", "options": [], "answer": "15", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}, {"antecedents": [1, 2, 4, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}, {"antecedents": [1, 3, 8], "consequent": 9}, {"antecedents": [3, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent2 -> int1: Let L be the number of losses.; int1 & sent2 -> int2: The number of wins is L + 8.; int1 & int2 & sent1 & sent2 -> int3: The team played (L+8) + L = 2L + 8 = 22 games.; int1 & int3 -> int4: So, 2L = 22 - 8 = 14; int1 & int4 -> int5: So L = 14/2 = 7 losses.; int5 & sent1 & sent3 -> int6: Therefore, the team won 22 – 7 = 15 games.; int6 & sent3 -> int7: The answer is 15;", "textual_logical_units": {"1": "Un equipo de fútbol jugó 22 partidos.", "2": "Ganó 8 más de lo que perdió.", "3": "¿Cuántos ganó?", "4": "Si L es el número de derrotas.", "5": "El número de victorias es L + 8.", "6": "El equipo jugó (L+8) + L = 2L + 8 = 22 partidos.", "7": "Entonces, 2L = 22 - 8 = 14", "8": "Así que L = 14 / 2 = 7 derrotas.", "9": "Por lo tanto, el equipo ganó 22 - 7 = 15 partidos.", "10": "The answer is 15"}, "human_translated": true, "code_input": "####\nfacts = ['Un equipo de fútbol jugó 22 partidos.', 'Ganó 8 más de lo que perdió.']\nquestion = '¿Cuántos ganó?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Ganó 8 más de lo que perdió.']\nnew_fact = infer_new_fact(selected) # 'Si L es el número de derrotas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Ganó 8 más de lo que perdió.', 'Si L es el número de derrotas.']\nnew_fact = infer_new_fact(selected) # 'El número de victorias es L\\xa0+\\xa08.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Un equipo de fútbol jugó 22 partidos.', 'Ganó 8 más de lo que perdió.', 'Si L es el número de derrotas.', 'El número de victorias es L\\xa0+\\xa08.']\nnew_fact = infer_new_fact(selected) # 'El equipo jugó (L+8)\\xa0+\\xa0L = 2L\\xa0+\\xa08 = 22 partidos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si L es el número de derrotas.', 'El equipo jugó (L+8)\\xa0+\\xa0L = 2L\\xa0+\\xa08 = 22 partidos.']\nnew_fact = infer_new_fact(selected) # 'Entonces, 2L = 22\\xa0-\\xa08 = 14'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si L es el número de derrotas.', 'Entonces, 2L = 22\\xa0-\\xa08 = 14']\nnew_fact = infer_new_fact(selected) # 'Así que L = 14\\xa0/\\xa02 = 7 derrotas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Un equipo de fútbol jugó 22 partidos.', '¿Cuántos ganó?', 'Así que L = 14\\xa0/\\xa02 = 7 derrotas.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, el equipo ganó 22\\xa0-\\xa07 = 15 partidos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos ganó?', 'Por lo tanto, el equipo ganó 22\\xa0-\\xa07 = 15 partidos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 15'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '15'"}
{"id": "GSM8K_85_196d62fcd1", "context": "", "options": [], "answer": "44", "reasoning_graph_edges": [{"antecedents": [6, 7], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}, {"antecedents": [3, 8, 10], "consequent": 11}, {"antecedents": [8, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent6 & sent7 -> int1: Gene has been on 34 - 23 = 11 years of vacations, so he has 11 rows of blocks.; int1 & sent5 -> int2: He goes on 4 vacations a year, so he has been on 4 * 11 = 44 vacations.; int2 & sent3 & sent8 -> int3: Gene has 1 shirt from each vacation, so he has 44 * 1 = 44 quilt blocks in all.; int3 & sent8 -> int4: The answer is 44;", "textual_logical_units": {"1": "Gene está cosiendo una colcha con camisetas viejas de recuerdo.", "2": "Tiene una camiseta de cada una de sus vacaciones.", "3": "Cada camiseta tiene su propio bloque en la colcha.", "4": "Cada fila está formada por bloques de diferentes años de vacaciones.", "5": "Se va de vacaciones cuatro veces al año y", "6": "ha tenido vacaciones desde que tenía 23 años.", "7": "Ahora tiene 34 años.", "8": "¿Cuántos bloques en la colcha tiene en total?", "9": "Gene ha tenido vacaciones 34 - 23 = 11 años, por lo que tiene 11 filas de bloques.", "10": "Se va de vacaciones 4 veces al año, por lo que ha tenido 4 * 11 = 44 vacaciones.", "11": "Gene tiene una camiseta de cada vacación, por lo que la colcha tiene 44 * 1 = 44 bloques en total.", "12": "The answer is 44"}, "human_translated": true, "code_input": "####\nfacts = [ 'Gene está cosiendo una colcha con camisetas viejas de recuerdo.',\n  'Tiene una camiseta de cada una de sus vacaciones.',\n  'Cada camiseta tiene su propio bloque en la colcha.',\n  'Cada fila está formada por bloques de diferentes años de vacaciones.',\n  'Se va de vacaciones cuatro veces al año y',\n  'ha tenido vacaciones desde que tenía 23 años.',\n  'Ahora tiene 34 años.']\nquestion = '¿Cuántos bloques en la colcha tiene en total?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['ha tenido vacaciones desde que tenía 23 años.', 'Ahora tiene 34 años.']\nnew_fact = infer_new_fact(selected) # 'Gene ha tenido vacaciones 34\\xa0-\\xa023 = 11 años, por lo que tiene 11 filas de bloques.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Se va de vacaciones cuatro veces al año y', 'Gene ha tenido vacaciones 34\\xa0-\\xa023 = 11 años, por lo que tiene 11 filas de bloques.']\nnew_fact = infer_new_fact(selected) # 'Se va de vacaciones 4 veces al año, por lo que ha tenido 4\\xa0*\\xa011 = 44 vacaciones.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada camiseta tiene su propio bloque en la colcha.', '¿Cuántos bloques en la colcha tiene en total?', 'Se va de vacaciones 4 veces al año, por lo que ha tenido 4\\xa0*\\xa011 = 44 vacaciones.']\nnew_fact = infer_new_fact(selected) # 'Gene tiene una camiseta de cada vacación, por lo que la colcha tiene 44\\xa0*\\xa01 = 44 bloques en total.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos bloques en la colcha tiene en total?', 'Gene tiene una camiseta de cada vacación, por lo que la colcha tiene 44\\xa0*\\xa01 = 44 bloques en total.']\nnew_fact = infer_new_fact(selected) # 'The answer is 44'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '44'"}
{"id": "GSM8K_86_78c9c67c0b", "context": "", "options": [], "answer": "22", "reasoning_graph_edges": [{"antecedents": [4, 5, 6], "consequent": 9}, {"antecedents": [7, 9], "consequent": 10}, {"antecedents": [4, 8, 9, 10], "consequent": 11}, {"antecedents": [8, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent4 & sent5 & sent6 -> int1: The second time Greg’s alarm went off, it rang three times as long as the first, so it rang 3 * 4 = 12 times the second time.; int1 & sent7 -> int2: The third time it went off, it rang half as long as the second, so it rang 12 / 2 = 6 times the third time.; int1 & int2 & sent4 & sent8 -> int3: In all, Greg’s alarm rang 4 + 12 + 6 = 22 times.; int3 & sent8 -> int4: The answer is 22;", "textual_logical_units": {"1": "Greg tiene una alarma configurada para que suene tres veces al día como recordatorio.", "2": "Cuando suena la alarma,", "3": "sigue sonando hasta que Greg la apaga.", "4": "La primera vez que sonó hoy, sonó cuatro veces.", "5": "La segunda vez que sonó,", "6": "sonó tres veces más que la primera vez.", "7": "La tercera vez, sonó la mitad de veces que la segunda vez.", "8": "¿Cuántas veces sonó la alarma en total?", "9": "La segunda vez que sonó la alarma de Greg, sonó tres veces más que la primera, por lo que sonó 3 * 4 = 12 veces la segunda vez.", "10": "La tercera vez que sonó, sonó la mitad que la segunda vez, por lo que sonó 12 / 2 = 6 veces la tercera vez.", "11": "En total, la alarma de Greg sonó 4 + 12 + 6 = 22 veces.", "12": "The answer is 22"}, "human_translated": true, "code_input": "####\nfacts = [ 'Greg tiene una alarma configurada para que suene tres veces al día como recordatorio.',\n  'Cuando suena la alarma,',\n  'sigue sonando hasta que Greg la apaga.',\n  'La primera vez que sonó hoy, sonó cuatro veces.',\n  'La segunda vez que sonó,',\n  'sonó tres veces más que la primera vez.',\n  'La tercera vez, sonó la mitad de veces que la segunda vez.']\nquestion = '¿Cuántas veces sonó la alarma en total?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['La primera vez que sonó hoy, sonó cuatro veces.', 'La segunda vez que sonó,', 'sonó tres veces más que la primera vez.']\nnew_fact = infer_new_fact(selected) # 'La segunda vez que sonó la alarma de Greg, sonó tres veces más que la primera, por lo que sonó 3\\xa0*\\xa04 = 12 veces la segunda vez.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La tercera vez, sonó la mitad de veces que la segunda vez.', 'La segunda vez que sonó la alarma de Greg, sonó tres veces más que la primera, por lo que sonó 3\\xa0*\\xa04 = 12 veces la segunda vez.']\nnew_fact = infer_new_fact(selected) # 'La tercera vez que sonó, sonó la mitad que la segunda vez, por lo que sonó 12\\xa0/\\xa02 = 6 veces la tercera vez.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La primera vez que sonó hoy, sonó cuatro veces.', '¿Cuántas veces sonó la alarma en total?', 'La segunda vez que sonó la alarma de Greg, sonó tres veces más que la primera, por lo que sonó 3\\xa0*\\xa04 = 12 veces la segunda vez.', 'La tercera vez que sonó, sonó la mitad que la segunda vez, por lo que sonó 12\\xa0/\\xa02 = 6 veces la tercera vez.']\nnew_fact = infer_new_fact(selected) # 'En total, la alarma de Greg sonó 4\\xa0+\\xa012\\xa0+\\xa06 = 22 veces.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas veces sonó la alarma en total?', 'En total, la alarma de Greg sonó 4\\xa0+\\xa012\\xa0+\\xa06 = 22 veces.']\nnew_fact = infer_new_fact(selected) # 'The answer is 22'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '22'"}
{"id": "GSM8K_87_45525e6911", "context": "", "options": [], "answer": "9360", "reasoning_graph_edges": [{"antecedents": [1, 4], "consequent": 5}, {"antecedents": [2, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}, {"antecedents": [4, 5, 7], "consequent": 8}, {"antecedents": [3, 4, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent1 & sent4 -> int1: In a month, Sylvie earns $600. which totals $600/month * 12 months/year = $7200 in a year.; int1 & sent2 -> int2: Sylvie earnings will increase by 10/100 * $7200/year = $720/year after 5 years.; int2 & sent4 -> int3: In three years, the total increase in her salary will be 3 years * $720/year = $2160; int1 & int3 & sent4 -> int4: After three years, Sylvie will be paid $7200 + $2160 = $9360; int4 & sent3 & sent4 -> int5: The answer is 9360;", "textual_logical_units": {"1": "Una empresa paga a cada uno de sus empleados 600 € al mes.", "2": "La empresa tiene la política de aumentar los salarios de cada uno de sus empleados en un 10 % del salario inicial cada año para aquellos que hayan permanecido en la empresa durante cinco años.", "3": "Si Sylvie cumplió 5 años en la empresa el diciembre pasado,", "4": "¿cuál es su salario anual después de tres años más de servicio?", "5": "En un mes, Sylvie gana 600 €, lo que suma un total de 600 €/mes * 12 meses/año = 7200 € en un año.", "6": "Las ganancias de Sylvie aumentarán en un 10/100 * 7200 €/año = 720 €/año después de 5 años.", "7": "En tres años, el aumento total de su salario será de 3 años * 720 €/año = 2160 €", "8": "Después de tres años, a Sylvie le pagarán 7200 € + 2160 € = 9360 €", "9": "The answer is 9360"}, "human_translated": true, "code_input": "####\nfacts = [ 'Una empresa paga a cada uno de sus empleados 600\\xa0€ al mes.',\n  'La empresa tiene la política de aumentar los salarios de cada uno de sus empleados en un 10\\xa0% del salario inicial cada año para aquellos que hayan '\n  'permanecido en la empresa durante cinco años.',\n  'Si Sylvie cumplió 5 años en la empresa el diciembre pasado,']\nquestion = '¿cuál es su salario anual después de tres años más de servicio?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Una empresa paga a cada uno de sus empleados 600\\xa0€ al mes.', '¿cuál es su salario anual después de tres años más de servicio?']\nnew_fact = infer_new_fact(selected) # 'En un mes, Sylvie gana 600\\xa0€, lo que suma un total de 600\\xa0€/mes\\xa0*\\xa012 meses/año = 7200\\xa0€ en un año.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La empresa tiene la política de aumentar los salarios de cada uno de sus empleados en un 10\\xa0% del salario inicial cada año para aquellos que hayan permanecido en la empresa durante cinco años.', 'En un mes, Sylvie gana 600\\xa0€, lo que suma un total de 600\\xa0€/mes\\xa0*\\xa012 meses/año = 7200\\xa0€ en un año.']\nnew_fact = infer_new_fact(selected) # 'Las ganancias de Sylvie aumentarán en un 10/100\\xa0*\\xa07200\\xa0€/año = 720\\xa0€/año después de 5 años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuál es su salario anual después de tres años más de servicio?', 'Las ganancias de Sylvie aumentarán en un 10/100\\xa0*\\xa07200\\xa0€/año = 720\\xa0€/año después de 5 años.']\nnew_fact = infer_new_fact(selected) # 'En tres años, el aumento total de su salario será de 3 años\\xa0*\\xa0720\\xa0€/año = 2160\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuál es su salario anual después de tres años más de servicio?', 'En un mes, Sylvie gana 600\\xa0€, lo que suma un total de 600\\xa0€/mes\\xa0*\\xa012 meses/año = 7200\\xa0€ en un año.', 'En tres años, el aumento total de su salario será de 3 años\\xa0*\\xa0720\\xa0€/año = 2160\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Después de tres años, a Sylvie le pagarán 7200\\xa0€\\xa0+\\xa02160\\xa0€ = 9360\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Sylvie cumplió 5 años en la empresa el diciembre pasado,', '¿cuál es su salario anual después de tres años más de servicio?', 'Después de tres años, a Sylvie le pagarán 7200\\xa0€\\xa0+\\xa02160\\xa0€ = 9360\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 9360'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '9360'"}
{"id": "GSM8K_88_c105a2c0e4", "context": "", "options": [], "answer": "8000", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [4], "consequent": 5}, {"antecedents": [4, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}, {"antecedents": [2, 3, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Let m be the number of copies Marilyn sold and h be the number Harald sold. We know that m + h = 80,000 and m = 10h.; int1 -> int2: Substituting the second equation into the first, we get 10h + h = 88,000; int1 & int2 -> int3: Combining like terms, we get 11h = 88,000; int1 & int3 -> int4: Dividing both sides by 11, we get h = 8,000; int4 & sent2 & sent3 -> int5: The answer is 8000;", "textual_logical_units": {"1": "El primer disco de Marilyn vendió 10 veces más copias que el de Harald.", "2": "Si vendieron 88 000 copias en conjunto,", "3": "¿cuántas copias vendió Harald?", "4": "Si m es el número de copias que vendió Marilyn y h el número que vendió Harald. Sabemos que m + h = 80 000 y m = 10h.", "5": "Al sustituir la segunda ecuación por la primera, obtenemos 10h + h = 88 000", "6": "Al combinar términos semejantes, obtenemos 11h = 88 000", "7": "Al dividir ambos lados entre 11, obtenemos h = 8000", "8": "The answer is 8000"}, "human_translated": true, "code_input": "####\nfacts = ['El primer disco de Marilyn vendió 10 veces más copias que el de Harald.', 'Si vendieron 88\\xa0000\\xa0copias en conjunto,']\nquestion = '¿cuántas copias vendió Harald?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['El primer disco de Marilyn vendió 10 veces más copias que el de Harald.', 'Si vendieron 88\\xa0000\\xa0copias en conjunto,']\nnew_fact = infer_new_fact(selected) # 'Si m es el número de copias que vendió Marilyn y h el número que vendió Harald. Sabemos que m\\xa0+\\xa0h = 80\\xa0000 y m = 10h.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si m es el número de copias que vendió Marilyn y h el número que vendió Harald. Sabemos que m\\xa0+\\xa0h = 80\\xa0000 y m = 10h.']\nnew_fact = infer_new_fact(selected) # 'Al sustituir la segunda ecuación por la primera, obtenemos 10h\\xa0+\\xa0h = 88\\xa0000'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si m es el número de copias que vendió Marilyn y h el número que vendió Harald. Sabemos que m\\xa0+\\xa0h = 80\\xa0000 y m = 10h.', 'Al sustituir la segunda ecuación por la primera, obtenemos 10h\\xa0+\\xa0h = 88\\xa0000']\nnew_fact = infer_new_fact(selected) # 'Al combinar términos semejantes, obtenemos 11h = 88\\xa0000'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si m es el número de copias que vendió Marilyn y h el número que vendió Harald. Sabemos que m\\xa0+\\xa0h = 80\\xa0000 y m = 10h.', 'Al combinar términos semejantes, obtenemos 11h = 88\\xa0000']\nnew_fact = infer_new_fact(selected) # 'Al dividir ambos lados entre 11, obtenemos h = 8000'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si vendieron 88\\xa0000\\xa0copias en conjunto,', '¿cuántas copias vendió Harald?', 'Al dividir ambos lados entre 11, obtenemos h = 8000']\nnew_fact = infer_new_fact(selected) # 'The answer is 8000'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '8000'"}
{"id": "GSM8K_89_04dc96d165", "context": "", "options": [], "answer": "24", "reasoning_graph_edges": [{"antecedents": [2, 4], "consequent": 7}, {"antecedents": [5, 6, 7], "consequent": 8}, {"antecedents": [6, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent2 & sent4 -> int1: She needs 12 gift bags because 16 x .75 = 12; int1 & sent5 & sent6 -> int2: She will spend $24 because 12 x 2 = 24; int2 & sent6 -> int3: The answer is 24;", "textual_logical_units": {"1": "Christina está planeando una fiesta de cumpleaños y", "2": "necesita 0,75 bolsas de regalo por invitado,", "3": "porque 1/4 parte de los asistentes no se va a presentar.", "4": "Invitó a 16 amigos.", "5": "Las bolsas de regalo cuestan 2 € cada una.", "6": "¿Cuánto va a gastar?", "7": "Necesita 12 bolsas de regalo porque 16 × 0,75 = 12", "8": "Gastará 24 € porque 12 × 2 = 24", "9": "The answer is 24"}, "human_translated": true, "code_input": "####\nfacts = [ 'Christina está planeando una fiesta de cumpleaños y',\n  'necesita 0,75 bolsas de regalo por invitado,',\n  'porque 1/4 parte de los asistentes no se va a presentar.',\n  'Invitó a 16 amigos.',\n  'Las bolsas de regalo cuestan\\xa02\\xa0€ cada una.']\nquestion = '¿Cuánto va a gastar?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['necesita 0,75 bolsas de regalo por invitado,', 'Invitó a 16 amigos.']\nnew_fact = infer_new_fact(selected) # 'Necesita 12 bolsas de regalo porque 16\\xa0×\\xa00,75 = 12'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Las bolsas de regalo cuestan\\xa02\\xa0€ cada una.', '¿Cuánto va a gastar?', 'Necesita 12 bolsas de regalo porque 16\\xa0×\\xa00,75 = 12']\nnew_fact = infer_new_fact(selected) # 'Gastará 24\\xa0€ porque 12\\xa0×\\xa02 = 24'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto va a gastar?', 'Gastará 24\\xa0€ porque 12\\xa0×\\xa02 = 24']\nnew_fact = infer_new_fact(selected) # 'The answer is 24'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '24'"}
{"id": "GSM8K_90_88bfa82e0d", "context": "", "options": [], "answer": "225", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 7}, {"antecedents": [2, 4], "consequent": 8}, {"antecedents": [5, 7], "consequent": 9}, {"antecedents": [6, 8, 9], "consequent": 10}, {"antecedents": [4, 5, 6, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Half of 10 pounds is 10/2=5 pounds.; sent2 & sent4 -> int2: To feed 20 dinosaur adults, he will need 20*10=200 pounds of potato salad.; int1 & sent5 -> int3: To feed 5 dinosaur children, he will need 5*5=25 pounds of potato salad.; int2 & int3 & sent6 -> int4: In total, he will need to bring 200+25=225 pounds of potato salad to the picnic.; int4 & sent4 & sent5 & sent6 -> int5: The answer is 225;", "textual_logical_units": {"1": "Ted, el tiranosaurio rex, planeaba llevar ensalada de patatas al picnic de dinosaurios.", "2": "Sabe que un dinosaurio adulto comerá 10 kg de ensalada de patatas", "3": "y un niño comerá la mitad que un adulto.", "4": "Si habrá 20 adultos y", "5": "5 niños en el picnic,", "6": "¿cuántos kilos de ensalada de patatas necesita llevar Ted al picnic si quiere tener suficiente para dar de comer a todos?", "7": "La mitad de 10 kg es 10 / 2 = 5 kg.", "8": "Para alimentar a 20 dinosaurios adultos, necesitará 20 * 10 = 200 kg de ensalada de patatas.", "9": "Para alimentar a 5 niños dinosaurios, necesitará 5 * 5 = 25 kg de ensalada de patatas.", "10": "En total, tendrá que llevar 200 + 25 = 225 kg de ensalada de patatas al picnic.", "11": "The answer is 225"}, "human_translated": true, "code_input": "####\nfacts = [ 'Ted, el tiranosaurio rex, planeaba llevar ensalada de patatas al picnic de dinosaurios.',\n  'Sabe que un dinosaurio adulto comerá 10\\xa0kg de ensalada de patatas',\n  'y un niño comerá la mitad que un adulto.',\n  'Si habrá 20 adultos y',\n  '5 niños en el picnic,']\nquestion = '¿cuántos kilos de ensalada de patatas necesita llevar Ted al picnic si quiere tener suficiente para dar de comer a todos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Sabe que un dinosaurio adulto comerá 10\\xa0kg de ensalada de patatas', 'y un niño comerá la mitad que un adulto.']\nnew_fact = infer_new_fact(selected) # 'La mitad de 10\\xa0kg es 10\\xa0/\\xa02 = 5\\xa0kg.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Sabe que un dinosaurio adulto comerá 10\\xa0kg de ensalada de patatas', 'Si habrá 20 adultos y']\nnew_fact = infer_new_fact(selected) # 'Para alimentar a 20 dinosaurios adultos, necesitará 20\\xa0*\\xa010 = 200\\xa0kg de ensalada de patatas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['5 niños en el picnic,', 'La mitad de 10\\xa0kg es 10\\xa0/\\xa02 = 5\\xa0kg.']\nnew_fact = infer_new_fact(selected) # 'Para alimentar a 5 niños dinosaurios, necesitará 5\\xa0*\\xa05 = 25\\xa0kg de ensalada de patatas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos kilos de ensalada de patatas necesita llevar Ted al picnic si quiere tener suficiente para dar de comer a todos?', 'Para alimentar a 20 dinosaurios adultos, necesitará 20\\xa0*\\xa010 = 200\\xa0kg de ensalada de patatas.', 'Para alimentar a 5 niños dinosaurios, necesitará 5\\xa0*\\xa05 = 25\\xa0kg de ensalada de patatas.']\nnew_fact = infer_new_fact(selected) # 'En total, tendrá que llevar 200\\xa0+\\xa025 = 225\\xa0kg de ensalada de patatas al picnic.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si habrá 20 adultos y', '5 niños en el picnic,', '¿cuántos kilos de ensalada de patatas necesita llevar Ted al picnic si quiere tener suficiente para dar de comer a todos?', 'En total, tendrá que llevar 200\\xa0+\\xa025 = 225\\xa0kg de ensalada de patatas al picnic.']\nnew_fact = infer_new_fact(selected) # 'The answer is 225'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '225'"}
{"id": "GSM8K_91_b524854316", "context": "", "options": [], "answer": "28", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [3, 4, 5, 6], "consequent": 7}, {"antecedents": [3, 4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Marcia has 4 + 2 = 6 pets.; int1 & sent1 -> int2: Jan has 3 * 6 = 18 pets; int1 & int2 & sent3 & sent4 -> int3: In total, the three have 4 + 6 + 18 = 28 pets.; int3 & sent3 & sent4 -> int4: The answer is 28;", "textual_logical_units": {"1": "Jan tiene tres veces más mascotas que Marcia.", "2": "Marcia tiene dos mascotas más que Cindy.", "3": "Si Cindy tiene cuatro mascotas,", "4": "¿cuántas mascotas en total tienen las tres?", "5": "Marcia tiene 4 + 2 = 6 mascotas.", "6": "Jan tiene 3 * 6 = 18 mascotas.", "7": "En total, las tres tienen 4 + 6 + 18 = 28 mascotas.", "8": "The answer is 28"}, "human_translated": true, "code_input": "####\nfacts = ['Jan tiene tres veces más mascotas que Marcia.', 'Marcia tiene dos mascotas más que Cindy.', 'Si Cindy tiene cuatro mascotas,']\nquestion = '¿cuántas mascotas en total tienen las tres?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Marcia tiene dos mascotas más que Cindy.', 'Si Cindy tiene cuatro mascotas,']\nnew_fact = infer_new_fact(selected) # 'Marcia tiene 4\\xa0+\\xa02 = 6 mascotas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Jan tiene tres veces más mascotas que Marcia.', 'Marcia tiene 4\\xa0+\\xa02 = 6 mascotas.']\nnew_fact = infer_new_fact(selected) # 'Jan tiene 3\\xa0*\\xa06 = 18 mascotas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Cindy tiene cuatro mascotas,', '¿cuántas mascotas en total tienen las tres?', 'Marcia tiene 4\\xa0+\\xa02 = 6 mascotas.', 'Jan tiene 3\\xa0*\\xa06 = 18 mascotas.']\nnew_fact = infer_new_fact(selected) # 'En total, las tres tienen 4\\xa0+\\xa06\\xa0+\\xa018 = 28 mascotas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Cindy tiene cuatro mascotas,', '¿cuántas mascotas en total tienen las tres?', 'En total, las tres tienen 4\\xa0+\\xa06\\xa0+\\xa018 = 28 mascotas.']\nnew_fact = infer_new_fact(selected) # 'The answer is 28'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '28'"}
{"id": "GSM8K_92_fc740e6bf5", "context": "", "options": [], "answer": "4", "reasoning_graph_edges": [{"antecedents": [4, 5], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}, {"antecedents": [2, 5, 7], "consequent": 8}, {"antecedents": [4, 5, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent4 & sent5 -> int1: James is 10 and 1 year younger than Corey, so Corey is 10 + 1 = 11 years old; int1 & sent3 -> int2: Amy is 2 years younger than Corey so is 11 - 2 = 9 years old; int2 & sent2 & sent5 -> int3: Amy is also 5 years older than Jackson, so Jackson is 9 - 5 = 4 years old; int3 & sent4 & sent5 -> int4: The answer is 4;", "textual_logical_units": {"1": "Emily tiene 4 hijos llamados Amy, Jackson, Corey y James.", "2": "Amy es 5 años mayor que Jackson y", "3": "2 años más joven que Corey.", "4": "Si James tiene 10 años y", "5": "es 1 año más joven que Corey, ¿cuántos años tiene Jackson?", "6": "James tiene 10 años y es 1 año más joven que Corey, por lo que Corey tiene 10 + 1 = 11 años.", "7": "Amy es 2 años más joven que Corey, por lo que tiene 11 - 2 = 9 años.", "8": "Amy también es 5 años mayor que Jackson, por lo que Jackson tiene 9 - 5 = 4 años.", "9": "The answer is 4"}, "human_translated": true, "code_input": "####\nfacts = ['Emily tiene 4 hijos llamados Amy, Jackson, Corey y James.', 'Amy es 5 años mayor que Jackson y', '2 años más joven que Corey.', 'Si James tiene 10 años y']\nquestion = 'es 1 año más joven que Corey, ¿cuántos años tiene Jackson?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Si James tiene 10 años y', 'es 1 año más joven que Corey, ¿cuántos años tiene Jackson?']\nnew_fact = infer_new_fact(selected) # 'James tiene 10 años y es 1 año más joven que Corey, por lo que Corey tiene 10\\xa0+\\xa01 = 11 años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['2 años más joven que Corey.', 'James tiene 10 años y es 1 año más joven que Corey, por lo que Corey tiene 10\\xa0+\\xa01 = 11 años.']\nnew_fact = infer_new_fact(selected) # 'Amy es 2 años más joven que Corey, por lo que tiene 11\\xa0-\\xa02 = 9 años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Amy es 5 años mayor que Jackson y', 'es 1 año más joven que Corey, ¿cuántos años tiene Jackson?', 'Amy es 2 años más joven que Corey, por lo que tiene 11\\xa0-\\xa02 = 9 años.']\nnew_fact = infer_new_fact(selected) # 'Amy también es 5 años mayor que Jackson, por lo que Jackson tiene 9\\xa0-\\xa05 = 4 años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si James tiene 10 años y', 'es 1 año más joven que Corey, ¿cuántos años tiene Jackson?', 'Amy también es 5 años mayor que Jackson, por lo que Jackson tiene 9\\xa0-\\xa05 = 4 años.']\nnew_fact = infer_new_fact(selected) # 'The answer is 4'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '4'"}
{"id": "GSM8K_93_f95fa97fba", "context": "", "options": [], "answer": "36", "reasoning_graph_edges": [{"antecedents": [1, 3, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [4, 5, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent3 & sent4 -> int1: If Lee runs the 400-meter hurdles in 38 seconds, which was two seconds faster than Gerald used to run the 400-meter hurdles, then Gerald initially would run the 400-meter hurdles in 38+2=40 seconds.; int1 & sent3 -> int2: 10% of 40 seconds is 40*0.1=4 seconds.; int1 & int2 & sent4 -> int3: The improved diet reduced Gerald's race time to 40-4=36 seconds.; int3 & sent4 -> int4: The answer is 36;", "textual_logical_units": {"1": "Lee solía correr los 400 metros con vallas 2 segundos más rápido de lo que Gerald correría los 400 metros con vallas.", "2": "Pero Gerald cambió su dieta,", "3": "lo que mejoró su velocidad en un 10 %.", "4": "Si Lee corre los 400 metros con vallas en 38 segundos, ¿a qué velocidad puede correr Gerald, con su dieta mejorada, los 400 metros con vallas en segundos?", "5": "Si Lee corre los 400 metros con vallas en 38 segundos, 2 segundos más rápido de lo que Gerald solía correr los 400 metros con vallas, Gerald inicialmente correría los 400 metros con vallas en 38 + 2 = 40 segundos.", "6": "El 10 % de 40 segundos es 40 * 0,1 = 4 segundos.", "7": "La dieta mejorada redujo el tiempo de carrera de Gerald a 40 - 4 = 36 segundos.", "8": "The answer is 36"}, "human_translated": true, "code_input": "####\nfacts = [ 'Lee solía correr los 400\\xa0metros con vallas 2 segundos más rápido de lo que Gerald correría los 400 metros con vallas.',\n  'Pero Gerald cambió su dieta,',\n  'lo que mejoró su velocidad en un 10\\xa0%.']\nquestion = 'Si Lee corre los 400 metros con vallas en 38 segundos, ¿a qué velocidad puede correr Gerald, con su dieta mejorada, los 400 metros con vallas en segundos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Lee solía correr los 400\\xa0metros con vallas 2 segundos más rápido de lo que Gerald correría los 400 metros con vallas.', 'lo que mejoró su velocidad en un 10\\xa0%.', 'Si Lee corre los 400 metros con vallas en 38 segundos, ¿a qué velocidad puede correr Gerald, con su dieta mejorada, los 400 metros con vallas en segundos?']\nnew_fact = infer_new_fact(selected) # 'Si Lee corre los 400 metros con vallas en 38 segundos, 2 segundos más rápido de lo que Gerald solía correr los 400 metros con vallas, Gerald inicialmente correría los 400 metros con vallas en 38\\xa0+\\xa02\\xa0=\\xa040 segundos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['lo que mejoró su velocidad en un 10\\xa0%.', 'Si Lee corre los 400 metros con vallas en 38 segundos, 2 segundos más rápido de lo que Gerald solía correr los 400 metros con vallas, Gerald inicialmente correría los 400 metros con vallas en 38\\xa0+\\xa02\\xa0=\\xa040 segundos.']\nnew_fact = infer_new_fact(selected) # 'El 10\\xa0% de 40 segundos es 40\\xa0*\\xa00,1 = 4 segundos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Lee corre los 400 metros con vallas en 38 segundos, ¿a qué velocidad puede correr Gerald, con su dieta mejorada, los 400 metros con vallas en segundos?', 'Si Lee corre los 400 metros con vallas en 38 segundos, 2 segundos más rápido de lo que Gerald solía correr los 400 metros con vallas, Gerald inicialmente correría los 400 metros con vallas en 38\\xa0+\\xa02\\xa0=\\xa040 segundos.', 'El 10\\xa0% de 40 segundos es 40\\xa0*\\xa00,1 = 4 segundos.']\nnew_fact = infer_new_fact(selected) # 'La dieta mejorada redujo el tiempo de carrera de Gerald a 40\\xa0-\\xa04 = 36 segundos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Lee corre los 400 metros con vallas en 38 segundos, ¿a qué velocidad puede correr Gerald, con su dieta mejorada, los 400 metros con vallas en segundos?', 'La dieta mejorada redujo el tiempo de carrera de Gerald a 40\\xa0-\\xa04 = 36 segundos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 36'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '36'"}
{"id": "GSM8K_94_5639d4e1e5", "context": "", "options": [], "answer": "348", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [5], "consequent": 6}, {"antecedents": [1, 6], "consequent": 7}, {"antecedents": [4, 6, 7], "consequent": 8}, {"antecedents": [2, 3, 4, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: If there are two cats for every dog, and the number of dogs is 60, the number of cats is 2*60 = 120; int1 -> int2: The combined number of cats and dogs is 120+60 = 180; int2 & sent1 -> int3: The number of rabbits pets is twelve less than the combined number of pet dogs and cats, a total of 180-12 = 168; int2 & int3 & sent4 -> int4: The total number of pets in the compound is 168+180 = 348; int4 & sent2 & sent3 & sent4 -> int5: The answer is 348;", "textual_logical_units": {"1": "En un vecindario, el número de conejos como mascotas es 12 menos que el número combinado de perros y gatos.", "2": "Si hay 2 gatos por cada perro,", "3": "y el número de perros es 60,", "4": "¿cuántas mascotas en total hay en el vecindario?", "5": "Si hay 2 gatos por cada perro y el número de perros es 60, el número de gatos es 2 * 60 = 120", "6": "El número combinado de perros y gatos es 120 + 60 = 180", "7": "El número de conejos (mascotas) es 12 menos que el número combinado de perros y gatos, un total de 180 - 12 = 168", "8": "El número total de mascotas en el complejo es 168 + 180 = 348", "9": "The answer is 348"}, "human_translated": true, "code_input": "####\nfacts = [ 'En un vecindario, el número de conejos como mascotas es 12 menos que el número combinado de perros y gatos.',\n  'Si hay 2 gatos por cada perro,',\n  'y el número de perros es 60,']\nquestion = '¿cuántas mascotas en total hay en el vecindario?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Si hay 2 gatos por cada perro,', 'y el número de perros es 60,']\nnew_fact = infer_new_fact(selected) # 'Si hay 2 gatos por cada perro y el número de perros es 60, el número de gatos es 2\\xa0*\\xa060 = 120'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si hay 2 gatos por cada perro y el número de perros es 60, el número de gatos es 2\\xa0*\\xa060 = 120']\nnew_fact = infer_new_fact(selected) # 'El número combinado de perros y gatos es 120\\xa0+\\xa060 = 180'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En un vecindario, el número de conejos como mascotas es 12 menos que el número combinado de perros y gatos.', 'El número combinado de perros y gatos es 120\\xa0+\\xa060 = 180']\nnew_fact = infer_new_fact(selected) # 'El número de conejos (mascotas) es 12 menos que el número combinado de perros y gatos, un total de 180\\xa0-\\xa012 = 168'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántas mascotas en total hay en el vecindario?', 'El número combinado de perros y gatos es 120\\xa0+\\xa060 = 180', 'El número de conejos (mascotas) es 12 menos que el número combinado de perros y gatos, un total de 180\\xa0-\\xa012 = 168']\nnew_fact = infer_new_fact(selected) # 'El número total de mascotas en el complejo es 168\\xa0+\\xa0180 = 348'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si hay 2 gatos por cada perro,', 'y el número de perros es 60,', '¿cuántas mascotas en total hay en el vecindario?', 'El número total de mascotas en el complejo es 168\\xa0+\\xa0180 = 348']\nnew_fact = infer_new_fact(selected) # 'The answer is 348'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '348'"}
{"id": "GSM8K_95_badce6436a", "context": "", "options": [], "answer": "40", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 4}, {"antecedents": [1, 4], "consequent": 5}, {"antecedents": [2, 5], "consequent": 6}, {"antecedents": [3, 5, 6], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 -> int1: There are 200 x 2/5 = 80 boys in Grade 5.; int1 & sent1 -> int2: So, 200 - 80 = 120 are girls.; int2 & sent2 -> int3: Out of the 120 girls, 120 x 2/3 = 80 are in the girl scout.; int2 & int3 & sent3 -> int4: Therefore, 120 - 80 = 40 girls are not in the girl scout.; int4 & sent3 -> int5: The answer is 40;", "textual_logical_units": {"1": "De los 200 estudiantes de 5.º de primaria, 2/5 son niños y", "2": "2/3 de las niñas son escultistas.", "3": "¿Cuántas niñas no son escultistas?", "4": "Hay 200 × 2 / 5 = 80 niños de 5.º de primaria.", "5": "Entonces, 200 - 80 = 120 son niñas.", "6": "De las 120 niñas, 120 × 2 / 3 = 80 son escultistas.", "7": "Por lo tanto, 120 - 80 = 40 niñas no son escultistas.", "8": "The answer is 40"}, "human_translated": true, "code_input": "####\nfacts = ['De los 200 estudiantes de 5.º de primaria, 2/5 son niños y', '2/3 de las niñas son escultistas.']\nquestion = '¿Cuántas niñas no son escultistas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['De los 200 estudiantes de 5.º de primaria, 2/5 son niños y']\nnew_fact = infer_new_fact(selected) # 'Hay 200\\xa0×\\xa02\\xa0/\\xa05 = 80 niños de 5.º de primaria.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['De los 200 estudiantes de 5.º de primaria, 2/5 son niños y', 'Hay 200\\xa0×\\xa02\\xa0/\\xa05 = 80 niños de 5.º de primaria.']\nnew_fact = infer_new_fact(selected) # 'Entonces, 200\\xa0-\\xa080 = 120 son niñas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['2/3 de las niñas son escultistas.', 'Entonces, 200\\xa0-\\xa080 = 120 son niñas.']\nnew_fact = infer_new_fact(selected) # 'De las 120 niñas, 120\\xa0×\\xa02\\xa0/\\xa03 = 80 son escultistas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas niñas no son escultistas?', 'Entonces, 200\\xa0-\\xa080 = 120 son niñas.', 'De las 120 niñas, 120\\xa0×\\xa02\\xa0/\\xa03 = 80 son escultistas.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, 120\\xa0-\\xa080 = 40 niñas no son escultistas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas niñas no son escultistas?', 'Por lo tanto, 120\\xa0-\\xa080 = 40 niñas no son escultistas.']\nnew_fact = infer_new_fact(selected) # 'The answer is 40'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '40'"}
{"id": "GSM8K_96_c6c1f9a616", "context": "", "options": [], "answer": "3", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [1, 3, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: James slept 9 hours * 2/3 = 6 hours.; int1 & sent1 & sent3 -> int2: So, Harry slept 9 - 6 = 3 hours more than James.; int2 & sent3 -> int3: The answer is 3;", "textual_logical_units": {"1": "Harry durmió 9 horas anoche.", "2": "Su amigo James durmió solo 2/3 de lo que durmió Harry.", "3": "¿Cuántas horas más durmió Harry que James?", "4": "James durmió 9 horas * 2/3 = 6 horas.", "5": "Entonces, Harry durmió 9 - 6 = 3 horas más que James.", "6": "The answer is 3"}, "human_translated": true, "code_input": "####\nfacts = ['Harry durmió 9 horas anoche.', 'Su amigo James durmió solo 2/3 de lo que durmió Harry.']\nquestion = '¿Cuántas horas más durmió Harry que James?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Harry durmió 9 horas anoche.', 'Su amigo James durmió solo 2/3 de lo que durmió Harry.']\nnew_fact = infer_new_fact(selected) # 'James durmió 9 horas\\xa0*\\xa02/3 = 6 horas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Harry durmió 9 horas anoche.', '¿Cuántas horas más durmió Harry que James?', 'James durmió 9 horas\\xa0*\\xa02/3 = 6 horas.']\nnew_fact = infer_new_fact(selected) # 'Entonces, Harry durmió 9\\xa0-\\xa06 = 3 horas más que James.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas horas más durmió Harry que James?', 'Entonces, Harry durmió 9\\xa0-\\xa06 = 3 horas más que James.']\nnew_fact = infer_new_fact(selected) # 'The answer is 3'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '3'"}
{"id": "GSM8K_97_2fa0dc89f3", "context": "", "options": [], "answer": "12", "reasoning_graph_edges": [{"antecedents": [1, 2, 4], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}, {"antecedents": [3, 5, 7], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent1 & sent2 & sent4 -> int1: Tomatoes lose half their volume when made into sauce, so Freda started with 32 * 2 = 64 ounces of tomatoes.; int1 & sent3 -> int2: At 16 ounces per can, she used 64 / 16 = 4 cans of tomatoes.; int2 & sent3 & sent5 -> int3: At 3 tomatoes a can, Freda used 3 * 4 = 12 tomatoes.; int3 & sent5 -> int4: The answer is 12;", "textual_logical_units": {"1": "Cuando Freda cocina tomates enlatados para convertirlos en salsa,", "2": "estos pierden la mitad de su volumen.", "3": "Cada lata de tomates de 450 g que usa contiene 3 tomates.", "4": "El último lote de salsa de tomate de Freda resultó en 900 g de salsa.", "5": "¿Cuántos tomates usó Freda?", "6": "Los tomates pierden la mitad de su volumen cuando se convierten en salsa, por lo que Freda comenzó con 900 * 2 = 1800 g de tomates.", "7": "Con 450 g por lata, usó 1800/450 = 4 latas de tomates.", "8": "Con 3 tomates por lata, Freda usó 3 * 4 = 12 tomates.", "9": "The answer is 12"}, "human_translated": true, "code_input": "####\nfacts = [ 'Cuando Freda cocina tomates enlatados para convertirlos en salsa,',\n  'estos pierden la mitad de su volumen.',\n  'Cada lata de tomates de 450\\xa0g que usa contiene 3 tomates.',\n  'El último lote de salsa de tomate de Freda resultó en 900\\xa0g de salsa.']\nquestion = '¿Cuántos tomates usó Freda?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Cuando Freda cocina tomates enlatados para convertirlos en salsa,', 'estos pierden la mitad de su volumen.', 'El último lote de salsa de tomate de Freda resultó en 900\\xa0g de salsa.']\nnew_fact = infer_new_fact(selected) # 'Los tomates pierden la mitad de su volumen cuando se convierten en salsa, por lo que Freda comenzó con 900\\xa0*\\xa02 = 1800\\xa0g de tomates.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada lata de tomates de 450\\xa0g que usa contiene 3 tomates.', 'Los tomates pierden la mitad de su volumen cuando se convierten en salsa, por lo que Freda comenzó con 900\\xa0*\\xa02 = 1800\\xa0g de tomates.']\nnew_fact = infer_new_fact(selected) # 'Con 450\\xa0g por lata, usó 1800/450 = 4 latas de tomates.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada lata de tomates de 450\\xa0g que usa contiene 3 tomates.', '¿Cuántos tomates usó Freda?', 'Con 450\\xa0g por lata, usó 1800/450 = 4 latas de tomates.']\nnew_fact = infer_new_fact(selected) # 'Con 3 tomates por lata, Freda usó 3\\xa0*\\xa04 = 12 tomates.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos tomates usó Freda?', 'Con 3 tomates por lata, Freda usó 3\\xa0*\\xa04 = 12 tomates.']\nnew_fact = infer_new_fact(selected) # 'The answer is 12'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '12'"}
{"id": "GSM8K_98_8440ead6ee", "context": "", "options": [], "answer": "5", "reasoning_graph_edges": [{"antecedents": [4, 5], "consequent": 7}, {"antecedents": [3, 6, 7], "consequent": 8}, {"antecedents": [5, 6, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent4 & sent5 -> int1: The cars that exited do not need to be included so there were 30 original cars – 5 cars that exited = 25 cars that drove through the traffic jam.; int1 & sent3 & sent6 -> int2: Most of the cars exited in the final 15 minutes so in the first 15 minutes, there must have been 25 total cars – 20 cars that drove through in the final 15 minutes = 5 cars that drove through the traffic jam.; int2 & sent5 & sent6 -> int3: The answer is 5;", "textual_logical_units": {"1": "Los coches se han alineado en la autopista.", "2": "Algunos de los coches pasan en los primeros 15 minutos del atasco,", "3": "luego, pasan 20 coches más en los 15 minutos restantes del atasco.", "4": "5 coches de la línea toman una salida para no tener que pasar por el atasco.", "5": "Si originalmente había 30 coches en la autopista,", "6": "¿cuántos coches pasaron por el atasco en los primeros 15 minutos?", "7": "No es necesario incluir los coches que salieron, por lo que había 30 coches al principio - 5 coches que salieron = 25 coches que pasaron por el atasco.", "8": "La mayoría de los coches salieron en los últimos 15 minutos, por lo que en los primeros 15 minutos debe haber habido 25 coches en total - 20 coches que pasaron en los últimos 15 minutos = 5 coches que pasaron por el atasco.", "9": "The answer is 5"}, "human_translated": true, "code_input": "####\nfacts = [ 'Los coches se han alineado en la autopista.',\n  'Algunos de los coches pasan en los primeros 15 minutos del atasco,',\n  'luego, pasan 20 coches más en los 15 minutos restantes del atasco.',\n  '5 coches de la línea toman una salida para no tener que pasar por el atasco.',\n  'Si originalmente había 30 coches en la autopista,']\nquestion = '¿cuántos coches pasaron por el atasco en los primeros 15 minutos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['5 coches de la línea toman una salida para no tener que pasar por el atasco.', 'Si originalmente había 30 coches en la autopista,']\nnew_fact = infer_new_fact(selected) # 'No es necesario incluir los coches que salieron, por lo que había 30 coches al principio - 5 coches que salieron = 25 coches que pasaron por el atasco.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['luego, pasan 20 coches más en los 15 minutos restantes del atasco.', '¿cuántos coches pasaron por el atasco en los primeros 15 minutos?', 'No es necesario incluir los coches que salieron, por lo que había 30 coches al principio - 5 coches que salieron = 25 coches que pasaron por el atasco.']\nnew_fact = infer_new_fact(selected) # 'La mayoría de los coches salieron en los últimos 15 minutos, por lo que en los primeros 15 minutos debe haber habido 25 coches en total\\xa0-\\xa020 coches que pasaron en los últimos 15 minutos = 5 coches que pasaron por el atasco.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si originalmente había 30 coches en la autopista,', '¿cuántos coches pasaron por el atasco en los primeros 15 minutos?', 'La mayoría de los coches salieron en los últimos 15 minutos, por lo que en los primeros 15 minutos debe haber habido 25 coches en total\\xa0-\\xa020 coches que pasaron en los últimos 15 minutos = 5 coches que pasaron por el atasco.']\nnew_fact = infer_new_fact(selected) # 'The answer is 5'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '5'"}
{"id": "GSM8K_99_421aced707", "context": "", "options": [], "answer": "58", "reasoning_graph_edges": [{"antecedents": [3], "consequent": 6}, {"antecedents": [2, 6], "consequent": 7}, {"antecedents": [3, 4], "consequent": 8}, {"antecedents": [7, 8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent3 -> int1: Yesterday, before receiving the plants, Mary had 2*40 = 80 potted plants; int1 & sent2 -> int2: After receiving an additional 18 plants, she therefore had a total of 80 + 18 = 98 potted plants; sent3 & sent4 -> int3: Tomorrow, Mary’s plant giveaway will be 40 *1 = 40 potted plants.; int2 & int3 -> int4: She will therefore remain with 98 - 40 = 58 potted plants.; int4 & sent5 -> int5: The answer is 58;", "textual_logical_units": {"1": "Mary es una ávida jardinera.", "2": "Ayer, recibió 18 nuevas plantas en macetas de su vivero de plantas favorito.", "3": "Ya tiene 2 plantas en macetas en cada una de las 40 repisas de ventanas de su gran casa de campo.", "4": "Se siente generosa, así que ha decidido que mañana regalará 1 planta en maceta de cada repisa a sus amigos y familiares.", "5": "¿Con cuántas plantas en maceta se quedará Mary?", "6": "Ayer, antes de recibir las plantas, María tenía 2 * 40 = 80 plantas en maceta", "7": "Después de recibir 18 plantas adicionales, tenía un total de 80 + 18 = 98 plantas en maceta.", "8": "Mañana, Mary regalará 40 * 1 = 40 plantas en maceta.", "9": "Por lo tanto, se quedará con 98 - 40 = 58 plantas en maceta.", "10": "The answer is 58"}, "human_translated": true, "code_input": "####\nfacts = [ 'Mary es una ávida jardinera.',\n  'Ayer, recibió 18 nuevas plantas en macetas de su vivero de plantas favorito.',\n  'Ya tiene 2 plantas en macetas en cada una de las 40 repisas de ventanas de su gran casa de campo.',\n  'Se siente generosa, así que ha decidido que mañana regalará 1 planta en maceta de cada repisa a sus amigos y familiares.']\nquestion = '¿Con cuántas plantas en maceta se quedará Mary?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Ya tiene 2 plantas en macetas en cada una de las 40 repisas de ventanas de su gran casa de campo.']\nnew_fact = infer_new_fact(selected) # 'Ayer, antes de recibir las plantas, María tenía 2\\xa0*\\xa040 = 80 plantas en maceta'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Ayer, recibió 18 nuevas plantas en macetas de su vivero de plantas favorito.', 'Ayer, antes de recibir las plantas, María tenía 2\\xa0*\\xa040 = 80 plantas en maceta']\nnew_fact = infer_new_fact(selected) # 'Después de recibir 18 plantas adicionales, tenía un total de 80\\xa0+\\xa018 = 98 plantas en maceta.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Ya tiene 2 plantas en macetas en cada una de las 40 repisas de ventanas de su gran casa de campo.', 'Se siente generosa, así que ha decidido que mañana regalará 1 planta en maceta de cada repisa a sus amigos y familiares.']\nnew_fact = infer_new_fact(selected) # 'Mañana, Mary regalará 40\\xa0*\\xa01 = 40 plantas en maceta.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Después de recibir 18 plantas adicionales, tenía un total de 80\\xa0+\\xa018 = 98 plantas en maceta.', 'Mañana, Mary regalará 40\\xa0*\\xa01 = 40 plantas en maceta.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, se quedará con 98\\xa0-\\xa040 = 58 plantas en maceta.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Con cuántas plantas en maceta se quedará Mary?', 'Por lo tanto, se quedará con 98\\xa0-\\xa040 = 58 plantas en maceta.']\nnew_fact = infer_new_fact(selected) # 'The answer is 58'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '58'"}
{"id": "GSM8K_100_37d8392682", "context": "", "options": [], "answer": "175", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 7}, {"antecedents": [7], "consequent": 8}, {"antecedents": [2, 8], "consequent": 9}, {"antecedents": [4, 5], "consequent": 10}, {"antecedents": [1, 5], "consequent": 11}, {"antecedents": [6, 9, 11], "consequent": 12}, {"antecedents": [5, 6, 12], "consequent": 13}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: The second friend pressed on the doorbell 1/4 times more than Jerome's first friend, a total of 1/4*20=5 times.; int1 -> int2: Jerome's second friend pressed on the doorbell 20+5=25; int2 & sent2 -> int3: The first two friends pressed on the doorbell 25+20=45 times altogether before Jerome could open the door.; sent4 & sent5 -> int4: Jerome's third friend pressed on the doorbell 60+10=70 times before Jerome could open the door.; sent1 & sent5 -> int5: Altogether, Jerome's third and fourth friends pressed on the doorbell 70+60=130 times before Jerome could open.; int3 & int5 & sent6 -> int6: The number of doorbell rings that Jerome's friend made before Jerome could open the door is 130+45=175 times.; int6 & sent5 & sent6 -> int7: The answer is 175;", "textual_logical_units": {"1": "Jerome tenía 4 amigos que vinieron a visitarlo un día determinado.", "2": "El primer amigo llamó al timbre 20 veces antes de que Jerome abriera,", "3": "el segundo amigo llamó al timbre 1/4 veces más que el primer amigo de Jerome.", "4": "El tercer amigo llamó al timbre 10 veces más que el cuarto amigo.", "5": "Si el cuarto amigo llamó al timbre 60 veces,", "6": "¿cuántas veces se llamó al timbre?", "7": "El segundo amigo llamó al timbre 1/4 veces más que el primer amigo de Jerome, un total de 1 / 4 * 20 = 5 veces.", "8": "El segundo amigo de Jerome llamó al timbre 20 + 5 = 25", "9": "Los dos primeros amigos llamaron al timbre 25 + 20 = 45 veces en total antes de que Jerome pudiera abrir la puerta.", "10": "El tercer amigo de Jerome llamó al timbre 60 + 10 = 70 veces antes de que Jerome pudiera abrir la puerta.", "11": "En total, el tercer y cuarto amigo de Jerome llamaron al timbre 70 + 60 = 130 veces antes de que Jerome pudiera abrir.", "12": "Antes de que Jerome pudiera abrir la puerta, los amigos de Jerome llamaron al timbre 130 + 45 = 175 veces.", "13": "The answer is 175"}, "human_translated": true, "code_input": "####\nfacts = [ 'Jerome tenía 4 amigos que vinieron a visitarlo un día determinado.',\n  'El primer amigo llamó al timbre 20 veces antes de que Jerome abriera,',\n  'el segundo amigo llamó al timbre 1/4 veces más que el primer amigo de Jerome.',\n  'El tercer amigo llamó al timbre 10 veces más que el cuarto amigo.',\n  'Si el cuarto amigo llamó al timbre 60 veces,']\nquestion = '¿cuántas veces se llamó al timbre?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['El primer amigo llamó al timbre 20 veces antes de que Jerome abriera,', 'el segundo amigo llamó al timbre 1/4 veces más que el primer amigo de Jerome.']\nnew_fact = infer_new_fact(selected) # 'El segundo amigo llamó al timbre 1/4 veces más que el primer amigo de Jerome, un total de 1\\xa0/\\xa04\\xa0*\\xa020 = 5 veces.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El segundo amigo llamó al timbre 1/4 veces más que el primer amigo de Jerome, un total de 1\\xa0/\\xa04\\xa0*\\xa020 = 5 veces.']\nnew_fact = infer_new_fact(selected) # 'El segundo amigo de Jerome llamó al timbre 20\\xa0+\\xa05 = 25'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El primer amigo llamó al timbre 20 veces antes de que Jerome abriera,', 'El segundo amigo de Jerome llamó al timbre 20\\xa0+\\xa05 = 25']\nnew_fact = infer_new_fact(selected) # 'Los dos primeros amigos llamaron al timbre 25\\xa0+\\xa020 = 45 veces en total antes de que Jerome pudiera abrir la puerta.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El tercer amigo llamó al timbre 10 veces más que el cuarto amigo.', 'Si el cuarto amigo llamó al timbre 60 veces,']\nnew_fact = infer_new_fact(selected) # 'El tercer amigo de Jerome llamó al timbre 60\\xa0+\\xa010 = 70 veces antes de que Jerome pudiera abrir la puerta.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Jerome tenía 4 amigos que vinieron a visitarlo un día determinado.', 'Si el cuarto amigo llamó al timbre 60 veces,']\nnew_fact = infer_new_fact(selected) # 'En total, el tercer y cuarto amigo de Jerome llamaron al timbre 70\\xa0+\\xa060 = 130 veces antes de que Jerome pudiera abrir.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántas veces se llamó al timbre?', 'Los dos primeros amigos llamaron al timbre 25\\xa0+\\xa020 = 45 veces en total antes de que Jerome pudiera abrir la puerta.', 'En total, el tercer y cuarto amigo de Jerome llamaron al timbre 70\\xa0+\\xa060 = 130 veces antes de que Jerome pudiera abrir.']\nnew_fact = infer_new_fact(selected) # 'Antes de que Jerome pudiera abrir la puerta, los amigos de Jerome llamaron al timbre 130\\xa0+\\xa045 = 175 veces.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si el cuarto amigo llamó al timbre 60 veces,', '¿cuántas veces se llamó al timbre?', 'Antes de que Jerome pudiera abrir la puerta, los amigos de Jerome llamaron al timbre 130\\xa0+\\xa045 = 175 veces.']\nnew_fact = infer_new_fact(selected) # 'The answer is 175'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '175'"}
{"id": "GSM8K_101_8fb97d4dac", "context": "", "options": [], "answer": "6", "reasoning_graph_edges": [{"antecedents": [1, 2, 3, 4], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}, {"antecedents": [6, 7, 9], "consequent": 10}, {"antecedents": [6, 7, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent1 & sent2 & sent3 & sent4 -> int1: Solo has to read a total of 4 + 20 + 7 + 8 = 39 pages.; int1 & sent5 -> int2: After Monday, he had a remainder of 39 - 15 = 24 pages to read.; int2 & sent6 & sent7 -> int3: To complete his reading, he must read 24/4 = 6 pages a day.; int3 & sent6 & sent7 -> int4: The answer is 6;", "textual_logical_units": {"1": "Solo tiene que leer 4 páginas de su libro de texto de Biología,", "2": "20 páginas de su libro de texto de Sociales,", "3": "7 páginas de su libro de texto de Historia y", "4": "8 páginas de su libro de texto de Geografía.", "5": "Solo leyó 15 páginas el lunes.", "6": "Si tiene 4 días más para completar toda su lectura,", "7": "¿cuántas páginas tiene que leer, de media, en un día?", "8": "Solo tiene que leer un total de 4 + 20 + 7 + 8 = 39 páginas.", "9": "Después del lunes, le quedaban 39 - 15 páginas = 24 páginas por leer.", "10": "Para completar su lectura, debe leer 24 / 4 = 6 páginas al día.", "11": "The answer is 6"}, "human_translated": true, "code_input": "####\nfacts = [ 'Solo tiene que leer 4 páginas de su libro de texto de Biología,',\n  '20 páginas de su libro de texto de Sociales,',\n  '7 páginas de su libro de texto de Historia y',\n  '8 páginas de su libro de texto de Geografía.',\n  'Solo leyó 15 páginas el lunes.',\n  'Si tiene 4 días más para completar toda su lectura,']\nquestion = '¿cuántas páginas tiene que leer, de media, en un día?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Solo tiene que leer 4 páginas de su libro de texto de Biología,', '20 páginas de su libro de texto de Sociales,', '7 páginas de su libro de texto de Historia y', '8 páginas de su libro de texto de Geografía.']\nnew_fact = infer_new_fact(selected) # 'Solo tiene que leer un total de 4\\xa0+\\xa020\\xa0+\\xa07\\xa0+\\xa08 = 39 páginas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Solo leyó 15 páginas el lunes.', 'Solo tiene que leer un total de 4\\xa0+\\xa020\\xa0+\\xa07\\xa0+\\xa08 = 39 páginas.']\nnew_fact = infer_new_fact(selected) # 'Después del lunes, le quedaban 39\\xa0-\\xa015 páginas = 24 páginas por leer.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si tiene 4 días más para completar toda su lectura,', '¿cuántas páginas tiene que leer, de media, en un día?', 'Después del lunes, le quedaban 39\\xa0-\\xa015 páginas = 24 páginas por leer.']\nnew_fact = infer_new_fact(selected) # 'Para completar su lectura, debe leer 24\\xa0/\\xa04 = 6 páginas al día.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si tiene 4 días más para completar toda su lectura,', '¿cuántas páginas tiene que leer, de media, en un día?', 'Para completar su lectura, debe leer 24\\xa0/\\xa04 = 6 páginas al día.']\nnew_fact = infer_new_fact(selected) # 'The answer is 6'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '6'"}
{"id": "GSM8K_102_2c71e622d6", "context": "", "options": [], "answer": "26", "reasoning_graph_edges": [{"antecedents": [1, 2, 3], "consequent": 7}, {"antecedents": [0], "consequent": 8}, {"antecedents": [6, 7, 8], "consequent": 9}, {"antecedents": [6, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent1 & sent2 & sent3 -> int1: John has 4 glasses of water a day on each of the 5 weekdays, for 4*5= 20 glasses.; sent0 -> int2: He has 3 glasses of water on both weekend days, for 3*2= 6 glasses of water.; int1 & int2 & sent6 -> int3: He has 20+6=26 total glasses of water in a week.; int3 & sent6 -> int4: The answer is 26;", "textual_logical_units": {"1": "A John le gusta beber un vaso de agua con el desayuno, la comida y la cena.", "2": "Por último, también se bebe uno antes de irse a dormir.", "3": "John lo hace todos los días de la semana,", "4": "pero los fines de semana le gusta relajarse y", "5": "beber un refresco en la cena en su lugar.", "6": "¿Cuántos vasos de agua bebe John en una semana?", "7": "John toma 4 vasos de agua al día cada uno de los 5 días de la semana, lo que da 4 * 5 = 20 vasos.", "8": "Bebe 3 vasos de agua los dos días del fin de semana, lo que da 3 * 2 = 6 vasos de agua.", "9": "Se bebe 20 + 6 = 26 vasos de agua en total en una semana.", "10": "The answer is 26"}, "human_translated": true, "code_input": "####\nfacts = [ 'A John le gusta beber un vaso de agua con el desayuno, la comida y la cena.',\n  'Por último, también se bebe uno antes de irse a dormir.',\n  'John lo hace todos los días de la semana,',\n  'pero los fines de semana le gusta relajarse y',\n  'beber un refresco en la cena en su lugar.']\nquestion = '¿Cuántos vasos de agua bebe John en una semana?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['A John le gusta beber un vaso de agua con el desayuno, la comida y la cena.', 'Por último, también se bebe uno antes de irse a dormir.', 'John lo hace todos los días de la semana,']\nnew_fact = infer_new_fact(selected) # 'John toma 4 vasos de agua al día cada uno de los 5 días de la semana, lo que da 4\\xa0*\\xa05 = 20 vasos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # []\nnew_fact = infer_new_fact(selected) # 'Bebe 3 vasos de agua los dos días del fin de semana, lo que da 3\\xa0*\\xa02 = 6 vasos de agua.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos vasos de agua bebe John en una semana?', 'John toma 4 vasos de agua al día cada uno de los 5 días de la semana, lo que da 4\\xa0*\\xa05 = 20 vasos.', 'Bebe 3 vasos de agua los dos días del fin de semana, lo que da 3\\xa0*\\xa02 = 6 vasos de agua.']\nnew_fact = infer_new_fact(selected) # 'Se bebe 20\\xa0+\\xa06 = 26 vasos de agua en total en una semana.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos vasos de agua bebe John en una semana?', 'Se bebe 20\\xa0+\\xa06 = 26 vasos de agua en total en una semana.']\nnew_fact = infer_new_fact(selected) # 'The answer is 26'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '26'"}
{"id": "GSM8K_103_d2f87be191", "context": "", "options": [], "answer": "140", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [5], "consequent": 6}, {"antecedents": [3, 4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: The city will be covered in 42 / 3 = 14 intervals of 10 minutes.; int1 -> int2: Thus, it will take 14 * 10 = 140 minutes for the fog to cover the whole city.; int2 & sent3 & sent4 -> int3: The answer is 140;", "textual_logical_units": {"1": "Un banco de niebla se extiende desde el océano para cubrir una ciudad.", "2": "Tarda 10 minutos en cubrir cada 3 km de la ciudad.", "3": "Si la ciudad tiene 42 km de ancho desde la costa hasta el extremo opuesto en el interior,", "4": "¿cuántos minutos tardará el banco de niebla en cubrir toda la ciudad?", "5": "La ciudad se cubrirá en 42 / 3 = 14 intervalos de 10 minutos.", "6": "Por lo tanto, la niebla tardará 14 * 10 = 140 minutos en cubrir toda la ciudad.", "7": "The answer is 140"}, "human_translated": true, "code_input": "####\nfacts = [ 'Un banco de niebla se extiende desde el océano para cubrir una ciudad.',\n  'Tarda 10 minutos en cubrir cada 3\\xa0km de la ciudad.',\n  'Si la ciudad tiene 42\\xa0km de ancho desde la costa hasta el extremo opuesto en el interior,']\nquestion = '¿cuántos minutos tardará el banco de niebla en cubrir toda la ciudad?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Tarda 10 minutos en cubrir cada 3\\xa0km de la ciudad.', 'Si la ciudad tiene 42\\xa0km de ancho desde la costa hasta el extremo opuesto en el interior,']\nnew_fact = infer_new_fact(selected) # 'La ciudad se cubrirá en 42\\xa0/\\xa03 = 14\\xa0intervalos de 10 minutos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La ciudad se cubrirá en 42\\xa0/\\xa03 = 14\\xa0intervalos de 10 minutos.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, la niebla tardará 14\\xa0*\\xa010 = 140 minutos en cubrir toda la ciudad.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si la ciudad tiene 42\\xa0km de ancho desde la costa hasta el extremo opuesto en el interior,', '¿cuántos minutos tardará el banco de niebla en cubrir toda la ciudad?', 'Por lo tanto, la niebla tardará 14\\xa0*\\xa010 = 140 minutos en cubrir toda la ciudad.']\nnew_fact = infer_new_fact(selected) # 'The answer is 140'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '140'"}
{"id": "GSM8K_104_ef648a427f", "context": "", "options": [], "answer": "500", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}, {"antecedents": [4, 6, 7], "consequent": 8}, {"antecedents": [4, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Poppy has placed 1000 pieces / 4 = 250 pieces.; int1 & sent1 -> int2: This means there are 1000 – 250 = 750 pieces remaining.; int2 & sent3 -> int3: Her mom therefore places 750 / 3 = 250 pieces.; int2 & int3 & sent4 -> int4: This leaves a total of 750 – 250 = 500 jigsaw pieces left to be placed.; int4 & sent4 -> int5: The answer is 500;", "textual_logical_units": {"1": "Poppy está resolviendo un rompecabezas de 1000 piezas.", "2": "Coloca una cuarta parte de las piezas en el tablero,", "3": "luego, su madre coloca un tercio de las piezas restantes.", "4": "¿Cuántas piezas del rompecabezas quedan por colocar?", "5": "Poppy ha colocado 1000 piezas / 4 = 250 piezas.", "6": "Esto significa que quedan 1000 - 250 = 750 piezas.", "7": "Por lo tanto, su madre coloca 750 / 3 = 250 piezas.", "8": "Esto deja un total de 750 - 250 = 500 piezas del rompecabezas por colocar.", "9": "The answer is 500"}, "human_translated": true, "code_input": "####\nfacts = [ 'Poppy está resolviendo un rompecabezas de 1000 piezas.',\n  'Coloca una cuarta parte de las piezas en el tablero,',\n  'luego, su madre coloca un tercio de las piezas restantes.']\nquestion = '¿Cuántas piezas del rompecabezas quedan por colocar?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Poppy está resolviendo un rompecabezas de 1000 piezas.', 'Coloca una cuarta parte de las piezas en el tablero,']\nnew_fact = infer_new_fact(selected) # 'Poppy ha colocado 1000 piezas\\xa0/\\xa04 = 250 piezas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Poppy está resolviendo un rompecabezas de 1000 piezas.', 'Poppy ha colocado 1000 piezas\\xa0/\\xa04 = 250 piezas.']\nnew_fact = infer_new_fact(selected) # 'Esto significa que quedan 1000\\xa0-\\xa0250 = 750 piezas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['luego, su madre coloca un tercio de las piezas restantes.', 'Esto significa que quedan 1000\\xa0-\\xa0250 = 750 piezas.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, su madre coloca 750\\xa0/\\xa03 = 250 piezas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas piezas del rompecabezas quedan por colocar?', 'Esto significa que quedan 1000\\xa0-\\xa0250 = 750 piezas.', 'Por lo tanto, su madre coloca 750\\xa0/\\xa03 = 250 piezas.']\nnew_fact = infer_new_fact(selected) # 'Esto deja un total de 750\\xa0-\\xa0250 = 500 piezas del rompecabezas por colocar.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas piezas del rompecabezas quedan por colocar?', 'Esto deja un total de 750\\xa0-\\xa0250 = 500 piezas del rompecabezas por colocar.']\nnew_fact = infer_new_fact(selected) # 'The answer is 500'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '500'"}
{"id": "GSM8K_105_4f596d6c52", "context": "", "options": [], "answer": "20", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 3}, {"antecedents": [2, 3], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Cody eats 5*3 = 15 cookies.; int1 & sent2 -> int2: Cody and Amir eat 15+5 = 20 cookies together.; int2 & sent2 -> int3: The answer is 20;", "textual_logical_units": {"1": "Cody come tres veces más galletas de las que come Amir.", "2": "Si Amir come 5 galletas, ¿cuántas galletas comen ambos juntos?", "3": "Cody come 5 * 3 = 15 galletas.", "4": "Cody y Amir comen 15 + 5 = 20 galletas juntos.", "5": "The answer is 20"}, "human_translated": true, "code_input": "####\nfacts = ['Cody come tres veces más galletas de las que come Amir.']\nquestion = 'Si Amir come 5 galletas, ¿cuántas galletas comen ambos juntos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Cody come tres veces más galletas de las que come Amir.', 'Si Amir come 5 galletas, ¿cuántas galletas comen ambos juntos?']\nnew_fact = infer_new_fact(selected) # 'Cody come 5\\xa0*\\xa03 = 15 galletas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Amir come 5 galletas, ¿cuántas galletas comen ambos juntos?', 'Cody come 5\\xa0*\\xa03 = 15 galletas.']\nnew_fact = infer_new_fact(selected) # 'Cody y Amir comen 15\\xa0+\\xa05 = 20 galletas juntos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Amir come 5 galletas, ¿cuántas galletas comen ambos juntos?', 'Cody y Amir comen 15\\xa0+\\xa05 = 20 galletas juntos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 20'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '20'"}
{"id": "GSM8K_106_259951d654", "context": "", "options": [], "answer": "72", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [2, 5], "consequent": 6}, {"antecedents": [2, 5], "consequent": 7}, {"antecedents": [2, 5], "consequent": 8}, {"antecedents": [6, 7, 8], "consequent": 9}, {"antecedents": [4, 9], "consequent": 10}, {"antecedents": [1, 4], "consequent": 11}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: The walls subtract 2*1=2 inches from each dimension; int1 & sent2 -> int2: So each box has 5-2=3 inch width; int1 & sent2 -> int3: It also has a 6-2=4 inch height; int1 & sent2 -> int4: Finally, it has a 4-2=2 inch depth; int2 & int3 & int4 -> int5: So the inner volume of one box is 4*3*2=24 cubic inches; int5 & sent4 -> int6: So in total the inner volume of the 3 boxes is 3*24=72 cubic inches; sent1 & sent4 -> int7: The answer is 72;", "textual_logical_units": {"1": "John tiene 3 cajas.", "2": "Cada caja mide 5 centímetros por 6 centímetros por 4 centímetros.", "3": "Las paredes tienen 1 centímetro de grosor.", "4": "¿Cuál es el volumen interior total de las 3 cajas?", "5": "Las paredes restan 2 * 1 = 2 centímetros de cada dimensión.", "6": "Así que cada caja tiene 5 -2 = 3 centímetros de ancho.", "7": "También tiene 6 - 2 = 4 centímetros de altura.", "8": "Por último, tiene 4 - 2 = 2 centímetros de profundidad.", "9": "Así que el volumen interior de una caja es 4 * 3 * 2 = 24 centímetros cúbicos.", "10": "Así que, en total, el volumen interior de las 3 cajas es de 3 * 24 = 72 centímetros cúbicos.", "11": "The answer is 72"}, "human_translated": true, "code_input": "####\nfacts = ['John tiene 3 cajas.', 'Cada caja mide 5\\xa0centímetros por\\xa06 centímetros\\xa0por\\xa04 centímetros.', 'Las paredes tienen 1\\xa0centímetro de grosor.']\nquestion = '¿Cuál es el volumen interior total de las 3 cajas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Cada caja mide 5\\xa0centímetros por\\xa06 centímetros\\xa0por\\xa04 centímetros.', 'Las paredes tienen 1\\xa0centímetro de grosor.']\nnew_fact = infer_new_fact(selected) # 'Las paredes restan 2\\xa0*\\xa01 = 2 centímetros de cada dimensión.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada caja mide 5\\xa0centímetros por\\xa06 centímetros\\xa0por\\xa04 centímetros.', 'Las paredes restan 2\\xa0*\\xa01 = 2 centímetros de cada dimensión.']\nnew_fact = infer_new_fact(selected) # 'Así que cada caja tiene 5\\xa0-2 = 3\\xa0centímetros de ancho.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada caja mide 5\\xa0centímetros por\\xa06 centímetros\\xa0por\\xa04 centímetros.', 'Las paredes restan 2\\xa0*\\xa01 = 2 centímetros de cada dimensión.']\nnew_fact = infer_new_fact(selected) # 'También tiene 6\\xa0-\\xa02 = 4\\xa0centímetros de altura.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada caja mide 5\\xa0centímetros por\\xa06 centímetros\\xa0por\\xa04 centímetros.', 'Las paredes restan 2\\xa0*\\xa01 = 2 centímetros de cada dimensión.']\nnew_fact = infer_new_fact(selected) # 'Por último, tiene 4\\xa0-\\xa02 = 2 centímetros de profundidad.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Así que cada caja tiene 5\\xa0-2 = 3\\xa0centímetros de ancho.', 'También tiene 6\\xa0-\\xa02 = 4\\xa0centímetros de altura.', 'Por último, tiene 4\\xa0-\\xa02 = 2 centímetros de profundidad.']\nnew_fact = infer_new_fact(selected) # 'Así que el volumen interior de una caja es 4\\xa0*\\xa03\\xa0*\\xa02\\xa0=\\xa024 centímetros cúbicos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál es el volumen interior total de las 3 cajas?', 'Así que el volumen interior de una caja es 4\\xa0*\\xa03\\xa0*\\xa02\\xa0=\\xa024 centímetros cúbicos.']\nnew_fact = infer_new_fact(selected) # 'Así que, en total, el volumen interior de las 3 cajas es de 3\\xa0*\\xa024 = 72 centímetros cúbicos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['John tiene 3 cajas.', '¿Cuál es el volumen interior total de las 3 cajas?']\nnew_fact = infer_new_fact(selected) # 'The answer is 72'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '72'"}
{"id": "GSM8K_107_a891f712e3", "context": "", "options": [], "answer": "3", "reasoning_graph_edges": [{"antecedents": [3], "consequent": 10}, {"antecedents": [2, 8], "consequent": 11}, {"antecedents": [2, 11], "consequent": 12}, {"antecedents": [4, 5, 12], "consequent": 13}, {"antecedents": [6, 7, 13], "consequent": 14}, {"antecedents": [9], "consequent": 15}, {"antecedents": [10, 14, 15], "consequent": 16}, {"antecedents": [8, 9, 16], "consequent": 17}], "metadata": [], "linearized_output_en": "sent3 -> int1: Let W be the number of episodes he watched on Wednesday.; sent2 & sent8 -> int2: After Monday, he had 7 - 1 = 6 hours of TV left.; int2 & sent2 -> int3: After Tuesday, he had 6 - 1 = 5 hours of TV left.; int3 & sent4 & sent5 -> int4: After Thursday, he had 5 - 1 - 1/2 = 3 1/2 hours of TV left.; int4 & sent6 & sent7 -> int5: After Friday, he had 3 1/2 - 2 = 1 1/2 hours of TV left.; sent9 -> int6: Each 30-minute episode is 1/2 hour.; int1 & int5 & int6 -> int7: Thus, W = 1 1/2 / 1/2 = 3 episodes.; int7 & sent8 & sent9 -> int8: The answer is 3;", "textual_logical_units": {"1": "Frankie ve la televisión después de terminar sus deberes todas las noches.", "2": "El lunes y el martes, vio un episodio de 1 hora de su programa favorito cada noche.", "3": "El miércoles, vio algunos episodios de un programa de 30 minutos.", "4": "El jueves, terminó los deberes temprano y", "5": "vio un episodio de 1 hora y un programa de 30 minutos.", "6": "El viernes, se pudo quedar despierto hasta tarde porque era fin de semana,", "7": "así que vio 2 episodios de 1 hora.", "8": "Si vio 7 horas de televisión en total,", "9": "¿cuántos episodios de 30 minutos vio el miércoles?", "10": "Si W es el número de episodios que vio el miércoles.", "11": "Después del lunes, le quedaban 7 - 1 = 6 horas de televisión.", "12": "Después del martes, le quedaban 6 - 1 = 5 horas de televisión.", "13": "Después del jueves, le quedaban 5 - 1 - 1/2 = 3 1/2 horas de televisión.", "14": "Después del viernes, le quedaban 3 1/2 - 2 = 1 1/2 horas de televisión.", "15": "Cada episodio de 30 minutos dura media hora.", "16": "Por lo tanto, W = 1 1/2 / 1/2 = 3 episodios.", "17": "The answer is 3"}, "human_translated": true, "code_input": "####\nfacts = [ 'Frankie ve la televisión después de terminar sus deberes todas las noches.',\n  'El lunes y el martes, vio un episodio de 1 hora de su programa favorito cada noche.',\n  'El miércoles, vio algunos episodios de un programa de 30 minutos.',\n  'El jueves, terminó los deberes temprano y',\n  'vio un episodio de 1 hora y un programa de 30 minutos.',\n  'El viernes, se pudo quedar despierto hasta tarde porque era fin de semana,',\n  'así que vio 2 episodios de 1 hora.',\n  'Si vio 7 horas de televisión en total,']\nquestion = '¿cuántos episodios de 30 minutos vio el miércoles?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['El miércoles, vio algunos episodios de un programa de 30 minutos.']\nnew_fact = infer_new_fact(selected) # 'Si W es el número de episodios que vio el miércoles.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El lunes y el martes, vio un episodio de 1 hora de su programa favorito cada noche.', 'Si vio 7 horas de televisión en total,']\nnew_fact = infer_new_fact(selected) # 'Después del lunes, le quedaban 7\\xa0-\\xa01 = 6 horas de televisión.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El lunes y el martes, vio un episodio de 1 hora de su programa favorito cada noche.', 'Después del lunes, le quedaban 7\\xa0-\\xa01 = 6 horas de televisión.']\nnew_fact = infer_new_fact(selected) # 'Después del martes, le quedaban 6\\xa0-\\xa01 = 5 horas de televisión.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El jueves, terminó los deberes temprano y', 'vio un episodio de 1 hora y un programa de 30 minutos.', 'Después del martes, le quedaban 6\\xa0-\\xa01 = 5 horas de televisión.']\nnew_fact = infer_new_fact(selected) # 'Después del jueves, le quedaban 5\\xa0-\\xa01\\xa0-\\xa01/2 = 3 1/2 horas de televisión.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El viernes, se pudo quedar despierto hasta tarde porque era fin de semana,', 'así que vio 2 episodios de 1 hora.', 'Después del jueves, le quedaban 5\\xa0-\\xa01\\xa0-\\xa01/2 = 3 1/2 horas de televisión.']\nnew_fact = infer_new_fact(selected) # 'Después del viernes, le quedaban 3 1/2\\xa0-\\xa02 = 1 1/2 horas de televisión.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos episodios de 30 minutos vio el miércoles?']\nnew_fact = infer_new_fact(selected) # 'Cada episodio de 30 minutos dura media hora.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si W es el número de episodios que vio el miércoles.', 'Después del viernes, le quedaban 3 1/2\\xa0-\\xa02 = 1 1/2 horas de televisión.', 'Cada episodio de 30 minutos dura media hora.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, W = 1\\xa01/2\\xa0/\\xa01/2 = 3 episodios.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si vio 7 horas de televisión en total,', '¿cuántos episodios de 30 minutos vio el miércoles?', 'Por lo tanto, W = 1\\xa01/2\\xa0/\\xa01/2 = 3 episodios.']\nnew_fact = infer_new_fact(selected) # 'The answer is 3'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '3'"}
{"id": "GSM8K_108_2f29e0b20c", "context": "", "options": [], "answer": "50", "reasoning_graph_edges": [{"antecedents": [4, 5], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}, {"antecedents": [2, 6, 8], "consequent": 9}, {"antecedents": [6, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent4 & sent5 -> int1: Adding the cookies Henry dropped shows he baked 110 + 5 = 115 cookies this year.; int1 & sent3 -> int2: He had cooked too many, so he must have needed 115 – 15 = 100 cookies to double last year’s amount.; int2 & sent2 & sent6 -> int3: Therefore, he must have cooked 100 / 2 = 50 cookies last year.; int3 & sent6 -> int4: The answer is 50;", "textual_logical_units": {"1": "Henry está haciendo galletas para un concurso de repostería local.", "2": "Quiere hacer el doble que el año pasado.", "3": "Cuando termina de hornear, se da cuenta de que ha horneado 15 galletas más de las que pretendía.", "4": "Se le caen 5 de sus galletas mientras las pone a enfriar,", "5": "y ahora tiene un total de 110 galletas.", "6": "¿Cuántas galletas horneó Henry el año pasado?", "7": "Al añadir las galletas que se le cayeron a Henry, vemos que horneó 110 + 5 = 115 galletas este año.", "8": "Había cocinado demasiadas, por lo que debe haber necesitado 115 - 15 = 100 galletas para duplicar la cantidad del año pasado.", "9": "Por lo tanto, debió haber cocinado 100 / 2 = 50 galletas el año pasado.", "10": "The answer is 50"}, "human_translated": true, "code_input": "####\nfacts = [ 'Henry está haciendo galletas para un concurso de repostería local.',\n  'Quiere hacer el doble que el año pasado.',\n  'Cuando termina de hornear, se da cuenta de que ha horneado 15 galletas más de las que pretendía.',\n  'Se le caen 5 de sus galletas mientras las pone a enfriar,',\n  'y ahora tiene un total de 110 galletas.']\nquestion = '¿Cuántas galletas horneó Henry el año pasado?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Se le caen 5 de sus galletas mientras las pone a enfriar,', 'y ahora tiene un total de 110 galletas.']\nnew_fact = infer_new_fact(selected) # 'Al añadir las galletas que se le cayeron a Henry, vemos que horneó 110\\xa0+\\xa05 = 115 galletas este año.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cuando termina de hornear, se da cuenta de que ha horneado 15 galletas más de las que pretendía.', 'Al añadir las galletas que se le cayeron a Henry, vemos que horneó 110\\xa0+\\xa05 = 115 galletas este año.']\nnew_fact = infer_new_fact(selected) # 'Había cocinado demasiadas, por lo que debe haber necesitado 115\\xa0-\\xa015 = 100 galletas para duplicar la cantidad del año pasado.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Quiere hacer el doble que el año pasado.', '¿Cuántas galletas horneó Henry el año pasado?', 'Había cocinado demasiadas, por lo que debe haber necesitado 115\\xa0-\\xa015 = 100 galletas para duplicar la cantidad del año pasado.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, debió haber cocinado 100\\xa0/\\xa02 = 50 galletas el año pasado.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas galletas horneó Henry el año pasado?', 'Por lo tanto, debió haber cocinado 100\\xa0/\\xa02 = 50 galletas el año pasado.']\nnew_fact = infer_new_fact(selected) # 'The answer is 50'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '50'"}
{"id": "GSM8K_109_6cc1718b43", "context": "", "options": [], "answer": "28", "reasoning_graph_edges": [{"antecedents": [1, 3], "consequent": 5}, {"antecedents": [2, 3], "consequent": 6}, {"antecedents": [4, 5, 6], "consequent": 7}, {"antecedents": [3, 4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent3 -> int1: Gas is $3.00 a gallon and they buy 10 gallons of gas so that's 3*10 = $30.00; sent2 & sent3 -> int2: The app is offering $0.20 cashback per gallon and they buy 10 gallons so that's .20*10 = $2.00; int1 & int2 & sent4 -> int3: They spent $30.00 on gas and their app is offering them $2.00 cashback so they spent 30-2 = $28.00 per gallon; int3 & sent3 & sent4 -> int4: The answer is 28;", "textual_logical_units": {"1": "Una gasolinera local vende gasolina a 3,00 € el litro.", "2": "La empresa de una aplicación ofrece un reembolso de 0,20 € por litro si repostas en esta estación.", "3": "Si alguien compra 10 litros de gasolina,", "4": "¿cuánto costará la gasolina después de aplicar el reembolso?", "5": "La gasolina cuesta 3,00 € el litro y la persona compra 10 litros de gasolina, por lo que 3 * 10 = 30,00 €", "6": "La aplicación ofrece un reembolso de 0,20 € por litro y la persona compra 10 litros, es decir, 0,20 * 10 = 2,00 €", "7": "Gastó 30,00 € en gasolina y su aplicación le ofrece un reembolso de 2,00 €, por lo que gastó 30 - 2 = 28,00 € por litro", "8": "The answer is 28"}, "human_translated": true, "code_input": "####\nfacts = [ 'Una gasolinera local vende gasolina a 3,00\\xa0€ el litro.',\n  'La empresa de una aplicación ofrece un reembolso de 0,20\\xa0€ por litro si repostas en esta estación.',\n  'Si alguien compra 10 litros de gasolina,']\nquestion = '¿cuánto costará la gasolina después de aplicar el reembolso?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Una gasolinera local vende gasolina a 3,00\\xa0€ el litro.', 'Si alguien compra 10 litros de gasolina,']\nnew_fact = infer_new_fact(selected) # 'La gasolina cuesta 3,00\\xa0€ el litro y la persona compra 10 litros de gasolina, por lo que 3\\xa0*\\xa010 = 30,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La empresa de una aplicación ofrece un reembolso de 0,20\\xa0€ por litro si repostas en esta estación.', 'Si alguien compra 10 litros de gasolina,']\nnew_fact = infer_new_fact(selected) # 'La aplicación ofrece un reembolso de 0,20\\xa0€ por litro y la persona compra 10 litros, es decir, 0,20\\xa0*\\xa010 = 2,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuánto costará la gasolina después de aplicar el reembolso?', 'La gasolina cuesta 3,00\\xa0€ el litro y la persona compra 10 litros de gasolina, por lo que 3\\xa0*\\xa010 = 30,00\\xa0€', 'La aplicación ofrece un reembolso de 0,20\\xa0€ por litro y la persona compra 10 litros, es decir, 0,20\\xa0*\\xa010 = 2,00\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Gastó 30,00\\xa0€ en gasolina y su aplicación le ofrece un reembolso de 2,00\\xa0€, por lo que gastó 30\\xa0-\\xa02 = 28,00\\xa0€ por litro'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si alguien compra 10 litros de gasolina,', '¿cuánto costará la gasolina después de aplicar el reembolso?', 'Gastó 30,00\\xa0€ en gasolina y su aplicación le ofrece un reembolso de 2,00\\xa0€, por lo que gastó 30\\xa0-\\xa02 = 28,00\\xa0€ por litro']\nnew_fact = infer_new_fact(selected) # 'The answer is 28'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '28'"}
{"id": "GSM8K_110_ad42f9dde0", "context": "", "options": [], "answer": "45", "reasoning_graph_edges": [{"antecedents": [4, 5], "consequent": 8}, {"antecedents": [5], "consequent": 9}, {"antecedents": [8, 9], "consequent": 10}, {"antecedents": [1, 1], "consequent": 11}, {"antecedents": [6, 7, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent4 & sent5 -> int1: Beatrice ate 48 because 24 x 2 = 48.; sent5 -> int2: Marcell ate 42 because 14 x 3 = 42; int1 & int2 -> int3: In total they ate 90 because 48 + 42 = 90; sent1 & sent1 -> int4: On average they ate 45 because 90 / 2 = 45; int4 & sent6 & sent7 -> int5: The answer is 45;", "textual_logical_units": {"1": "Marcell y Beatrice van a hacer un concurso para ver quién puede comer más espirales de regaliz,", "2": "por lo que desenrollan tantas como puedan encontrar.", "3": "Por desgracia, alguien comete un error y", "4": "Beatrice tenía 2 rollos de ancho y", "5": "24 rollos de largo, mientras que Marcell tenía 3 rollos de ancho y 14 rollos de largo.", "6": "Si ambos se comieron todo lo que tenían,", "7": "¿cuántas se comieron de media?", "8": "Beatrice se comió 48 porque 24 × 2 = 48.", "9": "Marcell se comió 42 porque 14 × 3 = 42", "10": "En total, se comieron 90 porque 48 + 42 = 90", "11": "De media, se comieron 45 porque 90 / 2 = 45", "12": "The answer is 45"}, "human_translated": true, "code_input": "####\nfacts = [ 'Marcell y Beatrice van a hacer un concurso para ver quién puede comer más espirales de regaliz,',\n  'por lo que desenrollan tantas como puedan encontrar.',\n  'Por desgracia, alguien comete un error y',\n  'Beatrice tenía 2 rollos de ancho y',\n  '24 rollos de largo, mientras que Marcell tenía 3 rollos de ancho y 14 rollos de largo.',\n  'Si ambos se comieron todo lo que tenían,']\nquestion = '¿cuántas se comieron de media?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Beatrice tenía 2 rollos de ancho y', '24 rollos de largo, mientras que Marcell tenía 3 rollos de ancho y 14 rollos de largo.']\nnew_fact = infer_new_fact(selected) # 'Beatrice se comió 48 porque 24\\xa0×\\xa02 = 48.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['24 rollos de largo, mientras que Marcell tenía 3 rollos de ancho y 14 rollos de largo.']\nnew_fact = infer_new_fact(selected) # 'Marcell se comió 42 porque 14\\xa0×\\xa03 = 42'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Beatrice se comió 48 porque 24\\xa0×\\xa02 = 48.', 'Marcell se comió 42 porque 14\\xa0×\\xa03 = 42']\nnew_fact = infer_new_fact(selected) # 'En total, se comieron 90 porque 48\\xa0+\\xa042 = 90'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Marcell y Beatrice van a hacer un concurso para ver quién puede comer más espirales de regaliz,', 'Marcell y Beatrice van a hacer un concurso para ver quién puede comer más espirales de regaliz,']\nnew_fact = infer_new_fact(selected) # 'De media, se comieron 45 porque 90\\xa0/\\xa02 = 45'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si ambos se comieron todo lo que tenían,', '¿cuántas se comieron de media?', 'De media, se comieron 45 porque 90\\xa0/\\xa02 = 45']\nnew_fact = infer_new_fact(selected) # 'The answer is 45'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '45'"}
{"id": "GSM8K_111_903aa75983", "context": "", "options": [], "answer": "16", "reasoning_graph_edges": [{"antecedents": [3, 4], "consequent": 6}, {"antecedents": [6], "consequent": 7}, {"antecedents": [2, 7], "consequent": 8}, {"antecedents": [2, 8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent3 & sent4 -> int1: It took Julia 64 seconds to reach shore, so it took 64 / 16 = 4 times rowing 20 feet to reach the shore.; int1 -> int2: Thus, she had to row 20 * 4 = 80 feet back to shore.; int2 & sent2 -> int3: In those 80 feet, she took on 2 liters of water 80 / 10 = 8 times.; int3 & sent2 -> int4: Thus, the boat had taken on 8 * 2 = 16 liters of water by the time Julia reached the shore.; int4 & sent5 -> int5: The answer is 16;", "textual_logical_units": {"1": "El barco de Julia comenzó a tener una fuga cuando estaba en el lago.", "2": "Al barco le entraban dos litros de agua por cada diez metros que remaba de regreso a la costa.", "3": "Tardó 16 segundos en remar 20 metros.", "4": "La playa estaba a 64 segundos.", "5": "¿Cuánta agua había entrado en el barco cuando Julia llegó a la orilla?", "6": "Julia tardó 64 segundos en llegar a la costa, por lo que tardó 64 / 16 = 4 veces remando 20 metros en llegar a la orilla.", "7": "Por lo tanto, tuvo que remar 20 * 4 = 80 metros de regreso a la costa.", "8": "En esos 80 metros, entraron 2 litros de agua 80 / 10= 8 veces.", "9": "Por lo tanto, al barco le entraron 8 * 2 = 16 litros de agua cuando Julia llegó a la orilla.", "10": "The answer is 16"}, "human_translated": true, "code_input": "####\nfacts = [ 'El barco de Julia comenzó a tener una fuga cuando estaba en el lago.',\n  'Al barco le entraban dos litros de agua por cada diez metros que remaba de regreso a la costa.',\n  'Tardó 16 segundos en remar 20\\xa0metros.',\n  'La playa estaba a 64 segundos.']\nquestion = '¿Cuánta agua había entrado en el barco cuando Julia llegó a la orilla?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Tardó 16 segundos en remar 20\\xa0metros.', 'La playa estaba a 64 segundos.']\nnew_fact = infer_new_fact(selected) # 'Julia tardó 64 segundos en llegar a la costa, por lo que tardó 64\\xa0/\\xa016 = 4 veces remando 20\\xa0metros en llegar a la orilla.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Julia tardó 64 segundos en llegar a la costa, por lo que tardó 64\\xa0/\\xa016 = 4 veces remando 20\\xa0metros en llegar a la orilla.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, tuvo que remar 20\\xa0*\\xa04 = 80\\xa0metros de regreso a la costa.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Al barco le entraban dos litros de agua por cada diez metros que remaba de regreso a la costa.', 'Por lo tanto, tuvo que remar 20\\xa0*\\xa04 = 80\\xa0metros de regreso a la costa.']\nnew_fact = infer_new_fact(selected) # 'En esos 80\\xa0metros, entraron 2 litros de agua 80\\xa0/\\xa010= 8 veces.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Al barco le entraban dos litros de agua por cada diez metros que remaba de regreso a la costa.', 'En esos 80\\xa0metros, entraron 2 litros de agua 80\\xa0/\\xa010= 8 veces.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, al barco le entraron 8\\xa0*\\xa02 = 16 litros de agua cuando Julia llegó a la orilla.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánta agua había entrado en el barco cuando Julia llegó a la orilla?', 'Por lo tanto, al barco le entraron 8\\xa0*\\xa02 = 16 litros de agua cuando Julia llegó a la orilla.']\nnew_fact = infer_new_fact(selected) # 'The answer is 16'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '16'"}
{"id": "GSM8K_112_7855d39ca2", "context": "", "options": [], "answer": "24", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}, {"antecedents": [4, 5, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: In one day, there are a total of 4 teachers * 2 lessons each = 8 lessons.; int1 & sent4 -> int2: The whiteboard is therefore cleaned 8 lessons * 3 cleans per lesson = 24 times.; int2 & sent4 & sent5 -> int3: The answer is 24;", "textual_logical_units": {"1": "Un aula tiene una pizarra blanca que comparten los 4 profesores que se turnan para usar el aula.", "2": "Cada profesor tiene 2 clases por día y", "3": "usa la pizarra en cada clase.", "4": "Si la pizarra se limpia 3 veces por clase,", "5": "¿Cuántas veces se limpia la pizarra en un día?", "6": "En un día, hay un total de 4 profesores * 2 clases cada uno = 8 clases.", "7": "Por lo tanto, la pizarra se limpia 8 clases * 3 limpiezas por clase = 24 veces.", "8": "The answer is 24"}, "human_translated": true, "code_input": "####\nfacts = [ 'Un aula tiene una pizarra blanca que comparten los 4 profesores que se turnan para usar el aula.',\n  'Cada profesor tiene 2 clases por día y',\n  'usa la pizarra en cada clase.',\n  'Si la pizarra se limpia 3 veces por clase,']\nquestion = '¿Cuántas veces se limpia la pizarra en un día?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Un aula tiene una pizarra blanca que comparten los 4 profesores que se turnan para usar el aula.', 'Cada profesor tiene 2 clases por día y']\nnew_fact = infer_new_fact(selected) # 'En un día, hay un total de 4 profesores\\xa0*\\xa02 clases cada uno = 8 clases.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si la pizarra se limpia 3 veces por clase,', 'En un día, hay un total de 4 profesores\\xa0*\\xa02 clases cada uno = 8 clases.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, la pizarra se limpia 8 clases\\xa0*\\xa03 limpiezas por clase = 24 veces.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si la pizarra se limpia 3 veces por clase,', '¿Cuántas veces se limpia la pizarra en un día?', 'Por lo tanto, la pizarra se limpia 8 clases\\xa0*\\xa03 limpiezas por clase = 24 veces.']\nnew_fact = infer_new_fact(selected) # 'The answer is 24'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '24'"}
{"id": "GSM8K_113_717303c026", "context": "", "options": [], "answer": "25", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 3}, {"antecedents": [2, 3], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Ryan plants 2*15=30 flowers in total.; int1 & sent2 -> int2: Given 5 plants did not grow, he has 30-5=25 flowers in his garden.; int2 & sent2 -> int3: The answer is 25;", "textual_logical_units": {"1": "Ryan planta 2 flores al día en su jardín.", "2": "Después de 15 días, ¿cuántas flores tiene si 5 no han crecido?", "3": "Ryan planta 2 * 15=30 flores en total.", "4": "Dado que 5 plantas no crecieron, tiene 30 - 5 = 25 flores en su jardín.", "5": "The answer is 25"}, "human_translated": true, "code_input": "####\nfacts = ['Ryan planta 2 flores al día en su jardín.']\nquestion = 'Después de 15 días, ¿cuántas flores tiene si 5 no han crecido?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Ryan planta 2 flores al día en su jardín.', 'Después de 15 días, ¿cuántas flores tiene si 5 no han crecido?']\nnew_fact = infer_new_fact(selected) # 'Ryan planta 2\\xa0*\\xa015=30 flores en total.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Después de 15 días, ¿cuántas flores tiene si 5 no han crecido?', 'Ryan planta 2\\xa0*\\xa015=30 flores en total.']\nnew_fact = infer_new_fact(selected) # 'Dado que 5 plantas no crecieron, tiene 30\\xa0-\\xa05 = 25 flores en su jardín.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Después de 15 días, ¿cuántas flores tiene si 5 no han crecido?', 'Dado que 5 plantas no crecieron, tiene 30\\xa0-\\xa05 = 25 flores en su jardín.']\nnew_fact = infer_new_fact(selected) # 'The answer is 25'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '25'"}
{"id": "GSM8K_114_3b9184bde6", "context": "", "options": [], "answer": "6", "reasoning_graph_edges": [{"antecedents": [1, 3], "consequent": 5}, {"antecedents": [2, 5], "consequent": 6}, {"antecedents": [3, 4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 & sent3 -> int1: Since Jamal's phone can hold 1800 photos, which is 6 times more than Brittany's phone can hold, Brittany's phone can hold `1800/6=300 photographs.; int1 & sent2 -> int2: Since Brittany's phone can hold 50 times more photos than the number of birds in Jamal's photograph, then 300/50=6 ducks can be seen in Jamal's photograph of ducks at the zoo.; int2 & sent3 & sent4 -> int3: The answer is 6;", "textual_logical_units": {"1": "El teléfono de Jamal puede almacenar 6 veces más fotografías que el teléfono de Brittany.", "2": "El número máximo de fotografías que puede almacenar el teléfono de Brittany es 50 veces mayor que el número de aves de la fotografía de los patos del zoológico de Jamal.", "3": "Si el teléfono de Jamal puede almacenar 1800 fotografías,", "4": "¿cuántos patos se pueden ver en la fotografía de Jamal de los patos del zoológico?", "5": "Como el teléfono de Jamal puede almacenar 1800 fotos, 6 veces más de lo que puede almacenar el teléfono de Brittany, el teléfono de Brittany puede almacenar 1800 / 6 = 300 fotografías.", "6": "Como el teléfono de Brittany puede almacenar 50 veces más fotos que el número de aves de la fotografía de Jamal, en la fotografía de los patos del zoológico de Jamal se pueden ver 300 / 50 = 6 patos.", "7": "The answer is 6"}, "human_translated": true, "code_input": "####\nfacts = [ 'El teléfono de Jamal puede almacenar 6 veces más fotografías que el teléfono de Brittany.',\n  'El número máximo de fotografías que puede almacenar el teléfono de Brittany es 50 veces mayor que el número de aves de la fotografía de los patos del '\n  'zoológico de Jamal.',\n  'Si el teléfono de Jamal puede almacenar 1800 fotografías,']\nquestion = '¿cuántos patos se pueden ver en la fotografía de Jamal de los patos del zoológico?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['El teléfono de Jamal puede almacenar 6 veces más fotografías que el teléfono de Brittany.', 'Si el teléfono de Jamal puede almacenar 1800 fotografías,']\nnew_fact = infer_new_fact(selected) # 'Como el teléfono de Jamal puede almacenar 1800 fotos, 6 veces más de lo que puede almacenar el teléfono de Brittany, el teléfono de Brittany puede almacenar 1800\\xa0/\\xa06 = 300 fotografías.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El número máximo de fotografías que puede almacenar el teléfono de Brittany es 50 veces mayor que el número de aves de la fotografía de los patos del zoológico de Jamal.', 'Como el teléfono de Jamal puede almacenar 1800 fotos, 6 veces más de lo que puede almacenar el teléfono de Brittany, el teléfono de Brittany puede almacenar 1800\\xa0/\\xa06 = 300 fotografías.']\nnew_fact = infer_new_fact(selected) # 'Como el teléfono de Brittany puede almacenar 50 veces más fotos que el número de aves de la fotografía de Jamal, en la fotografía de los patos del zoológico de Jamal se pueden ver 300\\xa0/\\xa050 = 6 patos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si el teléfono de Jamal puede almacenar 1800 fotografías,', '¿cuántos patos se pueden ver en la fotografía de Jamal de los patos del zoológico?', 'Como el teléfono de Brittany puede almacenar 50 veces más fotos que el número de aves de la fotografía de Jamal, en la fotografía de los patos del zoológico de Jamal se pueden ver 300\\xa0/\\xa050 = 6 patos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 6'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '6'"}
{"id": "GSM8K_115_f0a09552a7", "context": "", "options": [], "answer": "90", "reasoning_graph_edges": [{"antecedents": [3], "consequent": 7}, {"antecedents": [4], "consequent": 8}, {"antecedents": [7, 8], "consequent": 9}, {"antecedents": [1, 9], "consequent": 10}, {"antecedents": [1, 9], "consequent": 11}, {"antecedents": [5, 6, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent3 -> int1: She bought the 2 x 4s for $100 because 10 x 10 = 100; sent4 -> int2: She bought the 4 x 4s for 80 because 5 x 16 = 80; int1 & int2 -> int3: She paid $180 for the lumber because 100 + 80 = 180; int3 & sent1 -> int4: The same number now sells for $270 because 180 x 1.5 = 270; int3 & sent1 -> int5: She made $90 in profit because 270 - 180 = 90; int5 & sent5 & sent6 -> int6: The answer is 90;", "textual_logical_units": {"1": "Sasha se da cuenta de que los precios de la madera han subido un 50 % en los últimos meses después de comprar algo de madera.", "2": "Como le ha sobrado madera, decide venderla.", "3": "Le sobraron 10 tablas de 2 × 4 × 10 que le costaron 10 € cada una.", "4": "También tiene 5 tablas de 4 × 4 × 10 que compró por 16 € cada una.", "5": "Si las vende todas,", "6": "¿cuánto beneficio obtiene?", "7": "Compró las de 2 × 4 por 100 € porque 10 × 10 = 100", "8": "Compró las de 4 × 4 por 80 porque 5 × 16 = 80", "9": "Pagó 180 € por la madera porque 100 + 80 = 180", "10": "El mismo número ahora se vende por 270 € porque 180 × 1,5 = 270", "11": "Obtuvo 90 € en ganancias porque 270 - 180 = 90", "12": "The answer is 90"}, "human_translated": true, "code_input": "####\nfacts = [ 'Sasha se da cuenta de que los precios de la madera han subido un 50\\xa0% en los últimos meses después de comprar algo de madera.',\n  'Como le ha sobrado madera, decide venderla.',\n  'Le sobraron 10 tablas de 2\\xa0×\\xa04\\xa0×\\xa010 que le costaron 10\\xa0€ cada una.',\n  'También tiene 5 tablas de 4\\xa0×\\xa04\\xa0×\\xa010 que compró por 16\\xa0€ cada una.',\n  'Si las vende todas,']\nquestion = '¿cuánto beneficio obtiene?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Le sobraron 10 tablas de 2\\xa0×\\xa04\\xa0×\\xa010 que le costaron 10\\xa0€ cada una.']\nnew_fact = infer_new_fact(selected) # 'Compró las de 2\\xa0×\\xa04 por 100\\xa0€ porque 10\\xa0×\\xa010 = 100'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['También tiene 5 tablas de 4\\xa0×\\xa04\\xa0×\\xa010 que compró por 16\\xa0€ cada una.']\nnew_fact = infer_new_fact(selected) # 'Compró las de 4\\xa0×\\xa04 por 80 porque 5\\xa0×\\xa016 = 80'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Compró las de 2\\xa0×\\xa04 por 100\\xa0€ porque 10\\xa0×\\xa010 = 100', 'Compró las de 4\\xa0×\\xa04 por 80 porque 5\\xa0×\\xa016 = 80']\nnew_fact = infer_new_fact(selected) # 'Pagó 180\\xa0€ por la madera porque 100\\xa0+\\xa080 = 180'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Sasha se da cuenta de que los precios de la madera han subido un 50\\xa0% en los últimos meses después de comprar algo de madera.', 'Pagó 180\\xa0€ por la madera porque 100\\xa0+\\xa080 = 180']\nnew_fact = infer_new_fact(selected) # 'El mismo número ahora se vende por 270\\xa0€ porque 180\\xa0×\\xa01,5 = 270'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Sasha se da cuenta de que los precios de la madera han subido un 50\\xa0% en los últimos meses después de comprar algo de madera.', 'Pagó 180\\xa0€ por la madera porque 100\\xa0+\\xa080 = 180']\nnew_fact = infer_new_fact(selected) # 'Obtuvo 90\\xa0€ en ganancias porque 270\\xa0-\\xa0180 = 90'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si las vende todas,', '¿cuánto beneficio obtiene?', 'Obtuvo 90\\xa0€ en ganancias porque 270\\xa0-\\xa0180 = 90']\nnew_fact = infer_new_fact(selected) # 'The answer is 90'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '90'"}
{"id": "GSM8K_116_00e43ffc70", "context": "", "options": [], "answer": "42", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [1, 2, 3, 5], "consequent": 6}, {"antecedents": [3, 4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: The total ratio representing the ingredients she used to make the coffee is 7+13 = 20; int1 & sent1 & sent2 & sent3 -> int2: Since the fraction representing the number of teaspoons she used is 7/20, she used 7/20*120 = 42; int2 & sent3 & sent4 -> int3: The answer is 42;", "textual_logical_units": {"1": "Katy hace café con cucharaditas de azúcar y", "2": "tazas de agua en una proporción de 7:13.", "3": "Si usó un total de 120 cucharaditas de azúcar y tazas de agua,", "4": "calcula la cantidad de cucharaditas de azúcar que usó.", "5": "La proporción total que representa los ingredientes que usó para hacer el café es 7 + 13 = 20", "6": "Como la fracción que representa el número de cucharaditas que usó es 7/20, usó 7 / 20 * 120 = 42", "7": "The answer is 42"}, "human_translated": true, "code_input": "####\nfacts = ['Katy hace café con cucharaditas de azúcar y', 'tazas de agua en una proporción de 7:13.', 'Si usó un total de 120 cucharaditas de azúcar y tazas de agua,']\nquestion = 'calcula la cantidad de cucharaditas de azúcar que usó.'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Katy hace café con cucharaditas de azúcar y', 'tazas de agua en una proporción de 7:13.']\nnew_fact = infer_new_fact(selected) # 'La proporción total que representa los ingredientes que usó para hacer el café es 7\\xa0+\\xa013 = 20'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Katy hace café con cucharaditas de azúcar y', 'tazas de agua en una proporción de 7:13.', 'Si usó un total de 120 cucharaditas de azúcar y tazas de agua,', 'La proporción total que representa los ingredientes que usó para hacer el café es 7\\xa0+\\xa013 = 20']\nnew_fact = infer_new_fact(selected) # 'Como la fracción que representa el número de cucharaditas que usó es 7/20, usó 7\\xa0/\\xa020\\xa0*\\xa0120 = 42'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si usó un total de 120 cucharaditas de azúcar y tazas de agua,', 'calcula la cantidad de cucharaditas de azúcar que usó.', 'Como la fracción que representa el número de cucharaditas que usó es 7/20, usó 7\\xa0/\\xa020\\xa0*\\xa0120 = 42']\nnew_fact = infer_new_fact(selected) # 'The answer is 42'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '42'"}
{"id": "GSM8K_117_ccb257452c", "context": "", "options": [], "answer": "360", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 -> int1: He bought 3*2=6 pairs of shoes; int1 & sent2 -> int2: So he spent 60*6=$360; int2 & sent3 -> int3: The answer is 360;", "textual_logical_units": {"1": "John compra 2 pares de zapatos para cada uno de sus 3 hijos.", "2": "Cuestan 60 € cada uno.", "3": "¿Cuánto pagó?", "4": "Compró 3 * 2 = 6 pares de zapatos", "5": "Así que gastó 60 * 6 = 360 €", "6": "The answer is 360"}, "human_translated": true, "code_input": "####\nfacts = ['John compra 2 pares de zapatos para cada uno de sus 3 hijos.', 'Cuestan 60\\xa0€ cada uno.']\nquestion = '¿Cuánto pagó?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['John compra 2 pares de zapatos para cada uno de sus 3 hijos.']\nnew_fact = infer_new_fact(selected) # 'Compró 3\\xa0*\\xa02 = 6 pares de zapatos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cuestan 60\\xa0€ cada uno.', 'Compró 3\\xa0*\\xa02 = 6 pares de zapatos']\nnew_fact = infer_new_fact(selected) # 'Así que gastó 60\\xa0*\\xa06 = 360\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto pagó?', 'Así que gastó 60\\xa0*\\xa06 = 360\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 360'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '360'"}
{"id": "GSM8K_118_0b25189ffa", "context": "", "options": [], "answer": "4", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}, {"antecedents": [2, 8], "consequent": 9}, {"antecedents": [5, 6, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: On the first day, 2*5 = 10 vehicles were Imported,; int1 & sent4 -> int2: On the next day, the number of vehicles imported through the port is 30-10 = 20 vehicles; int2 & sent2 -> int3: If each container has 5 vehicles, the number is 20/5 = 4 containers.; int3 & sent5 & sent6 -> int4: The answer is 4;", "textual_logical_units": {"1": "Un funcionario de aduanas del puerto principal de despachos de aduanad de SeaSide contó 2 contenedores de vehículos importados,", "2": "cada uno con 5 vehículos en su interior.", "3": "Al día siguiente, trajeron más contenedores", "4": "y el número total de vehículos en el puerto pasó a ser de 30.", "5": "Calcula la cantidad de contenedores que se importaron el segundo día", "6": "suponiendo que todos los contenedores contienen 5 vehículos.", "7": "El primer día, se importaron 2 * 5 = 10 vehículos,", "8": "Al día siguiente, la cantidad de vehículos importados a través del puerto es de 30 - 10 = 20 vehículos", "9": "Si cada contenedor tiene 5 vehículos, el número es 20/5 = 4 contenedores.", "10": "The answer is 4"}, "human_translated": true, "code_input": "####\nfacts = [ 'Un funcionario de aduanas del puerto principal de despachos de aduanad de SeaSide contó 2 contenedores de vehículos importados,',\n  'cada uno con 5 vehículos en su interior.',\n  'Al día siguiente, trajeron más contenedores',\n  'y el número total de vehículos en el puerto pasó a ser de 30.',\n  'Calcula la cantidad de contenedores que se importaron el segundo día']\nquestion = 'suponiendo que todos los contenedores contienen 5 vehículos.'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Un funcionario de aduanas del puerto principal de despachos de aduanad de SeaSide contó 2 contenedores de vehículos importados,', 'cada uno con 5 vehículos en su interior.']\nnew_fact = infer_new_fact(selected) # 'El primer día, se importaron 2\\xa0*\\xa05 = 10 vehículos,'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y el número total de vehículos en el puerto pasó a ser de 30.', 'El primer día, se importaron 2\\xa0*\\xa05 = 10 vehículos,']\nnew_fact = infer_new_fact(selected) # 'Al día siguiente, la cantidad de vehículos importados a través del puerto es de 30\\xa0-\\xa010 = 20 vehículos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['cada uno con 5 vehículos en su interior.', 'Al día siguiente, la cantidad de vehículos importados a través del puerto es de 30\\xa0-\\xa010 = 20 vehículos']\nnew_fact = infer_new_fact(selected) # 'Si cada contenedor tiene 5 vehículos, el número es 20/5 = 4 contenedores.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Calcula la cantidad de contenedores que se importaron el segundo día', 'suponiendo que todos los contenedores contienen 5 vehículos.', 'Si cada contenedor tiene 5 vehículos, el número es 20/5 = 4 contenedores.']\nnew_fact = infer_new_fact(selected) # 'The answer is 4'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '4'"}
{"id": "GSM8K_119_4b61230615", "context": "", "options": [], "answer": "95200", "reasoning_graph_edges": [{"antecedents": [3, 5], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}, {"antecedents": [1, 4], "consequent": 9}, {"antecedents": [9], "consequent": 10}, {"antecedents": [3, 4, 10], "consequent": 11}, {"antecedents": [10, 11], "consequent": 12}, {"antecedents": [8, 12], "consequent": 13}, {"antecedents": [4, 5, 6, 13], "consequent": 14}], "metadata": [], "linearized_output_en": "sent3 & sent5 -> int1: Since Adrien was earning $40000 four years ago and received a raise that makes him earn 40% more, he received a 40/100*$40000 = $16000 raise.; int1 & sent5 -> int2: In total, four years later, Adrien's salary is $40000+$16000 = $56000; sent1 & sent4 -> int3: If four years ago Adrien was earning $40000, and Lylah's salary was 30% less, then Lylah's salary was 30/100*$40000= $12000 less than Adrien's salary four years ago.; int3 -> int4: Four years ago, Lylah was earning $40000-$12000 =$28000; int4 & sent3 & sent4 -> int5: After receiving a 40% raise, Lylah earns 40/100*$28000 = $11200; int4 & int5 -> int6: In total, four years later, Lylah earns $28000+$11200= $39200.; int2 & int6 -> int7: The total amount of salary the two earn four years later is $39200+$56000 = $95200; int7 & sent4 & sent5 & sent6 -> int8: The answer is 95200;", "textual_logical_units": {"1": "El salario total de Adrien era un 30 por ciento más alto que el de Lylah.", "2": "Cuatro años más tarde, su salario había aumentado,", "3": "y ganaba un 40 % más de lo que ganaba hace cuatro años.", "4": "Si el salario de Adrien y Lylah aumentara simultáneamente,", "5": "y Adrien ganó 40 000 € hace cuatro años,", "6": "calcula el salario total que ganaron los dos cuatro años más tarde.", "7": "Como Adrien ganaba 40 000 € hace cuatro años y recibió un aumento que le permite ganar un 40 % más, recibió un aumento de 40/100 * 40 000 € = 16 000 €.", "8": "En total, cuatro años después, el salario de Adrien es de 40 000 € + 16 000 € = 56 000 €", "9": "Si hace cuatro años Adrien ganaba 40 000 € y el salario de Lylah era un 30 % menos, entonces el salario de Lylah era 30/100 * 40 000 € = 12 000 € menos que el salario de Adrien hace cuatro años.", "10": "Hace cuatro años, Lylah ganaba 40 000 € - 12 000 € = 28 000 €", "11": "Después de recibir un aumento del 40 %, Lylah gana 40/100 € * 28 000 € = 11 200 €", "12": "En total, cuatro años después, Lylah gana 28 000 € + 11 200 € = 39 200 €.", "13": "El importe total del salario que ganan los dos cuatro años después es de 39 200 € + 56 000 € = 95 200 €", "14": "The answer is 95200"}, "human_translated": true, "code_input": "####\nfacts = [ 'El salario total de Adrien era un 30 por ciento más alto que el de Lylah.',\n  'Cuatro años más tarde, su salario había aumentado,',\n  'y ganaba un 40\\xa0% más de lo que ganaba hace cuatro años.',\n  'Si el salario de Adrien y Lylah aumentara simultáneamente,',\n  'y Adrien ganó 40\\xa0000\\xa0€ hace cuatro años,']\nquestion = 'calcula el salario total que ganaron los dos cuatro años más tarde.'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['y ganaba un 40\\xa0% más de lo que ganaba hace cuatro años.', 'y Adrien ganó 40\\xa0000\\xa0€ hace cuatro años,']\nnew_fact = infer_new_fact(selected) # 'Como Adrien ganaba 40\\xa0000\\xa0€ hace cuatro años y recibió un aumento que le permite ganar un 40\\xa0% más, recibió un aumento de 40/100\\xa0*\\xa040\\xa0000\\xa0€ = 16\\xa0000\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y Adrien ganó 40\\xa0000\\xa0€ hace cuatro años,', 'Como Adrien ganaba 40\\xa0000\\xa0€ hace cuatro años y recibió un aumento que le permite ganar un 40\\xa0% más, recibió un aumento de 40/100\\xa0*\\xa040\\xa0000\\xa0€ = 16\\xa0000\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'En total, cuatro años después, el salario de Adrien es de\\xa040\\xa0000\\xa0€\\xa0+\\xa016\\xa0000\\xa0€ =\\xa056\\xa0000\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El salario total de Adrien era un 30 por ciento más alto que el de Lylah.', 'Si el salario de Adrien y Lylah aumentara simultáneamente,']\nnew_fact = infer_new_fact(selected) # 'Si hace cuatro años Adrien ganaba 40\\xa0000\\xa0€ y el salario de Lylah era un 30\\xa0% menos, entonces el salario de Lylah era 30/100\\xa0*\\xa040\\xa0000\\xa0€ = 12\\xa0000\\xa0€ menos que el salario de Adrien hace cuatro años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si hace cuatro años Adrien ganaba 40\\xa0000\\xa0€ y el salario de Lylah era un 30\\xa0% menos, entonces el salario de Lylah era 30/100\\xa0*\\xa040\\xa0000\\xa0€ = 12\\xa0000\\xa0€ menos que el salario de Adrien hace cuatro años.']\nnew_fact = infer_new_fact(selected) # 'Hace cuatro años, Lylah ganaba 40\\xa0000\\xa0€\\xa0-\\xa012\\xa0000\\xa0€ = 28\\xa0000\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y ganaba un 40\\xa0% más de lo que ganaba hace cuatro años.', 'Si el salario de Adrien y Lylah aumentara simultáneamente,', 'Hace cuatro años, Lylah ganaba 40\\xa0000\\xa0€\\xa0-\\xa012\\xa0000\\xa0€ = 28\\xa0000\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Después de recibir un aumento del 40\\xa0%, Lylah gana 40/100\\xa0€\\xa0*\\xa028\\xa0000\\xa0€ = 11\\xa0200\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Hace cuatro años, Lylah ganaba 40\\xa0000\\xa0€\\xa0-\\xa012\\xa0000\\xa0€ = 28\\xa0000\\xa0€', 'Después de recibir un aumento del 40\\xa0%, Lylah gana 40/100\\xa0€\\xa0*\\xa028\\xa0000\\xa0€ = 11\\xa0200\\xa0€']\nnew_fact = infer_new_fact(selected) # 'En total, cuatro años después, Lylah gana\\xa028\\xa0000\\xa0€\\xa0+\\xa011\\xa0200\\xa0€ =\\xa039\\xa0200\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En total, cuatro años después, el salario de Adrien es de\\xa040\\xa0000\\xa0€\\xa0+\\xa016\\xa0000\\xa0€ =\\xa056\\xa0000\\xa0€', 'En total, cuatro años después, Lylah gana\\xa028\\xa0000\\xa0€\\xa0+\\xa011\\xa0200\\xa0€ =\\xa039\\xa0200\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'El importe total del salario que ganan los dos cuatro años después es de 39\\xa0200\\xa0€\\xa0+\\xa056\\xa0000\\xa0€ = 95\\xa0200\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si el salario de Adrien y Lylah aumentara simultáneamente,', 'y Adrien ganó 40\\xa0000\\xa0€ hace cuatro años,', 'calcula el salario total que ganaron los dos cuatro años más tarde.', 'El importe total del salario que ganan los dos cuatro años después es de 39\\xa0200\\xa0€\\xa0+\\xa056\\xa0000\\xa0€ = 95\\xa0200\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 95200'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '95200'"}
{"id": "GSM8K_120_d4bf9a05d0", "context": "", "options": [], "answer": "240", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [3, 4], "consequent": 5}, {"antecedents": [2, 3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Miguel uses 30 x 2 = 60 sheets of paper every week.; int1 & sent3 -> int2: Therefore, he uses 60 x 4 = 240 sheets of paper every month.; int2 & sent2 & sent3 -> int3: The answer is 240;", "textual_logical_units": {"1": "Miguel usa 2 blocs de papel a la semana para dibujar.", "2": "Si hay 30 hojas de papel en un bloc de papel,", "3": "¿cuántas hojas de papel usa cada mes?", "4": "Miguel usa 30 × 2 = 60 hojas de papel cada semana.", "5": "Por lo tanto, utiliza 60 × 4 = 240 hojas de papel cada mes.", "6": "The answer is 240"}, "human_translated": true, "code_input": "####\nfacts = ['Miguel usa 2 blocs de papel a la semana para dibujar.', 'Si hay 30 hojas de papel en un bloc de papel,']\nquestion = '¿cuántas hojas de papel usa cada mes?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Miguel usa 2 blocs de papel a la semana para dibujar.', 'Si hay 30 hojas de papel en un bloc de papel,']\nnew_fact = infer_new_fact(selected) # 'Miguel usa 30\\xa0×\\xa02 = 60 hojas de papel cada semana.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántas hojas de papel usa cada mes?', 'Miguel usa 30\\xa0×\\xa02 = 60 hojas de papel cada semana.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, utiliza 60\\xa0×\\xa04 = 240 hojas de papel cada mes.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si hay 30 hojas de papel en un bloc de papel,', '¿cuántas hojas de papel usa cada mes?', 'Por lo tanto, utiliza 60\\xa0×\\xa04 = 240 hojas de papel cada mes.']\nnew_fact = infer_new_fact(selected) # 'The answer is 240'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '240'"}
{"id": "GSM8K_121_9198700887", "context": "", "options": [], "answer": "27", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 6}, {"antecedents": [2, 4], "consequent": 7}, {"antecedents": [2, 6, 7], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Kael brought 5 x 2 = 10 apples.; sent2 & sent4 -> int2: And he also brought 8 / 2 = 4 oranges.; int1 & int2 & sent2 -> int3: Therefore, Kael and Morisette brought 5 + 10 + 8 + 4 = 27 fruits in total.; int3 & sent5 -> int4: The answer is 27;", "textual_logical_units": {"1": "Se les pidió a Morisette y Kael que trajeran frutas.", "2": "Morisette trajo 5 manzanas y 8 naranjas,", "3": "mientras que Kael trajo el doble de manzanas y", "4": "la mitad de naranjas que Morisette.", "5": "¿Cuántas frutas tienen en total?", "6": "Kael trajo 5 × 2 = 10 manzanas.", "7": "Y también trajo 8 / 2 = 4 naranjas.", "8": "Por lo tanto, Kael y Morisette trajeron 5 + 10 + 8 + 4 = 27 frutas en total.", "9": "The answer is 27"}, "human_translated": true, "code_input": "####\nfacts = [ 'Se les pidió a Morisette y Kael que trajeran frutas.',\n  'Morisette trajo 5 manzanas y 8 naranjas,',\n  'mientras que Kael trajo el doble de manzanas y',\n  'la mitad de naranjas que Morisette.']\nquestion = '¿Cuántas frutas tienen en total?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Morisette trajo 5 manzanas y 8 naranjas,', 'mientras que Kael trajo el doble de manzanas y']\nnew_fact = infer_new_fact(selected) # 'Kael trajo 5\\xa0×\\xa02 = 10 manzanas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Morisette trajo 5 manzanas y 8 naranjas,', 'la mitad de naranjas que Morisette.']\nnew_fact = infer_new_fact(selected) # 'Y también trajo 8\\xa0/\\xa02 = 4 naranjas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Morisette trajo 5 manzanas y 8 naranjas,', 'Kael trajo 5\\xa0×\\xa02 = 10 manzanas.', 'Y también trajo 8\\xa0/\\xa02 = 4 naranjas.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, Kael y Morisette trajeron 5\\xa0+\\xa010\\xa0+\\xa08\\xa0+\\xa04 = 27 frutas en total.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas frutas tienen en total?', 'Por lo tanto, Kael y Morisette trajeron 5\\xa0+\\xa010\\xa0+\\xa08\\xa0+\\xa04 = 27 frutas en total.']\nnew_fact = infer_new_fact(selected) # 'The answer is 27'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '27'"}
{"id": "GSM8K_122_893c2d6675", "context": "", "options": [], "answer": "48", "reasoning_graph_edges": [{"antecedents": [1, 2, 3], "consequent": 7}, {"antecedents": [7], "consequent": 8}, {"antecedents": [5, 7], "consequent": 9}, {"antecedents": [7, 8, 9], "consequent": 10}, {"antecedents": [7, 8, 10], "consequent": 11}, {"antecedents": [5, 6, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent1 & sent2 & sent3 -> int1: If on Monday she slept 8 hours, then she slept 8-2 = 6 hours on each of the next two days.; int1 -> int2: The total number of hours slept for the two days will be 6*2 = 12 hours.; int1 & sent5 -> int3: If she slept 1 hour more for the rest of the week each day, then each day she slept 6+1 = 7 hours.; int1 & int2 & int3 -> int4: The total for the rest of the week will be 4*7 = 28 hours.; int1 & int2 & int4 -> int5: The total number of hours slept for the whole week will be 8+12+28 = 48 hours.; int5 & sent5 & sent6 -> int6: The answer is 48;", "textual_logical_units": {"1": "Sadie durmió 8 horas el lunes.", "2": "En los siguientes dos días,", "3": "durmió 2 horas menos cada uno", "4": "porque tenía que completar algunas tareas.", "5": "Si el resto de la semana durmió 1 hora más que esos dos días,", "6": "¿Cuántas horas durmió en total a lo largo de la semana?", "7": "Si el lunes durmió 8 horas, durmió 8 - 2 = 6 horas cada uno de los dos días siguientes.", "8": "El número total de horas dormidas en los dos días será de 6 * 2 = 12 horas.", "9": "Si durmió 1 hora más el resto de la semana cada día, entonces cada día durmió 6 + 1 = 7 horas.", "10": "El total para el resto de la semana será de 4 * 7 = 28 horas.", "11": "El número total de horas dormidas durante toda la semana será de 8 + 12 + 28 = 48 horas.", "12": "The answer is 48"}, "human_translated": true, "code_input": "####\nfacts = [ 'Sadie durmió 8 horas el lunes.',\n  'En los siguientes dos días,',\n  'durmió 2 horas menos cada uno',\n  'porque tenía que completar algunas tareas.',\n  'Si el resto de la semana durmió 1 hora más que esos dos días,']\nquestion = '¿Cuántas horas durmió en total a lo largo de la semana?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Sadie durmió 8 horas el lunes.', 'En los siguientes dos días,', 'durmió 2 horas menos cada uno']\nnew_fact = infer_new_fact(selected) # 'Si el lunes durmió 8 horas, durmió 8\\xa0-\\xa02 = 6 horas cada uno de los dos días siguientes.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si el lunes durmió 8 horas, durmió 8\\xa0-\\xa02 = 6 horas cada uno de los dos días siguientes.']\nnew_fact = infer_new_fact(selected) # 'El número total de horas dormidas en los dos días será de 6\\xa0*\\xa02 = 12 horas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si el resto de la semana durmió 1 hora más que esos dos días,', 'Si el lunes durmió 8 horas, durmió 8\\xa0-\\xa02 = 6 horas cada uno de los dos días siguientes.']\nnew_fact = infer_new_fact(selected) # 'Si durmió 1 hora más el resto de la semana cada día, entonces cada día durmió 6\\xa0+\\xa01 = 7 horas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si el lunes durmió 8 horas, durmió 8\\xa0-\\xa02 = 6 horas cada uno de los dos días siguientes.', 'El número total de horas dormidas en los dos días será de 6\\xa0*\\xa02 = 12 horas.', 'Si durmió 1 hora más el resto de la semana cada día, entonces cada día durmió 6\\xa0+\\xa01 = 7 horas.']\nnew_fact = infer_new_fact(selected) # 'El total para el resto de la semana será de 4\\xa0*\\xa07 = 28 horas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si el lunes durmió 8 horas, durmió 8\\xa0-\\xa02 = 6 horas cada uno de los dos días siguientes.', 'El número total de horas dormidas en los dos días será de 6\\xa0*\\xa02 = 12 horas.', 'El total para el resto de la semana será de 4\\xa0*\\xa07 = 28 horas.']\nnew_fact = infer_new_fact(selected) # 'El número total de horas dormidas durante toda la semana será de 8\\xa0+\\xa012\\xa0+\\xa028 = 48 horas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si el resto de la semana durmió 1 hora más que esos dos días,', '¿Cuántas horas durmió en total a lo largo de la semana?', 'El número total de horas dormidas durante toda la semana será de 8\\xa0+\\xa012\\xa0+\\xa028 = 48 horas.']\nnew_fact = infer_new_fact(selected) # 'The answer is 48'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '48'"}
{"id": "GSM8K_123_9df4c02762", "context": "", "options": [], "answer": "50", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 4}, {"antecedents": [1, 3], "consequent": 5}, {"antecedents": [2, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 -> int1: For the first 3 hours, Rosie runs 10 miles per hour, so she runs 10*3=30 miles.; sent1 & sent3 -> int2: However, she still has 7-3=4 hours left to room.; int2 & sent2 -> int3: For the next 4 hours, she runs 5 miles per hour, so she runs 5*4=20 miles.; int1 & int3 -> int4: In total she runs 30+20=50 miles.; int4 & sent3 -> int5: The answer is 50;", "textual_logical_units": {"1": "Rosie puede correr 10 kilómetros por hora durante 3 horas.", "2": "Después de eso, corre 5 kilómetros por hora.", "3": "¿Cuántos kilómetros puede correr en 7 horas?", "4": "En las primeras 3 horas, Rosie corre 10 kilómetros por hora, por lo que corre 10 * 3 = 30 kilómetros.", "5": "Sin embargo, todavía le quedan 7 - 3 = 4 horas para correr.", "6": "En las siguientes 4 horas, corre 5 kilómetros por hora, por lo que corre 5 * 4 = 20 kilómetros.", "7": "En total, corre 30 + 20 = 50 kilómetros.", "8": "The answer is 50"}, "human_translated": true, "code_input": "####\nfacts = ['Rosie puede correr 10 kilómetros por hora durante 3 horas.', 'Después de eso, corre 5 kilómetros por hora.']\nquestion = '¿Cuántos kilómetros puede correr en 7 horas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Rosie puede correr 10 kilómetros por hora durante 3 horas.']\nnew_fact = infer_new_fact(selected) # 'En las primeras 3 horas, Rosie corre 10 kilómetros por hora, por lo que corre 10\\xa0*\\xa03\\xa0=\\xa030 kilómetros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Rosie puede correr 10 kilómetros por hora durante 3 horas.', '¿Cuántos kilómetros puede correr en 7 horas?']\nnew_fact = infer_new_fact(selected) # 'Sin embargo, todavía le quedan 7\\xa0-\\xa03 =\\xa04 horas para correr.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Después de eso, corre 5 kilómetros por hora.', 'Sin embargo, todavía le quedan 7\\xa0-\\xa03 =\\xa04 horas para correr.']\nnew_fact = infer_new_fact(selected) # 'En las siguientes 4 horas, corre 5 kilómetros por hora, por lo que corre 5\\xa0* 4 = 20\\xa0kilómetros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En las primeras 3 horas, Rosie corre 10 kilómetros por hora, por lo que corre 10\\xa0*\\xa03\\xa0=\\xa030 kilómetros.', 'En las siguientes 4 horas, corre 5 kilómetros por hora, por lo que corre 5\\xa0* 4 = 20\\xa0kilómetros.']\nnew_fact = infer_new_fact(selected) # 'En total, corre 30\\xa0+\\xa020\\xa0= 50\\xa0kilómetros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos kilómetros puede correr en 7 horas?', 'En total, corre 30\\xa0+\\xa020\\xa0= 50\\xa0kilómetros.']\nnew_fact = infer_new_fact(selected) # 'The answer is 50'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '50'"}
{"id": "GSM8K_124_39f195d4f6", "context": "", "options": [], "answer": "10", "reasoning_graph_edges": [{"antecedents": [2, 4], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}, {"antecedents": [5, 6, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent2 & sent4 -> int1: She stamped 60/3=20 letters.; int1 & sent5 -> int2: Then there were 30-20=10 in the already-stamped pile to begin with.; int2 & sent5 & sent6 -> int3: The answer is 10;", "textual_logical_units": {"1": "Jennie está ayudando en la oficina de su madre.", "2": "Tiene un montón de 60 cartas que necesitan sellos", "3": "y un montón de cartas ya selladas.", "4": "Pone sellos en un tercio de las cartas que necesitan sellos.", "5": "Si ahora hay 30 cartas en el montón de cartas ya selladas,", "6": "¿cuántas había en ese montón cuando Jennie empezó?", "7": "Selló 60 / 3 = 20 cartas.", "8": "Entonces, había 30 - 20 = 10 en el montón ya sellado.", "9": "The answer is 10"}, "human_translated": true, "code_input": "####\nfacts = [ 'Jennie está ayudando en la oficina de su madre.',\n  'Tiene un montón de 60 cartas que necesitan sellos',\n  'y un montón de cartas ya selladas.',\n  'Pone sellos en un tercio de las cartas que necesitan sellos.',\n  'Si ahora hay 30 cartas en el montón de cartas ya selladas,']\nquestion = '¿cuántas había en ese montón cuando Jennie empezó?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Tiene un montón de 60 cartas que necesitan sellos', 'Pone sellos en un tercio de las cartas que necesitan sellos.']\nnew_fact = infer_new_fact(selected) # 'Selló 60\\xa0/\\xa03\\xa0=\\xa020 cartas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si ahora hay 30 cartas en el montón de cartas ya selladas,', 'Selló 60\\xa0/\\xa03\\xa0=\\xa020 cartas.']\nnew_fact = infer_new_fact(selected) # 'Entonces, había 30\\xa0-\\xa020 = 10 en el montón ya sellado.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si ahora hay 30 cartas en el montón de cartas ya selladas,', '¿cuántas había en ese montón cuando Jennie empezó?', 'Entonces, había 30\\xa0-\\xa020 = 10 en el montón ya sellado.']\nnew_fact = infer_new_fact(selected) # 'The answer is 10'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '10'"}
{"id": "GSM8K_125_21103b71c7", "context": "", "options": [], "answer": "10", "reasoning_graph_edges": [{"antecedents": [7, 9], "consequent": 11}, {"antecedents": [5, 11], "consequent": 12}, {"antecedents": [10, 12], "consequent": 13}], "metadata": [], "linearized_output_en": "sent7 & sent9 -> int1: The total number of spoons from Julia and her husband was 12+3=15 spoons.; int1 & sent5 -> int2: Since the husband bought a package of five spoons, then Julia's package contained 15-5=10 spoons.; int2 & sent10 -> int3: The answer is 10;", "textual_logical_units": {"1": "Julia se estaba preparando para una cena en su casa,", "2": "donde quería servir estofado.", "3": "Se dio cuenta de que se le acabaron las cucharas de plástico,", "4": "así que compró un nuevo paquete de cucharas.", "5": "Más tarde, su marido también compró un paquete de 5 cucharas nuevas y se las dio a Julia.", "6": "Mientras Julia preparaba el estofado,", "7": "usó tres de las cucharas para probar el estofado.", "8": "Más tarde, cuando fue a poner la mesa,", "9": "tenía un total de 12 cucharas.", "10": "¿Cuántas cucharas había en el paquete que compró Julia?", "11": "El número total de cucharas de Julia y su marido era de 12 + 3 = 15 cucharas.", "12": "Como el marido compró un paquete de cinco cucharas, el paquete de Julia contenía 15 - 5 = 10 cucharas.", "13": "The answer is 10"}, "human_translated": true, "code_input": "####\nfacts = [ 'Julia se estaba preparando para una cena en su casa,',\n  'donde quería servir estofado.',\n  'Se dio cuenta de que se le acabaron las cucharas de plástico,',\n  'así que compró un nuevo paquete de cucharas.',\n  'Más tarde, su marido también compró un paquete de 5 cucharas nuevas y se las dio a Julia.',\n  'Mientras Julia preparaba el estofado,',\n  'usó tres de las cucharas para probar el estofado.',\n  'Más tarde, cuando fue a poner la mesa,',\n  'tenía un total de 12 cucharas.']\nquestion = '¿Cuántas cucharas había en el paquete que compró Julia?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['usó tres de las cucharas para probar el estofado.', 'tenía un total de 12 cucharas.']\nnew_fact = infer_new_fact(selected) # 'El número total de cucharas de Julia y su marido era de 12\\xa0+\\xa03\\xa0=\\xa015 cucharas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Más tarde, su marido también compró un paquete de 5 cucharas nuevas y se las dio a Julia.', 'El número total de cucharas de Julia y su marido era de 12\\xa0+\\xa03\\xa0=\\xa015 cucharas.']\nnew_fact = infer_new_fact(selected) # 'Como el marido compró un paquete de cinco cucharas, el paquete de Julia contenía 15\\xa0-\\xa05\\xa0=\\xa010 cucharas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas cucharas había en el paquete que compró Julia?', 'Como el marido compró un paquete de cinco cucharas, el paquete de Julia contenía 15\\xa0-\\xa05\\xa0=\\xa010 cucharas.']\nnew_fact = infer_new_fact(selected) # 'The answer is 10'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '10'"}
{"id": "GSM8K_126_71fb9a1c41", "context": "", "options": [], "answer": "82", "reasoning_graph_edges": [{"antecedents": [3, 4], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent3 & sent4 -> int1: He bought 38 + 6 = 44 fish sausages.; int1 & sent3 -> int2: Dylan bought 38 + 44 = 82 sausages in all.; int2 & sent5 -> int3: The answer is 82;", "textual_logical_units": {"1": "Dylan necesitaba salchichas de pollo y", "2": "salchichas de pescado para hacer salchichas hojaldradas en una fiesta.", "3": "Compró 38 salchichas de pollo y", "4": "6 salchichas de pescado más que salchichas de pollo.", "5": "¿Cuántas salchichas compró Dylan en total?", "6": "Compró 38 + 6 = 44 salchichas de pescado.", "7": "Dylan compró 38 + 44 = 82 salchichas en total.", "8": "The answer is 82"}, "human_translated": true, "code_input": "####\nfacts = [ 'Dylan necesitaba salchichas de pollo y',\n  'salchichas de pescado para hacer salchichas hojaldradas en una fiesta.',\n  'Compró 38 salchichas de pollo y',\n  '6 salchichas de pescado más que salchichas de pollo.']\nquestion = '¿Cuántas salchichas compró Dylan en total?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Compró 38 salchichas de pollo y', '6 salchichas de pescado más que salchichas de pollo.']\nnew_fact = infer_new_fact(selected) # 'Compró 38\\xa0+\\xa06 = 44 salchichas de pescado.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Compró 38 salchichas de pollo y', 'Compró 38\\xa0+\\xa06 = 44 salchichas de pescado.']\nnew_fact = infer_new_fact(selected) # 'Dylan compró 38\\xa0+\\xa044 = 82 salchichas en total.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas salchichas compró Dylan en total?', 'Dylan compró 38\\xa0+\\xa044 = 82 salchichas en total.']\nnew_fact = infer_new_fact(selected) # 'The answer is 82'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '82'"}
{"id": "GSM8K_127_e803d7dd62", "context": "", "options": [], "answer": "120", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [5], "consequent": 6}, {"antecedents": [3, 4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: If Lily made 50 friends, Amy made 50+20 =70 friends.; int1 -> int2: Together, they made 70+50 = 120 friends at the new school.; int2 & sent3 & sent4 -> int3: The answer is 120;", "textual_logical_units": {"1": "Tras cambiarse a un nuevo colegio,", "2": "Amy hizo 20 amigos más que Lily.", "3": "Si Lily hizo 50 amigos,", "4": "¿Cuántos amigos tienen Lily y Amy en conjunto?", "5": "Si Lily hizo 50 amigos, Amy hizo 50 + 20 = 70 amigos.", "6": "Juntas, hicieron 70 + 50 = 120 amigos en el nuevo colegio.", "7": "The answer is 120"}, "human_translated": true, "code_input": "####\nfacts = ['Tras cambiarse a un nuevo colegio,', 'Amy hizo 20 amigos más que Lily.', 'Si Lily hizo 50 amigos,']\nquestion = '¿Cuántos amigos tienen Lily y Amy en conjunto?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Amy hizo 20 amigos más que Lily.', 'Si Lily hizo 50 amigos,']\nnew_fact = infer_new_fact(selected) # 'Si Lily hizo 50 amigos, Amy hizo 50\\xa0+\\xa020 = 70 amigos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Lily hizo 50 amigos, Amy hizo 50\\xa0+\\xa020 = 70 amigos.']\nnew_fact = infer_new_fact(selected) # 'Juntas, hicieron 70\\xa0+\\xa050 = 120 amigos en el nuevo colegio.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Lily hizo 50 amigos,', '¿Cuántos amigos tienen Lily y Amy en conjunto?', 'Juntas, hicieron 70\\xa0+\\xa050 = 120 amigos en el nuevo colegio.']\nnew_fact = infer_new_fact(selected) # 'The answer is 120'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '120'"}
{"id": "GSM8K_128_b995641c74", "context": "", "options": [], "answer": "880", "reasoning_graph_edges": [{"antecedents": [3, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}, {"antecedents": [5, 7], "consequent": 9}, {"antecedents": [5, 6], "consequent": 10}, {"antecedents": [5, 8], "consequent": 11}, {"antecedents": [9, 10, 11], "consequent": 12}, {"antecedents": [6, 12], "consequent": 13}], "metadata": [], "linearized_output_en": "sent3 & sent6 -> int1: A watermelon costs three times what pepper costs, which is 3 * 15 = $45.; int1 & sent4 -> int2: An orange price is 45 - 5= $40.; int1 & sent5 -> int3: Dillon buys four watermelons at a total cost of 45 * 4 = $180.; sent5 & sent6 -> int4: He also purchases peppers at a total price of 20 * 15 = $300.; int2 & sent5 -> int5: The oranges cost him a total of 10 * 40 = $400.; int3 & int4 & int5 -> int6: He used a total of 400 + 300 + 180 = $880.; int6 & sent6 -> int7: The answer is 880;", "textual_logical_units": {"1": "La madre de Well vende sandías, pimientos,", "2": "y naranjas en la tienda local.", "3": "Una sandía cuesta tres veces lo que cuesta cada pimiento.", "4": "Una naranja cuesta 5 menos de lo que cuesta una sandía.", "5": "Envían a Dillon a la tienda a comprar 4 sandías, 20 pimientos y 10 naranjas.", "6": "¿Cuál es la cantidad total de dinero que gastará si cada pimiento cuesta 15 €?", "7": "Una sandía cuesta tres veces lo que cuesta un pimiento, es decir, 3 * 15 = 45 €.", "8": "El precio de una naranja es 45 - 5 = 40 €.", "9": "Dillon compra cuatro sandías a un coste total de 45 * 4 = 180 €.", "10": "También compra pimientos a un precio total de 20 * 15 = 300 €.", "11": "Las naranjas le costaron un total de 10 * 40 = 400 €.", "12": "Utilizó un total de 400 + 300 + 180 = 880 €.", "13": "The answer is 880"}, "human_translated": true, "code_input": "####\nfacts = [ 'La madre de Well vende sandías, pimientos,',\n  'y naranjas en la tienda local.',\n  'Una sandía cuesta tres veces lo que cuesta cada pimiento.',\n  'Una naranja cuesta 5 menos de lo que cuesta una sandía.',\n  'Envían a Dillon a la tienda a comprar 4 sandías, 20 pimientos y 10 naranjas.']\nquestion = '¿Cuál es la cantidad total de dinero que gastará si cada pimiento cuesta 15\\xa0€?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Una sandía cuesta tres veces lo que cuesta cada pimiento.', '¿Cuál es la cantidad total de dinero que gastará si cada pimiento cuesta 15\\xa0€?']\nnew_fact = infer_new_fact(selected) # 'Una sandía cuesta tres veces lo que cuesta un pimiento, es decir, 3\\xa0*\\xa015 = 45\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Una naranja cuesta 5 menos de lo que cuesta una sandía.', 'Una sandía cuesta tres veces lo que cuesta un pimiento, es decir, 3\\xa0*\\xa015 = 45\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'El precio de una naranja es 45\\xa0-\\xa05\\xa0= 40\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Envían a Dillon a la tienda a comprar 4 sandías, 20 pimientos y 10 naranjas.', 'Una sandía cuesta tres veces lo que cuesta un pimiento, es decir, 3\\xa0*\\xa015 = 45\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Dillon compra cuatro sandías a un coste total de 45\\xa0*\\xa04 = 180\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Envían a Dillon a la tienda a comprar 4 sandías, 20 pimientos y 10 naranjas.', '¿Cuál es la cantidad total de dinero que gastará si cada pimiento cuesta 15\\xa0€?']\nnew_fact = infer_new_fact(selected) # 'También compra pimientos a un precio total de 20\\xa0*\\xa015 = 300\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Envían a Dillon a la tienda a comprar 4 sandías, 20 pimientos y 10 naranjas.', 'El precio de una naranja es 45\\xa0-\\xa05\\xa0= 40\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Las naranjas le costaron un total de 10\\xa0*\\xa040 = 400\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Dillon compra cuatro sandías a un coste total de 45\\xa0*\\xa04 = 180\\xa0€.', 'También compra pimientos a un precio total de 20\\xa0*\\xa015 = 300\\xa0€.', 'Las naranjas le costaron un total de 10\\xa0*\\xa040 = 400\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Utilizó un total de 400\\xa0+\\xa0300\\xa0+\\xa0180 = 880\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál es la cantidad total de dinero que gastará si cada pimiento cuesta 15\\xa0€?', 'Utilizó un total de 400\\xa0+\\xa0300\\xa0+\\xa0180 = 880\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'The answer is 880'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '880'"}
{"id": "GSM8K_129_6cef70b898", "context": "", "options": [], "answer": "10000", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}, {"antecedents": [3, 4], "consequent": 8}, {"antecedents": [7, 8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: The hospital sees patients for 500*24=12000 minutes a day; int1 & sent4 -> int2: That means they see patients for 12000/60=200 hours a day; sent3 & sent4 -> int3: They profit 200-150=$50 per hour; int2 & int3 -> int4: So they make a profit of 200 hours * $50/hour = $10000 a day from patient visits; int4 & sent5 -> int5: The answer is 10000;", "textual_logical_units": {"1": "Un hospital atiende a 500 personas al día.", "2": "Se atiende a cada paciente durante un promedio de 24 minutos.", "3": "Los médicos cobran 150 € la hora al hospital y", "4": "el hospital cobra a los pacientes 200 € la hora.", "5": "¿Cuánto beneficio obtiene el hospital con estas visitas?", "6": "El hospital atiende a los pacientes durante 500 * 24 = 12 000 minutos al día", "7": "Eso significa que atiende a los pacientes durante 12 000 / 60 = 200 horas al día", "8": "Gana 200 - 150 = 50 € por hora", "9": "Por lo tanto, obtiene una ganancia de 200 horas  * 50 €/hora = 10 000 € al día por las visitas de los pacientes", "10": "The answer is 10000"}, "human_translated": true, "code_input": "####\nfacts = [ 'Un hospital atiende a 500 personas al día.',\n  'Se atiende a cada paciente durante un promedio de 24 minutos.',\n  'Los médicos cobran 150\\xa0€ la hora al hospital y',\n  'el hospital cobra a los pacientes 200\\xa0€ la hora.']\nquestion = '¿Cuánto beneficio obtiene el hospital con estas visitas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Un hospital atiende a 500 personas al día.', 'Se atiende a cada paciente durante un promedio de 24 minutos.']\nnew_fact = infer_new_fact(selected) # 'El hospital atiende a los pacientes durante 500\\xa0*\\xa024 = 12\\xa0000 minutos al día'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['el hospital cobra a los pacientes 200\\xa0€ la hora.', 'El hospital atiende a los pacientes durante 500\\xa0*\\xa024 = 12\\xa0000 minutos al día']\nnew_fact = infer_new_fact(selected) # 'Eso significa que atiende a los pacientes durante 12\\xa0000\\xa0/\\xa060 = 200 horas al día'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Los médicos cobran 150\\xa0€ la hora al hospital y', 'el hospital cobra a los pacientes 200\\xa0€ la hora.']\nnew_fact = infer_new_fact(selected) # 'Gana 200\\xa0-\\xa0150 = 50\\xa0€ por hora'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Eso significa que atiende a los pacientes durante 12\\xa0000\\xa0/\\xa060 = 200 horas al día', 'Gana 200\\xa0-\\xa0150 = 50\\xa0€ por hora']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, obtiene una ganancia de 200 horas \\xa0*\\xa050\\xa0€/hora = 10\\xa0000\\xa0€ al día por las visitas de los pacientes'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto beneficio obtiene el hospital con estas visitas?', 'Por lo tanto, obtiene una ganancia de 200 horas \\xa0*\\xa050\\xa0€/hora = 10\\xa0000\\xa0€ al día por las visitas de los pacientes']\nnew_fact = infer_new_fact(selected) # 'The answer is 10000'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '10000'"}
{"id": "GSM8K_130_70dc9a0006", "context": "", "options": [], "answer": "30", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [5], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: First, divide the starting number of elves by 3 to find out how many quit after being vomited on, which is 60 elves / 3 = 20 elves.; int1 -> int2: Then subtract that number from the starting number of elves to find out how many are left: 60 elves - 20 elves = 40 elves.; int2 & sent3 -> int3: Then subtract the number of elves who quit after being kicked to find the total number who left: 40 elves - 10 elves = 30 elves.; int3 & sent4 -> int4: The answer is 30;", "textual_logical_units": {"1": "Nissa contrata a 60 trabajadores temporales para que hagan de elfos en el pueblo de Papá Noel de sus grandes almacenes..", "2": "Un tercio de los elfos se marchan después de que los niños vomiten sobre ellos,", "3": "luego, 10 de los elfos restantes se retiran después de que los niños les peguen patadas en las espinillas.", "4": "¿Cuántos elfos quedan?", "5": "Primero, divide el número inicial de elfos entre 3 para saber cuántos se van después de que les vomitasen encima, es decir, 60 elfos / 3 = 20 elfos.", "6": "Luego, resta ese número del número inicial de elfos para averiguar cuántos quedan: 60 elfos - 20 elfos = 40 elfos.", "7": "Luego, resta el número de elfos que se marcharon tras recibir una patada para calcular el número total de elfos que se fueron: 40 elfos - 10 elfos = 30 elfos.", "8": "The answer is 30"}, "human_translated": true, "code_input": "####\nfacts = [ 'Nissa contrata a 60 trabajadores temporales para que hagan de elfos en el pueblo de Papá Noel de sus grandes almacenes..',\n  'Un tercio de los elfos se marchan después de que los niños vomiten sobre ellos,',\n  'luego, 10 de los elfos restantes se retiran después de que los niños les peguen patadas en las espinillas.']\nquestion = '¿Cuántos elfos quedan?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Nissa contrata a 60 trabajadores temporales para que hagan de elfos en el pueblo de Papá Noel de sus grandes almacenes..', 'Un tercio de los elfos se marchan después de que los niños vomiten sobre ellos,']\nnew_fact = infer_new_fact(selected) # 'Primero, divide el número inicial de elfos entre 3 para saber cuántos se van después de que les vomitasen encima, es decir, 60 elfos\\xa0/\\xa03 = 20 elfos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Primero, divide el número inicial de elfos entre 3 para saber cuántos se van después de que les vomitasen encima, es decir, 60 elfos\\xa0/\\xa03 = 20 elfos.']\nnew_fact = infer_new_fact(selected) # 'Luego, resta ese número del número inicial de elfos para averiguar cuántos quedan: 60 elfos\\xa0-\\xa020 elfos = 40 elfos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['luego, 10 de los elfos restantes se retiran después de que los niños les peguen patadas en las espinillas.', 'Luego, resta ese número del número inicial de elfos para averiguar cuántos quedan: 60 elfos\\xa0-\\xa020 elfos = 40 elfos.']\nnew_fact = infer_new_fact(selected) # 'Luego, resta el número de elfos que se marcharon tras recibir una patada para calcular el número total de elfos que se fueron: 40 elfos\\xa0-\\xa010 elfos = 30 elfos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos elfos quedan?', 'Luego, resta el número de elfos que se marcharon tras recibir una patada para calcular el número total de elfos que se fueron: 40 elfos\\xa0-\\xa010 elfos = 30 elfos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 30'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '30'"}
{"id": "GSM8K_131_1ebd927d97", "context": "", "options": [], "answer": "940", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [1, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: His expenditure in June was $500 - $60 = $440.; int1 & sent1 -> int2: His total expenditure for May and June was $500 + $440 = $940.; int2 & sent3 -> int3: The answer is 940;", "textual_logical_units": {"1": "Los gastos de Joseph en mayo fueron de 500 €.", "2": "En junio, sus gastos fueron 60 € menos.", "3": "¿Cuál fue su gasto total durante esos dos meses?", "4": "Sus gastos en junio fueron de 500 € - 60 € = 440 €.", "5": "Sus gastos totales en mayo y junio fueron de 500 € + 440 € = 940 €.", "6": "The answer is 940"}, "human_translated": true, "code_input": "####\nfacts = ['Los gastos de Joseph en mayo fueron de 500\\xa0€.', 'En junio, sus gastos fueron 60\\xa0€ menos.']\nquestion = '¿Cuál fue su gasto total durante esos dos meses?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Los gastos de Joseph en mayo fueron de 500\\xa0€.', 'En junio, sus gastos fueron 60\\xa0€ menos.']\nnew_fact = infer_new_fact(selected) # 'Sus gastos en junio fueron de 500\\xa0€\\xa0-\\xa060\\xa0€ = 440\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Los gastos de Joseph en mayo fueron de 500\\xa0€.', 'Sus gastos en junio fueron de 500\\xa0€\\xa0-\\xa060\\xa0€ = 440\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Sus gastos totales en mayo y junio fueron de 500\\xa0€\\xa0+\\xa0440\\xa0€ = 940\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál fue su gasto total durante esos dos meses?', 'Sus gastos totales en mayo y junio fueron de 500\\xa0€\\xa0+\\xa0440\\xa0€ = 940\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'The answer is 940'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '940'"}
{"id": "GSM8K_132_ca0a223aa4", "context": "", "options": [], "answer": "60", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 6}, {"antecedents": [3], "consequent": 7}, {"antecedents": [6, 7], "consequent": 8}, {"antecedents": [4, 8], "consequent": 9}, {"antecedents": [4, 5, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent2 -> int1: The total times that they ride the roller coaster is 2+4=6 times.; sent3 -> int2: The total times that they ride the luge is 2+2=4 times.; int1 & int2 -> int3: The total times they ride that day is 6+4=10 times.; int3 & sent4 -> int4: So, Pam and Fred used 10x6=60 tickets that day.; int4 & sent4 & sent5 -> int5: The answer is 60;", "textual_logical_units": {"1": "Pam y Fred fueron a una feria.", "2": "Pam subió a la montaña rusa 2 veces, mientras que Fred se subió 4 veces.", "3": "Después de eso, cada uno de ellos se montó en el tobogán 2 veces.", "4": "Si montarse a cada atracción cuesta 6 entradas,", "5": "¿cuántas entradas usaron ese día?", "6": "El total de veces que suben a la montaña rusa es 2 + 4 = 6 veces.", "7": "El total de veces que se montan en el tobogán es 2 + 2 = 4 veces.", "8": "El total de veces que se montan en atracciones ese día es 6 + 4 = 10 veces.", "9": "Así que Pam y Fred usaron 10 × 6 = 60 entradas ese día.", "10": "The answer is 60"}, "human_translated": true, "code_input": "####\nfacts = [ 'Pam y Fred fueron a una feria.',\n  'Pam subió a la montaña rusa 2 veces, mientras que Fred se subió 4 veces.',\n  'Después de eso, cada uno de ellos se montó en el tobogán 2 veces.',\n  'Si montarse a cada atracción cuesta 6 entradas,']\nquestion = '¿cuántas entradas usaron ese día?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Pam subió a la montaña rusa 2 veces, mientras que Fred se subió 4 veces.']\nnew_fact = infer_new_fact(selected) # 'El total de veces que suben a la montaña rusa es 2\\xa0+\\xa04 = 6 veces.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Después de eso, cada uno de ellos se montó en el tobogán 2 veces.']\nnew_fact = infer_new_fact(selected) # 'El total de veces que se montan en el tobogán es 2\\xa0+\\xa02 = 4 veces.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El total de veces que suben a la montaña rusa es 2\\xa0+\\xa04 = 6 veces.', 'El total de veces que se montan en el tobogán es 2\\xa0+\\xa02 = 4 veces.']\nnew_fact = infer_new_fact(selected) # 'El total de veces que se montan en atracciones ese día es 6\\xa0+\\xa04 = 10 veces.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si montarse a cada atracción cuesta 6 entradas,', 'El total de veces que se montan en atracciones ese día es 6\\xa0+\\xa04 = 10 veces.']\nnew_fact = infer_new_fact(selected) # 'Así que Pam y Fred usaron 10\\xa0×\\xa06\\xa0=\\xa060 entradas ese día.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si montarse a cada atracción cuesta 6 entradas,', '¿cuántas entradas usaron ese día?', 'Así que Pam y Fred usaron 10\\xa0×\\xa06\\xa0=\\xa060 entradas ese día.']\nnew_fact = infer_new_fact(selected) # 'The answer is 60'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '60'"}
{"id": "GSM8K_133_0e693843bb", "context": "", "options": [], "answer": "13", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Walt’s Tuesday walk was 4*6 = 24 miles.; int1 & sent1 -> int2: Walt’s Monday and Tuesday walk were 4+24 = 28 miles combined.; int2 & sent3 -> int3: Walt’s Wednesday walk was 41-28 = 13 miles.; int3 & sent4 -> int4: The answer is 13;", "textual_logical_units": {"1": "El lunes, Walt caminó 4 kilómetros.", "2": "El martes caminó 6 veces más kilómetros que el lunes.", "3": "Su kilometraje total de lunes a miércoles fue de 41 kilómetros.", "4": "¿Cuántos kilómetros caminó el miércoles?", "5": "La caminata de Walt el martes fue de 4 * 6 = 24 kilómetros.", "6": "La caminata de Walt el lunes y el martes fue de 4 + 24 = 28 kilómetros combinados.", "7": "La caminata de Walt el miércoles fue de 41 - 28 = 13 kilómetros.", "8": "The answer is 13"}, "human_translated": true, "code_input": "####\nfacts = [ 'El lunes, Walt caminó 4\\xa0kilómetros.',\n  'El martes caminó 6 veces más kilómetros que el lunes.',\n  'Su kilometraje total de lunes a miércoles fue de 41\\xa0kilómetros.']\nquestion = '¿Cuántos kilómetros caminó el miércoles?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['El lunes, Walt caminó 4\\xa0kilómetros.', 'El martes caminó 6 veces más kilómetros que el lunes.']\nnew_fact = infer_new_fact(selected) # 'La caminata de Walt el martes fue de 4\\xa0*\\xa06\\xa0=\\xa024\\xa0kilómetros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El lunes, Walt caminó 4\\xa0kilómetros.', 'La caminata de Walt el martes fue de 4\\xa0*\\xa06\\xa0=\\xa024\\xa0kilómetros.']\nnew_fact = infer_new_fact(selected) # 'La caminata de Walt el lunes y el martes fue de 4\\xa0+\\xa024\\xa0=\\xa028\\xa0kilómetros combinados.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Su kilometraje total de lunes a miércoles fue de 41\\xa0kilómetros.', 'La caminata de Walt el lunes y el martes fue de 4\\xa0+\\xa024\\xa0=\\xa028\\xa0kilómetros combinados.']\nnew_fact = infer_new_fact(selected) # 'La caminata de Walt el miércoles fue de 41\\xa0-\\xa028\\xa0=\\xa013\\xa0kilómetros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos kilómetros caminó el miércoles?', 'La caminata de Walt el miércoles fue de 41\\xa0-\\xa028\\xa0=\\xa013\\xa0kilómetros.']\nnew_fact = infer_new_fact(selected) # 'The answer is 13'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '13'"}
{"id": "GSM8K_134_2f2ab4e371", "context": "", "options": [], "answer": "720", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 3}, {"antecedents": [2, 3], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: He gets 4*12=48 car washes a year; int1 & sent2 -> int2: That means it cost 48*15=$720; int2 & sent2 -> int3: The answer is 720;", "textual_logical_units": {"1": "A Tom le lavan el coche 4 veces al mes.", "2": "Si cada lavado le cuesta 15 €, ¿cuánto paga en un año?", "3": "Lava el coche 4 * 12 = 48 veces al año", "4": "Eso significa que le cuesta 48 * 15 = 720 €", "5": "The answer is 720"}, "human_translated": true, "code_input": "####\nfacts = ['A Tom le lavan el coche 4\\xa0veces al mes.']\nquestion = 'Si cada lavado le cuesta 15\\xa0€, ¿cuánto paga en un año?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['A Tom le lavan el coche 4\\xa0veces al mes.', 'Si cada lavado le cuesta 15\\xa0€, ¿cuánto paga en un año?']\nnew_fact = infer_new_fact(selected) # 'Lava el coche 4\\xa0*\\xa012\\xa0=\\xa048\\xa0veces al año'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si cada lavado le cuesta 15\\xa0€, ¿cuánto paga en un año?', 'Lava el coche 4\\xa0*\\xa012\\xa0=\\xa048\\xa0veces al año']\nnew_fact = infer_new_fact(selected) # 'Eso significa que le cuesta 48\\xa0*\\xa015\\xa0=\\xa0720\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si cada lavado le cuesta 15\\xa0€, ¿cuánto paga en un año?', 'Eso significa que le cuesta 48\\xa0*\\xa015\\xa0=\\xa0720\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 720'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '720'"}
{"id": "GSM8K_135_ea7a060d98", "context": "", "options": [], "answer": "40", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 4}, {"antecedents": [1, 2, 4], "consequent": 5}, {"antecedents": [5], "consequent": 6}, {"antecedents": [2, 3, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 -> int1: If Brian previously had 20 video games but lost 5, that means he now has 20-5=15 video games; int1 & sent1 & sent2 -> int2: Brian has 15 video games, so if Bobby has 5 fewer than 3 times as many as Brian does we must first perform 15*3=45; int2 -> int3: We then subtract 5 from the previous total for 45-5=40 games in total.; int3 & sent2 & sent3 -> int4: The answer is 40;", "textual_logical_units": {"1": "Bobby, el amigo de Brian, tiene 5 videojuegos menos del triple de los que tiene Brian.", "2": "Si Brian tiene 20 videojuegos, pero perdió 5 justo antes de hacer la comparación,", "3": "¿cuántos tiene Bobby?", "4": "Si Brian antes tenía 20 videojuegos, pero perdió 5, eso significa que ahora tiene 20 - 5 = 15 videojuegos", "5": "Brian tiene 15 videojuegos, así que, si Bobby tiene 5 menos del triple que Brian, antes hay que hacer 15 * 3 = 45", "6": "Luego restamos 5 del total anterior para obtener 45 - 5 = 40 juegos en total.", "7": "The answer is 40"}, "human_translated": true, "code_input": "####\nfacts = [ 'Bobby, el amigo de Brian, tiene 5\\xa0videojuegos menos del triple de los que tiene Brian.',\n  'Si Brian tiene 20\\xa0videojuegos, pero perdió 5 justo antes de hacer la comparación,']\nquestion = '¿cuántos tiene Bobby?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Si Brian tiene 20\\xa0videojuegos, pero perdió 5 justo antes de hacer la comparación,']\nnew_fact = infer_new_fact(selected) # 'Si Brian antes tenía 20\\xa0videojuegos, pero perdió 5, eso significa que ahora tiene 20\\xa0-\\xa05\\xa0=\\xa015\\xa0videojuegos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Bobby, el amigo de Brian, tiene 5\\xa0videojuegos menos del triple de los que tiene Brian.', 'Si Brian tiene 20\\xa0videojuegos, pero perdió 5 justo antes de hacer la comparación,', 'Si Brian antes tenía 20\\xa0videojuegos, pero perdió 5, eso significa que ahora tiene 20\\xa0-\\xa05\\xa0=\\xa015\\xa0videojuegos']\nnew_fact = infer_new_fact(selected) # 'Brian tiene 15\\xa0videojuegos, así que, si Bobby tiene 5 menos del triple que Brian, antes hay que hacer 15\\xa0*\\xa03\\xa0=\\xa045'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Brian tiene 15\\xa0videojuegos, así que, si Bobby tiene 5 menos del triple que Brian, antes hay que hacer 15\\xa0*\\xa03\\xa0=\\xa045']\nnew_fact = infer_new_fact(selected) # 'Luego restamos 5 del total anterior para obtener 45\\xa0-\\xa05\\xa0=\\xa040\\xa0juegos en total.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Brian tiene 20\\xa0videojuegos, pero perdió 5 justo antes de hacer la comparación,', '¿cuántos tiene Bobby?', 'Luego restamos 5 del total anterior para obtener 45\\xa0-\\xa05\\xa0=\\xa040\\xa0juegos en total.']\nnew_fact = infer_new_fact(selected) # 'The answer is 40'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '40'"}
{"id": "GSM8K_136_d9c82cc71f", "context": "", "options": [], "answer": "6", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Scottish Unicorns:27(1/3)=9; int1 & sent3 -> int2: Female:9(2/3)=6 unicorns; int2 & sent4 -> int3: The answer is 6;", "textual_logical_units": {"1": "Quedan 27 unicornios en el mundo.", "2": "Un tercio de ellos se encuentra en las Tierras Altas de Escocia.", "3": "Dos tercios de los unicornios escoceses son hembras.", "4": "¿Cuántos unicornios hembras que sean escoceses hay?", "5": "Unicornios escoceses: 27 * (1 / 3) = 9", "6": "Hembras: 9 * (2 / 3) = 6 unicornios", "7": "The answer is 6"}, "human_translated": true, "code_input": "####\nfacts = [ 'Quedan 27\\xa0unicornios en el mundo.',\n  'Un tercio de ellos se encuentra en las Tierras Altas de Escocia.',\n  'Dos tercios de los unicornios escoceses son hembras.']\nquestion = '¿Cuántos unicornios hembras que sean escoceses hay?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Quedan 27\\xa0unicornios en el mundo.', 'Un tercio de ellos se encuentra en las Tierras Altas de Escocia.']\nnew_fact = infer_new_fact(selected) # 'Unicornios escoceses: 27\\xa0*\\xa0(1\\xa0/\\xa03)\\xa0=\\xa09'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Dos tercios de los unicornios escoceses son hembras.', 'Unicornios escoceses: 27\\xa0*\\xa0(1\\xa0/\\xa03)\\xa0=\\xa09']\nnew_fact = infer_new_fact(selected) # 'Hembras: 9\\xa0*\\xa0(2\\xa0/\\xa03)\\xa0=\\xa06\\xa0unicornios'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos unicornios hembras que sean escoceses hay?', 'Hembras: 9\\xa0*\\xa0(2\\xa0/\\xa03)\\xa0=\\xa06\\xa0unicornios']\nnew_fact = infer_new_fact(selected) # 'The answer is 6'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '6'"}
{"id": "GSM8K_137_d6ca49d1e7", "context": "", "options": [], "answer": "29", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 7}, {"antecedents": [2], "consequent": 8}, {"antecedents": [3], "consequent": 9}, {"antecedents": [7, 8, 9], "consequent": 10}, {"antecedents": [1, 4], "consequent": 11}, {"antecedents": [5, 10, 11], "consequent": 12}, {"antecedents": [6, 12], "consequent": 13}], "metadata": [], "linearized_output_en": "sent1 -> int1: 2 subs are $7.50 each so that’s 2*7.50 = $15.00; sent2 -> int2: 2 bags of chips are $1.50 each so that’s 2*1.50 = $3.00; sent3 -> int3: 2 cookies are $1.00 each so that’s 2*1 = $2.00; int1 & int2 & int3 -> int4: Her delivery order will be 15+3+2= $20.00; sent1 & sent4 -> int5: There’s a 20% delivery fee on the $20.00 which adds .20*20 = $4.00 to her bill; int4 & int5 & sent5 -> int6: The delivery order is $20.00, there’s a $4.00 delivery fee and she adds a $5.00 tip for a total of 20+4+5 = $29.00; int6 & sent6 -> int7: The answer is 29;", "textual_logical_units": {"1": "Rory pide 2 bocadillos a 7,50 € cada uno,", "2": "2 bolsas de patatas fritas a 1,50 € cada una y", "3": "2 galletas a 1,00 € cada una a domicilio.", "4": "Se añade una tarifa de envío del 20 % al finalizar la compra y", "5": "quiere añadir una propina de 5,00 €.", "6": "¿Cuánto costará su pedido a domicilio?", "7": "2 bocadillos cuestan 7,50 € cada uno, es decir, 2 * 7,50 = 15,00 €", "8": "2 bolsas de patatas fritas cuestan 1,50 € cada una, es decir, 2 * 1,50 = 3,00 €", "9": "2 galletas cuestan 1,00 € cada una, es decir, 2 * 1 = 2,00 €", "10": "Su pedido a domicilio será de 15 + 3 + 2 = 20,00 €", "11": "Los 20,00 € tienen una tarifa de envío del 20 %, lo que añade 0,20 * 20 = 4,00 € a su factura", "12": "El pedido a domicilio cuesta 20,00 €, hay una tarifa de envío de 4,00 € y ella añade una propina de 5,00 € para un total de 20 + 4 + 5 = 29,00 €", "13": "The answer is 29"}, "human_translated": true, "code_input": "####\nfacts = [ 'Rory pide 2\\xa0bocadillos a 7,50\\xa0€ cada uno,',\n  '2\\xa0bolsas de patatas fritas a 1,50\\xa0€ cada una y',\n  '2\\xa0galletas a 1,00\\xa0€ cada una a domicilio.',\n  'Se añade una tarifa de envío del 20\\xa0% al finalizar la compra y',\n  'quiere añadir una propina de 5,00\\xa0€.']\nquestion = '¿Cuánto costará su pedido a domicilio?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Rory pide 2\\xa0bocadillos a 7,50\\xa0€ cada uno,']\nnew_fact = infer_new_fact(selected) # '2\\xa0bocadillos cuestan 7,50\\xa0€ cada uno, es decir, 2\\xa0*\\xa07,50\\xa0=\\xa015,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['2\\xa0bolsas de patatas fritas a 1,50\\xa0€ cada una y']\nnew_fact = infer_new_fact(selected) # '2\\xa0bolsas de patatas fritas cuestan 1,50\\xa0€ cada una, es decir, 2\\xa0*\\xa01,50\\xa0=\\xa03,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['2\\xa0galletas a 1,00\\xa0€ cada una a domicilio.']\nnew_fact = infer_new_fact(selected) # '2\\xa0galletas cuestan 1,00\\xa0€ cada una, es decir, 2\\xa0*\\xa01\\xa0=\\xa02,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['2\\xa0bocadillos cuestan 7,50\\xa0€ cada uno, es decir, 2\\xa0*\\xa07,50\\xa0=\\xa015,00\\xa0€', '2\\xa0bolsas de patatas fritas cuestan 1,50\\xa0€ cada una, es decir, 2\\xa0*\\xa01,50\\xa0=\\xa03,00\\xa0€', '2\\xa0galletas cuestan 1,00\\xa0€ cada una, es decir, 2\\xa0*\\xa01\\xa0=\\xa02,00\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Su pedido a domicilio será de 15\\xa0+\\xa03\\xa0+\\xa02\\xa0=\\xa020,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Rory pide 2\\xa0bocadillos a 7,50\\xa0€ cada uno,', 'Se añade una tarifa de envío del 20\\xa0% al finalizar la compra y']\nnew_fact = infer_new_fact(selected) # 'Los 20,00\\xa0€ tienen una tarifa de envío del 20\\xa0%, lo que añade 0,20\\xa0*\\xa020\\xa0=\\xa04,00\\xa0€ a su factura'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['quiere añadir una propina de 5,00\\xa0€.', 'Su pedido a domicilio será de 15\\xa0+\\xa03\\xa0+\\xa02\\xa0=\\xa020,00\\xa0€', 'Los 20,00\\xa0€ tienen una tarifa de envío del 20\\xa0%, lo que añade 0,20\\xa0*\\xa020\\xa0=\\xa04,00\\xa0€ a su factura']\nnew_fact = infer_new_fact(selected) # 'El pedido a domicilio cuesta 20,00\\xa0€, hay una tarifa de envío de 4,00\\xa0€ y ella añade una propina de 5,00\\xa0€ para un total de 20\\xa0+\\xa04\\xa0+\\xa05\\xa0=\\xa029,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto costará su pedido a domicilio?', 'El pedido a domicilio cuesta 20,00\\xa0€, hay una tarifa de envío de 4,00\\xa0€ y ella añade una propina de 5,00\\xa0€ para un total de 20\\xa0+\\xa04\\xa0+\\xa05\\xa0=\\xa029,00\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 29'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '29'"}
{"id": "GSM8K_138_beb61b44fb", "context": "", "options": [], "answer": "105", "reasoning_graph_edges": [{"antecedents": [2, 4], "consequent": 7}, {"antecedents": [2, 5], "consequent": 8}, {"antecedents": [1, 7], "consequent": 9}, {"antecedents": [3, 8], "consequent": 10}, {"antecedents": [9, 10], "consequent": 11}, {"antecedents": [6, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent2 & sent4 -> int1: Questions Mark completed in yesterday’s test: 5*8 = 40.; sent2 & sent5 -> int2: Questions Mark completed in today’s test: 5*6 = 30.; int1 & sent1 -> int3: Questions Mark left incomplete in yesterday’s test: 75-40 = 35; int2 & sent3 -> int4: Questions Mark left incomplete in today's test: 100-30 = 70; int3 & int4 -> int5: Missed questions in total 35+70 = 105.; int5 & sent6 -> int6: The answer is 105;", "textual_logical_units": {"1": "Mark hizo un examen ayer que constaba de 75 preguntas.", "2": "Completó la prueba a un ritmo de 5 preguntas por hora.", "3": "Hoy, hizo otra prueba de 100 preguntas al mismo ritmo.", "4": "Si Mark tuviera 8 horas para completar la primera prueba y", "5": "6 horas para completar la segunda,", "6": "¿cuántas preguntas dejó incompletas?", "7": "Preguntas que Mark completó en el examen de ayer: 5 * 8 = 40.", "8": "Preguntas que Mark completó en el examen de hoy: 5 * 6 = 30.", "9": "Preguntas que Mark dejó incompletas en el examen de ayer: 75 - 40 = 35", "10": "Preguntas que Mark dejó incompletas en el examen de hoy: 100 - 30 = 70", "11": "El total de preguntas que no respondió es de 35 + 70 = 105.", "12": "The answer is 105"}, "human_translated": true, "code_input": "####\nfacts = [ 'Mark hizo un examen ayer que constaba de 75\\xa0preguntas.',\n  'Completó la prueba a un ritmo de\\xa05 preguntas por hora.',\n  'Hoy, hizo otra prueba de 100\\xa0preguntas al mismo ritmo.',\n  'Si Mark tuviera 8\\xa0horas para completar la primera prueba y',\n  '6\\xa0horas para completar la segunda,']\nquestion = '¿cuántas preguntas dejó incompletas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Completó la prueba a un ritmo de\\xa05 preguntas por hora.', 'Si Mark tuviera 8\\xa0horas para completar la primera prueba y']\nnew_fact = infer_new_fact(selected) # 'Preguntas que Mark completó en el examen de ayer: 5\\xa0*\\xa08\\xa0=\\xa040.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Completó la prueba a un ritmo de\\xa05 preguntas por hora.', '6\\xa0horas para completar la segunda,']\nnew_fact = infer_new_fact(selected) # 'Preguntas que Mark completó en el examen de hoy: 5\\xa0*\\xa06\\xa0=\\xa030.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Mark hizo un examen ayer que constaba de 75\\xa0preguntas.', 'Preguntas que Mark completó en el examen de ayer: 5\\xa0*\\xa08\\xa0=\\xa040.']\nnew_fact = infer_new_fact(selected) # 'Preguntas que Mark dejó incompletas en el examen de ayer: 75\\xa0-\\xa040\\xa0=\\xa035'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Hoy, hizo otra prueba de 100\\xa0preguntas al mismo ritmo.', 'Preguntas que Mark completó en el examen de hoy: 5\\xa0*\\xa06\\xa0=\\xa030.']\nnew_fact = infer_new_fact(selected) # 'Preguntas que Mark dejó incompletas en el examen de hoy: 100\\xa0-\\xa030\\xa0=\\xa070'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Preguntas que Mark dejó incompletas en el examen de ayer: 75\\xa0-\\xa040\\xa0=\\xa035', 'Preguntas que Mark dejó incompletas en el examen de hoy: 100\\xa0-\\xa030\\xa0=\\xa070']\nnew_fact = infer_new_fact(selected) # 'El total de preguntas que no respondió es de 35\\xa0+\\xa070\\xa0=\\xa0105.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántas preguntas dejó incompletas?', 'El total de preguntas que no respondió es de 35\\xa0+\\xa070\\xa0=\\xa0105.']\nnew_fact = infer_new_fact(selected) # 'The answer is 105'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '105'"}
{"id": "GSM8K_139_3a7530c506", "context": "", "options": [], "answer": "70", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 3}, {"antecedents": [1, 3], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Four times the number of blue gumballs is 12*4=48 gumballs; int1 & sent1 -> int2: There are 48+22=70 pink gumballs; int2 & sent2 -> int3: The answer is 70;", "textual_logical_units": {"1": "En una máquina de caramelos, hay 22 chicles rosas más del cuádruple que de azules.", "2": "Si hay 12 chicles azules, ¿cuántos rosas hay?", "3": "Cuatro veces el número de chicles azules es 12 * 4 = 48 chicles", "4": "Hay 48 + 22 = 70 chicles rosas", "5": "The answer is 70"}, "human_translated": true, "code_input": "####\nfacts = ['En una máquina de caramelos, hay 22\\xa0chicles rosas más del cuádruple que de azules.']\nquestion = 'Si hay 12\\xa0chicles azules, ¿cuántos rosas hay?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['En una máquina de caramelos, hay 22\\xa0chicles rosas más del cuádruple que de azules.', 'Si hay 12\\xa0chicles azules, ¿cuántos rosas hay?']\nnew_fact = infer_new_fact(selected) # 'Cuatro veces el número de chicles azules es 12\\xa0*\\xa04\\xa0=\\xa048\\xa0chicles'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En una máquina de caramelos, hay 22\\xa0chicles rosas más del cuádruple que de azules.', 'Cuatro veces el número de chicles azules es 12\\xa0*\\xa04\\xa0=\\xa048\\xa0chicles']\nnew_fact = infer_new_fact(selected) # 'Hay 48\\xa0+\\xa022\\xa0=\\xa070\\xa0chicles rosas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si hay 12\\xa0chicles azules, ¿cuántos rosas hay?', 'Hay 48\\xa0+\\xa022\\xa0=\\xa070\\xa0chicles rosas']\nnew_fact = infer_new_fact(selected) # 'The answer is 70'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '70'"}
{"id": "GSM8K_140_917a0fcf98", "context": "", "options": [], "answer": "20", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 4}, {"antecedents": [1, 2, 4], "consequent": 5}, {"antecedents": [1, 2, 4, 5], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 -> int1: 12 + 4 = 16 cars are either automatic or manual.; int1 & sent1 & sent2 -> int2: So, 20 - 16 = 4 cars are semi-automatic.; int1 & int2 & sent1 & sent2 -> int3: Therefore, the percentage of semi-automatic cars is 4/20 x 100% = 20%.; int3 & sent3 -> int4: The answer is 20;", "textual_logical_units": {"1": "De los 20 coches disponibles para alquilar, 12 son automáticos, 4 son manuales", "2": "y el resto son semiautomáticos.", "3": "¿Qué porcentaje de los coches son semiautomáticos?", "4": "12 + 4 = 16 coches son automáticos o manuales.", "5": "Entonces, 20 - 16 = 4 coches son semiautomáticos.", "6": "Por tanto, el porcentaje de vehículos semiautomáticos es de 4 / 20 x 100 % = 20%.", "7": "The answer is 20"}, "human_translated": true, "code_input": "####\nfacts = ['De los 20\\xa0coches disponibles para alquilar, 12\\xa0son automáticos, 4\\xa0son manuales', 'y el resto son semiautomáticos.']\nquestion = '¿Qué porcentaje de los coches son semiautomáticos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['De los 20\\xa0coches disponibles para alquilar, 12\\xa0son automáticos, 4\\xa0son manuales']\nnew_fact = infer_new_fact(selected) # '12\\xa0+ 4\\xa0=\\xa016\\xa0coches son automáticos o manuales.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['De los 20\\xa0coches disponibles para alquilar, 12\\xa0son automáticos, 4\\xa0son manuales', 'y el resto son semiautomáticos.', '12\\xa0+ 4\\xa0=\\xa016\\xa0coches son automáticos o manuales.']\nnew_fact = infer_new_fact(selected) # 'Entonces, 20\\xa0-\\xa016\\xa0=\\xa04 coches son semiautomáticos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['De los 20\\xa0coches disponibles para alquilar, 12\\xa0son automáticos, 4\\xa0son manuales', 'y el resto son semiautomáticos.', '12\\xa0+ 4\\xa0=\\xa016\\xa0coches son automáticos o manuales.', 'Entonces, 20\\xa0-\\xa016\\xa0=\\xa04 coches son semiautomáticos.']\nnew_fact = infer_new_fact(selected) # 'Por tanto, el porcentaje de vehículos semiautomáticos es de 4\\xa0/\\xa020\\xa0x\\xa0100\\xa0%\\xa0=\\xa020%.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Qué porcentaje de los coches son semiautomáticos?', 'Por tanto, el porcentaje de vehículos semiautomáticos es de 4\\xa0/\\xa020\\xa0x\\xa0100\\xa0%\\xa0=\\xa020%.']\nnew_fact = infer_new_fact(selected) # 'The answer is 20'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '20'"}
{"id": "GSM8K_141_6775a1dbf9", "context": "", "options": [], "answer": "400", "reasoning_graph_edges": [{"antecedents": [3], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [2, 3, 5, 6], "consequent": 7}, {"antecedents": [1, 5, 6, 7], "consequent": 8}, {"antecedents": [8], "consequent": 9}, {"antecedents": [9], "consequent": 10}, {"antecedents": [7, 10], "consequent": 11}, {"antecedents": [4, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent3 -> int1: Let x represent the number of queens; int1 & sent3 -> int2: Babies:2x; int1 & int2 & sent2 & sent3 -> int3: Workers:2(2x)=4x; int1 & int2 & int3 & sent1 -> int4: Total:x+2x+4x=700; int4 -> int5: 7x=700; int5 -> int6: x=100 queen bees; int3 & int6 -> int7: Workers:4(100)=400 worker bees; int7 & sent4 -> int8: The answer is 400;", "textual_logical_units": {"1": "Hay 700 abejas en una colmena.", "2": "Hay el doble de abejas obreras que de abejas bebés,", "3": "y hay el doble de bebés que de reinas.", "4": "¿Cuántas abejas obreras hay?", "5": "El número de reinas es x", "6": "Bebés: 2x", "7": "Obreras: 2 * (2x) = 4x", "8": "Total: x + 2x + 4x = 700", "9": "7x = 700", "10": "x = 100 abejas reinas", "11": "Obreras: 4 * 100 = 400 abejas obreras", "12": "The answer is 400"}, "human_translated": true, "code_input": "####\nfacts = ['Hay 700\\xa0abejas en una colmena.', 'Hay el doble de abejas obreras que de abejas bebés,', 'y hay el doble de bebés que de reinas.']\nquestion = '¿Cuántas abejas obreras hay?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['y hay el doble de bebés que de reinas.']\nnew_fact = infer_new_fact(selected) # 'El número de reinas es x'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y hay el doble de bebés que de reinas.', 'El número de reinas es x']\nnew_fact = infer_new_fact(selected) # 'Bebés: 2x'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Hay el doble de abejas obreras que de abejas bebés,', 'y hay el doble de bebés que de reinas.', 'El número de reinas es x', 'Bebés: 2x']\nnew_fact = infer_new_fact(selected) # 'Obreras: 2\\xa0*\\xa0(2x)\\xa0=\\xa04x'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Hay 700\\xa0abejas en una colmena.', 'El número de reinas es x', 'Bebés: 2x', 'Obreras: 2\\xa0*\\xa0(2x)\\xa0=\\xa04x']\nnew_fact = infer_new_fact(selected) # 'Total: x\\xa0+\\xa02x\\xa0+\\xa04x\\xa0=\\xa0700'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Total: x\\xa0+\\xa02x\\xa0+\\xa04x\\xa0=\\xa0700']\nnew_fact = infer_new_fact(selected) # '7x\\xa0=\\xa0700'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['7x\\xa0=\\xa0700']\nnew_fact = infer_new_fact(selected) # 'x\\xa0=\\xa0100\\xa0abejas reinas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Obreras: 2\\xa0*\\xa0(2x)\\xa0=\\xa04x', 'x\\xa0=\\xa0100\\xa0abejas reinas']\nnew_fact = infer_new_fact(selected) # 'Obreras: 4\\xa0*\\xa0100\\xa0=\\xa0400\\xa0abejas obreras'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas abejas obreras hay?', 'Obreras: 4\\xa0*\\xa0100\\xa0=\\xa0400\\xa0abejas obreras']\nnew_fact = infer_new_fact(selected) # 'The answer is 400'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '400'"}
{"id": "GSM8K_142_d8ba3de624", "context": "", "options": [], "answer": "140", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 -> int1: Jordan plays video games for 2 hours every day x 7 days in a week = 14 hours a week.; int1 & sent2 -> int2: If Jordan spent his 14 hours working instead, he would make 14 hours x $10 = $140.; int2 & sent3 -> int3: The answer is 140;", "textual_logical_units": {"1": "Jordan juega a videojuegos durante 2 horas todos los días.", "2": "También tiene un trabajo a tiempo parcial en el que gana 10 € la hora.", "3": "¿Cuánto dinero ganaría Jordan en una semana si trabajara el tiempo que dedica a los videojuegos?", "4": "Jordan juega a videojuegos durante 2 horas todos los días x 7 días a la semana = 14 horas a la semana.", "5": "Si Jordan pasara sus 14 horas trabajando en lugar de jugando, ganaría 14 horas x 10 € = 140 €.", "6": "The answer is 140"}, "human_translated": true, "code_input": "####\nfacts = ['Jordan juega a videojuegos durante 2\\xa0horas todos los días.', 'También tiene un trabajo a tiempo parcial en el que gana 10\\xa0€ la hora.']\nquestion = '¿Cuánto dinero ganaría Jordan en una semana si trabajara el tiempo que dedica a los videojuegos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Jordan juega a videojuegos durante 2\\xa0horas todos los días.']\nnew_fact = infer_new_fact(selected) # 'Jordan juega a videojuegos durante 2\\xa0horas todos los días\\xa0x\\xa07\\xa0días a la semana\\xa0=\\xa014\\xa0horas a la semana.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['También tiene un trabajo a tiempo parcial en el que gana 10\\xa0€ la hora.', 'Jordan juega a videojuegos durante 2\\xa0horas todos los días\\xa0x\\xa07\\xa0días a la semana\\xa0=\\xa014\\xa0horas a la semana.']\nnew_fact = infer_new_fact(selected) # 'Si Jordan pasara sus 14\\xa0horas trabajando en lugar de jugando, ganaría 14\\xa0horas\\xa0x\\xa010\\xa0€\\xa0=\\xa0140\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto dinero ganaría Jordan en una semana si trabajara el tiempo que dedica a los videojuegos?', 'Si Jordan pasara sus 14\\xa0horas trabajando en lugar de jugando, ganaría 14\\xa0horas\\xa0x\\xa010\\xa0€\\xa0=\\xa0140\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'The answer is 140'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '140'"}
{"id": "GSM8K_143_aa97c4a867", "context": "", "options": [], "answer": "16", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 5}, {"antecedents": [1, 2, 4], "consequent": 6}, {"antecedents": [4], "consequent": 7}, {"antecedents": [5, 6, 7], "consequent": 8}, {"antecedents": [4, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent1 -> int1: The foodstuff cost 2+3=$5; sent1 & sent2 & sent4 -> int2: The nonfood stuff comes out to 3+3+4=$10; sent4 -> int3: Tax on the nonfood stuff comes out to 10*.1=$1; int1 & int2 & int3 -> int4: So the total cost is 5+10+1=$16; int4 & sent4 -> int5: The answer is 16;", "textual_logical_units": {"1": "John compra leche por 2 euros, huevos por 3 euros,", "2": "bombillas por 3 euros, tazas por 3 euros,", "3": "y trampas para cucarachas por 4 euros.", "4": "Si hay un impuesto del 10 % sobre todos los artículos no alimentarios, ¿cuánto costó todo?", "5": "La comida cuesta 2 + 3 = 5 €", "6": "Lo que no es comida cuesta 3 + 3 + 4 = 10 €", "7": "El impuesto sobre los productos no alimentarios asciende a 10 * 0,1 = 1 €", "8": "Así que el coste total es de 5 + 10 + 1 = 16 €", "9": "The answer is 16"}, "human_translated": true, "code_input": "####\nfacts = ['John compra leche por 2\\xa0euros, huevos por 3\\xa0euros,', 'bombillas por 3\\xa0euros, tazas por 3\\xa0euros,', 'y trampas para cucarachas por 4\\xa0euros.']\nquestion = 'Si hay un impuesto del 10\\xa0% sobre todos los artículos no alimentarios, ¿cuánto costó todo?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['John compra leche por 2\\xa0euros, huevos por 3\\xa0euros,']\nnew_fact = infer_new_fact(selected) # 'La comida cuesta 2\\xa0+\\xa03\\xa0=\\xa05\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['John compra leche por 2\\xa0euros, huevos por 3\\xa0euros,', 'bombillas por 3\\xa0euros, tazas por 3\\xa0euros,', 'Si hay un impuesto del 10\\xa0% sobre todos los artículos no alimentarios, ¿cuánto costó todo?']\nnew_fact = infer_new_fact(selected) # 'Lo que no es comida cuesta 3\\xa0+\\xa03\\xa0+\\xa04\\xa0=\\xa010\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si hay un impuesto del 10\\xa0% sobre todos los artículos no alimentarios, ¿cuánto costó todo?']\nnew_fact = infer_new_fact(selected) # 'El impuesto sobre los productos no alimentarios asciende a 10\\xa0*\\xa00,1\\xa0=\\xa01\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La comida cuesta 2\\xa0+\\xa03\\xa0=\\xa05\\xa0€', 'Lo que no es comida cuesta 3\\xa0+\\xa03\\xa0+\\xa04\\xa0=\\xa010\\xa0€', 'El impuesto sobre los productos no alimentarios asciende a 10\\xa0*\\xa00,1\\xa0=\\xa01\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Así que el coste total es de 5\\xa0+\\xa010\\xa0+\\xa01\\xa0=\\xa016\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si hay un impuesto del 10\\xa0% sobre todos los artículos no alimentarios, ¿cuánto costó todo?', 'Así que el coste total es de 5\\xa0+\\xa010\\xa0+\\xa01\\xa0=\\xa016\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 16'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '16'"}
{"id": "GSM8K_144_5f91483472", "context": "", "options": [], "answer": "20", "reasoning_graph_edges": [{"antecedents": [3, 4], "consequent": 14}, {"antecedents": [6, 14], "consequent": 15}, {"antecedents": [7, 14], "consequent": 16}, {"antecedents": [8, 15], "consequent": 17}, {"antecedents": [9, 16], "consequent": 18}, {"antecedents": [17, 18], "consequent": 19}, {"antecedents": [11, 19], "consequent": 20}, {"antecedents": [13, 20], "consequent": 21}], "metadata": [], "linearized_output_en": "sent3 & sent4 -> int1: Lucas counts a total of 3 confirmed clients + 5 potential clients = 8 clients.; int1 & sent6 -> int2: Each week, he will need a total of 8 clients * 2 bottles of bleach per client = 16 bottles of bleach.; int1 & sent7 -> int3: Each week, he will also need a total of 8 clients * 1 pack of cloths per client = 8 packs of cloths.; int2 & sent8 -> int4: The bottles of bleach will cost him 16 bottles of bleach * $2 per bottle of bleach = $32.; int3 & sent9 -> int5: The packs of cloths will cost him 8 packs of cloths * $5 per pack of cloths = $40.; int4 & int5 -> int6: So each week, Lucas' total expenses will be $32 for bleach + $40 for packs of cloths = $72.; int6 & sent11 -> int7: His profit will therefore be $92 total income - $72 total expenses = $20.; int7 & sent13 -> int8: The answer is 20;", "textual_logical_units": {"1": "Kim ha creado su propio negocio de limpieza y", "2": "está calculando cuánto beneficio obtendrá de sus clientes.", "3": "Ya tiene 3 clientes,", "4": "pero está hablando con otros 5 clientes potenciales y", "5": "tiene la suficientemente seguridad como para incluirlos en sus cálculos.", "6": "La casa de cada cliente necesitará 2 botellas de lejía y", "7": "un paquete de paños para limpiar.", "8": "Las botellas de lejía costarán 2 € cada una y", "9": "los paquetes de paños costarán 5 € cada uno.", "10": "Estos son sus únicos gastos.", "11": "Calcula que su ingreso total cada semana será de 92 €.", "12": "El beneficio es la diferencia entre los ingresos totales y los gastos totales, es decir, ¿cuánto beneficio, en euros,", "13": "tendrá Lucas cada semana?", "14": "Lucas cuenta con un total de 3 clientes confirmados + 5 clientes potenciales = 8 clientes.", "15": "Cada semana, necesitará un total de 8 clientes * 2 botellas de lejía por cliente = 16 botellas de lejía.", "16": "Cada semana, también necesitará un total de 8 clientes * 1 paquete de paños por cliente = 8 paquetes de paños.", "17": "Las botellas de lejía le costarán 16 botellas de lejía * 2 € por botella de lejía = 32 €.", "18": "Los paquetes de paños le costarán 8 paquetes de paños * 5 € por paquete de paños = 40 €.", "19": "Por lo tanto, cada semana, los gastos totales de Lucas serán de 32 € en lejía + 40 € en paquetes de paños = 72 €.", "20": "Por lo tanto, su beneficio será de 92 € de ingresos totales - 72 € de gastos totales = 20 €.", "21": "The answer is 20"}, "human_translated": true, "code_input": "####\nfacts = [ 'Kim ha creado su propio negocio de limpieza y',\n  'está calculando cuánto beneficio obtendrá de sus clientes.',\n  'Ya tiene 3\\xa0clientes,',\n  'pero está hablando con otros 5\\xa0clientes potenciales y',\n  'tiene la suficientemente seguridad como para incluirlos en sus cálculos.',\n  'La casa de cada cliente necesitará 2\\xa0botellas de lejía y',\n  'un paquete de paños para limpiar.',\n  'Las botellas de lejía costarán 2\\xa0€ cada una y',\n  'los paquetes de paños costarán 5\\xa0€ cada uno.',\n  'Estos son sus únicos gastos.',\n  'Calcula que su ingreso total cada semana será de 92\\xa0€.',\n  'El beneficio es la diferencia entre los ingresos totales y los gastos totales, es decir, ¿cuánto beneficio, en euros,']\nquestion = 'tendrá Lucas cada semana?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Ya tiene 3\\xa0clientes,', 'pero está hablando con otros 5\\xa0clientes potenciales y']\nnew_fact = infer_new_fact(selected) # 'Lucas cuenta con un total de 3\\xa0clientes confirmados\\xa0+\\xa05\\xa0clientes potenciales = 8\\xa0clientes.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La casa de cada cliente necesitará 2\\xa0botellas de lejía y', 'Lucas cuenta con un total de 3\\xa0clientes confirmados\\xa0+\\xa05\\xa0clientes potenciales = 8\\xa0clientes.']\nnew_fact = infer_new_fact(selected) # 'Cada semana, necesitará un total de 8\\xa0clientes\\xa0*\\xa02\\xa0botellas de lejía por cliente = 16\\xa0botellas de lejía.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['un paquete de paños para limpiar.', 'Lucas cuenta con un total de 3\\xa0clientes confirmados\\xa0+\\xa05\\xa0clientes potenciales = 8\\xa0clientes.']\nnew_fact = infer_new_fact(selected) # 'Cada semana, también necesitará un total de 8\\xa0clientes\\xa0*\\xa01\\xa0paquete de paños por cliente = 8\\xa0paquetes de paños.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Las botellas de lejía costarán 2\\xa0€ cada una y', 'Cada semana, necesitará un total de 8\\xa0clientes\\xa0*\\xa02\\xa0botellas de lejía por cliente = 16\\xa0botellas de lejía.']\nnew_fact = infer_new_fact(selected) # 'Las botellas de lejía le costarán 16\\xa0botellas de lejía\\xa0*\\xa02\\xa0€ por botella de lejía = 32\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['los paquetes de paños costarán 5\\xa0€ cada uno.', 'Cada semana, también necesitará un total de 8\\xa0clientes\\xa0*\\xa01\\xa0paquete de paños por cliente = 8\\xa0paquetes de paños.']\nnew_fact = infer_new_fact(selected) # 'Los paquetes de paños le costarán 8\\xa0paquetes de paños\\xa0*\\xa05\\xa0€ por paquete de paños = 40\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Las botellas de lejía le costarán 16\\xa0botellas de lejía\\xa0*\\xa02\\xa0€ por botella de lejía = 32\\xa0€.', 'Los paquetes de paños le costarán 8\\xa0paquetes de paños\\xa0*\\xa05\\xa0€ por paquete de paños = 40\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, cada semana, los gastos totales de Lucas serán de 32\\xa0€ en lejía + 40\\xa0€ en paquetes de paños = 72\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Calcula que su ingreso total cada semana será de 92\\xa0€.', 'Por lo tanto, cada semana, los gastos totales de Lucas serán de 32\\xa0€ en lejía + 40\\xa0€ en paquetes de paños = 72\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, su beneficio será de 92\\xa0€ de ingresos totales - 72\\xa0€ de gastos totales = 20\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['tendrá Lucas cada semana?', 'Por lo tanto, su beneficio será de 92\\xa0€ de ingresos totales - 72\\xa0€ de gastos totales = 20\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'The answer is 20'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '20'"}
{"id": "GSM8K_145_1a3e2b62ae", "context": "", "options": [], "answer": "4000", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [3], "consequent": 6}, {"antecedents": [5, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: John has 100 x 10= 1000 pineapples on his field.; sent3 -> int2: John can harvest his Pineapple 12 ÷ 3 = 4 times per year; int1 & int2 -> int3: Therefore John can harvest 1000 x 4 = 4000 pineapples per year.; int3 & sent4 -> int4: The answer is 4000;", "textual_logical_units": {"1": "John tiene 10 hectáreas de un campo de piñas.", "2": "Hay 100 piñas por hectárea.", "3": "John puede cosechar sus piñas cada 3 meses.", "4": "¿Cuántas piñas puede cosechar John en un año?", "5": "John tiene 100 x 10 = 1000 piñas en su campo.", "6": "John puede cosechar su piña 12 ÷ 3 = 4 veces al año", "7": "Por lo tanto, John puede cosechar 1000 x 4 = 4000 piñas al año.", "8": "The answer is 4000"}, "human_translated": true, "code_input": "####\nfacts = ['John tiene 10\\xa0hectáreas de un campo de piñas.', 'Hay 100\\xa0piñas por hectárea.', 'John puede cosechar sus piñas cada 3\\xa0meses.']\nquestion = '¿Cuántas piñas puede cosechar John en un año?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['John tiene 10\\xa0hectáreas de un campo de piñas.', 'Hay 100\\xa0piñas por hectárea.']\nnew_fact = infer_new_fact(selected) # 'John tiene 100\\xa0x\\xa010\\xa0=\\xa01000\\xa0piñas en su campo.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['John puede cosechar sus piñas cada 3\\xa0meses.']\nnew_fact = infer_new_fact(selected) # 'John puede cosechar su piña 12\\xa0÷\\xa03\\xa0=\\xa04\\xa0veces al año'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['John tiene 100\\xa0x\\xa010\\xa0=\\xa01000\\xa0piñas en su campo.', 'John puede cosechar su piña 12\\xa0÷\\xa03\\xa0=\\xa04\\xa0veces al año']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, John puede cosechar 1000\\xa0x\\xa04\\xa0=\\xa04000\\xa0piñas al año.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas piñas puede cosechar John en un año?', 'Por lo tanto, John puede cosechar 1000\\xa0x\\xa04\\xa0=\\xa04000\\xa0piñas al año.']\nnew_fact = infer_new_fact(selected) # 'The answer is 4000'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '4000'"}
{"id": "GSM8K_146_285833a555", "context": "", "options": [], "answer": "2125", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 6}, {"antecedents": [3, 4], "consequent": 7}, {"antecedents": [6, 7], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: The first set had 500 pieces, and the second set had 3 times as many as the first set, so the second set has 500*3=1500 pieces; sent3 & sent4 -> int2: The third set had one-quarter of the 500 pieces, so that means it had 500*.25= 125 pieces; int1 & int2 -> int3: In total, that means Johnny picked up 500 + 1500+ 125= 2125 blocks; int3 & sent5 -> int4: The answer is 2,125;", "textual_logical_units": {"1": "Johnny está recogiendo los juguetes del suelo de su habitación.", "2": "Había tirado al suelo una caja de Lego con 500 piezas,", "3": "otra que tenía el triple de piezas que la de 500 piezas,", "4": "y otra que tenía 1/4 del número de piezas.", "5": "¿Cuántos bloques recoge Johnny si recoge todas las piezas de Lego?", "6": "La primera caja tenía 500 piezas, y la segunda tenía el triple de piezas que la primera, por lo que la segunda caja tiene 500 * 3 = 1500 piezas", "7": "La tercera caja tenía una cuarta parte de las 500 piezas, lo que significa que tenía 500 * 0,25 = 125 piezas", "8": "En total, eso significa que Johnny recogió 500 + 1500 + 125 = 2125 bloques", "9": "The answer is 2,125"}, "human_translated": true, "code_input": "####\nfacts = [ 'Johnny está recogiendo los juguetes del suelo de su habitación.',\n  'Había tirado al suelo una caja de Lego con 500\\xa0piezas,',\n  'otra que tenía el triple de piezas que la de 500\\xa0piezas,',\n  'y otra que tenía 1/4 del número de piezas.']\nquestion = '¿Cuántos bloques recoge Johnny si recoge todas las piezas de Lego?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Había tirado al suelo una caja de Lego con 500\\xa0piezas,', 'otra que tenía el triple de piezas que la de 500\\xa0piezas,']\nnew_fact = infer_new_fact(selected) # 'La primera caja tenía 500\\xa0piezas, y la segunda tenía el triple de piezas que la primera, por lo que la segunda caja tiene 500\\xa0*\\xa03\\xa0=\\xa01500\\xa0piezas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['otra que tenía el triple de piezas que la de 500\\xa0piezas,', 'y otra que tenía 1/4 del número de piezas.']\nnew_fact = infer_new_fact(selected) # 'La tercera caja tenía una cuarta parte de las 500\\xa0piezas, lo que significa que tenía 500\\xa0*\\xa00,25\\xa0=\\xa0125\\xa0piezas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La primera caja tenía 500\\xa0piezas, y la segunda tenía el triple de piezas que la primera, por lo que la segunda caja tiene 500\\xa0*\\xa03\\xa0=\\xa01500\\xa0piezas', 'La tercera caja tenía una cuarta parte de las 500\\xa0piezas, lo que significa que tenía 500\\xa0*\\xa00,25\\xa0=\\xa0125\\xa0piezas']\nnew_fact = infer_new_fact(selected) # 'En total, eso significa que Johnny recogió 500\\xa0+\\xa01500\\xa0+\\xa0125\\xa0=\\xa02125\\xa0bloques'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos bloques recoge Johnny si recoge todas las piezas de Lego?', 'En total, eso significa que Johnny recogió 500\\xa0+\\xa01500\\xa0+\\xa0125\\xa0=\\xa02125\\xa0bloques']\nnew_fact = infer_new_fact(selected) # 'The answer is 2,125'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '2125'"}
{"id": "GSM8K_147_e799d75f02", "context": "", "options": [], "answer": "75", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 8}, {"antecedents": [4, 5], "consequent": 9}, {"antecedents": [2, 9], "consequent": 10}, {"antecedents": [8, 9, 10], "consequent": 11}, {"antecedents": [7, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Debra first sees 30 bees leave the hive, then sees 1/2 that many return, 30 x 1/2 = 15 bees that return and 15 bees that are still away from the hive.; sent4 & sent5 -> int2: Debra sees twice as many bees as first left the hive--which was 30--fly from the hive in the next 6 hours, 30 x 2 = 60 bees that leave the hive.; int2 & sent2 -> int3: In total, 30 + 60 = 90 bees left the hive.; int1 & int2 & int3 -> int4: There were 90 bees total that left the hive - 15 bees that already returned = 75 bees that return to the hive in the last 6 hours of the day.; int4 & sent7 -> int5: The answer is 75;", "textual_logical_units": {"1": "Debra está supervisando una colmena para ver cuántas abejas entran y salen en un día.", "2": "Ve 30 abejas salir de la colmena en las primeras 6 horas y luego", "3": "ve que la mitad de las abejas regresan en las siguientes 6 horas.", "4": "Ve el doble de abejas de las que vio salir la primera vez de la colmena volar desde la colmena y", "5": "salir en las siguientes 6 horas.", "6": "Luego, todas las abejas que se fueron antes y que aún no habían regresado regresan a la colmena en las siguientes 6 horas.", "7": "¿Cuántas abejas vio Debra regresar a la colmena en las últimas 6 horas del día?", "8": "Debra ve primero 30 abejas salir de la colmena, luego ve la mitad que regresan, 30 x 1 / 2 = 15 abejas que regresan y 15 abejas que aún están lejos de la colmena.", "9": "Debra ve el doble de abejas que las que salieron por primera vez de la colmena (que eran 30) que salen volando de la colmena en las siguientes 6 horas, 30 x 2 = 60 abejas que salen de la colmena.", "10": "En total, 30 + 60 = 90 abejas abandonaron la colmena.", "11": "En total, 90 abejas abandonaron la colmena: 15 abejas que ya regresaron = 75 abejas que regresaron a la colmena en las últimas 6 horas del día.", "12": "The answer is 75"}, "human_translated": true, "code_input": "####\nfacts = [ 'Debra está supervisando una colmena para ver cuántas abejas entran y salen en un día.',\n  'Ve 30\\xa0abejas salir de la colmena en las primeras 6\\xa0horas y luego',\n  've que la mitad de las abejas regresan en las siguientes 6\\xa0horas.',\n  'Ve el doble de abejas de las que vio salir la primera vez de la colmena volar desde la colmena y',\n  'salir en las siguientes 6\\xa0horas.',\n  'Luego, todas las abejas que se fueron antes y que aún no habían regresado regresan a la colmena en las siguientes 6\\xa0horas.']\nquestion = '¿Cuántas abejas vio Debra regresar a la colmena en las últimas 6\\xa0horas del día?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Ve 30\\xa0abejas salir de la colmena en las primeras 6\\xa0horas y luego', 've que la mitad de las abejas regresan en las siguientes 6\\xa0horas.']\nnew_fact = infer_new_fact(selected) # 'Debra ve primero 30\\xa0abejas salir de la colmena, luego ve la mitad que regresan, 30\\xa0x\\xa01\\xa0/\\xa02\\xa0=\\xa015 abejas que regresan y 15\\xa0abejas que aún están lejos de la colmena.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Ve el doble de abejas de las que vio salir la primera vez de la colmena volar desde la colmena y', 'salir en las siguientes 6\\xa0horas.']\nnew_fact = infer_new_fact(selected) # 'Debra ve el doble de abejas que las que salieron por primera vez de la colmena (que eran 30) que salen volando de la colmena en las siguientes 6\\xa0horas, 30\\xa0x\\xa02\\xa0=\\xa060\\xa0abejas que salen de la colmena.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Ve 30\\xa0abejas salir de la colmena en las primeras 6\\xa0horas y luego', 'Debra ve el doble de abejas que las que salieron por primera vez de la colmena (que eran 30) que salen volando de la colmena en las siguientes 6\\xa0horas, 30\\xa0x\\xa02\\xa0=\\xa060\\xa0abejas que salen de la colmena.']\nnew_fact = infer_new_fact(selected) # 'En total, 30\\xa0+\\xa060\\xa0=\\xa090 abejas abandonaron la colmena.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Debra ve primero 30\\xa0abejas salir de la colmena, luego ve la mitad que regresan, 30\\xa0x\\xa01\\xa0/\\xa02\\xa0=\\xa015 abejas que regresan y 15\\xa0abejas que aún están lejos de la colmena.', 'Debra ve el doble de abejas que las que salieron por primera vez de la colmena (que eran 30) que salen volando de la colmena en las siguientes 6\\xa0horas, 30\\xa0x\\xa02\\xa0=\\xa060\\xa0abejas que salen de la colmena.', 'En total, 30\\xa0+\\xa060\\xa0=\\xa090 abejas abandonaron la colmena.']\nnew_fact = infer_new_fact(selected) # 'En total, 90\\xa0abejas abandonaron la colmena: 15\\xa0abejas que ya regresaron = 75\\xa0abejas que regresaron a la colmena en las últimas 6\\xa0horas del día.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas abejas vio Debra regresar a la colmena en las últimas 6\\xa0horas del día?', 'En total, 90\\xa0abejas abandonaron la colmena: 15\\xa0abejas que ya regresaron = 75\\xa0abejas que regresaron a la colmena en las últimas 6\\xa0horas del día.']\nnew_fact = infer_new_fact(selected) # 'The answer is 75'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '75'"}
{"id": "GSM8K_148_7aade7d21e", "context": "", "options": [], "answer": "30", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}, {"antecedents": [4, 5, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 -> int1: The total cost of the tickets is 12+10=22 dollars.; int1 & sent4 -> int2: Brittany's mom gave the cashier 22+8=30 dollars.; int2 & sent4 & sent5 -> int3: The answer is 30;", "textual_logical_units": {"1": "Brittany y su madre van al museo.", "2": "El coste de la entrada es de 12 € para adultos y 10 € para niños.", "3": "La madre de Brittany le da dinero al cajero para 1 entrada para niños y 1 para adultos.", "4": "Si recibió 8 euros de cambio, ¿cuánto dinero, en euros,", "5": "dio al cajero?", "6": "El coste total de las entradas es de 12 + 10 = 22 euros.", "7": "La madre de Brittany dio al cajero 22 + 8 = 30 euros.", "8": "The answer is 30"}, "human_translated": true, "code_input": "####\nfacts = [ 'Brittany y su madre van al museo.',\n  'El coste de la entrada es de 12\\xa0€ para adultos y 10\\xa0€ para niños.',\n  'La madre de Brittany le da dinero al cajero para 1 entrada para niños y 1 para adultos.',\n  'Si recibió 8\\xa0euros de cambio, ¿cuánto dinero, en euros,']\nquestion = 'dio al cajero?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['El coste de la entrada es de 12\\xa0€ para adultos y 10\\xa0€ para niños.']\nnew_fact = infer_new_fact(selected) # 'El coste total de las entradas es de 12\\xa0+\\xa010\\xa0=\\xa022\\xa0euros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si recibió 8\\xa0euros de cambio, ¿cuánto dinero, en euros,', 'El coste total de las entradas es de 12\\xa0+\\xa010\\xa0=\\xa022\\xa0euros.']\nnew_fact = infer_new_fact(selected) # 'La madre de Brittany dio al cajero 22\\xa0+\\xa08\\xa0=\\xa030\\xa0euros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si recibió 8\\xa0euros de cambio, ¿cuánto dinero, en euros,', 'dio al cajero?', 'La madre de Brittany dio al cajero 22\\xa0+\\xa08\\xa0=\\xa030\\xa0euros.']\nnew_fact = infer_new_fact(selected) # 'The answer is 30'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '30'"}
{"id": "GSM8K_149_72eee8020e", "context": "", "options": [], "answer": "16", "reasoning_graph_edges": [{"antecedents": [1, 3], "consequent": 5}, {"antecedents": [1, 2], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 & sent3 -> int1: Dorothy has 12 / 3 = 4 Facebook friends.; sent1 & sent2 -> int2: James has 4 * 4 = 16 Facebook friends.; int2 & sent4 -> int3: The answer is 16;", "textual_logical_units": {"1": "Charlie tiene el triple de amigos en Facebook que Dorothy.", "2": "James tiene cuatro veces más amigos en Facebook que Dorothy.", "3": "Si Charlie tiene 12 amigos en Facebook,", "4": "¿cuántos amigos de Facebook tiene James?", "5": "Dorothy tiene 12 / 3 = 4 amigos en Facebook.", "6": "James tiene 4 * 4 = 16 amigos en Facebook.", "7": "The answer is 16"}, "human_translated": true, "code_input": "####\nfacts = [ 'Charlie tiene el triple de amigos en Facebook que Dorothy.',\n  'James tiene cuatro veces más amigos en Facebook que Dorothy.',\n  'Si Charlie tiene 12\\xa0amigos en Facebook,']\nquestion = '¿cuántos amigos de Facebook tiene James?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Charlie tiene el triple de amigos en Facebook que Dorothy.', 'Si Charlie tiene 12\\xa0amigos en Facebook,']\nnew_fact = infer_new_fact(selected) # 'Dorothy tiene 12\\xa0/\\xa03\\xa0=\\xa04\\xa0amigos en Facebook.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Charlie tiene el triple de amigos en Facebook que Dorothy.', 'James tiene cuatro veces más amigos en Facebook que Dorothy.']\nnew_fact = infer_new_fact(selected) # 'James tiene 4\\xa0*\\xa04\\xa0=\\xa016\\xa0amigos en Facebook.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos amigos de Facebook tiene James?', 'James tiene 4\\xa0*\\xa04\\xa0=\\xa016\\xa0amigos en Facebook.']\nnew_fact = infer_new_fact(selected) # 'The answer is 16'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '16'"}
{"id": "GSM8K_150_f1d3e40732", "context": "", "options": [], "answer": "4", "reasoning_graph_edges": [{"antecedents": [4], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}, {"antecedents": [6], "consequent": 11}, {"antecedents": [7, 11], "consequent": 12}, {"antecedents": [10, 12], "consequent": 13}, {"antecedents": [8, 13], "consequent": 14}], "metadata": [], "linearized_output_en": "sent4 -> int1: Steve has to travel 3 miles * (5280 feet/1 mile) = 15840 feet to get home.; int1 & sent5 -> int2: It will take Steve 15840 feet / (440 feet/minute) = 36 minutes to get home.; sent6 -> int3: Tim has to travel 2 miles * (5280 feet/1 mile) = 10560 feet to get home.; int3 & sent7 -> int4: It will take Tim 10560 feet / (264 feet/minute) = 40 minutes to get home.; int2 & int4 -> int5: Steve will finish the race in 40 minutes - 36 minutes = 4 minutes less time than Tim.; int5 & sent8 -> int6: The answer is 4;", "textual_logical_units": {"1": "Steve y Tim deciden ver quién puede llegar más rápido a casa desde la escuela.", "2": "Steve vive más lejos que Tim,", "3": "por lo que se le permite ir en bicicleta.", "4": "Steve vive a 3 kilómetros de la escuela y", "5": "puede ir en bicicleta a 135 metros por minuto.", "6": "Tim vive a 2 kilómetros de la escuela.", "7": "Si Tim puede ir en monopatín a 80 metros por minuto,", "8": "¿cuánto tiempo esperará el ganador en su casa antes de que el perdedor termine la carrera?", "9": "Steve tiene que recorrer 3 kilómetros * 1000 metros = 3000 metros para llegar a casa.", "10": "Steve tardará 3000 metros / (135 metros/minuto) = 22 minutos en llegar a casa.", "11": "Tim tiene que recorrer 2 kilómetros * 1000 metros = 2000 metros para llegar a casa.", "12": "Tim tardará 2000 metros / 80 metros/minuto = 25 minutos en llegar a casa.", "13": "Steve terminará la carrera en 25 minutos - 22 minutos = 3 minutos menos que Tim.", "14": "The answer is 4"}, "human_translated": true, "code_input": "####\nfacts = [ 'Steve y Tim deciden ver quién puede llegar más rápido a casa desde la escuela.',\n  'Steve vive más lejos que Tim,',\n  'por lo que se le permite ir en bicicleta.',\n  'Steve vive a 3\\xa0kilómetros de la escuela y',\n  'puede ir en bicicleta a 135\\xa0metros por minuto.',\n  'Tim vive a 2\\xa0kilómetros de la escuela.',\n  'Si Tim puede ir en monopatín a 80\\xa0metros por minuto,']\nquestion = '¿cuánto tiempo esperará el ganador en su casa antes de que el perdedor termine la carrera?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Steve vive a 3\\xa0kilómetros de la escuela y']\nnew_fact = infer_new_fact(selected) # 'Steve tiene que recorrer 3\\xa0kilómetros\\xa0*\\xa01000\\xa0metros = 3000\\xa0metros para llegar a casa.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['puede ir en bicicleta a 135\\xa0metros por minuto.', 'Steve tiene que recorrer 3\\xa0kilómetros\\xa0*\\xa01000\\xa0metros = 3000\\xa0metros para llegar a casa.']\nnew_fact = infer_new_fact(selected) # 'Steve tardará 3000\\xa0metros\\xa0/\\xa0(135\\xa0metros/minuto) = 22\\xa0minutos en llegar a casa.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tim vive a 2\\xa0kilómetros de la escuela.']\nnew_fact = infer_new_fact(selected) # 'Tim tiene que recorrer 2\\xa0kilómetros\\xa0*\\xa01000\\xa0metros = 2000\\xa0metros para llegar a casa.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Tim puede ir en monopatín a 80\\xa0metros por minuto,', 'Tim tiene que recorrer 2\\xa0kilómetros\\xa0*\\xa01000\\xa0metros = 2000\\xa0metros para llegar a casa.']\nnew_fact = infer_new_fact(selected) # 'Tim tardará 2000\\xa0metros /\\xa080\\xa0metros/minuto = 25\\xa0minutos en llegar a casa.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Steve tardará 3000\\xa0metros\\xa0/\\xa0(135\\xa0metros/minuto) = 22\\xa0minutos en llegar a casa.', 'Tim tardará 2000\\xa0metros /\\xa080\\xa0metros/minuto = 25\\xa0minutos en llegar a casa.']\nnew_fact = infer_new_fact(selected) # 'Steve terminará la carrera en 25\\xa0minutos\\xa0-\\xa022\\xa0minutos = 3\\xa0minutos menos que Tim.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuánto tiempo esperará el ganador en su casa antes de que el perdedor termine la carrera?', 'Steve terminará la carrera en 25\\xa0minutos\\xa0-\\xa022\\xa0minutos = 3\\xa0minutos menos que Tim.']\nnew_fact = infer_new_fact(selected) # 'The answer is 4'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '4'"}
{"id": "GSM8K_151_f3b92f8ee7", "context": "", "options": [], "answer": "5", "reasoning_graph_edges": [{"antecedents": [4], "consequent": 8}, {"antecedents": [5], "consequent": 9}, {"antecedents": [6], "consequent": 10}, {"antecedents": [8, 9, 10], "consequent": 11}, {"antecedents": [3, 11], "consequent": 12}, {"antecedents": [7, 12], "consequent": 13}], "metadata": [], "linearized_output_en": "sent4 -> int1: There were 10 bike tires to fill up because 2 times 5 equals 10.; sent5 -> int2: There were 9 tricycle tires to fill up because 3 times 3 equals 9.; sent6 -> int3: There was one unicycle tire to fill up because 1 times 1 equals 1.; int1 & int2 & int3 -> int4: There were 20 total tires to fill up because 10 plus 9 plus 1 equals 20.; int4 & sent3 -> int5: She made $5 because 20 times .25 equals 5.; int5 & sent7 -> int6: The answer is 5;", "textual_logical_units": {"1": "Shawnda decide que a los niños de su vecindario les vendría bien un servicio de inflado de ruedas de bicicleta.", "2": "Decide que la mejor forma de cargar es con el neumático.", "3": "Inflar cada neumático cuesta 25 céntimos.", "4": "El primer día, 5 personas en bicicleta se acercaron para inflar los dos neumáticos.", "5": "3 personas vinieron a inflar todos los neumáticos de sus triciclos.", "6": "Finalmente, una persona llegó en un monociclo.", "7": "¿Cuántos euros ganó ese día?", "8": "Había que inflar 10 neumáticos de bicicleta porque 2 veces 5 es igual a 10.", "9": "Había que inflar 9 neumáticos de triciclo porque 3 veces 3 es igual a 9.", "10": "Había que inflar un neumático de monociclo porque 1 vez 1 es igual a 1.", "11": "Había que inflar un total de 20 neumáticos porque 10 más 9 más 1 son 20.", "12": "Ganó 5 € porque 20 veces 0,25 es igual a 5.", "13": "The answer is 5"}, "human_translated": true, "code_input": "####\nfacts = [ 'Shawnda decide que a los niños de su vecindario les vendría bien un servicio de inflado de ruedas de bicicleta.',\n  'Decide que la mejor forma de cargar es con el neumático.',\n  'Inflar cada neumático cuesta 25\\xa0céntimos.',\n  'El primer día, 5\\xa0personas en bicicleta se acercaron para inflar los dos neumáticos.',\n  '3\\xa0personas vinieron a inflar todos los neumáticos de sus triciclos.',\n  'Finalmente, una persona llegó en un monociclo.']\nquestion = '¿Cuántos euros ganó ese día?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['El primer día, 5\\xa0personas en bicicleta se acercaron para inflar los dos neumáticos.']\nnew_fact = infer_new_fact(selected) # 'Había que inflar 10\\xa0neumáticos de bicicleta porque 2\\xa0veces\\xa05 es igual a\\xa010.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['3\\xa0personas vinieron a inflar todos los neumáticos de sus triciclos.']\nnew_fact = infer_new_fact(selected) # 'Había que inflar 9\\xa0neumáticos de triciclo porque 3\\xa0veces\\xa03 es igual a\\xa09.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Finalmente, una persona llegó en un monociclo.']\nnew_fact = infer_new_fact(selected) # 'Había que inflar un neumático de monociclo porque 1\\xa0vez\\xa01 es igual a\\xa01.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Había que inflar 10\\xa0neumáticos de bicicleta porque 2\\xa0veces\\xa05 es igual a\\xa010.', 'Había que inflar 9\\xa0neumáticos de triciclo porque 3\\xa0veces\\xa03 es igual a\\xa09.', 'Había que inflar un neumático de monociclo porque 1\\xa0vez\\xa01 es igual a\\xa01.']\nnew_fact = infer_new_fact(selected) # 'Había que inflar un total de 20\\xa0neumáticos porque 10\\xa0más\\xa09 más\\xa01 son\\xa020.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Inflar cada neumático cuesta 25\\xa0céntimos.', 'Había que inflar un total de 20\\xa0neumáticos porque 10\\xa0más\\xa09 más\\xa01 son\\xa020.']\nnew_fact = infer_new_fact(selected) # 'Ganó 5\\xa0€ porque 20\\xa0veces 0,25 es igual a 5.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos euros ganó ese día?', 'Ganó 5\\xa0€ porque 20\\xa0veces 0,25 es igual a 5.']\nnew_fact = infer_new_fact(selected) # 'The answer is 5'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '5'"}
{"id": "GSM8K_152_98659db184", "context": "", "options": [], "answer": "4", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: A pack of cookies costs 6 x $0.10 = $0.60.; int1 & sent1 -> int2: Thus, ten packs of cookies cost 10 x $0.6 = $6.; int2 & sent4 -> int3: Therefore, Carl will receive a $10 - $6 = $4 change.; int3 & sent4 -> int4: The answer is 4;", "textual_logical_units": {"1": "Carl compra diez paquetes de galletas.", "2": "Cada paquete de galletas contiene seis galletas.", "3": "Cada galleta cuesta 0,10 €.", "4": "¿Cuánto cambio recibe Carl si paga con un billete de 10 €?", "5": "Un paquete de galletas cuesta 6 x 0,10 € = 0,60 €.", "6": "Por lo tanto, diez paquetes de galletas cuestan 10 x 0,6 € = 6 €.", "7": "Por lo tanto, Carl recibirá un cambio de 10 € - 6 € = 4 €.", "8": "The answer is 4"}, "human_translated": true, "code_input": "####\nfacts = ['Carl compra diez paquetes de galletas.', 'Cada paquete de galletas contiene seis galletas.', 'Cada galleta cuesta 0,10\\xa0€.']\nquestion = '¿Cuánto cambio recibe Carl si paga con un billete de 10\\xa0€?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Cada paquete de galletas contiene seis galletas.', 'Cada galleta cuesta 0,10\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Un paquete de galletas cuesta 6\\xa0x\\xa00,10\\xa0€\\xa0=\\xa00,60\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Carl compra diez paquetes de galletas.', 'Un paquete de galletas cuesta 6\\xa0x\\xa00,10\\xa0€\\xa0=\\xa00,60\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, diez paquetes de galletas cuestan 10\\xa0x\\xa00,6\\xa0€\\xa0=\\xa06\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto cambio recibe Carl si paga con un billete de 10\\xa0€?', 'Por lo tanto, diez paquetes de galletas cuestan 10\\xa0x\\xa00,6\\xa0€\\xa0=\\xa06\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, Carl recibirá un cambio de 10\\xa0€\\xa0-\\xa06\\xa0€\\xa0=\\xa04\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto cambio recibe Carl si paga con un billete de 10\\xa0€?', 'Por lo tanto, Carl recibirá un cambio de 10\\xa0€\\xa0-\\xa06\\xa0€\\xa0=\\xa04\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'The answer is 4'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '4'"}
{"id": "GSM8K_153_9c58c3ed07", "context": "", "options": [], "answer": "48", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 9}, {"antecedents": [4, 5], "consequent": 10}, {"antecedents": [7], "consequent": 11}, {"antecedents": [6, 11], "consequent": 12}, {"antecedents": [9, 10, 11, 12], "consequent": 13}, {"antecedents": [8, 13], "consequent": 14}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Dave ate 14 french fries, so the seagull ate 14 * 1/2 = 14 / 2 = 7 fries.; sent4 & sent5 -> int2: The 3 pigeons ate 3 each, so they ate 3 * 3 = 9 fries.; sent7 -> int3: The ants took one french fry, so there were 5 + 1 = 6 after the racoon took some.; int3 & sent6 -> int4: The raccoon left 1/3 behind, so there were 6 * 3 = 18 fries before the raccoon took any.; int1 & int2 & int3 & int4 -> int5: Thus, the pack had 14 + 7 + 9 + 18 = 48 fries in it when Dave bought it.; int5 & sent8 -> int6: The answer is 48;", "textual_logical_units": {"1": "Dave compró un paquete grande de patatas fritas y", "2": "comió catorce antes de que una gaviota hambrienta le robara el paquete de las manos.", "3": "Cuando la gaviota aterrizó, se tragó la mitad de las patatas fritas de las que se comió Dave.", "4": "Luego, tres palomas lo alejaron de la comida", "5": "y cada paloma se comió tres patatas fritas.", "6": "Más tarde, un mapache robó dos tercios de las patatas fritas restantes.", "7": "Las hormigas se llevaron una última patata frita, dejando cinco atrás.", "8": "¿Cuántas patatas fritas había en el paquete cuando Dave lo compró?", "9": "Dave se comió 14 patatas fritas, por lo que la gaviota se comió 14 * 1 / 2 = 14 / 2 = 7 patatas fritas.", "10": "Las 3 palomas se comieron 3 cada una, por lo que comieron 3 x 3 = 9 patatas fritas.", "11": "Las hormigas se llevaron una patata frita, por lo que quedaron 5 + 1 = 6 después de que el mapache se llevara algunas.", "12": "El mapache dejó 1/3, por lo que quedaron 6 x 3 = 18 patatas fritas antes de que el mapache se llevara algunas.", "13": "Por lo tanto, el paquete tenía 14 + 7 + 9 + 18 = 48 patatas fritas cuando Dave lo compró.", "14": "The answer is 48"}, "human_translated": true, "code_input": "####\nfacts = [ 'Dave compró un paquete grande de patatas fritas y',\n  'comió catorce antes de que una gaviota hambrienta le robara el paquete de las manos.',\n  'Cuando la gaviota aterrizó, se tragó la mitad de las patatas fritas de las que se comió Dave.',\n  'Luego, tres palomas lo alejaron de la comida',\n  'y cada paloma se comió tres patatas fritas.',\n  'Más tarde, un mapache robó dos tercios de las patatas fritas restantes.',\n  'Las hormigas se llevaron una última patata frita, dejando cinco atrás.']\nquestion = '¿Cuántas patatas fritas había en el paquete cuando Dave lo compró?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['comió catorce antes de que una gaviota hambrienta le robara el paquete de las manos.', 'Cuando la gaviota aterrizó, se tragó la mitad de las patatas fritas de las que se comió Dave.']\nnew_fact = infer_new_fact(selected) # 'Dave se comió 14\\xa0patatas fritas, por lo que la gaviota se comió 14\\xa0*\\xa01\\xa0/\\xa02\\xa0=\\xa014\\xa0/\\xa02\\xa0=\\xa07\\xa0patatas fritas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Luego, tres palomas lo alejaron de la comida', 'y cada paloma se comió tres patatas fritas.']\nnew_fact = infer_new_fact(selected) # 'Las 3\\xa0palomas se comieron 3 cada una, por lo que comieron 3\\xa0x\\xa03\\xa0=\\xa09\\xa0patatas fritas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Las hormigas se llevaron una última patata frita, dejando cinco atrás.']\nnew_fact = infer_new_fact(selected) # 'Las hormigas se llevaron una patata frita, por lo que quedaron 5\\xa0+\\xa01\\xa0=\\xa06 después de que el mapache se llevara algunas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Más tarde, un mapache robó dos tercios de las patatas fritas restantes.', 'Las hormigas se llevaron una patata frita, por lo que quedaron 5\\xa0+\\xa01\\xa0=\\xa06 después de que el mapache se llevara algunas.']\nnew_fact = infer_new_fact(selected) # 'El mapache dejó 1/3, por lo que quedaron 6\\xa0x\\xa03\\xa0=\\xa018\\xa0patatas fritas antes de que el mapache se llevara algunas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Dave se comió 14\\xa0patatas fritas, por lo que la gaviota se comió 14\\xa0*\\xa01\\xa0/\\xa02\\xa0=\\xa014\\xa0/\\xa02\\xa0=\\xa07\\xa0patatas fritas.', 'Las 3\\xa0palomas se comieron 3 cada una, por lo que comieron 3\\xa0x\\xa03\\xa0=\\xa09\\xa0patatas fritas.', 'Las hormigas se llevaron una patata frita, por lo que quedaron 5\\xa0+\\xa01\\xa0=\\xa06 después de que el mapache se llevara algunas.', 'El mapache dejó 1/3, por lo que quedaron 6\\xa0x\\xa03\\xa0=\\xa018\\xa0patatas fritas antes de que el mapache se llevara algunas.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, el paquete tenía 14\\xa0+\\xa07\\xa0+\\xa09\\xa0+\\xa018\\xa0=\\xa048\\xa0patatas fritas cuando Dave lo compró.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas patatas fritas había en el paquete cuando Dave lo compró?', 'Por lo tanto, el paquete tenía 14\\xa0+\\xa07\\xa0+\\xa09\\xa0+\\xa018\\xa0=\\xa048\\xa0patatas fritas cuando Dave lo compró.']\nnew_fact = infer_new_fact(selected) # 'The answer is 48'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '48'"}
{"id": "GSM8K_154_9c702ca983", "context": "", "options": [], "answer": "272", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 6}, {"antecedents": [6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}, {"antecedents": [3], "consequent": 9}, {"antecedents": [9], "consequent": 10}, {"antecedents": [9, 10], "consequent": 11}, {"antecedents": [8, 11], "consequent": 12}, {"antecedents": [5, 12], "consequent": 13}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Kimo spends 3 x 1 = 3 hours in class on any given Monday, Wednesday or Friday.; int1 -> int2: Each week, he spends 3 x 3 = 9 hours in class on Monday, Wednesday, and Friday.; int2 & sent4 -> int3: In one semester, he spends 9 x 16 = 144 hours in class for Monday, Wednesday, and Friday.; sent3 -> int4: He spends 2 x 2 = 4 hours in class on any given Tuesday or Thursday.; int4 -> int5: Each week, he spends 4 x 2 = 8 hours in class on Tuesday and Thursday.; int4 & int5 -> int6: In one semester, he spends 8 x 16 = 128 hours in class on Tuesday and Thursday.; int3 & int6 -> int7: In total for one semester, Kimo spends 144 + 128 = 272 hours attending classes.; int7 & sent5 -> int8: The answer is 272;", "textual_logical_units": {"1": "Los lunes, miércoles y viernes,", "2": "el estudiante universitario Kimo tiene tres clases de 1 hora cada día.", "3": "Los martes y jueves, tiene dos clases de 2 horas cada día.", "4": "En un semestre, hay 16 semanas de clases.", "5": "En un semestre, ¿cuántas horas asiste Kimo a clases?", "6": "Kimo pasa 3 x 1 = 3 horas en clase un lunes, miércoles o viernes.", "7": "Cada semana, pasa 3 x 3 = 9 horas en clase los lunes, miércoles y viernes.", "8": "En un semestre, pasa 9 x 16 = 144 horas en clase los lunes, miércoles y viernes.", "9": "Pasa 2 x 2 = 4 horas en clase un martes o jueves cualquiera.", "10": "Cada semana, pasa 4 x 2 = 8 horas en clase los martes y jueves.", "11": "En un semestre, pasa 8 x 16 = 128 horas en clase los martes y jueves.", "12": "En total, durante un semestre, Kimo asiste 144 + 128 = 272 horas a clases.", "13": "The answer is 272"}, "human_translated": true, "code_input": "####\nfacts = [ 'Los lunes, miércoles y viernes,',\n  'el estudiante universitario Kimo tiene tres clases de 1\\xa0hora cada día.',\n  'Los martes y jueves, tiene dos clases de 2\\xa0horas cada día.',\n  'En un semestre, hay 16\\xa0semanas de clases.']\nquestion = 'En un semestre, ¿cuántas horas asiste Kimo a clases?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Los lunes, miércoles y viernes,', 'el estudiante universitario Kimo tiene tres clases de 1\\xa0hora cada día.']\nnew_fact = infer_new_fact(selected) # 'Kimo pasa 3\\xa0x\\xa01\\xa0=\\xa03\\xa0horas en clase un lunes, miércoles o viernes.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Kimo pasa 3\\xa0x\\xa01\\xa0=\\xa03\\xa0horas en clase un lunes, miércoles o viernes.']\nnew_fact = infer_new_fact(selected) # 'Cada semana, pasa 3\\xa0x\\xa03\\xa0=\\xa09\\xa0horas en clase los lunes, miércoles y viernes.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En un semestre, hay 16\\xa0semanas de clases.', 'Cada semana, pasa 3\\xa0x\\xa03\\xa0=\\xa09\\xa0horas en clase los lunes, miércoles y viernes.']\nnew_fact = infer_new_fact(selected) # 'En un semestre, pasa 9\\xa0x\\xa016\\xa0=\\xa0144\\xa0horas en clase los lunes, miércoles y viernes.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Los martes y jueves, tiene dos clases de 2\\xa0horas cada día.']\nnew_fact = infer_new_fact(selected) # 'Pasa 2\\xa0x\\xa02\\xa0=\\xa04\\xa0horas en clase un martes o jueves cualquiera.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Pasa 2\\xa0x\\xa02\\xa0=\\xa04\\xa0horas en clase un martes o jueves cualquiera.']\nnew_fact = infer_new_fact(selected) # 'Cada semana, pasa 4\\xa0x\\xa02\\xa0=\\xa08\\xa0horas en clase los martes y jueves.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Pasa 2\\xa0x\\xa02\\xa0=\\xa04\\xa0horas en clase un martes o jueves cualquiera.', 'Cada semana, pasa 4\\xa0x\\xa02\\xa0=\\xa08\\xa0horas en clase los martes y jueves.']\nnew_fact = infer_new_fact(selected) # 'En un semestre, pasa 8\\xa0x\\xa016\\xa0=\\xa0128\\xa0horas en clase los martes y jueves.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En un semestre, pasa 9\\xa0x\\xa016\\xa0=\\xa0144\\xa0horas en clase los lunes, miércoles y viernes.', 'En un semestre, pasa 8\\xa0x\\xa016\\xa0=\\xa0128\\xa0horas en clase los martes y jueves.']\nnew_fact = infer_new_fact(selected) # 'En total, durante un semestre, Kimo asiste 144\\xa0+\\xa0128\\xa0=\\xa0272\\xa0horas a clases.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En un semestre, ¿cuántas horas asiste Kimo a clases?', 'En total, durante un semestre, Kimo asiste 144\\xa0+\\xa0128\\xa0=\\xa0272\\xa0horas a clases.']\nnew_fact = infer_new_fact(selected) # 'The answer is 272'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '272'"}
{"id": "GSM8K_155_027f6a23d5", "context": "", "options": [], "answer": "280", "reasoning_graph_edges": [{"antecedents": [1, 3], "consequent": 8}, {"antecedents": [1, 4], "consequent": 9}, {"antecedents": [8, 9], "consequent": 10}, {"antecedents": [10], "consequent": 11}, {"antecedents": [2, 5], "consequent": 12}, {"antecedents": [11, 12], "consequent": 13}, {"antecedents": [7, 13], "consequent": 14}], "metadata": [], "linearized_output_en": "sent1 & sent3 -> int1: First find the total length of the rolls: 300 rolls * 4 inches/roll = 1200 inches; sent1 & sent4 -> int2: Then find the total length of the croissants: 120 rolls * 6 inches/roll = 720 inches; int1 & int2 -> int3: Then add the length of the rolls and croissants to find the total length in inches: 1200 inches + 720 inches = 1920 inches; int3 -> int4: Then divide the total length by 12 inches per foot to find the length in feet: 1920 inches / 12 inches/foot = 160 feet; sent2 & sent5 -> int5: Then find the total length of the baguettes: 60 baguettes * 2 feet/baguette = 120 feet; int4 & int5 -> int6: Then add the length of the other baked goods in feet to find the total length: 120 feet + 160 feet = 280 feet; int6 & sent7 -> int7: The answer is 280;", "textual_logical_units": {"1": "Bill hornea 300 panecillos, 120 cruasanes de chocolate", "2": "y 60 baguetes todos los días.", "3": "Cada panecillo mide 10 centímetros de largo,", "4": "cada cruasán mide 15 centímetros de largo,", "5": "y cada baguete mide 0,6 metros de largo.", "6": "Si Bill pone todos los productos horneados de punta a punta,", "7": "¿cuál será su longitud en metros?", "8": "Primero, encuentra la longitud total de los panecillos: 300 panecillos * 10 centímetros/panecillo = 3000 centímetros", "9": "Luego, encuentra la longitud total de los cruasanes: 120 cruasanes x 15 centímetros/cruasán = 1800 centímetros", "10": "Luego, suma la longitud de los panecillos y los cruasanes para encontrar la longitud total en centímetros: 3000 centímetros + 1800 centímetros = 4800 centímetros", "11": "Luego, divide la longitud total entre 100 centímetros por metro para encontrar la longitud en metros: 4800 centímetros / 100 centímetros/metro = 48 metros", "12": "A continuación, calcula la longitud total de las baguetes: 60 baguetes * 0,6 metros/baguete = 36 metros", "13": "Luego, suma la longitud de los demás productos horneados en metros para calcular la longitud total: 48 metros + 36 metros = 84 metros", "14": "The answer is 280"}, "human_translated": true, "code_input": "####\nfacts = [ 'Bill hornea 300\\xa0panecillos, 120\\xa0cruasanes de chocolate',\n  'y 60\\xa0baguetes todos los días.',\n  'Cada panecillo mide 10\\xa0centímetros de largo,',\n  'cada cruasán mide 15\\xa0centímetros de largo,',\n  'y cada baguete mide 0,6\\xa0metros de largo.',\n  'Si Bill pone todos los productos horneados de punta a punta,']\nquestion = '¿cuál será su longitud en metros?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Bill hornea 300\\xa0panecillos, 120\\xa0cruasanes de chocolate', 'Cada panecillo mide 10\\xa0centímetros de largo,']\nnew_fact = infer_new_fact(selected) # 'Primero, encuentra la longitud total de los panecillos: 300\\xa0panecillos\\xa0*\\xa010\\xa0centímetros/panecillo\\xa0=\\xa03000\\xa0centímetros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Bill hornea 300\\xa0panecillos, 120\\xa0cruasanes de chocolate', 'cada cruasán mide 15\\xa0centímetros de largo,']\nnew_fact = infer_new_fact(selected) # 'Luego, encuentra la longitud total de los cruasanes: 120\\xa0cruasanes\\xa0x\\xa015\\xa0centímetros/cruasán\\xa0=\\xa01800\\xa0centímetros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Primero, encuentra la longitud total de los panecillos: 300\\xa0panecillos\\xa0*\\xa010\\xa0centímetros/panecillo\\xa0=\\xa03000\\xa0centímetros', 'Luego, encuentra la longitud total de los cruasanes: 120\\xa0cruasanes\\xa0x\\xa015\\xa0centímetros/cruasán\\xa0=\\xa01800\\xa0centímetros']\nnew_fact = infer_new_fact(selected) # 'Luego, suma la longitud de los panecillos y los cruasanes para encontrar la longitud total en centímetros: 3000\\xa0centímetros\\xa0+\\xa01800\\xa0centímetros\\xa0=\\xa04800\\xa0centímetros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Luego, suma la longitud de los panecillos y los cruasanes para encontrar la longitud total en centímetros: 3000\\xa0centímetros\\xa0+\\xa01800\\xa0centímetros\\xa0=\\xa04800\\xa0centímetros']\nnew_fact = infer_new_fact(selected) # 'Luego, divide la longitud total entre 100\\xa0centímetros por metro para encontrar la longitud en metros: 4800\\xa0centímetros\\xa0/\\xa0100\\xa0centímetros/metro\\xa0=\\xa048\\xa0metros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y 60\\xa0baguetes todos los días.', 'y cada baguete mide 0,6\\xa0metros de largo.']\nnew_fact = infer_new_fact(selected) # 'A continuación, calcula la longitud total de las baguetes: 60\\xa0baguetes\\xa0*\\xa00,6\\xa0metros/baguete\\xa0=\\xa036\\xa0metros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Luego, divide la longitud total entre 100\\xa0centímetros por metro para encontrar la longitud en metros: 4800\\xa0centímetros\\xa0/\\xa0100\\xa0centímetros/metro\\xa0=\\xa048\\xa0metros', 'A continuación, calcula la longitud total de las baguetes: 60\\xa0baguetes\\xa0*\\xa00,6\\xa0metros/baguete\\xa0=\\xa036\\xa0metros']\nnew_fact = infer_new_fact(selected) # 'Luego, suma la longitud de los demás productos horneados en metros para calcular la longitud total: 48\\xa0metros\\xa0+\\xa036\\xa0metros\\xa0=\\xa084\\xa0metros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuál será su longitud en metros?', 'Luego, suma la longitud de los demás productos horneados en metros para calcular la longitud total: 48\\xa0metros\\xa0+\\xa036\\xa0metros\\xa0=\\xa084\\xa0metros']\nnew_fact = infer_new_fact(selected) # 'The answer is 280'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '280'"}
{"id": "GSM8K_156_540db09172", "context": "", "options": [], "answer": "1400", "reasoning_graph_edges": [{"antecedents": [3, 4, 5], "consequent": 7}, {"antecedents": [2, 7], "consequent": 8}, {"antecedents": [6, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent3 & sent4 & sent5 -> int1: The total number of bananas the prime apes need every month is 200+400+100= 700.; int1 & sent2 -> int2: Therefore in 2 months, the total number of bananas they need is 700x2= 1400.; int2 & sent6 -> int3: The answer is 1400;", "textual_logical_units": {"1": "El cuidador del zoológico da de comer a todos los simios del zoo.", "2": "Pide todos los plátanos a una granja local cada 2 meses.", "3": "Si los monos necesitan 200 plátanos,", "4": "los gorilas necesitan 400 plátanos", "5": "y los babuinos necesitan 100 plátanos al mes,", "6": "¿cuántos plátanos tiene que pedir para que duren 2 meses?", "7": "La cantidad total de plátanos que necesitan los simios cada mes es de 200 + 400 + 100 = 700.", "8": "Por lo tanto, en 2 meses, la cantidad total de plátanos que necesitan es de 700 x 2 = 1400.", "9": "The answer is 1400"}, "human_translated": true, "code_input": "####\nfacts = [ 'El cuidador del zoológico da de comer a todos los simios del zoo.',\n  'Pide todos los plátanos a una granja local cada 2\\xa0meses.',\n  'Si los monos necesitan 200\\xa0plátanos,',\n  'los gorilas necesitan 400\\xa0plátanos',\n  'y los babuinos necesitan 100\\xa0plátanos al mes,']\nquestion = '¿cuántos plátanos tiene que pedir para que duren 2\\xa0meses?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Si los monos necesitan 200\\xa0plátanos,', 'los gorilas necesitan 400\\xa0plátanos', 'y los babuinos necesitan 100\\xa0plátanos al mes,']\nnew_fact = infer_new_fact(selected) # 'La cantidad total de plátanos que necesitan los simios cada mes es de 200\\xa0+\\xa0400\\xa0+\\xa0100\\xa0=\\xa0700.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Pide todos los plátanos a una granja local cada 2\\xa0meses.', 'La cantidad total de plátanos que necesitan los simios cada mes es de 200\\xa0+\\xa0400\\xa0+\\xa0100\\xa0=\\xa0700.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, en 2\\xa0meses, la cantidad total de plátanos que necesitan es de 700\\xa0x\\xa02\\xa0=\\xa01400.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos plátanos tiene que pedir para que duren 2\\xa0meses?', 'Por lo tanto, en 2\\xa0meses, la cantidad total de plátanos que necesitan es de 700\\xa0x\\xa02\\xa0=\\xa01400.']\nnew_fact = infer_new_fact(selected) # 'The answer is 1400'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '1400'"}
{"id": "GSM8K_157_7e2d012ec1", "context": "", "options": [], "answer": "80", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 9}, {"antecedents": [3, 9], "consequent": 10}, {"antecedents": [1, 2, 4], "consequent": 11}, {"antecedents": [4, 6], "consequent": 12}, {"antecedents": [7, 12], "consequent": 13}, {"antecedents": [11, 13], "consequent": 14}, {"antecedents": [10, 14], "consequent": 15}, {"antecedents": [9, 10, 11, 12, 13, 14, 15], "consequent": 16}, {"antecedents": [8, 16], "consequent": 17}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Blake runs 200 yards for each back and forth because 100 x 2 = 200; int1 & sent3 -> int2: He runs 3000 yards in total because 200 x 15 = 3000; sent1 & sent2 & sent4 -> int3: Kelly runs 200 yards at first because 100 x 2 = 200; sent4 & sent6 -> int4: She runs 80 yards each time she does a back and forth to the 40-yard line because 40 x 2 = 80; int4 & sent7 -> int5: She runs 2720 from these back and forth because 34 x 80 = 2720; int3 & int5 -> int6: She runs 2920 in total because 2720 + 200 = 2920; int2 & int6 -> int7: Blake won because 3000 > 2920; int1 & int2 & int3 & int4 & int5 & int6 & int7 -> int8: The winner ran 80 yards more than the loser because 3000 - 2920 = 80; int8 & sent8 -> int9: The answer is 80;", "textual_logical_units": {"1": "Blake y Kelly están haciendo un concurso para ver quién puede correr más en 15 minutos.", "2": "Deciden hacerlo en un campo de fútbol de 100 metros de largo.", "3": "Blake corre de un lado a otro 15 veces.", "4": "Kelly corre de un lado a otro una vez, y luego", "5": "decide que no quiere correr al lado de Blake,", "6": "así que comienza a correr 40 metros y volver.", "7": "Lo hace 34 veces.", "8": "¿Cuántos metros más que el perdedor correrá el ganador?", "9": "Blake corre 200 metro por cada ida y vuelta porque 100 x 2 = 200", "10": "Corre 3000 metros en total porque 200 x 15 = 3000", "11": "Kelly corre 200 metros al principio porque 100 x 2 = 200", "12": "Corre 80 metros cada vez que va y viene hasta los 40 metros porque 40 x 2 = 80", "13": "Corre 2720 de estas de ida y vuelta porque 34 x 80 = 2720", "14": "Corre 2920 en total porque 2720 + 200 = 2920", "15": "Blake ganó porque 3000 > 2920", "16": "El ganador corrió 80 metros más que el perdedor porque 3000 - 2920 = 80", "17": "The answer is 80"}, "human_translated": true, "code_input": "####\nfacts = [ 'Blake y Kelly están haciendo un concurso para ver quién puede correr más en 15\\xa0minutos.',\n  'Deciden hacerlo en un campo de fútbol de 100\\xa0metros de largo.',\n  'Blake corre de un lado a otro 15\\xa0veces.',\n  'Kelly corre de un lado a otro una vez, y luego',\n  'decide que no quiere correr al lado de Blake,',\n  'así que comienza a correr 40\\xa0metros y volver.',\n  'Lo hace 34\\xa0veces.']\nquestion = '¿Cuántos metros más que el perdedor correrá el ganador?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Deciden hacerlo en un campo de fútbol de 100\\xa0metros de largo.', 'Blake corre de un lado a otro 15\\xa0veces.']\nnew_fact = infer_new_fact(selected) # 'Blake corre 200\\xa0metro por cada ida y vuelta porque 100\\xa0x\\xa02\\xa0=\\xa0200'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Blake corre de un lado a otro 15\\xa0veces.', 'Blake corre 200\\xa0metro por cada ida y vuelta porque 100\\xa0x\\xa02\\xa0=\\xa0200']\nnew_fact = infer_new_fact(selected) # 'Corre 3000\\xa0metros en total porque 200\\xa0x\\xa015\\xa0=\\xa03000'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Blake y Kelly están haciendo un concurso para ver quién puede correr más en 15\\xa0minutos.', 'Deciden hacerlo en un campo de fútbol de 100\\xa0metros de largo.', 'Kelly corre de un lado a otro una vez, y luego']\nnew_fact = infer_new_fact(selected) # 'Kelly corre 200\\xa0metros al principio porque 100\\xa0x\\xa02\\xa0=\\xa0200'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Kelly corre de un lado a otro una vez, y luego', 'así que comienza a correr 40\\xa0metros y volver.']\nnew_fact = infer_new_fact(selected) # 'Corre 80\\xa0metros cada vez que va y viene hasta los 40\\xa0metros porque 40\\xa0x\\xa02\\xa0=\\xa080'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Lo hace 34\\xa0veces.', 'Corre 80\\xa0metros cada vez que va y viene hasta los 40\\xa0metros porque 40\\xa0x\\xa02\\xa0=\\xa080']\nnew_fact = infer_new_fact(selected) # 'Corre 2720 de estas de ida y vuelta porque 34\\xa0x\\xa080\\xa0=\\xa02720'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Kelly corre 200\\xa0metros al principio porque 100\\xa0x\\xa02\\xa0=\\xa0200', 'Corre 2720 de estas de ida y vuelta porque 34\\xa0x\\xa080\\xa0=\\xa02720']\nnew_fact = infer_new_fact(selected) # 'Corre 2920 en total porque 2720\\xa0+\\xa0200\\xa0=\\xa02920'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Corre 3000\\xa0metros en total porque 200\\xa0x\\xa015\\xa0=\\xa03000', 'Corre 2920 en total porque 2720\\xa0+\\xa0200\\xa0=\\xa02920']\nnew_fact = infer_new_fact(selected) # 'Blake ganó porque 3000\\xa0>\\xa02920'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Blake corre 200\\xa0metro por cada ida y vuelta porque 100\\xa0x\\xa02\\xa0=\\xa0200', 'Corre 3000\\xa0metros en total porque 200\\xa0x\\xa015\\xa0=\\xa03000', 'Kelly corre 200\\xa0metros al principio porque 100\\xa0x\\xa02\\xa0=\\xa0200', 'Corre 80\\xa0metros cada vez que va y viene hasta los 40\\xa0metros porque 40\\xa0x\\xa02\\xa0=\\xa080', 'Corre 2720 de estas de ida y vuelta porque 34\\xa0x\\xa080\\xa0=\\xa02720', 'Corre 2920 en total porque 2720\\xa0+\\xa0200\\xa0=\\xa02920', 'Blake ganó porque 3000\\xa0>\\xa02920']\nnew_fact = infer_new_fact(selected) # 'El ganador corrió 80\\xa0metros más que el perdedor porque 3000\\xa0-\\xa02920\\xa0=\\xa080'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos metros más que el perdedor correrá el ganador?', 'El ganador corrió 80\\xa0metros más que el perdedor porque 3000\\xa0-\\xa02920\\xa0=\\xa080']\nnew_fact = infer_new_fact(selected) # 'The answer is 80'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '80'"}
{"id": "GSM8K_158_6b10c2a22f", "context": "", "options": [], "answer": "34", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 6}, {"antecedents": [3], "consequent": 7}, {"antecedents": [6, 7], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent2 -> int1: Raphael spent 4 x $1.5 = $6 for the pens.; sent3 -> int2: He also spent 2 x $4 = $8 for the notebooks.; int1 & int2 -> int3: Therefore, Raphael spent a total of $6 + $8 + $20 = $34 for the school supplies.; int3 & sent5 -> int4: The answer is 34;", "textual_logical_units": {"1": "Raphael fue a comprar material escolar.", "2": "Compró 4 bolígrafos que cuestan 1,5 € cada uno,", "3": "2 cuadernos que cuestan 4 € cada uno,", "4": "y un paquete de hojas que cuesta 20 €.", "5": "¿Cuánto gastó Raphael en todo?", "6": "Raphael gastó 4 x 1,5 € = 6 € en los bolígrafos.", "7": "También gastó 2 x 4 € = 8 € en los cuadernos.", "8": "Por lo tanto, Raphael gastó un total de 6 € + 8 € + 20 € = 34 € en material escolar.", "9": "The answer is 34"}, "human_translated": true, "code_input": "####\nfacts = [ 'Raphael fue a comprar material escolar.',\n  'Compró 4\\xa0bolígrafos que cuestan 1,5\\xa0€ cada uno,',\n  '2\\xa0cuadernos que cuestan 4\\xa0€ cada uno,',\n  'y un paquete de hojas que cuesta 20\\xa0€.']\nquestion = '¿Cuánto gastó Raphael en todo?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Compró 4\\xa0bolígrafos que cuestan 1,5\\xa0€ cada uno,']\nnew_fact = infer_new_fact(selected) # 'Raphael gastó 4\\xa0x\\xa01,5\\xa0€\\xa0=\\xa06\\xa0€ en los bolígrafos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['2\\xa0cuadernos que cuestan 4\\xa0€ cada uno,']\nnew_fact = infer_new_fact(selected) # 'También gastó 2\\xa0x\\xa04\\xa0€\\xa0=\\xa08\\xa0€ en los cuadernos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Raphael gastó 4\\xa0x\\xa01,5\\xa0€\\xa0=\\xa06\\xa0€ en los bolígrafos.', 'También gastó 2\\xa0x\\xa04\\xa0€\\xa0=\\xa08\\xa0€ en los cuadernos.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, Raphael gastó un total de 6\\xa0€\\xa0+\\xa08\\xa0€\\xa0+\\xa020\\xa0€\\xa0=\\xa034\\xa0€ en material escolar.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto gastó Raphael en todo?', 'Por lo tanto, Raphael gastó un total de 6\\xa0€\\xa0+\\xa08\\xa0€\\xa0+\\xa020\\xa0€\\xa0=\\xa034\\xa0€ en material escolar.']\nnew_fact = infer_new_fact(selected) # 'The answer is 34'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '34'"}
{"id": "GSM8K_159_6d9ce7cff5", "context": "", "options": [], "answer": "15", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: When the hidden tadpoles come out, Finn sees 11 + 6 = 17 tadpoles swimming.; int1 & sent2 -> int2: After some of them hide under a rock, he now sees 17 - 2 = 15 tadpoles swimming.; int2 & sent3 -> int3: The answer is 15;", "textual_logical_units": {"1": "Finn observa 11 renacuajos nadando en el estanque.", "2": "De repente, ve a 6 de ellos salir de su escondite de debajo de un nenúfar y luego ve a 2 de ellos esconderse debajo de una roca.", "3": "¿Cuántos renacuajos puede ver Finn en el estanque ahora?", "4": "Cuando salen los renacuajos escondidos, Finn ve 11 + 6 = 17 renacuajos nadando.", "5": "Después de que algunos de ellos se escondan debajo de una roca, ahora ve 17 - 2 = 15 renacuajos nadando.", "6": "The answer is 15"}, "human_translated": true, "code_input": "####\nfacts = [ 'Finn observa 11\\xa0renacuajos nadando en el estanque.',\n  'De repente, ve a 6 de ellos salir de su escondite de debajo de un nenúfar y luego ve a 2 de ellos esconderse debajo de una roca.']\nquestion = '¿Cuántos renacuajos puede ver Finn en el estanque ahora?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Finn observa 11\\xa0renacuajos nadando en el estanque.', 'De repente, ve a 6 de ellos salir de su escondite de debajo de un nenúfar y luego ve a 2 de ellos esconderse debajo de una roca.']\nnew_fact = infer_new_fact(selected) # 'Cuando salen los renacuajos escondidos, Finn ve 11\\xa0+\\xa06\\xa0=\\xa017 renacuajos nadando.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['De repente, ve a 6 de ellos salir de su escondite de debajo de un nenúfar y luego ve a 2 de ellos esconderse debajo de una roca.', 'Cuando salen los renacuajos escondidos, Finn ve 11\\xa0+\\xa06\\xa0=\\xa017 renacuajos nadando.']\nnew_fact = infer_new_fact(selected) # 'Después de que algunos de ellos se escondan debajo de una roca, ahora ve 17\\xa0-\\xa02\\xa0=\\xa015\\xa0renacuajos nadando.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos renacuajos puede ver Finn en el estanque ahora?', 'Después de que algunos de ellos se escondan debajo de una roca, ahora ve 17\\xa0-\\xa02\\xa0=\\xa015\\xa0renacuajos nadando.']\nnew_fact = infer_new_fact(selected) # 'The answer is 15'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '15'"}
{"id": "GSM8K_160_f84b73a55d", "context": "", "options": [], "answer": "16", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: On Tuesday there was 17+7 = 24 feet of water in the tank.; int1 & sent3 -> int2: 24/3 = 8. On Wednesday there was 2*8 = 16 feet of water in the tank.; int2 & sent4 -> int3: The answer is 16;", "textual_logical_units": {"1": "Un depósito de agua tiene una profundidad de 17 metros el lunes.", "2": "El martes, el depósito tenía 7 metros más de agua.", "3": "El miércoles, la profundidad del agua es de dos tercios de la del martes.", "4": "¿Cuál es la profundidad del agua del depósito el miércoles?", "5": "El martes había 17 + 7 = 24 metros de agua en el depósito.", "6": "24 / 3 = 8. El miércoles había 2 * 8 = 16 metros de agua en el depósito.", "7": "The answer is 16"}, "human_translated": true, "code_input": "####\nfacts = [ 'Un depósito de agua tiene una profundidad de 17\\xa0metros el lunes.',\n  'El martes, el depósito tenía 7\\xa0metros más de agua.',\n  'El miércoles, la profundidad del agua es de dos tercios de la del martes.']\nquestion = '¿Cuál es la profundidad del agua del depósito el miércoles?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Un depósito de agua tiene una profundidad de 17\\xa0metros el lunes.', 'El martes, el depósito tenía 7\\xa0metros más de agua.']\nnew_fact = infer_new_fact(selected) # 'El martes había 17\\xa0+\\xa07\\xa0=\\xa024\\xa0metros de agua en el depósito.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El miércoles, la profundidad del agua es de dos tercios de la del martes.', 'El martes había 17\\xa0+\\xa07\\xa0=\\xa024\\xa0metros de agua en el depósito.']\nnew_fact = infer_new_fact(selected) # '24\\xa0/\\xa03\\xa0=\\xa08. El miércoles había 2\\xa0*\\xa08\\xa0=\\xa016\\xa0metros de agua en el depósito.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál es la profundidad del agua del depósito el miércoles?', '24\\xa0/\\xa03\\xa0=\\xa08. El miércoles había 2\\xa0*\\xa08\\xa0=\\xa016\\xa0metros de agua en el depósito.']\nnew_fact = infer_new_fact(selected) # 'The answer is 16'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '16'"}
{"id": "GSM8K_161_220629edef", "context": "", "options": [], "answer": "32", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 7}, {"antecedents": [2, 7], "consequent": 8}, {"antecedents": [2, 4], "consequent": 9}, {"antecedents": [2, 4, 9], "consequent": 10}, {"antecedents": [2, 5], "consequent": 11}, {"antecedents": [2, 5, 11], "consequent": 12}, {"antecedents": [8, 10, 12], "consequent": 13}, {"antecedents": [6, 13], "consequent": 14}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Locsin caught 10 - 5 = 5 starfishes.; int1 & sent2 -> int2: They caught 10 + 5 = 15 starfishes.; sent2 & sent4 -> int3: Locsin caught 6 - 3 = 3 seahorses; int3 & sent2 & sent4 -> int4: They caught 6 + 3 = 9 seahorses; sent2 & sent5 -> int5: Locsin caught 3 + 2 = 5 clownfish.; int5 & sent2 & sent5 -> int6: So, they caught 3 + 5 = 8 clownfish.; int2 & int4 & int6 -> int7: Therefore, Anakin and Locsin were able to catch a total of 15 + 9 + 8 = 32 fish.; int7 & sent6 -> int8: The answer is 32;", "textual_logical_units": {"1": "Anakin y Locsin fueron hoy a la playa.", "2": "Anakin pescó 10 estrellas de mar, 6 caballitos de mar y 3 peces payaso.", "3": "Mientras que Locsin pescó 5 estrellas de mar menos que Anakin,", "4": "3 caballitos de mar menos que Anakin,", "5": "y 2 peces payaso más que Anakin.", "6": "¿Cuántos peces pudieron pescar?", "7": "Locsin pescó 10 - 5 = 5 estrellas de mar.", "8": "Pescaron 10 + 5 = 15 estrellas de mar.", "9": "Locsin pescó 6 - 3 = 3 caballitos de mar", "10": "Pescaron 6 + 3 = 9 caballitos de mar", "11": "Locsin pescó 3 + 2 = 5 peces payaso.", "12": "Entonces, pescaron 3 + 5 = 8 peces payaso.", "13": "Por lo tanto, Anakin y Locsin pudieron pescar un total de 15 + 9 + 8 = 32 peces.", "14": "The answer is 32"}, "human_translated": true, "code_input": "####\nfacts = [ 'Anakin y Locsin fueron hoy a la playa.',\n  'Anakin pescó 10\\xa0estrellas de mar, 6\\xa0caballitos de mar y 3\\xa0peces payaso.',\n  'Mientras que Locsin pescó 5\\xa0estrellas de mar menos que Anakin,',\n  '3\\xa0caballitos de mar menos que Anakin,',\n  'y 2\\xa0peces payaso más que Anakin.']\nquestion = '¿Cuántos peces pudieron pescar?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Anakin pescó 10\\xa0estrellas de mar, 6\\xa0caballitos de mar y 3\\xa0peces payaso.', 'Mientras que Locsin pescó 5\\xa0estrellas de mar menos que Anakin,']\nnew_fact = infer_new_fact(selected) # 'Locsin pescó 10\\xa0-\\xa05\\xa0=\\xa05\\xa0estrellas de mar.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Anakin pescó 10\\xa0estrellas de mar, 6\\xa0caballitos de mar y 3\\xa0peces payaso.', 'Locsin pescó 10\\xa0-\\xa05\\xa0=\\xa05\\xa0estrellas de mar.']\nnew_fact = infer_new_fact(selected) # 'Pescaron 10\\xa0+\\xa05\\xa0=\\xa015\\xa0estrellas de mar.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Anakin pescó 10\\xa0estrellas de mar, 6\\xa0caballitos de mar y 3\\xa0peces payaso.', '3\\xa0caballitos de mar menos que Anakin,']\nnew_fact = infer_new_fact(selected) # 'Locsin pescó 6\\xa0-\\xa03\\xa0=\\xa03\\xa0caballitos de mar'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Anakin pescó 10\\xa0estrellas de mar, 6\\xa0caballitos de mar y 3\\xa0peces payaso.', '3\\xa0caballitos de mar menos que Anakin,', 'Locsin pescó 6\\xa0-\\xa03\\xa0=\\xa03\\xa0caballitos de mar']\nnew_fact = infer_new_fact(selected) # 'Pescaron 6\\xa0+\\xa03\\xa0=\\xa09\\xa0caballitos de mar'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Anakin pescó 10\\xa0estrellas de mar, 6\\xa0caballitos de mar y 3\\xa0peces payaso.', 'y 2\\xa0peces payaso más que Anakin.']\nnew_fact = infer_new_fact(selected) # 'Locsin pescó 3\\xa0+\\xa02\\xa0=\\xa05\\xa0peces payaso.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Anakin pescó 10\\xa0estrellas de mar, 6\\xa0caballitos de mar y 3\\xa0peces payaso.', 'y 2\\xa0peces payaso más que Anakin.', 'Locsin pescó 3\\xa0+\\xa02\\xa0=\\xa05\\xa0peces payaso.']\nnew_fact = infer_new_fact(selected) # 'Entonces, pescaron 3\\xa0+\\xa05\\xa0=\\xa08\\xa0peces payaso.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Pescaron 10\\xa0+\\xa05\\xa0=\\xa015\\xa0estrellas de mar.', 'Pescaron 6\\xa0+\\xa03\\xa0=\\xa09\\xa0caballitos de mar', 'Entonces, pescaron 3\\xa0+\\xa05\\xa0=\\xa08\\xa0peces payaso.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, Anakin y Locsin pudieron pescar un total de 15\\xa0+\\xa09\\xa0+\\xa08\\xa0=\\xa032\\xa0peces.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos peces pudieron pescar?', 'Por lo tanto, Anakin y Locsin pudieron pescar un total de 15\\xa0+\\xa09\\xa0+\\xa08\\xa0=\\xa032\\xa0peces.']\nnew_fact = infer_new_fact(selected) # 'The answer is 32'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '32'"}
{"id": "GSM8K_162_d76189ada6", "context": "", "options": [], "answer": "92", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [3, 4], "consequent": 5}, {"antecedents": [4, 5], "consequent": 6}, {"antecedents": [1, 3, 6], "consequent": 7}, {"antecedents": [1, 2, 3, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: When the price of the bag of marble increase by 20%, the price increases by 20/100*20 = $4; int1 & sent3 -> int2: If the price increases after every two months, in 36 months, it will increase 36/2 = 18 times.; int1 & int2 -> int3: If each increase is $4, the total amount the price of the bag of marbles will have increased by after 36 months is 18*$4 = $72; int3 & sent1 & sent3 -> int4: After the total increase of the price of the bag of marbles after 36 months, the total cost will be $20+$72 = $92; int4 & sent1 & sent2 & sent3 -> int5: The answer is 92;", "textual_logical_units": {"1": "Si una bolsa de canicas cuesta 20 € y", "2": "el precio aumenta un 20 % del precio original cada dos meses,", "3": "¿cuánto costaría una bolsa de canicas después de 36 meses?", "4": "Cuando el precio de la bolsa de canicas aumenta en un 20 %, el precio aumenta en 20 / 100 * 20 = 4 €", "5": "Si el precio aumenta cada dos meses, en 36 meses, aumentará 36 / 2 = 18 veces.", "6": "Si cada aumento es de 4 €, la cantidad total en la que el precio de la bolsa de canicas habrá aumentado después de 36 meses es de 18 * 4 € = 72 €", "7": "Tras el aumento total del precio de la bolsa de canicas después de 36 meses, el coste total será de 20 € + 72 € = 92 €", "8": "The answer is 92"}, "human_translated": true, "code_input": "####\nfacts = ['Si una bolsa de canicas cuesta 20\\xa0€ y', 'el precio aumenta un 20\\xa0% del precio original cada dos meses,']\nquestion = '¿cuánto costaría una bolsa de canicas después de 36\\xa0meses?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Si una bolsa de canicas cuesta 20\\xa0€ y', 'el precio aumenta un 20\\xa0% del precio original cada dos meses,']\nnew_fact = infer_new_fact(selected) # 'Cuando el precio de la bolsa de canicas aumenta en un 20\\xa0%, el precio aumenta en 20\\xa0/\\xa0100\\xa0*\\xa020\\xa0=\\xa04\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuánto costaría una bolsa de canicas después de 36\\xa0meses?', 'Cuando el precio de la bolsa de canicas aumenta en un 20\\xa0%, el precio aumenta en 20\\xa0/\\xa0100\\xa0*\\xa020\\xa0=\\xa04\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Si el precio aumenta cada dos meses, en 36\\xa0meses, aumentará 36\\xa0/\\xa02\\xa0=\\xa018\\xa0veces.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cuando el precio de la bolsa de canicas aumenta en un 20\\xa0%, el precio aumenta en 20\\xa0/\\xa0100\\xa0*\\xa020\\xa0=\\xa04\\xa0€', 'Si el precio aumenta cada dos meses, en 36\\xa0meses, aumentará 36\\xa0/\\xa02\\xa0=\\xa018\\xa0veces.']\nnew_fact = infer_new_fact(selected) # 'Si cada aumento es de 4\\xa0€, la cantidad total en la que el precio de la bolsa de canicas habrá aumentado después de 36\\xa0meses es de 18\\xa0*\\xa04\\xa0€\\xa0=\\xa072\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si una bolsa de canicas cuesta 20\\xa0€ y', '¿cuánto costaría una bolsa de canicas después de 36\\xa0meses?', 'Si cada aumento es de 4\\xa0€, la cantidad total en la que el precio de la bolsa de canicas habrá aumentado después de 36\\xa0meses es de 18\\xa0*\\xa04\\xa0€\\xa0=\\xa072\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Tras el aumento total del precio de la bolsa de canicas después de 36\\xa0meses, el coste total será de 20\\xa0€\\xa0+\\xa072\\xa0€\\xa0=\\xa092\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si una bolsa de canicas cuesta 20\\xa0€ y', 'el precio aumenta un 20\\xa0% del precio original cada dos meses,', '¿cuánto costaría una bolsa de canicas después de 36\\xa0meses?', 'Tras el aumento total del precio de la bolsa de canicas después de 36\\xa0meses, el coste total será de 20\\xa0€\\xa0+\\xa072\\xa0€\\xa0=\\xa092\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 92'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '92'"}
{"id": "GSM8K_163_3e869f023b", "context": "", "options": [], "answer": "50", "reasoning_graph_edges": [{"antecedents": [1, 5], "consequent": 6}, {"antecedents": [1, 3], "consequent": 7}, {"antecedents": [6, 7], "consequent": 8}, {"antecedents": [4, 5, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent1 & sent5 -> int1: Three actions figures are worth 3 * 5 = $15, as much as the doll.; sent1 & sent3 -> int2: The red cars are worth 5 * 4 = $20.; int1 & int2 -> int3: So all toys are worth 20 + 15 + 15 = $50.; int3 & sent4 & sent5 -> int4: The answer is 50;", "textual_logical_units": {"1": "En una habitación hay varios juguetes: 5 coches rojos, 3 figuras de acción y una muñeca.", "2": "La muñeca cuesta tanto como 3 figuras de acción y", "3": "un coche rojo cuesta 4 €.", "4": "¿Cuánto valen todos los juguetes,", "5": "si una figura de acción cuesta 5 €?", "6": "Tres figuras de acción valen 3 x 5 = 15 €, tanto como la muñeca.", "7": "Los coches rojos valen 5 x 4 = 20 €.", "8": "Así que todos los juguetes valen 20 + 15 + 15 = 50 €.", "9": "The answer is 50"}, "human_translated": true, "code_input": "####\nfacts = [ 'En una habitación hay varios juguetes: 5\\xa0coches rojos, 3\\xa0figuras de acción y una muñeca.',\n  'La muñeca cuesta tanto como 3\\xa0figuras de acción y',\n  'un coche rojo cuesta 4\\xa0€.',\n  '¿Cuánto valen todos los juguetes,']\nquestion = 'si una figura de acción cuesta 5\\xa0€?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['En una habitación hay varios juguetes: 5\\xa0coches rojos, 3\\xa0figuras de acción y una muñeca.', 'si una figura de acción cuesta 5\\xa0€?']\nnew_fact = infer_new_fact(selected) # 'Tres figuras de acción valen 3\\xa0x\\xa05\\xa0=\\xa015\\xa0€, tanto como la muñeca.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En una habitación hay varios juguetes: 5\\xa0coches rojos, 3\\xa0figuras de acción y una muñeca.', 'un coche rojo cuesta 4\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Los coches rojos valen 5\\xa0x\\xa04\\xa0=\\xa020\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tres figuras de acción valen 3\\xa0x\\xa05\\xa0=\\xa015\\xa0€, tanto como la muñeca.', 'Los coches rojos valen 5\\xa0x\\xa04\\xa0=\\xa020\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Así que todos los juguetes valen 20\\xa0+\\xa015\\xa0+\\xa015\\xa0=\\xa050\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto valen todos los juguetes,', 'si una figura de acción cuesta 5\\xa0€?', 'Así que todos los juguetes valen 20\\xa0+\\xa015\\xa0+\\xa015\\xa0=\\xa050\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'The answer is 50'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '50'"}
{"id": "GSM8K_164_c283728116", "context": "", "options": [], "answer": "15", "reasoning_graph_edges": [{"antecedents": [3, 4], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}, {"antecedents": [6, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent3 & sent4 -> int1: First find the total lost revenue if Jackie does her taxes herself: $35/hour * 3 hours = $105; int1 & sent5 -> int2: Then subtract the accountant's charge to find how much money Janet saves: $105 - $90 = $15; int2 & sent6 -> int3: The answer is 15;", "textual_logical_units": {"1": "Jackie está intentando decidir si pagar sus impuestos ella misma o contratar a un contable.", "2": "Si paga los impuestos ella misma,", "3": "podrá hacer 3 horas menos de trabajo autónomo", "4": "y perdería unos ingresos de 35 €/hora.", "5": "El contable cobra 90 €.", "6": "¿Cuánto dinero de más tendrá si contrata al contable?", "7": "Primero, encuentra el total de ingresos perdidos si Jackie paga sus impuestos ella misma: 35 €/hora * 3 horas = 105 €", "8": "Luego, resta lo que cobra el contable para averiguar cuánto dinero ahorra Janet: 105 € - 90 € = 15 €", "9": "The answer is 15"}, "human_translated": true, "code_input": "####\nfacts = [ 'Jackie está intentando decidir si pagar sus impuestos ella misma o contratar a un contable.',\n  'Si paga los impuestos ella misma,',\n  'podrá hacer 3\\xa0horas menos de trabajo autónomo',\n  'y perdería unos ingresos de 35\\xa0€/hora.',\n  'El contable cobra 90\\xa0€.']\nquestion = '¿Cuánto dinero de más tendrá si contrata al contable?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['podrá hacer 3\\xa0horas menos de trabajo autónomo', 'y perdería unos ingresos de 35\\xa0€/hora.']\nnew_fact = infer_new_fact(selected) # 'Primero, encuentra el total de ingresos perdidos si Jackie paga sus impuestos ella misma: 35\\xa0€/hora\\xa0*\\xa03\\xa0horas\\xa0=\\xa0105\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El contable cobra 90\\xa0€.', 'Primero, encuentra el total de ingresos perdidos si Jackie paga sus impuestos ella misma: 35\\xa0€/hora\\xa0*\\xa03\\xa0horas\\xa0=\\xa0105\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Luego, resta lo que cobra el contable para averiguar cuánto dinero ahorra Janet: 105\\xa0€\\xa0-\\xa090\\xa0€\\xa0=\\xa015\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto dinero de más tendrá si contrata al contable?', 'Luego, resta lo que cobra el contable para averiguar cuánto dinero ahorra Janet: 105\\xa0€\\xa0-\\xa090\\xa0€\\xa0=\\xa015\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 15'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '15'"}
{"id": "GSM8K_165_4e0bf82a17", "context": "", "options": [], "answer": "77", "reasoning_graph_edges": [{"antecedents": [5, 6, 7], "consequent": 9}, {"antecedents": [2, 9], "consequent": 10}, {"antecedents": [8, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent5 & sent6 & sent7 -> int1: First, let’s look at the total cost of computer equipment: 1090 + 157 + 74 + 102 = 1423 euros; int1 & sent2 -> int2: Let us now calculate what is left for the garment: 1500 - 1423 = 77 euros; int2 & sent8 -> int3: The answer is 77;", "textual_logical_units": {"1": "Para su 30 cumpleaños, Elvira eligió como regalo un ordenador nuevo con muchos accesorios.", "2": "Cuenta con un presupuesto de 1500 € que le ha dado toda su familia y", "3": "piensa que podrá quedarse con un poco de dinero para comprar una prenda de ropa.", "4": "Va a una tienda de ordenadores y", "5": "elige una máquina que cuesta 1090 € con pantalla, teclado y ratón.", "6": "También se lleva un escáner por 157 €,", "7": "una grabadora de CD con un valor de 74 € y una impresora por 102 €.", "8": "¿Cuánto dinero le quedará para la ropa?", "9": "Primero, veamos el coste total del equipo informático: 1090 + 157 + 74 + 102 = 1423 euros", "10": "Calculemos ahora lo que queda para la prenda de ropa: 1500 - 1423 = 77 euros", "11": "The answer is 77"}, "human_translated": true, "code_input": "####\nfacts = [ 'Para su 30\\xa0cumpleaños, Elvira eligió como regalo un ordenador nuevo con muchos accesorios.',\n  'Cuenta con un presupuesto de 1500\\xa0€ que le ha dado toda su familia y',\n  'piensa que podrá quedarse con un poco de dinero para comprar una prenda de ropa.',\n  'Va a una tienda de ordenadores y',\n  'elige una máquina que cuesta 1090\\xa0€ con pantalla, teclado y ratón.',\n  'También se lleva un escáner por 157\\xa0€,',\n  'una grabadora de CD con un valor de 74\\xa0€ y una impresora por 102\\xa0€.']\nquestion = '¿Cuánto dinero le quedará para la ropa?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['elige una máquina que cuesta 1090\\xa0€ con pantalla, teclado y ratón.', 'También se lleva un escáner por 157\\xa0€,', 'una grabadora de CD con un valor de 74\\xa0€ y una impresora por 102\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Primero, veamos el coste total del equipo informático: 1090\\xa0+\\xa0157\\xa0+\\xa074\\xa0+\\xa0102\\xa0=\\xa01423\\xa0euros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cuenta con un presupuesto de 1500\\xa0€ que le ha dado toda su familia y', 'Primero, veamos el coste total del equipo informático: 1090\\xa0+\\xa0157\\xa0+\\xa074\\xa0+\\xa0102\\xa0=\\xa01423\\xa0euros']\nnew_fact = infer_new_fact(selected) # 'Calculemos ahora lo que queda para la prenda de ropa: 1500\\xa0-\\xa01423\\xa0=\\xa077\\xa0euros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto dinero le quedará para la ropa?', 'Calculemos ahora lo que queda para la prenda de ropa: 1500\\xa0-\\xa01423\\xa0=\\xa077\\xa0euros']\nnew_fact = infer_new_fact(selected) # 'The answer is 77'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '77'"}
{"id": "GSM8K_166_86924c2578", "context": "", "options": [], "answer": "5", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [3, 4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Sandra needs a total of 15 x 3 = 45 eggs.; int1 & sent1 -> int2: She will have to babysit 45/9 = 5 times.; int2 & sent3 & sent4 -> int3: The answer is 5;", "textual_logical_units": {"1": "La vecina de Sandra le regala una cesta de 9 huevos cada vez que cuida a su hija.", "2": "Para hacer un flan, necesita 3 huevos.", "3": "Si a Sandra se le ha encomendado la tarea de hacer 15 flanes para recaudar fondos para su escuela,", "4": "¿cuántas veces tiene que hacer de niñera?", "5": "Sandra necesita un total de 15 x 3 = 45 huevos.", "6": "Tendrá que hacer de canguro 45 / 9 = 5 veces.", "7": "The answer is 5"}, "human_translated": true, "code_input": "####\nfacts = [ 'La vecina de Sandra le regala una cesta de 9\\xa0huevos cada vez que cuida a su hija.',\n  'Para hacer un flan, necesita 3\\xa0huevos.',\n  'Si a Sandra se le ha encomendado la tarea de hacer 15\\xa0flanes para recaudar fondos para su escuela,']\nquestion = '¿cuántas veces tiene que hacer de niñera?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Para hacer un flan, necesita 3\\xa0huevos.', 'Si a Sandra se le ha encomendado la tarea de hacer 15\\xa0flanes para recaudar fondos para su escuela,']\nnew_fact = infer_new_fact(selected) # 'Sandra necesita un total de 15\\xa0x\\xa03 =\\xa045\\xa0huevos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La vecina de Sandra le regala una cesta de 9\\xa0huevos cada vez que cuida a su hija.', 'Sandra necesita un total de 15\\xa0x\\xa03 =\\xa045\\xa0huevos.']\nnew_fact = infer_new_fact(selected) # 'Tendrá que hacer de canguro 45\\xa0/\\xa09\\xa0=\\xa05\\xa0veces.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si a Sandra se le ha encomendado la tarea de hacer 15\\xa0flanes para recaudar fondos para su escuela,', '¿cuántas veces tiene que hacer de niñera?', 'Tendrá que hacer de canguro 45\\xa0/\\xa09\\xa0=\\xa05\\xa0veces.']\nnew_fact = infer_new_fact(selected) # 'The answer is 5'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '5'"}
{"id": "GSM8K_167_d0c863e677", "context": "", "options": [], "answer": "16", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [4], "consequent": 5}, {"antecedents": [4, 5], "consequent": 6}, {"antecedents": [4, 5, 6], "consequent": 7}, {"antecedents": [7], "consequent": 8}, {"antecedents": [4, 8], "consequent": 9}, {"antecedents": [3, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: To solve this problem, we can set up an equation where x represents Brooke’s age and 2x represents Seth’s age and noting that in two years, the sum of their ages is (2x + 2) + (x + 2) = 28.; int1 -> int2: Then we add all the values together, 3x + 4 = 28.; int1 & int2 -> int3: And we subtract 4 from each side, 3x +4 - 4 = 28 – 4.; int1 & int2 & int3 -> int4: Then we divide each side by 3x/3 = 24/3.; int4 -> int5: We find that x = 8, or Brooke’s age is 8.; int1 & int5 -> int6: Seth is twice as old as Brooke, so Seth is 8 x 2 = 16.; int6 & sent3 -> int7: The answer is 16;", "textual_logical_units": {"1": "Seth tiene el doble de edad que Brooke.", "2": "En 2 años, la suma de sus edades será 28.", "3": "¿Cuántos años tiene Seth?", "4": "Para resolver este problema, podemos establecer una ecuación en la que x representa la edad de Brooke y 2x representa la edad de Seth y observar que, en dos años, la suma de sus edades es (2x + 2) + (x + 2) = 28.", "5": "Luego, sumamos todos los valores, 3x + 4 = 28.", "6": "Y restamos 4 de cada lado, 3x + 4 - 4 = 28 - 4.", "7": "Luego dividimos cada lado por 3x / 3 = 24 / 3.", "8": "Encontramos que x = 8, es decir, la edad de Brooke es 8.", "9": "Seth tiene el doble de edad que Brooke, por lo que Seth tiene 8 x 2 = 16 años.", "10": "The answer is 16"}, "human_translated": true, "code_input": "####\nfacts = ['Seth tiene el doble de edad que Brooke.', 'En 2\\xa0años, la suma de sus edades será 28.']\nquestion = '¿Cuántos años tiene Seth?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Seth tiene el doble de edad que Brooke.', 'En 2\\xa0años, la suma de sus edades será 28.']\nnew_fact = infer_new_fact(selected) # 'Para resolver este problema, podemos establecer una ecuación en la que x representa la edad de Brooke y 2x representa la edad de Seth y observar que, en dos años, la suma de sus edades es (2x\\xa0+\\xa02)\\xa0+\\xa0(x\\xa0+\\xa02)\\xa0=\\xa028.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Para resolver este problema, podemos establecer una ecuación en la que x representa la edad de Brooke y 2x representa la edad de Seth y observar que, en dos años, la suma de sus edades es (2x\\xa0+\\xa02)\\xa0+\\xa0(x\\xa0+\\xa02)\\xa0=\\xa028.']\nnew_fact = infer_new_fact(selected) # 'Luego, sumamos todos los valores, 3x\\xa0+\\xa04\\xa0=\\xa028.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Para resolver este problema, podemos establecer una ecuación en la que x representa la edad de Brooke y 2x representa la edad de Seth y observar que, en dos años, la suma de sus edades es (2x\\xa0+\\xa02)\\xa0+\\xa0(x\\xa0+\\xa02)\\xa0=\\xa028.', 'Luego, sumamos todos los valores, 3x\\xa0+\\xa04\\xa0=\\xa028.']\nnew_fact = infer_new_fact(selected) # 'Y restamos 4 de cada lado, 3x\\xa0+\\xa04\\xa0-\\xa04\\xa0=\\xa028\\xa0-\\xa04.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Para resolver este problema, podemos establecer una ecuación en la que x representa la edad de Brooke y 2x representa la edad de Seth y observar que, en dos años, la suma de sus edades es (2x\\xa0+\\xa02)\\xa0+\\xa0(x\\xa0+\\xa02)\\xa0=\\xa028.', 'Luego, sumamos todos los valores, 3x\\xa0+\\xa04\\xa0=\\xa028.', 'Y restamos 4 de cada lado, 3x\\xa0+\\xa04\\xa0-\\xa04\\xa0=\\xa028\\xa0-\\xa04.']\nnew_fact = infer_new_fact(selected) # 'Luego dividimos cada lado por 3x\\xa0/\\xa03\\xa0=\\xa024\\xa0/\\xa03.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Luego dividimos cada lado por 3x\\xa0/\\xa03\\xa0=\\xa024\\xa0/\\xa03.']\nnew_fact = infer_new_fact(selected) # 'Encontramos que x\\xa0=\\xa08, es decir, la edad de Brooke es 8.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Para resolver este problema, podemos establecer una ecuación en la que x representa la edad de Brooke y 2x representa la edad de Seth y observar que, en dos años, la suma de sus edades es (2x\\xa0+\\xa02)\\xa0+\\xa0(x\\xa0+\\xa02)\\xa0=\\xa028.', 'Encontramos que x\\xa0=\\xa08, es decir, la edad de Brooke es 8.']\nnew_fact = infer_new_fact(selected) # 'Seth tiene el doble de edad que Brooke, por lo que Seth tiene 8\\xa0x\\xa02\\xa0=\\xa016\\xa0años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos años tiene Seth?', 'Seth tiene el doble de edad que Brooke, por lo que Seth tiene 8\\xa0x\\xa02\\xa0=\\xa016\\xa0años.']\nnew_fact = infer_new_fact(selected) # 'The answer is 16'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '16'"}
{"id": "GSM8K_168_cd681f8c28", "context": "", "options": [], "answer": "18", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 3}, {"antecedents": [1, 3], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: The total amount of money jimmy has 2*$8 = $16 more than Ethel.; int1 & sent1 -> int2: If Jimmy has $2 more than twice the money Ethel has, he has 2+16 = $18; int2 & sent2 -> int3: The answer is 18;", "textual_logical_units": {"1": "Jimmy tiene 2 € más del doble del dinero que tiene Ethel.", "2": "Si Ethel tiene 8 €, ¿cuánto dinero tiene Jimmy?", "3": "La cantidad total de dinero que tiene Jimmy es 2 * 8 € = 16 € más que Ethel.", "4": "Si Jimmy tiene 2 euros más del doble del dinero que tiene Ethel, tiene 2 + 16 = 18 €", "5": "The answer is 18"}, "human_translated": true, "code_input": "####\nfacts = ['Jimmy tiene 2\\xa0€ más del doble del dinero que tiene Ethel.']\nquestion = 'Si Ethel tiene 8\\xa0€, ¿cuánto dinero tiene Jimmy?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Jimmy tiene 2\\xa0€ más del doble del dinero que tiene Ethel.', 'Si Ethel tiene 8\\xa0€, ¿cuánto dinero tiene Jimmy?']\nnew_fact = infer_new_fact(selected) # 'La cantidad total de dinero que tiene Jimmy es 2\\xa0*\\xa08\\xa0€\\xa0=\\xa016\\xa0€ más que Ethel.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Jimmy tiene 2\\xa0€ más del doble del dinero que tiene Ethel.', 'La cantidad total de dinero que tiene Jimmy es 2\\xa0*\\xa08\\xa0€\\xa0=\\xa016\\xa0€ más que Ethel.']\nnew_fact = infer_new_fact(selected) # 'Si Jimmy tiene 2\\xa0euros más del doble del dinero que tiene Ethel, tiene 2\\xa0+\\xa016\\xa0=\\xa018\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Ethel tiene 8\\xa0€, ¿cuánto dinero tiene Jimmy?', 'Si Jimmy tiene 2\\xa0euros más del doble del dinero que tiene Ethel, tiene 2\\xa0+\\xa016\\xa0=\\xa018\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 18'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '18'"}
{"id": "GSM8K_169_d5adfb3479", "context": "", "options": [], "answer": "120", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [2], "consequent": 5}, {"antecedents": [4, 5], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: He walks 100 miles during the weekdays because 5 x 20 = 100; sent2 -> int2: He walks 20 miles on the weekend because 2 x 10 = 20; int1 & int2 -> int3: He walks 120 miles total because 100 + 20 = 120; int3 & sent3 -> int4: The answer is 120;", "textual_logical_units": {"1": "Pancho camina 20 kilómetros al día.", "2": "Excepto los fines de semana, cuando camina 10 kilómetros.", "3": "¿Cuántos kilómetros camina en una semana?", "4": "Camina 100 kilómetros durante los días de semana porque 5 x 20 = 100", "5": "Camina 20 kilómetros el fin de semana porque 2 x 10 = 20", "6": "Camina 120 kilómetros en total porque 100 + 20 = 120", "7": "The answer is 120"}, "human_translated": true, "code_input": "####\nfacts = ['Pancho camina 20\\xa0kilómetros al día.', 'Excepto los fines de semana, cuando camina 10\\xa0kilómetros.']\nquestion = '¿Cuántos kilómetros camina en una semana?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Pancho camina 20\\xa0kilómetros al día.', 'Excepto los fines de semana, cuando camina 10\\xa0kilómetros.']\nnew_fact = infer_new_fact(selected) # 'Camina 100\\xa0kilómetros durante los días de semana porque 5\\xa0x\\xa020\\xa0=\\xa0100'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Excepto los fines de semana, cuando camina 10\\xa0kilómetros.']\nnew_fact = infer_new_fact(selected) # 'Camina 20\\xa0kilómetros el fin de semana porque 2\\xa0x\\xa010\\xa0=\\xa020'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Camina 100\\xa0kilómetros durante los días de semana porque 5\\xa0x\\xa020\\xa0=\\xa0100', 'Camina 20\\xa0kilómetros el fin de semana porque 2\\xa0x\\xa010\\xa0=\\xa020']\nnew_fact = infer_new_fact(selected) # 'Camina 120\\xa0kilómetros en total porque 100\\xa0+\\xa020\\xa0=\\xa0120'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos kilómetros camina en una semana?', 'Camina 120\\xa0kilómetros en total porque 100\\xa0+\\xa020\\xa0=\\xa0120']\nnew_fact = infer_new_fact(selected) # 'The answer is 120'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '120'"}
{"id": "GSM8K_170_31ba335544", "context": "", "options": [], "answer": "150", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 6}, {"antecedents": [2, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}, {"antecedents": [7, 8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: First find the cost of the jacket: $25 * 3 = $75; int1 & sent2 -> int2: Then add the cost of the jacket and hat: $25 + $75 = $100; int2 & sent4 -> int3: Then divide that amount by 2 to find the average cost, which is the cost of the pants: $100 / 2 = $50; int2 & int3 -> int4: Then add the cost of each item of clothing to find the total cost of the uniform: $25 + $75 + $50 = $150; int4 & sent5 -> int5: The answer is 150;", "textual_logical_units": {"1": "La banda de música está encargando uniformes nuevos.", "2": "Cada uniforme viene con un sombrero que cuesta 25 €,", "3": "una chaqueta que cuesta tres veces más que el sombrero", "4": "y pantalones que cuestan la media del coste del sombrero y la chaqueta.", "5": "¿Cuánto cuesta en total cada uniforme?", "6": "Primero, encuentra el coste de la chaqueta: 25 € * 3 = 75 €", "7": "Luego, añade el coste de la chaqueta y el sombrero: 25 € + 75 € = 100 €", "8": "Luego, divide esa cantidad entre 2 para encontrar el coste medio, que es el coste de los pantalones: 100 € / 2 = 50 €", "9": "Luego, suma el coste de cada prenda de ropa para calcular el coste total del uniforme: 25 € + 75 € + 50 € = 150 €", "10": "The answer is 150"}, "human_translated": true, "code_input": "####\nfacts = [ 'La banda de música está encargando uniformes nuevos.',\n  'Cada uniforme viene con un sombrero que cuesta 25\\xa0€,',\n  'una chaqueta que cuesta tres veces más que el sombrero',\n  'y pantalones que cuestan la media del coste del sombrero y la chaqueta.']\nquestion = '¿Cuánto cuesta en total cada uniforme?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Cada uniforme viene con un sombrero que cuesta 25\\xa0€,', 'una chaqueta que cuesta tres veces más que el sombrero']\nnew_fact = infer_new_fact(selected) # 'Primero, encuentra el coste de la chaqueta: 25\\xa0€\\xa0*\\xa03\\xa0=\\xa075\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada uniforme viene con un sombrero que cuesta 25\\xa0€,', 'Primero, encuentra el coste de la chaqueta: 25\\xa0€\\xa0*\\xa03\\xa0=\\xa075\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Luego, añade el coste de la chaqueta y el sombrero: 25\\xa0€\\xa0+\\xa075\\xa0€\\xa0=\\xa0100\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y pantalones que cuestan la media del coste del sombrero y la chaqueta.', 'Luego, añade el coste de la chaqueta y el sombrero: 25\\xa0€\\xa0+\\xa075\\xa0€\\xa0=\\xa0100\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Luego, divide esa cantidad entre 2 para encontrar el coste medio, que es el coste de los pantalones: 100\\xa0€\\xa0/\\xa02\\xa0=\\xa050\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Luego, añade el coste de la chaqueta y el sombrero: 25\\xa0€\\xa0+\\xa075\\xa0€\\xa0=\\xa0100\\xa0€', 'Luego, divide esa cantidad entre 2 para encontrar el coste medio, que es el coste de los pantalones: 100\\xa0€\\xa0/\\xa02\\xa0=\\xa050\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Luego, suma el coste de cada prenda de ropa para calcular el coste total del uniforme: 25\\xa0€\\xa0+\\xa075\\xa0€\\xa0+\\xa050\\xa0€\\xa0=\\xa0150\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto cuesta en total cada uniforme?', 'Luego, suma el coste de cada prenda de ropa para calcular el coste total del uniforme: 25\\xa0€\\xa0+\\xa075\\xa0€\\xa0+\\xa050\\xa0€\\xa0=\\xa0150\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 150'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '150'"}
{"id": "GSM8K_171_18a1aadbe4", "context": "", "options": [], "answer": "1210", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 6}, {"antecedents": [3], "consequent": 7}, {"antecedents": [4], "consequent": 8}, {"antecedents": [6, 7, 8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent2 -> int1: First find the total number of spider legs: 80 spiders * 8 legs/spider = 640 legs; sent3 -> int2: Then find the total number of insect legs: 90 spiders * 6 legs/spider = 540 legs; sent4 -> int3: Then find the total number of mutant invertebrate legs: 3 mutants * 10 legs/mutant = 30 legs; int1 & int2 & int3 -> int4: Then add the number of each kind of leg to find the total he saw: 640 legs + 540 legs + 30 legs = 1210 legs; int4 & sent5 -> int5: The answer is 1210;", "textual_logical_units": {"1": "Jake está paseando por el Museo de Entomología.", "2": "Ve 80 arañas con 8 patas cada una,", "3": "90 insectos con 6 patas cada uno", "4": "y 3 invertebrados mutantes raros con 10 patas cada uno.", "5": "¿Cuántas patas ve Jake en total?", "6": "Primero, encuentra el número total de patas de las arañas: 80 arañas * 8 patas/araña = 640 patas", "7": "Luego, encuentra el número total de patas de los insectos: 90 arañas * 6 patas/insecto = 540 patas", "8": "Luego, encuentra el número total de patas de los invertebrados mutantes: 3 mutantes * 10 patas/mutante = 30 patas", "9": "Luego, suma el número de cada tipo de pata para encontrar el total de patas que vio: 640 patas + 540 patas + 30 patas = 1210 patas", "10": "The answer is 1210"}, "human_translated": true, "code_input": "####\nfacts = [ 'Jake está paseando por el Museo de Entomología.',\n  'Ve 80\\xa0arañas con 8\\xa0patas cada una,',\n  '90\\xa0insectos con 6\\xa0patas cada uno',\n  'y 3\\xa0invertebrados mutantes raros con 10\\xa0patas cada uno.']\nquestion = '¿Cuántas patas ve Jake en total?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Ve 80\\xa0arañas con 8\\xa0patas cada una,']\nnew_fact = infer_new_fact(selected) # 'Primero, encuentra el número total de patas de las arañas: 80\\xa0arañas\\xa0*\\xa08\\xa0patas/araña\\xa0=\\xa0640\\xa0patas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['90\\xa0insectos con 6\\xa0patas cada uno']\nnew_fact = infer_new_fact(selected) # 'Luego, encuentra el número total de patas de los insectos: 90\\xa0arañas\\xa0*\\xa06\\xa0patas/insecto\\xa0=\\xa0540\\xa0patas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y 3\\xa0invertebrados mutantes raros con 10\\xa0patas cada uno.']\nnew_fact = infer_new_fact(selected) # 'Luego, encuentra el número total de patas de los invertebrados mutantes: 3\\xa0mutantes\\xa0*\\xa010\\xa0patas/mutante\\xa0=\\xa030\\xa0patas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Primero, encuentra el número total de patas de las arañas: 80\\xa0arañas\\xa0*\\xa08\\xa0patas/araña\\xa0=\\xa0640\\xa0patas', 'Luego, encuentra el número total de patas de los insectos: 90\\xa0arañas\\xa0*\\xa06\\xa0patas/insecto\\xa0=\\xa0540\\xa0patas', 'Luego, encuentra el número total de patas de los invertebrados mutantes: 3\\xa0mutantes\\xa0*\\xa010\\xa0patas/mutante\\xa0=\\xa030\\xa0patas']\nnew_fact = infer_new_fact(selected) # 'Luego, suma el número de cada tipo de pata para encontrar el total de patas que vio: 640\\xa0patas\\xa0+\\xa0540\\xa0patas\\xa0+\\xa030\\xa0patas\\xa0=\\xa01210\\xa0patas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas patas ve Jake en total?', 'Luego, suma el número de cada tipo de pata para encontrar el total de patas que vio: 640\\xa0patas\\xa0+\\xa0540\\xa0patas\\xa0+\\xa030\\xa0patas\\xa0=\\xa01210\\xa0patas']\nnew_fact = infer_new_fact(selected) # 'The answer is 1210'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '1210'"}
{"id": "GSM8K_172_62220e1b28", "context": "", "options": [], "answer": "51", "reasoning_graph_edges": [{"antecedents": [4, 5], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}, {"antecedents": [0], "consequent": 9}, {"antecedents": [2, 8], "consequent": 10}, {"antecedents": [9, 10], "consequent": 11}, {"antecedents": [6, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent4 & sent5 -> int1: If Sally Thirtytwo is 8 years old, same as Sally four, their total age 8+8 = 16 years.; int1 & sent3 -> int2: Granny red is two times as old as Sally four, meaning Granny red is 2*8 = 16 years old.; sent0 -> int3: Sally Thirtytwo, Sally four, and Sally red are 16+16 = 32 years old.; int2 & sent2 -> int4: Sally two is three years older than Granny red, meaning Sally two is 16+3= 19 years old.; int3 & int4 -> int5: The four birds have a total age of 32+19 = 51 years old.; int5 & sent6 -> int6: The answer is 51;", "textual_logical_units": {"1": "Hay cuatro pájaros en la casita para pájaros.", "2": "Sally Two es tres años mayor que Granny Red.", "3": "Granny Red tiene el doble de la edad de Sally Four.", "4": "Si Sally Four tiene la misma edad que Sally Thirtytwo", "5": "y Sally Thirtytwo tiene 8 años,", "6": "¿cuál es la edad total de los cuatro pájaros?", "7": "Si Sally Thirtytwo tiene 8 años, igual que Sally Four, su edad total es 8 + 8 = 16 años.", "8": "Granny Red tiene el doble de la edad de Sally Four, lo que significa que Granny Red tiene 2 * 8 = 16 años.", "9": "Sally Thirtytwo, Sally Four y Sally Red tienen 16 + 16 = 32 años.", "10": "Sally Two es tres años mayor que Granny Red, lo que significa que Sally Two tiene 16 + 3 = 19 años.", "11": "Los cuatro pájaros tienen una edad total de 32 + 19 = 51 años.", "12": "The answer is 51"}, "human_translated": true, "code_input": "####\nfacts = [ 'Hay cuatro pájaros en la casita para pájaros.',\n  'Sally Two es tres años mayor que Granny Red.',\n  'Granny Red tiene el doble de la edad de Sally Four.',\n  'Si Sally Four tiene la misma edad que Sally Thirtytwo',\n  'y Sally Thirtytwo tiene 8\\xa0años,']\nquestion = '¿cuál es la edad total de los cuatro pájaros?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Si Sally Four tiene la misma edad que Sally Thirtytwo', 'y Sally Thirtytwo tiene 8\\xa0años,']\nnew_fact = infer_new_fact(selected) # 'Si Sally Thirtytwo tiene 8\\xa0años, igual que Sally Four, su edad total es 8\\xa0+\\xa08\\xa0=\\xa016\\xa0años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Granny Red tiene el doble de la edad de Sally Four.', 'Si Sally Thirtytwo tiene 8\\xa0años, igual que Sally Four, su edad total es 8\\xa0+\\xa08\\xa0=\\xa016\\xa0años.']\nnew_fact = infer_new_fact(selected) # 'Granny Red tiene el doble de la edad de Sally Four, lo que significa que Granny Red tiene 2\\xa0*\\xa08\\xa0=\\xa016\\xa0años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # []\nnew_fact = infer_new_fact(selected) # 'Sally Thirtytwo, Sally Four y Sally Red tienen 16\\xa0+\\xa016\\xa0=\\xa032\\xa0años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Sally Two es tres años mayor que Granny Red.', 'Granny Red tiene el doble de la edad de Sally Four, lo que significa que Granny Red tiene 2\\xa0*\\xa08\\xa0=\\xa016\\xa0años.']\nnew_fact = infer_new_fact(selected) # 'Sally Two es tres años mayor que Granny Red, lo que significa que Sally Two tiene 16\\xa0+\\xa03\\xa0=\\xa019\\xa0años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Sally Thirtytwo, Sally Four y Sally Red tienen 16\\xa0+\\xa016\\xa0=\\xa032\\xa0años.', 'Sally Two es tres años mayor que Granny Red, lo que significa que Sally Two tiene 16\\xa0+\\xa03\\xa0=\\xa019\\xa0años.']\nnew_fact = infer_new_fact(selected) # 'Los cuatro pájaros tienen una edad total de 32\\xa0+\\xa019\\xa0=\\xa051\\xa0años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuál es la edad total de los cuatro pájaros?', 'Los cuatro pájaros tienen una edad total de 32\\xa0+\\xa019\\xa0=\\xa051\\xa0años.']\nnew_fact = infer_new_fact(selected) # 'The answer is 51'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '51'"}
{"id": "GSM8K_173_6554d106fe", "context": "", "options": [], "answer": "18000", "reasoning_graph_edges": [{"antecedents": [2, 3, 4], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}, {"antecedents": [7, 8], "consequent": 9}, {"antecedents": [6, 9], "consequent": 10}, {"antecedents": [5, 6, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent2 & sent3 & sent4 -> int1: First find the total minimum payment each month: $300/month + $200/month + $500/month = $1000/month; int1 & sent5 -> int2: Then multiply that number by 50% to find how much extra Jessica pays each month: $1000/month * .5 = $500/month; int1 & int2 -> int3: Add that number to the total minimum payment to find how much Jessica pays per month: $1000/month + $500/month = $1500/month; int3 & sent6 -> int4: Now multiply that number by the number of months in a year to find Jessica's annual payment: $1500/month * 12 months/year = $18,000/year; int4 & sent5 & sent6 -> int5: The answer is 18000;", "textual_logical_units": {"1": "Jessica está intentando averiguar cuánto tiene que pagar de todas sus deudas cada mes.", "2": "Sus préstamos estudiantiles tienen un pago mínimo de 300 € al mes,", "3": "el mínimo de su tarjeta de crédito es de 200 € al mes", "4": "y el mínimo de su hipoteca es de 500 € al mes.", "5": "Si Jessica quiere pagar un 50 % más del mínimo,", "6": "¿cuánto paga al año?", "7": "Primero, encuentra el pago mínimo total de cada mes: 300 €/mes + 200 €/mes + 500 €/mes = 1000 €/mes", "8": "Luego, multiplica ese número por un 50 % para saber cuánto de más paga Jessica cada mes: 1000 €/mes * 0,5 = 500 €/mes", "9": "Añade ese número al pago mínimo total para saber cuánto paga Jessica al mes: 1000 €/mes + 500 €/mes = 1500 €/mes", "10": "Ahora, multiplica ese número por el número de meses de un año para encontrar el pago anual de Jessica: 1500 €/mes * 12 meses/año = 18 000 €/año", "11": "The answer is 18000"}, "human_translated": true, "code_input": "####\nfacts = [ 'Jessica está intentando averiguar cuánto tiene que pagar de todas sus deudas cada mes.',\n  'Sus préstamos estudiantiles tienen un pago mínimo de 300\\xa0€ al mes,',\n  'el mínimo de su tarjeta de crédito es de 200\\xa0€ al mes',\n  'y el mínimo de su hipoteca es de 500\\xa0€ al mes.',\n  'Si Jessica quiere pagar un 50\\xa0% más del mínimo,']\nquestion = '¿cuánto paga al año?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Sus préstamos estudiantiles tienen un pago mínimo de 300\\xa0€ al mes,', 'el mínimo de su tarjeta de crédito es de 200\\xa0€ al mes', 'y el mínimo de su hipoteca es de 500\\xa0€ al mes.']\nnew_fact = infer_new_fact(selected) # 'Primero, encuentra el pago mínimo total de cada mes: 300\\xa0€/mes\\xa0+\\xa0200\\xa0€/mes\\xa0+\\xa0500\\xa0€/mes\\xa0=\\xa01000\\xa0€/mes'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Jessica quiere pagar un 50\\xa0% más del mínimo,', 'Primero, encuentra el pago mínimo total de cada mes: 300\\xa0€/mes\\xa0+\\xa0200\\xa0€/mes\\xa0+\\xa0500\\xa0€/mes\\xa0=\\xa01000\\xa0€/mes']\nnew_fact = infer_new_fact(selected) # 'Luego, multiplica ese número por un 50\\xa0% para saber cuánto de más paga Jessica cada mes: 1000\\xa0€/mes\\xa0*\\xa00,5\\xa0=\\xa0500\\xa0€/mes'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Primero, encuentra el pago mínimo total de cada mes: 300\\xa0€/mes\\xa0+\\xa0200\\xa0€/mes\\xa0+\\xa0500\\xa0€/mes\\xa0=\\xa01000\\xa0€/mes', 'Luego, multiplica ese número por un 50\\xa0% para saber cuánto de más paga Jessica cada mes: 1000\\xa0€/mes\\xa0*\\xa00,5\\xa0=\\xa0500\\xa0€/mes']\nnew_fact = infer_new_fact(selected) # 'Añade ese número al pago mínimo total para saber cuánto paga Jessica al mes: 1000\\xa0€/mes\\xa0+\\xa0500\\xa0€/mes\\xa0=\\xa01500\\xa0€/mes'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuánto paga al año?', 'Añade ese número al pago mínimo total para saber cuánto paga Jessica al mes: 1000\\xa0€/mes\\xa0+\\xa0500\\xa0€/mes\\xa0=\\xa01500\\xa0€/mes']\nnew_fact = infer_new_fact(selected) # 'Ahora, multiplica ese número por el número de meses de un año para encontrar el pago anual de Jessica: 1500\\xa0€/mes\\xa0*\\xa012\\xa0meses/año\\xa0=\\xa018\\xa0000\\xa0€/año'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Jessica quiere pagar un 50\\xa0% más del mínimo,', '¿cuánto paga al año?', 'Ahora, multiplica ese número por el número de meses de un año para encontrar el pago anual de Jessica: 1500\\xa0€/mes\\xa0*\\xa012\\xa0meses/año\\xa0=\\xa018\\xa0000\\xa0€/año']\nnew_fact = infer_new_fact(selected) # 'The answer is 18000'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '18000'"}
{"id": "GSM8K_174_50c69e769b", "context": "", "options": [], "answer": "95", "reasoning_graph_edges": [{"antecedents": [2, 5, 6], "consequent": 9}, {"antecedents": [2, 7], "consequent": 10}, {"antecedents": [9, 10], "consequent": 11}, {"antecedents": [8, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent2 & sent5 & sent6 -> int1: There are 60 potatoes, and Billy takes a minute and a half to peel each one, or 60 potatoes * 1.5 minutes per potato = 90 minutes.; sent2 & sent7 -> int2: Billy only takes 5 seconds to cut the potatoes, so it takes 5 seconds * 60 potatoes / 60 seconds per minute = 5 minutes to cut the potatoes.; int1 & int2 -> int3: So it will take him a total of 90 minutes peeling + 5 minutes cutting = 95 minutes total prepping the potatoes.; int3 & sent8 -> int4: The answer is 95;", "textual_logical_units": {"1": "Billy está pelando y cortando patatas para preparar una ensalada de patatas para la barbacoa de su gran reunión familiar.", "2": "Es un gran evento, así que tiene que preparar 60 patatas.", "3": "Las patatas son más o menos del mismo tamaño,", "4": "por lo que tarda aproximadamente la misma cantidad de tiempo en pelar y cortar cada una.", "5": "Billy tarda alrededor de un minuto y", "6": "medio en pelar una patata,", "7": "pero solo unos 5 segundos para cortarla.", "8": "¿Cuánto tardará Billy en terminar de preparar las patatas?", "9": "Hay 60 patatas y Billy tarda un minuto y medio en pelar cada una, es decir, 60 patatas * 1,5 minutos por patata = 90 minutos.", "10": "Billy solo tarda 5 segundos en cortar las patatas, por lo que tarda 5 segundos * 60 patatas / 60 segundos por minuto = 5 minutos en cortar las patatas.", "11": "Así que tardará un total de 90 minutos pelando + 5 minutos cortando = 95 minutos en total preparando las patatas.", "12": "The answer is 95"}, "human_translated": true, "code_input": "####\nfacts = [ 'Billy está pelando y cortando patatas para preparar una ensalada de patatas para la barbacoa de su gran reunión familiar.',\n  'Es un gran evento, así que tiene que preparar 60\\xa0patatas.',\n  'Las patatas son más o menos del mismo tamaño,',\n  'por lo que tarda aproximadamente la misma cantidad de tiempo en pelar y cortar cada una.',\n  'Billy tarda alrededor de un minuto y',\n  'medio en pelar una patata,',\n  'pero solo unos 5\\xa0segundos para cortarla.']\nquestion = '¿Cuánto tardará Billy en terminar de preparar las patatas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Es un gran evento, así que tiene que preparar 60\\xa0patatas.', 'Billy tarda alrededor de un minuto y', 'medio en pelar una patata,']\nnew_fact = infer_new_fact(selected) # 'Hay 60\\xa0patatas y Billy tarda un minuto y medio en pelar cada una, es decir, 60\\xa0patatas\\xa0*\\xa01,5\\xa0minutos por patata\\xa0=\\xa090\\xa0minutos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Es un gran evento, así que tiene que preparar 60\\xa0patatas.', 'pero solo unos 5\\xa0segundos para cortarla.']\nnew_fact = infer_new_fact(selected) # 'Billy solo tarda 5\\xa0segundos en cortar las patatas, por lo que tarda 5\\xa0segundos\\xa0*\\xa060\\xa0patatas\\xa0/\\xa060\\xa0segundos por minuto\\xa0=\\xa05\\xa0minutos en cortar las patatas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Hay 60\\xa0patatas y Billy tarda un minuto y medio en pelar cada una, es decir, 60\\xa0patatas\\xa0*\\xa01,5\\xa0minutos por patata\\xa0=\\xa090\\xa0minutos.', 'Billy solo tarda 5\\xa0segundos en cortar las patatas, por lo que tarda 5\\xa0segundos\\xa0*\\xa060\\xa0patatas\\xa0/\\xa060\\xa0segundos por minuto\\xa0=\\xa05\\xa0minutos en cortar las patatas.']\nnew_fact = infer_new_fact(selected) # 'Así que tardará un total de 90\\xa0minutos pelando\\xa0+\\xa05\\xa0minutos cortando\\xa0=\\xa095\\xa0minutos en total preparando las patatas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto tardará Billy en terminar de preparar las patatas?', 'Así que tardará un total de 90\\xa0minutos pelando\\xa0+\\xa05\\xa0minutos cortando\\xa0=\\xa095\\xa0minutos en total preparando las patatas.']\nnew_fact = infer_new_fact(selected) # 'The answer is 95'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '95'"}
{"id": "GSM8K_175_48fc080fa9", "context": "", "options": [], "answer": "15", "reasoning_graph_edges": [{"antecedents": [3, 4], "consequent": 7}, {"antecedents": [2], "consequent": 8}, {"antecedents": [7, 8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}, {"antecedents": [2, 10], "consequent": 11}, {"antecedents": [5, 6, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent3 & sent4 -> int1: Each gallon sells for a total of $10 because 20 x .5 = 10; sent2 -> int2: Each gallon costs $5 to make because 3 + 2 = 5; int1 & int2 -> int3: They make $5 off each gallon because 10 - 5 = 5; int3 & sent5 -> int4: They made and sold 5 gallons because 25 / 5 = 5; int4 & sent2 -> int5: They spent $15 on lemons because 5 x 3 = 15; int5 & sent5 & sent6 -> int6: The answer is 15;", "textual_logical_units": {"1": "Juan y su hermano Carlos venden limonada.", "2": "Cada litro que hacen les cuesta 3 € en limones y 2 € en azúcar.", "3": "Venden cada vaso por 0,50 € y", "4": "obtienen 20 vasos por litro.", "5": "Si obtuvieron 25 € en ganancias,", "6": "¿cuánto gastaron en limones?", "7": "Cada litro se vende por un total de 10 € porque 20 x 0,5 = 10", "8": "Cada litro les cuesta 5 € porque 3 + 2 = 5", "9": "Ganan 5 € por litro porque 10 - 5 = 5", "10": "Hicieron y vendieron 5 litros porque 25 / 5 = 5", "11": "Gastaron 15 € en limones porque 5 x 3 = 15", "12": "The answer is 15"}, "human_translated": true, "code_input": "####\nfacts = [ 'Juan y su hermano Carlos venden limonada.',\n  'Cada litro que hacen les cuesta 3\\xa0€ en limones y 2\\xa0€ en azúcar.',\n  'Venden cada vaso por 0,50\\xa0€ y',\n  'obtienen 20\\xa0vasos por litro.',\n  'Si obtuvieron 25\\xa0€ en ganancias,']\nquestion = '¿cuánto gastaron en limones?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Venden cada vaso por 0,50\\xa0€ y', 'obtienen 20\\xa0vasos por litro.']\nnew_fact = infer_new_fact(selected) # 'Cada litro se vende por un total de 10\\xa0€ porque 20\\xa0x\\xa00,5\\xa0=\\xa010'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada litro que hacen les cuesta 3\\xa0€ en limones y 2\\xa0€ en azúcar.']\nnew_fact = infer_new_fact(selected) # 'Cada litro les cuesta 5\\xa0€ porque 3\\xa0+\\xa02\\xa0=\\xa05'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada litro se vende por un total de 10\\xa0€ porque 20\\xa0x\\xa00,5\\xa0=\\xa010', 'Cada litro les cuesta 5\\xa0€ porque 3\\xa0+\\xa02\\xa0=\\xa05']\nnew_fact = infer_new_fact(selected) # 'Ganan 5\\xa0€ por litro porque 10\\xa0-\\xa05\\xa0=\\xa05'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si obtuvieron 25\\xa0€ en ganancias,', 'Ganan 5\\xa0€ por litro porque 10\\xa0-\\xa05\\xa0=\\xa05']\nnew_fact = infer_new_fact(selected) # 'Hicieron y vendieron 5\\xa0litros porque 25\\xa0/\\xa05\\xa0=\\xa05'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada litro que hacen les cuesta 3\\xa0€ en limones y 2\\xa0€ en azúcar.', 'Hicieron y vendieron 5\\xa0litros porque 25\\xa0/\\xa05\\xa0=\\xa05']\nnew_fact = infer_new_fact(selected) # 'Gastaron 15\\xa0€ en limones porque 5\\xa0x\\xa03\\xa0=\\xa015'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si obtuvieron 25\\xa0€ en ganancias,', '¿cuánto gastaron en limones?', 'Gastaron 15\\xa0€ en limones porque 5\\xa0x\\xa03\\xa0=\\xa015']\nnew_fact = infer_new_fact(selected) # 'The answer is 15'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '15'"}
{"id": "GSM8K_176_4492f48909", "context": "", "options": [], "answer": "100", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: If there were 80 Japanese, the number of Chinese was 240-80=160.; int1 & sent3 -> int2: Since there were 60 boys in the Chinese team, there were 160-60 = 100 girls in the Chinese team.; int2 & sent4 -> int3: The answer is 100;", "textual_logical_units": {"1": "En una carrera con 240 asiáticos, 80 eran japoneses", "2": "y el resto eran chinos.", "3": "Si el número de chicos en el equipo chino fuera de 60,", "4": "¿cuántas chicas había en el equipo chino?", "5": "Si había 80 japoneses, el número de chinos era de 240 - 80 = 160.", "6": "Como había 60 chicos en el equipo chino, había 160 - 60 = 100 chicas en el equipo chino.", "7": "The answer is 100"}, "human_translated": true, "code_input": "####\nfacts = ['En una carrera con 240\\xa0asiáticos, 80 eran japoneses', 'y el resto eran chinos.', 'Si el número de chicos en el equipo chino fuera de 60,']\nquestion = '¿cuántas chicas había en el equipo chino?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['En una carrera con 240\\xa0asiáticos, 80 eran japoneses', 'y el resto eran chinos.']\nnew_fact = infer_new_fact(selected) # 'Si había 80\\xa0japoneses, el número de chinos era de 240\\xa0-\\xa080\\xa0=\\xa0160.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si el número de chicos en el equipo chino fuera de 60,', 'Si había 80\\xa0japoneses, el número de chinos era de 240\\xa0-\\xa080\\xa0=\\xa0160.']\nnew_fact = infer_new_fact(selected) # 'Como había 60 chicos en el equipo chino, había 160\\xa0-\\xa060\\xa0=\\xa0100\\xa0chicas en el equipo chino.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántas chicas había en el equipo chino?', 'Como había 60 chicos en el equipo chino, había 160\\xa0-\\xa060\\xa0=\\xa0100\\xa0chicas en el equipo chino.']\nnew_fact = infer_new_fact(selected) # 'The answer is 100'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '100'"}
{"id": "GSM8K_177_1f3cd00881", "context": "", "options": [], "answer": "350", "reasoning_graph_edges": [{"antecedents": [1, 6], "consequent": 8}, {"antecedents": [2, 6], "consequent": 9}, {"antecedents": [8, 9], "consequent": 10}, {"antecedents": [6, 10], "consequent": 11}, {"antecedents": [3, 11], "consequent": 12}, {"antecedents": [4, 5], "consequent": 13}, {"antecedents": [12, 13], "consequent": 14}, {"antecedents": [6, 7, 14], "consequent": 15}], "metadata": [], "linearized_output_en": "sent1 & sent6 -> int1: When Zaid spend 1/4 of his salary on rent, he parts with 1/4*$6000 = $1500; sent2 & sent6 -> int2: Car fuel costs him 1/3*$6000 = $2000; int1 & int2 -> int3: Total expenses amount to $2000+$1500 = $3500; int3 & sent6 -> int4: The total amount of money he remains with is $6000-$3500 = $2500; int4 & sent3 -> int5: He donates half of the remaining amount, which is 1/2*$2500 = $1250; sent4 & sent5 -> int6: The total amount of money given to his wife and daughter is $200+$700 = $900; int5 & int6 -> int7: After the amount that he gave the wife and daughter, the total amount remaining is $1250-$900 = $350; int7 & sent6 & sent7 -> int8: The answer is 350;", "textual_logical_units": {"1": "Zaid gasta 1/4 de su salario en alquiler,", "2": "1/3 en combustible para el coche y", "3": "dona la mitad del importe restante a su organización benéfica favorita.", "4": "Le da a su hija 200 € para que los use en sus gastos semanales y", "5": "700 € a su esposa como presupuesto para comida y otros artículos del hogar.", "6": "Si Zaid gana 6000 € al mes,", "7": "¿cuánto dinero le quedará después de todos estos gastos y donaciones?", "8": "Cuando Zaid gasta 1/4 de su salario en alquiler, se queda con 1 / 4 x 6000 € = 1500 €", "9": "El combustible del coche le cuesta 1 / 3 * 6000 € = 2000 €", "10": "Los gastos totales ascienden a 2000 € + 1500 € = 3500 €", "11": "La cantidad total de dinero con la que se queda es de 6000 € - 3500 € = 2500 €", "12": "Él dona la mitad de la cantidad restante, que es 1 / 2 * 2500 € = 1250 €", "13": "La cantidad total de dinero que da a su esposa y su hija es de 200 € + 700 € = 900 €", "14": "Después de la cantidad que da a la esposa y a la hija, el importe total que le queda es de 1250 - 900 € = 350 €", "15": "The answer is 350"}, "human_translated": true, "code_input": "####\nfacts = [ 'Zaid gasta 1/4 de su salario en alquiler,',\n  '1/3 en combustible para el coche y',\n  'dona la mitad del importe restante a su organización benéfica favorita.',\n  'Le da a su hija 200\\xa0€ para que los use en sus gastos semanales y',\n  '700\\xa0€ a su esposa como presupuesto para comida y otros artículos del hogar.',\n  'Si Zaid gana 6000\\xa0€ al mes,']\nquestion = '¿cuánto dinero le quedará después de todos estos gastos y donaciones?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Zaid gasta 1/4 de su salario en alquiler,', 'Si Zaid gana 6000\\xa0€ al mes,']\nnew_fact = infer_new_fact(selected) # 'Cuando Zaid gasta 1/4 de su salario en alquiler, se queda con 1\\xa0/\\xa04\\xa0x\\xa06000\\xa0€\\xa0=\\xa01500\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['1/3 en combustible para el coche y', 'Si Zaid gana 6000\\xa0€ al mes,']\nnew_fact = infer_new_fact(selected) # 'El combustible del coche le cuesta 1\\xa0/\\xa03\\xa0*\\xa06000\\xa0€\\xa0=\\xa02000\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cuando Zaid gasta 1/4 de su salario en alquiler, se queda con 1\\xa0/\\xa04\\xa0x\\xa06000\\xa0€\\xa0=\\xa01500\\xa0€', 'El combustible del coche le cuesta 1\\xa0/\\xa03\\xa0*\\xa06000\\xa0€\\xa0=\\xa02000\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Los gastos totales ascienden a 2000\\xa0€\\xa0+\\xa01500\\xa0€\\xa0=\\xa03500\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Zaid gana 6000\\xa0€ al mes,', 'Los gastos totales ascienden a 2000\\xa0€\\xa0+\\xa01500\\xa0€\\xa0=\\xa03500\\xa0€']\nnew_fact = infer_new_fact(selected) # 'La cantidad total de dinero con la que se queda es de 6000\\xa0€\\xa0-\\xa03500\\xa0€\\xa0=\\xa02500\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['dona la mitad del importe restante a su organización benéfica favorita.', 'La cantidad total de dinero con la que se queda es de 6000\\xa0€\\xa0-\\xa03500\\xa0€\\xa0=\\xa02500\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Él dona la mitad de la cantidad restante, que es 1\\xa0/\\xa02\\xa0*\\xa02500\\xa0€\\xa0=\\xa01250\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Le da a su hija 200\\xa0€ para que los use en sus gastos semanales y', '700\\xa0€ a su esposa como presupuesto para comida y otros artículos del hogar.']\nnew_fact = infer_new_fact(selected) # 'La cantidad total de dinero que da a su esposa y su hija es de 200\\xa0€\\xa0+\\xa0700\\xa0€\\xa0=\\xa0900\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Él dona la mitad de la cantidad restante, que es 1\\xa0/\\xa02\\xa0*\\xa02500\\xa0€\\xa0=\\xa01250\\xa0€', 'La cantidad total de dinero que da a su esposa y su hija es de 200\\xa0€\\xa0+\\xa0700\\xa0€\\xa0=\\xa0900\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Después de la cantidad que da a la esposa y a la hija, el importe total que le queda es de 1250\\xa0-\\xa0900\\xa0€\\xa0=\\xa0350\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Zaid gana 6000\\xa0€ al mes,', '¿cuánto dinero le quedará después de todos estos gastos y donaciones?', 'Después de la cantidad que da a la esposa y a la hija, el importe total que le queda es de 1250\\xa0-\\xa0900\\xa0€\\xa0=\\xa0350\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 350'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '350'"}
{"id": "GSM8K_178_9d25237f21", "context": "", "options": [], "answer": "122", "reasoning_graph_edges": [{"antecedents": [1, 2, 3], "consequent": 5}, {"antecedents": [5], "consequent": 6}, {"antecedents": [1, 5], "consequent": 7}, {"antecedents": [6, 7], "consequent": 8}, {"antecedents": [3, 4, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent1 & sent2 & sent3 -> int1: If Bo has 40 crabs, then Monic, who has 4 fewer crabs than Bo, has 40-4 = 36 crabs.; int1 -> int2: Bo and Monic have a total of 36+40 = 76 crabs.; int1 & sent1 -> int3: Since Monic has 36 crabs, Rani's number of crabs is 36+ 10 = 46.; int2 & int3 -> int4: Together, the three have 76+46 = 122 crabs.; int4 & sent3 & sent4 -> int5: The answer is 122;", "textual_logical_units": {"1": "Rani tiene diez cangrejos más que Monic,", "2": "que tiene 4 cangrejos menos que Bo.", "3": "Si Bo tiene 40 cangrejos,", "4": "calcula el número total de cangrejos que tienen los tres juntos.", "5": "Si Bo tiene 40 cangrejos, Monic, que tiene 4 cangrejos menos que Bo, tiene 40 - 4 = 36 cangrejos.", "6": "Bo y Monic tienen un total de 36 + 40 = 76 cangrejos.", "7": "Como Monic tiene 36 cangrejos, el número de cangrejos de Rani es 36 + 10 = 46.", "8": "Juntos, los tres tienen 76 + 46 = 122 cangrejos.", "9": "The answer is 122"}, "human_translated": true, "code_input": "####\nfacts = ['Rani tiene diez cangrejos más que Monic,', 'que tiene 4 cangrejos menos que Bo.', 'Si Bo tiene 40\\xa0cangrejos,']\nquestion = 'calcula el número total de cangrejos que tienen los tres juntos.'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Rani tiene diez cangrejos más que Monic,', 'que tiene 4 cangrejos menos que Bo.', 'Si Bo tiene 40\\xa0cangrejos,']\nnew_fact = infer_new_fact(selected) # 'Si Bo tiene 40\\xa0cangrejos, Monic, que tiene 4\\xa0cangrejos menos que Bo, tiene 40\\xa0-\\xa04\\xa0=\\xa036\\xa0cangrejos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Bo tiene 40\\xa0cangrejos, Monic, que tiene 4\\xa0cangrejos menos que Bo, tiene 40\\xa0-\\xa04\\xa0=\\xa036\\xa0cangrejos.']\nnew_fact = infer_new_fact(selected) # 'Bo y Monic tienen un total de 36\\xa0+\\xa040\\xa0=\\xa076\\xa0cangrejos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Rani tiene diez cangrejos más que Monic,', 'Si Bo tiene 40\\xa0cangrejos, Monic, que tiene 4\\xa0cangrejos menos que Bo, tiene 40\\xa0-\\xa04\\xa0=\\xa036\\xa0cangrejos.']\nnew_fact = infer_new_fact(selected) # 'Como Monic tiene 36\\xa0cangrejos, el número de cangrejos de Rani es 36\\xa0+\\xa010\\xa0=\\xa046.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Bo y Monic tienen un total de 36\\xa0+\\xa040\\xa0=\\xa076\\xa0cangrejos.', 'Como Monic tiene 36\\xa0cangrejos, el número de cangrejos de Rani es 36\\xa0+\\xa010\\xa0=\\xa046.']\nnew_fact = infer_new_fact(selected) # 'Juntos, los tres tienen 76\\xa0+\\xa046\\xa0=\\xa0122\\xa0cangrejos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Bo tiene 40\\xa0cangrejos,', 'calcula el número total de cangrejos que tienen los tres juntos.', 'Juntos, los tres tienen 76\\xa0+\\xa046\\xa0=\\xa0122\\xa0cangrejos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 122'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '122'"}
{"id": "GSM8K_179_13ab58e3d6", "context": "", "options": [], "answer": "130", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [4, 5], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Lloyd tutored 5 + 8 = 13 hours for the first two weeks.; int1 & sent1 -> int2: Therefore, he earned 13 x $10 = $130 for the first two weeks.; int1 & sent4 -> int3: The answer is 130;", "textual_logical_units": {"1": "Lloyd gana 10 €/hora con clases particulares de matemáticas.", "2": "Fue tutor de 5 horas durante la primera semana y", "3": "8 horas durante la segunda semana.", "4": "¿Cuánto ganó las dos primeras semanas?", "5": "Lloyd dio clases particulares de 5 + 8 = 13 horas durante las dos primeras semanas.", "6": "Por lo tanto, ganó 13 x 10 = 130 € durante las dos primeras semanas.", "7": "The answer is 130"}, "human_translated": true, "code_input": "####\nfacts = [ 'Lloyd gana 10\\xa0€/hora con clases particulares de matemáticas.',\n  'Fue tutor de 5\\xa0horas durante la primera semana y',\n  '8\\xa0horas durante la segunda semana.']\nquestion = '¿Cuánto ganó las dos primeras semanas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Fue tutor de 5\\xa0horas durante la primera semana y', '8\\xa0horas durante la segunda semana.']\nnew_fact = infer_new_fact(selected) # 'Lloyd dio clases particulares de 5\\xa0+\\xa08\\xa0=\\xa013\\xa0horas durante las dos primeras semanas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Lloyd gana 10\\xa0€/hora con clases particulares de matemáticas.', 'Lloyd dio clases particulares de 5\\xa0+\\xa08\\xa0=\\xa013\\xa0horas durante las dos primeras semanas.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, ganó 13\\xa0x\\xa010\\xa0=\\xa0130\\xa0€ durante las dos primeras semanas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto ganó las dos primeras semanas?', 'Lloyd dio clases particulares de 5\\xa0+\\xa08\\xa0=\\xa013\\xa0horas durante las dos primeras semanas.']\nnew_fact = infer_new_fact(selected) # 'The answer is 130'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '130'"}
{"id": "GSM8K_180_8ee2b98692", "context": "", "options": [], "answer": "20", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [2, 3, 4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: The winner got 3/4*80 = 60 votes.; int1 & sent3 -> int2: The loser got 80-60 = 20 votes.; int2 & sent2 & sent3 & sent4 -> int3: The answer is 20;", "textual_logical_units": {"1": "Dos candidatos se postulan para representantes de la clase en la escuela de Sarai.", "2": "Si el ganador obtuvo 3/4 de los votos y", "3": "el número total de estudiantes que votaron en la clase fue de 80,", "4": "calcula el número de votos que obtuvo el perdedor.", "5": "El ganador obtuvo 3 / 4 * 80 = 60 votos.", "6": "El perdedor obtuvo 80 - 60 = 20 votos.", "7": "The answer is 20"}, "human_translated": true, "code_input": "####\nfacts = [ 'Dos candidatos se postulan para representantes de la clase en la escuela de Sarai.',\n  'Si el ganador obtuvo 3/4 de los votos y',\n  'el número total de estudiantes que votaron en la clase fue de 80,']\nquestion = 'calcula el número de votos que obtuvo el perdedor.'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Si el ganador obtuvo 3/4 de los votos y', 'el número total de estudiantes que votaron en la clase fue de 80,']\nnew_fact = infer_new_fact(selected) # 'El ganador obtuvo 3\\xa0/\\xa04\\xa0*\\xa080\\xa0=\\xa060\\xa0votos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['el número total de estudiantes que votaron en la clase fue de 80,', 'El ganador obtuvo 3\\xa0/\\xa04\\xa0*\\xa080\\xa0=\\xa060\\xa0votos.']\nnew_fact = infer_new_fact(selected) # 'El perdedor obtuvo 80\\xa0-\\xa060\\xa0=\\xa020\\xa0votos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si el ganador obtuvo 3/4 de los votos y', 'el número total de estudiantes que votaron en la clase fue de 80,', 'calcula el número de votos que obtuvo el perdedor.', 'El perdedor obtuvo 80\\xa0-\\xa060\\xa0=\\xa020\\xa0votos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 20'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '20'"}
{"id": "GSM8K_181_2970bf0efc", "context": "", "options": [], "answer": "160", "reasoning_graph_edges": [{"antecedents": [4, 5], "consequent": 8}, {"antecedents": [3, 5, 8], "consequent": 9}, {"antecedents": [7, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent4 & sent5 -> int1: Sandra ordered 200 pink calla lilies / 5 = 40 white carnations.; int1 & sent3 & sent5 -> int2: Sandra therefore ordered 4 * 40 = 160 red roses.; int2 & sent7 -> int3: The answer is 160;", "textual_logical_units": {"1": "Sandra, la florista de la esquina,", "2": "está muy enfadada con la entrega incompleta del pedido de Fred.", "3": "Sandra había pedido cuatro veces más rosas rojas que claveles blancos.", "4": "También pidió 200 calas rosas,", "5": "que eran cinco veces el número de claveles blancos.", "6": "Sandra ha amenazado con cambiar de proveedor si las rosas rojas que faltan no se entregan antes de las 5 de la tarde.", "7": "Para que el negocio de Sandra siga en buen funcionamiento, ¿cuántas rosas rojas debe entregar Fred antes de las 5 de la tarde?", "8": "Sandra pidió 200 calas rosas / 5 = 40 claveles blancos.", "9": "Por lo tanto, Sandra pidió 4 x 40 = 160 rosas rojas.", "10": "The answer is 160"}, "human_translated": true, "code_input": "####\nfacts = [ 'Sandra, la florista de la esquina,',\n  'está muy enfadada con la entrega incompleta del pedido de Fred.',\n  'Sandra había pedido cuatro veces más rosas rojas que claveles blancos.',\n  'También pidió 200\\xa0calas rosas,',\n  'que eran cinco veces el número de claveles blancos.',\n  'Sandra ha amenazado con cambiar de proveedor si las rosas rojas que faltan no se entregan antes de las 5 de la tarde.']\nquestion = 'Para que el negocio de Sandra siga en buen funcionamiento, ¿cuántas rosas rojas debe entregar Fred antes de las 5 de la tarde?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['También pidió 200\\xa0calas rosas,', 'que eran cinco veces el número de claveles blancos.']\nnew_fact = infer_new_fact(selected) # 'Sandra pidió 200\\xa0calas rosas\\xa0/\\xa05\\xa0=\\xa040\\xa0claveles blancos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Sandra había pedido cuatro veces más rosas rojas que claveles blancos.', 'que eran cinco veces el número de claveles blancos.', 'Sandra pidió 200\\xa0calas rosas\\xa0/\\xa05\\xa0=\\xa040\\xa0claveles blancos.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, Sandra pidió 4\\xa0x\\xa040\\xa0=\\xa0160\\xa0rosas rojas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Para que el negocio de Sandra siga en buen funcionamiento, ¿cuántas rosas rojas debe entregar Fred antes de las 5 de la tarde?', 'Por lo tanto, Sandra pidió 4\\xa0x\\xa040\\xa0=\\xa0160\\xa0rosas rojas.']\nnew_fact = infer_new_fact(selected) # 'The answer is 160'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '160'"}
{"id": "GSM8K_182_2654bdac99", "context": "", "options": [], "answer": "23", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 4}, {"antecedents": [2, 3, 4], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [1, 6], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: 2 years ago Jan was 30-2=28 years old; int1 & sent2 & sent3 -> int2: So Marks age two years ago was 5+28/2=19 years old; int2 & sent1 -> int3: Mark is now 19+2=21 years old; int3 & sent1 -> int4: So Jean is 21+2=23 years old; int4 & sent3 -> int5: The answer is 23;", "textual_logical_units": {"1": "Jean es dos años mayor que Mark.", "2": "Hace dos años, Mark era 5 años mayor que la mitad de la edad de Jan.", "3": "Si Jan tiene 30 años, ¿cuántos años tiene Jean?", "4": "Hace 2 años, Jan tenía 30 - 2 = 28 años", "5": "Así que la edad de Mark hace dos años era de 5 + 28 / 2 = 19 años", "6": "Mark tiene ahora 19 + 2 = 21 años", "7": "Así que Jean tiene 21 + 2 = 23 años", "8": "The answer is 23"}, "human_translated": true, "code_input": "####\nfacts = ['Jean es dos años mayor que Mark.', 'Hace dos años, Mark era 5\\xa0años mayor que la mitad de la edad de Jan.']\nquestion = 'Si Jan tiene 30\\xa0años, ¿cuántos años tiene Jean?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Hace dos años, Mark era 5\\xa0años mayor que la mitad de la edad de Jan.', 'Si Jan tiene 30\\xa0años, ¿cuántos años tiene Jean?']\nnew_fact = infer_new_fact(selected) # 'Hace 2\\xa0años, Jan tenía 30\\xa0-\\xa02\\xa0=\\xa028\\xa0años'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Hace dos años, Mark era 5\\xa0años mayor que la mitad de la edad de Jan.', 'Si Jan tiene 30\\xa0años, ¿cuántos años tiene Jean?', 'Hace 2\\xa0años, Jan tenía 30\\xa0-\\xa02\\xa0=\\xa028\\xa0años']\nnew_fact = infer_new_fact(selected) # 'Así que la edad de Mark hace dos años era de 5\\xa0+\\xa028\\xa0/\\xa02\\xa0=\\xa019\\xa0años'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Jean es dos años mayor que Mark.', 'Así que la edad de Mark hace dos años era de 5\\xa0+\\xa028\\xa0/\\xa02\\xa0=\\xa019\\xa0años']\nnew_fact = infer_new_fact(selected) # 'Mark tiene ahora 19\\xa0+\\xa02\\xa0=\\xa021\\xa0años'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Jean es dos años mayor que Mark.', 'Mark tiene ahora 19\\xa0+\\xa02\\xa0=\\xa021\\xa0años']\nnew_fact = infer_new_fact(selected) # 'Así que Jean tiene 21\\xa0+\\xa02\\xa0=\\xa023\\xa0años'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Jan tiene 30\\xa0años, ¿cuántos años tiene Jean?', 'Así que Jean tiene 21\\xa0+\\xa02\\xa0=\\xa023\\xa0años']\nnew_fact = infer_new_fact(selected) # 'The answer is 23'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '23'"}
{"id": "GSM8K_183_33fc9ff0f7", "context": "", "options": [], "answer": "2", "reasoning_graph_edges": [{"antecedents": [3], "consequent": 7}, {"antecedents": [4, 5], "consequent": 8}, {"antecedents": [4, 5, 8], "consequent": 9}, {"antecedents": [7, 9], "consequent": 10}, {"antecedents": [6, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent3 -> int1: The first team will finish the relay in 4*55 = 220 seconds.; sent4 & sent5 -> int2: On the second team we must determine each runner's individual pace. We know the first runner will complete their leg in 60 seconds, so the second runner will take 60 - 3 = 57 seconds, then the third will take 57 - 3 = 54 seconds, and the fourth will take 54 - 3 = 51 seconds.; int2 & sent4 & sent5 -> int3: Thus, the second team will finish the relay in 60 + 57 + 54 + 51 = 222 seconds.; int1 & int3 -> int4: Therefore, the first team will finish 222 - 220 = 2 seconds faster than the second team.; int4 & sent6 -> int5: The answer is 2;", "textual_logical_units": {"1": "Dos equipos de atletismo compiten entre sí en un relevo de 4 por 400 metros; una carrera en la que cada equipo competidor tiene cuatro miembros que corren 400 metros, o una vuelta, alrededor de una pista estándar.", "2": "Uno de los dos equipos es muy completo y", "3": "cada uno de sus miembros correrá su tramo de 400 metros exactamente en 55 segundos.", "4": "El otro equipo es menos completo: su primer corredor correrá su tramo de 400 metros en 60 segundos", "5": "cada corredor subsiguiente será 3 segundos más rápido que el corredor anterior.", "6": "Con esta información, ¿por cuántos segundos ganará el equipo más rápido?", "7": "El primer equipo terminará el relevo en 4 * 55 = 220 segundos.", "8": "En el segundo equipo, debemos determinar el ritmo individual de cada corredor. Sabemos que el primer corredor completará su tramo en 60 segundos, por lo que el segundo corredor tardará 60 - 3 = 57 segundos; luego, el tercero tardará 57 - 3 = 54 segundos y el cuarto tardará 54 - 3 = 51 segundos.", "9": "Así, el segundo equipo terminará el relevo en 60 + 57 + 54 + 51 = 222 segundos.", "10": "Por lo tanto, el primer equipo terminará 222 - 220 = 2 segundos más rápido que el segundo equipo.", "11": "The answer is 2"}, "human_translated": true, "code_input": "####\nfacts = [ 'Dos equipos de atletismo compiten entre sí en un relevo de 4\\xa0por 400\\xa0metros; una carrera en la que cada equipo competidor tiene cuatro miembros que '\n  'corren 400\\xa0metros, o una vuelta, alrededor de una pista estándar.',\n  'Uno de los dos equipos es muy completo y',\n  'cada uno de sus miembros correrá su tramo de 400\\xa0metros exactamente en 55\\xa0segundos.',\n  'El otro equipo es menos completo: su primer corredor correrá su tramo de 400\\xa0metros en 60\\xa0segundos',\n  'cada corredor subsiguiente será 3\\xa0segundos más rápido que el corredor anterior.']\nquestion = 'Con esta información, ¿por cuántos segundos ganará el equipo más rápido?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['cada uno de sus miembros correrá su tramo de 400\\xa0metros exactamente en 55\\xa0segundos.']\nnew_fact = infer_new_fact(selected) # 'El primer equipo terminará el relevo en 4\\xa0*\\xa055\\xa0=\\xa0220\\xa0segundos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El otro equipo es menos completo: su primer corredor correrá su tramo de 400\\xa0metros en 60\\xa0segundos', 'cada corredor subsiguiente será 3\\xa0segundos más rápido que el corredor anterior.']\nnew_fact = infer_new_fact(selected) # 'En el segundo equipo, debemos determinar el ritmo individual de cada corredor. Sabemos que el primer corredor completará su tramo en 60\\xa0segundos, por lo que el segundo corredor tardará 60\\xa0-\\xa03\\xa0=\\xa057\\xa0segundos; luego, el tercero tardará 57\\xa0-\\xa03\\xa0=\\xa054\\xa0segundos y el cuarto tardará 54\\xa0-\\xa03\\xa0=\\xa051\\xa0segundos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El otro equipo es menos completo: su primer corredor correrá su tramo de 400\\xa0metros en 60\\xa0segundos', 'cada corredor subsiguiente será 3\\xa0segundos más rápido que el corredor anterior.', 'En el segundo equipo, debemos determinar el ritmo individual de cada corredor. Sabemos que el primer corredor completará su tramo en 60\\xa0segundos, por lo que el segundo corredor tardará 60\\xa0-\\xa03\\xa0=\\xa057\\xa0segundos; luego, el tercero tardará 57\\xa0-\\xa03\\xa0=\\xa054\\xa0segundos y el cuarto tardará 54\\xa0-\\xa03\\xa0=\\xa051\\xa0segundos.']\nnew_fact = infer_new_fact(selected) # 'Así, el segundo equipo terminará el relevo en 60\\xa0+\\xa057\\xa0+\\xa054\\xa0+\\xa051\\xa0=\\xa0222\\xa0segundos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El primer equipo terminará el relevo en 4\\xa0*\\xa055\\xa0=\\xa0220\\xa0segundos.', 'Así, el segundo equipo terminará el relevo en 60\\xa0+\\xa057\\xa0+\\xa054\\xa0+\\xa051\\xa0=\\xa0222\\xa0segundos.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, el primer equipo terminará 222\\xa0-\\xa0220\\xa0=\\xa02\\xa0segundos más rápido que el segundo equipo.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Con esta información, ¿por cuántos segundos ganará el equipo más rápido?', 'Por lo tanto, el primer equipo terminará 222\\xa0-\\xa0220\\xa0=\\xa02\\xa0segundos más rápido que el segundo equipo.']\nnew_fact = infer_new_fact(selected) # 'The answer is 2'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '2'"}
{"id": "GSM8K_184_4de5e61d39", "context": "", "options": [], "answer": "25", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 3}, {"antecedents": [2, 3], "consequent": 4}, {"antecedents": [3, 4], "consequent": 5}, {"antecedents": [2, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: There are 3 numbers greater than 3 on the dice, so the chances of rolling one of them are 3 / 6 = 50%.; int1 & sent2 -> int2: The chance of rolling one even number is 50%, so the chance of rolling two in a row is 50% * 50% = 25%.; int1 & int2 -> int3: The difference between these two probabilities is 50% - 25% = 25%.; int3 & sent2 -> int4: The answer is 25;", "textual_logical_units": {"1": "Jerry está tirando un dado de seis caras.", "2": "¿Cuánto más probabilidades hay (expresadas en porcentaje) de que saque un número mayor que 3 que de que saque dos números pares seguidos?", "3": "Hay 3 números mayores que 3 en el dado, por lo que las probabilidades de sacar uno de ellos son 3 / 6 = 50 %.", "4": "La probabilidad de sacar un número par es del 50 %, por lo que la probabilidad de sacar dos seguidos es del 50 % * 50 % = 25 %.", "5": "La diferencia entre estas dos probabilidades es del 50 % - 25 % = 25 %.", "6": "The answer is 25"}, "human_translated": true, "code_input": "####\nfacts = ['Jerry está tirando un dado de seis caras.']\nquestion = '¿Cuánto más probabilidades hay (expresadas en porcentaje) de que saque un número mayor que 3 que de que saque dos números pares seguidos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Jerry está tirando un dado de seis caras.', '¿Cuánto más probabilidades hay (expresadas en porcentaje) de que saque un número mayor que 3 que de que saque dos números pares seguidos?']\nnew_fact = infer_new_fact(selected) # 'Hay 3\\xa0números mayores que\\xa03 en el dado, por lo que las probabilidades de sacar uno de ellos son 3\\xa0/\\xa06\\xa0=\\xa050\\xa0%.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto más probabilidades hay (expresadas en porcentaje) de que saque un número mayor que 3 que de que saque dos números pares seguidos?', 'Hay 3\\xa0números mayores que\\xa03 en el dado, por lo que las probabilidades de sacar uno de ellos son 3\\xa0/\\xa06\\xa0=\\xa050\\xa0%.']\nnew_fact = infer_new_fact(selected) # 'La probabilidad de sacar un número par es del 50\\xa0%, por lo que la probabilidad de sacar dos seguidos es del 50\\xa0%\\xa0*\\xa050\\xa0%\\xa0=\\xa025\\xa0%.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Hay 3\\xa0números mayores que\\xa03 en el dado, por lo que las probabilidades de sacar uno de ellos son 3\\xa0/\\xa06\\xa0=\\xa050\\xa0%.', 'La probabilidad de sacar un número par es del 50\\xa0%, por lo que la probabilidad de sacar dos seguidos es del 50\\xa0%\\xa0*\\xa050\\xa0%\\xa0=\\xa025\\xa0%.']\nnew_fact = infer_new_fact(selected) # 'La diferencia entre estas dos probabilidades es del 50\\xa0%\\xa0-\\xa025\\xa0%\\xa0=\\xa025\\xa0%.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto más probabilidades hay (expresadas en porcentaje) de que saque un número mayor que 3 que de que saque dos números pares seguidos?', 'La diferencia entre estas dos probabilidades es del 50\\xa0%\\xa0-\\xa025\\xa0%\\xa0=\\xa025\\xa0%.']\nnew_fact = infer_new_fact(selected) # 'The answer is 25'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '25'"}
{"id": "GSM8K_185_19ebf2310f", "context": "", "options": [], "answer": "30", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: If Jenna got half as many apples as her mom, then she got 1/2 * 20 apples = 10 apples; int1 & sent3 -> int2: Together, they had 10 apples + 20 apples = 30 apples; int2 & sent4 -> int3: The answer is 30;", "textual_logical_units": {"1": "Jenna y su madre recogieron algunas manzanas de su granja de manzanas.", "2": "Jenna recogió la mitad de manzanas que su madre.", "3": "Si su madre recogió 20 manzanas,", "4": "¿cuántas manzanas recogieron ambas?", "5": "Si Jenna recogió la mitad de manzanas que su madre, recogió 1 / 2 * 20 manzanas = 10 manzanas", "6": "Juntas, recogieron 10 manzanas + 20 manzanas = 30 manzanas", "7": "The answer is 30"}, "human_translated": true, "code_input": "####\nfacts = [ 'Jenna y su madre recogieron algunas manzanas de su granja de manzanas.',\n  'Jenna recogió la mitad de manzanas que su madre.',\n  'Si su madre recogió 20\\xa0manzanas,']\nquestion = '¿cuántas manzanas recogieron ambas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Jenna recogió la mitad de manzanas que su madre.', 'Si su madre recogió 20\\xa0manzanas,']\nnew_fact = infer_new_fact(selected) # 'Si Jenna recogió la mitad de manzanas que su madre, recogió 1\\xa0/\\xa02\\xa0*\\xa020\\xa0manzanas\\xa0=\\xa010\\xa0manzanas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si su madre recogió 20\\xa0manzanas,', 'Si Jenna recogió la mitad de manzanas que su madre, recogió 1\\xa0/\\xa02\\xa0*\\xa020\\xa0manzanas\\xa0=\\xa010\\xa0manzanas']\nnew_fact = infer_new_fact(selected) # 'Juntas, recogieron 10\\xa0manzanas\\xa0+\\xa020\\xa0manzanas\\xa0=\\xa030\\xa0manzanas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántas manzanas recogieron ambas?', 'Juntas, recogieron 10\\xa0manzanas\\xa0+\\xa020\\xa0manzanas\\xa0=\\xa030\\xa0manzanas']\nnew_fact = infer_new_fact(selected) # 'The answer is 30'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '30'"}
{"id": "GSM8K_186_3482d126f8", "context": "", "options": [], "answer": "5", "reasoning_graph_edges": [{"antecedents": [5, 6], "consequent": 11}, {"antecedents": [7, 11], "consequent": 12}, {"antecedents": [9, 12], "consequent": 13}, {"antecedents": [3, 13], "consequent": 14}, {"antecedents": [4, 14], "consequent": 15}, {"antecedents": [9, 10, 15], "consequent": 16}], "metadata": [], "linearized_output_en": "sent5 & sent6 -> int1: In the hamster cages, there are 10 cages * 5 pieces of straw per hamster cage = 50 pieces of straw.; int1 & sent7 -> int2: Between the rabbits and the hamsters, there are 50 pieces of straw for hamsters + 20 pieces of straw for rabbits = 70 pieces of straw.; int2 & sent9 -> int3: As the remaining straw is for the rats, the rats have a total of 160 used pieces of straw – 70 pieces of straw for the hamsters and rabbits = 90 pieces of straws.; int3 & sent3 -> int4: So in each cage, there are 90 pieces of straw / 3 cages = 30 pieces of straw.; int4 & sent4 -> int5: This means that each cage has 30 pieces of straw / 6 pieces of straw per rat = 5 rats.; int5 & sent10 & sent9 -> int6: The answer is 5;", "textual_logical_units": {"1": "Russell trabaja en una tienda de mascotas y", "2": "distribuye paja entre los roedores.", "3": "Las ratas están en 3 jaulas en grupos iguales y", "4": "a cada rata se le dan 6 trozos de paja.", "5": "Hay 10 jaulas individuales de hámsteres y", "6": "cada hámster recibe 5 trozos de paja.", "7": "También hay una jaula de conejos en la que se distribuyen 20 trozos de paja entre los conejos.", "8": "No se usa paja en ningún otro lugar de la tienda.", "9": "Si se han distribuido 160 trozos de paja entre los pequeños roedores,", "10": "¿cuántas ratas hay en cada jaula?", "11": "En las jaulas de hámsteres, hay 10 jaulas * 5 trozos de paja por jaula de hámster = 50 trozos de paja.", "12": "Entre los conejos y los hámsteres, hay 50 trozos de paja para hámsteres + 20 trozos de paja para conejos = 70 trozos de paja.", "13": "Como la paja restante es para las ratas, reciben un total de 160 trozos de paja usada - 70 trozos de paja para los hámsteres y conejos = 90 trozos de paja.", "14": "Así que, en cada jaula, hay 90 trozos de paja / 3 jaulas = 30 trozos de paja.", "15": "Esto significa que cada jaula tiene 30 trozos de paja / 6 trozos de paja por rata = 5 ratas.", "16": "The answer is 5"}, "human_translated": true, "code_input": "####\nfacts = [ 'Russell trabaja en una tienda de mascotas y',\n  'distribuye paja entre los roedores.',\n  'Las ratas están en 3\\xa0jaulas en grupos iguales y',\n  'a cada rata se le dan 6\\xa0trozos de paja.',\n  'Hay 10\\xa0jaulas individuales de hámsteres y',\n  'cada hámster recibe 5\\xa0trozos de paja.',\n  'También hay una jaula de conejos en la que se distribuyen 20\\xa0trozos de paja entre los conejos.',\n  'No se usa paja en ningún otro lugar de la tienda.',\n  'Si se han distribuido 160\\xa0trozos de paja entre los pequeños roedores,']\nquestion = '¿cuántas ratas hay en cada jaula?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Hay 10\\xa0jaulas individuales de hámsteres y', 'cada hámster recibe 5\\xa0trozos de paja.']\nnew_fact = infer_new_fact(selected) # 'En las jaulas de hámsteres, hay 10\\xa0jaulas\\xa0*\\xa05\\xa0trozos de paja por jaula de hámster = 50\\xa0trozos de paja.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['También hay una jaula de conejos en la que se distribuyen 20\\xa0trozos de paja entre los conejos.', 'En las jaulas de hámsteres, hay 10\\xa0jaulas\\xa0*\\xa05\\xa0trozos de paja por jaula de hámster = 50\\xa0trozos de paja.']\nnew_fact = infer_new_fact(selected) # 'Entre los conejos y los hámsteres, hay 50\\xa0trozos de paja para hámsteres\\xa0+\\xa020\\xa0trozos de paja para conejos\\xa0=\\xa070\\xa0trozos de paja.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si se han distribuido 160\\xa0trozos de paja entre los pequeños roedores,', 'Entre los conejos y los hámsteres, hay 50\\xa0trozos de paja para hámsteres\\xa0+\\xa020\\xa0trozos de paja para conejos\\xa0=\\xa070\\xa0trozos de paja.']\nnew_fact = infer_new_fact(selected) # 'Como la paja restante es para las ratas, reciben un total de 160\\xa0trozos de paja usada\\xa0-\\xa070\\xa0trozos de paja para los hámsteres y conejos\\xa0=\\xa090 trozos de paja.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Las ratas están en 3\\xa0jaulas en grupos iguales y', 'Como la paja restante es para las ratas, reciben un total de 160\\xa0trozos de paja usada\\xa0-\\xa070\\xa0trozos de paja para los hámsteres y conejos\\xa0=\\xa090 trozos de paja.']\nnew_fact = infer_new_fact(selected) # 'Así que, en cada jaula, hay 90\\xa0trozos de paja\\xa0/\\xa03\\xa0jaulas\\xa0=\\xa030\\xa0trozos de paja.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['a cada rata se le dan 6\\xa0trozos de paja.', 'Así que, en cada jaula, hay 90\\xa0trozos de paja\\xa0/\\xa03\\xa0jaulas\\xa0=\\xa030\\xa0trozos de paja.']\nnew_fact = infer_new_fact(selected) # 'Esto significa que cada jaula tiene 30\\xa0trozos de paja\\xa0/\\xa06\\xa0trozos de paja por rata\\xa0=\\xa05\\xa0ratas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si se han distribuido 160\\xa0trozos de paja entre los pequeños roedores,', '¿cuántas ratas hay en cada jaula?', 'Esto significa que cada jaula tiene 30\\xa0trozos de paja\\xa0/\\xa06\\xa0trozos de paja por rata\\xa0=\\xa05\\xa0ratas.']\nnew_fact = infer_new_fact(selected) # 'The answer is 5'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '5'"}
{"id": "GSM8K_187_2b65c2a463", "context": "", "options": [], "answer": "106", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [1, 6], "consequent": 7}, {"antecedents": [3, 4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: The monthly interest is $100 x 2/100 = $2.; int1 & sent3 -> int2: After 3 months, the total interest amount to $2 x 3 = $6.; int2 & sent1 -> int3: Therefore, Mandy should give Benedict a total of $100 + $6 = $106.; int3 & sent3 & sent4 -> int4: The answer is 106;", "textual_logical_units": {"1": "Mandy le debe 100 € a Benedict.", "2": "Acordaron un interés mensual del 2 %.", "3": "Si Mandy pudo pagarlo después de 3 meses,", "4": "¿cuánto debería darle a Benedict?", "5": "El interés mensual es de 100 € x 2 / 100 = 2 €.", "6": "Después de 3 meses, el interés total es de 2 € x 3 = 6 €.", "7": "Por lo tanto, Mandy debería dar a Benedict un total de 100 € + 6 € = 106 €.", "8": "The answer is 106"}, "human_translated": true, "code_input": "####\nfacts = ['Mandy le debe 100\\xa0€ a Benedict.', 'Acordaron un interés mensual del 2\\xa0%.', 'Si Mandy pudo pagarlo después de 3\\xa0meses,']\nquestion = '¿cuánto debería darle a Benedict?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Mandy le debe 100\\xa0€ a Benedict.', 'Acordaron un interés mensual del 2\\xa0%.']\nnew_fact = infer_new_fact(selected) # 'El interés mensual es de 100\\xa0€\\xa0x\\xa02\\xa0/\\xa0100\\xa0=\\xa02\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Mandy pudo pagarlo después de 3\\xa0meses,', 'El interés mensual es de 100\\xa0€\\xa0x\\xa02\\xa0/\\xa0100\\xa0=\\xa02\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Después de 3\\xa0meses, el interés total es de 2\\xa0€\\xa0x\\xa03\\xa0=\\xa06\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Mandy le debe 100\\xa0€ a Benedict.', 'Después de 3\\xa0meses, el interés total es de 2\\xa0€\\xa0x\\xa03\\xa0=\\xa06\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, Mandy debería dar a Benedict un total de 100\\xa0€\\xa0+\\xa06\\xa0€\\xa0=\\xa0106\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Mandy pudo pagarlo después de 3\\xa0meses,', '¿cuánto debería darle a Benedict?', 'Por lo tanto, Mandy debería dar a Benedict un total de 100\\xa0€\\xa0+\\xa06\\xa0€\\xa0=\\xa0106\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'The answer is 106'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '106'"}
{"id": "GSM8K_188_98bdc7be82", "context": "", "options": [], "answer": "50", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [3, 5, 6], "consequent": 7}, {"antecedents": [2, 3, 4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Each bag of wheat cost the trader $20+$2=$22 (taking transportation costs into account); int1 & sent3 -> int2: Each bag of wheat was sold for $30 each giving a profit of $30-$22=$8 on each bag; int1 & int2 & sent3 -> int3: Since a total of $400 profit was made, the total number of bags sold is $400/$8=50 bags; int3 & sent2 & sent3 & sent4 -> int4: The answer is 50;", "textual_logical_units": {"1": "Un comerciante compra algunas bolsas de trigo a un agricultor a un precio de 20 € por bolsa.", "2": "Si cuesta 2 € transportar cada bolsa de la granja al almacén", "3": "y el comerciante obtuvo un beneficio total de 400 € tras vender todas las bolsas a 30 € cada una,", "4": "¿cuántas bolsas vendió?", "5": "Cada bolsa de trigo le cuesta al comerciante 20 € + 2 € = 22 € (teniendo en cuenta los gastos de transporte)", "6": "Cada bolsa de trigo se vendió a 30 € cada una, lo que dio un beneficio de 30 € - 22 € = 8 € por bolsa", "7": "Dado que obtuvo un beneficio total de 400 €, el número total de bolsas vendidas es de 400 € / 8 € = 50 bolsas", "8": "The answer is 50"}, "human_translated": true, "code_input": "####\nfacts = [ 'Un comerciante compra algunas bolsas de trigo a un agricultor a un precio de 20\\xa0€ por bolsa.',\n  'Si cuesta 2\\xa0€ transportar cada bolsa de la granja al almacén',\n  'y el comerciante obtuvo un beneficio total de 400\\xa0€ tras vender todas las bolsas a 30\\xa0€ cada una,']\nquestion = '¿cuántas bolsas vendió?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Un comerciante compra algunas bolsas de trigo a un agricultor a un precio de 20\\xa0€ por bolsa.', 'Si cuesta 2\\xa0€ transportar cada bolsa de la granja al almacén']\nnew_fact = infer_new_fact(selected) # 'Cada bolsa de trigo le cuesta al comerciante 20\\xa0€\\xa0+\\xa02\\xa0€\\xa0=\\xa022\\xa0€ (teniendo en cuenta los gastos de transporte)'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y el comerciante obtuvo un beneficio total de 400\\xa0€ tras vender todas las bolsas a 30\\xa0€ cada una,', 'Cada bolsa de trigo le cuesta al comerciante 20\\xa0€\\xa0+\\xa02\\xa0€\\xa0=\\xa022\\xa0€ (teniendo en cuenta los gastos de transporte)']\nnew_fact = infer_new_fact(selected) # 'Cada bolsa de trigo se vendió a 30\\xa0€ cada una, lo que dio un beneficio de 30\\xa0€\\xa0-\\xa022\\xa0€\\xa0=\\xa08\\xa0€ por bolsa'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y el comerciante obtuvo un beneficio total de 400\\xa0€ tras vender todas las bolsas a 30\\xa0€ cada una,', 'Cada bolsa de trigo le cuesta al comerciante 20\\xa0€\\xa0+\\xa02\\xa0€\\xa0=\\xa022\\xa0€ (teniendo en cuenta los gastos de transporte)', 'Cada bolsa de trigo se vendió a 30\\xa0€ cada una, lo que dio un beneficio de 30\\xa0€\\xa0-\\xa022\\xa0€\\xa0=\\xa08\\xa0€ por bolsa']\nnew_fact = infer_new_fact(selected) # 'Dado que obtuvo un beneficio total de 400\\xa0€, el número total de bolsas vendidas es de 400\\xa0€\\xa0/\\xa08\\xa0€ =\\xa050\\xa0bolsas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si cuesta 2\\xa0€ transportar cada bolsa de la granja al almacén', 'y el comerciante obtuvo un beneficio total de 400\\xa0€ tras vender todas las bolsas a 30\\xa0€ cada una,', '¿cuántas bolsas vendió?', 'Dado que obtuvo un beneficio total de 400\\xa0€, el número total de bolsas vendidas es de 400\\xa0€\\xa0/\\xa08\\xa0€ =\\xa050\\xa0bolsas']\nnew_fact = infer_new_fact(selected) # 'The answer is 50'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '50'"}
{"id": "GSM8K_189_c0068c460f", "context": "", "options": [], "answer": "34", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 6}, {"antecedents": [3], "consequent": 7}, {"antecedents": [1, 6, 7], "consequent": 8}, {"antecedents": [1, 8], "consequent": 9}, {"antecedents": [4, 5, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: They spent $20.25 - $4.50 = $15.75 on food.; sent3 -> int2: They spent $33 x 2 = $66 for the rides.; int1 & int2 & sent1 -> int3: They spent a total of $20.25 + $15.75 + $66 = $102.; int3 & sent1 -> int4: So each of them paid $102/3 = $34.; int4 & sent4 & sent5 -> int5: The answer is 34;", "textual_logical_units": {"1": "Tres amigos gastaron 20,25 € en 3 entradas para la feria.", "2": "También gastaron 4,50 € menos en comida que en las entradas.", "3": "También subieron a 2 atracciones diferentes, que cuestan 33 € cada una.", "4": "Si están de acuerdo en dividir todos los costos en partes iguales,", "5": "¿cuánto pagó cada uno de ellos?", "6": "Gastaron 20,25 € - 4,50 € = 15,75 € en comida.", "7": "Gastaron 33 € x 2 = 66 € en las atracciones.", "8": "Gastaron un total de 20,25 € + 15,75 € + 66 € = 102 €.", "9": "Así que cada uno de ellos pagó 102 € / 3 = 34 €.", "10": "The answer is 34"}, "human_translated": true, "code_input": "####\nfacts = [ 'Tres amigos gastaron 20,25\\xa0€ en 3\\xa0entradas para la feria.',\n  'También gastaron 4,50\\xa0€ menos en comida que en las entradas.',\n  'También subieron a 2\\xa0atracciones diferentes, que cuestan 33\\xa0€ cada una.',\n  'Si están de acuerdo en dividir todos los costos en partes iguales,']\nquestion = '¿cuánto pagó cada uno de ellos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Tres amigos gastaron 20,25\\xa0€ en 3\\xa0entradas para la feria.', 'También gastaron 4,50\\xa0€ menos en comida que en las entradas.']\nnew_fact = infer_new_fact(selected) # 'Gastaron 20,25\\xa0€\\xa0-\\xa04,50\\xa0€\\xa0=\\xa015,75\\xa0€ en comida.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['También subieron a 2\\xa0atracciones diferentes, que cuestan 33\\xa0€ cada una.']\nnew_fact = infer_new_fact(selected) # 'Gastaron 33\\xa0€\\xa0x\\xa02\\xa0=\\xa066\\xa0€ en las atracciones.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tres amigos gastaron 20,25\\xa0€ en 3\\xa0entradas para la feria.', 'Gastaron 20,25\\xa0€\\xa0-\\xa04,50\\xa0€\\xa0=\\xa015,75\\xa0€ en comida.', 'Gastaron 33\\xa0€\\xa0x\\xa02\\xa0=\\xa066\\xa0€ en las atracciones.']\nnew_fact = infer_new_fact(selected) # 'Gastaron un total de 20,25\\xa0€\\xa0+\\xa015,75\\xa0€\\xa0+\\xa066\\xa0€\\xa0=\\xa0102\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tres amigos gastaron 20,25\\xa0€ en 3\\xa0entradas para la feria.', 'Gastaron un total de 20,25\\xa0€\\xa0+\\xa015,75\\xa0€\\xa0+\\xa066\\xa0€\\xa0=\\xa0102\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Así que cada uno de ellos pagó 102\\xa0€\\xa0/\\xa03\\xa0=\\xa034\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si están de acuerdo en dividir todos los costos en partes iguales,', '¿cuánto pagó cada uno de ellos?', 'Así que cada uno de ellos pagó 102\\xa0€\\xa0/\\xa03\\xa0=\\xa034\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'The answer is 34'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '34'"}
{"id": "GSM8K_190_4137f91436", "context": "", "options": [], "answer": "360", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 -> int1: He is collecting peaches for 3*60=180 minutes; int1 & sent2 -> int2: So he can collect 180 * 2 = 360 peaches; int2 & sent3 -> int3: The answer is 360;", "textual_logical_units": {"1": "John recoge melocotones durante 3 horas.", "2": "Puede recoger 2 melocotones por minuto.", "3": "¿Cuántos melocotones recoge?", "4": "Recoge melocotones durante 3 * 60 = 180 minutos", "5": "Así que puede recoger 180 x 2 = 360 melocotones", "6": "The answer is 360"}, "human_translated": true, "code_input": "####\nfacts = ['John recoge melocotones durante 3\\xa0horas.', 'Puede recoger 2\\xa0melocotones por minuto.']\nquestion = '¿Cuántos melocotones recoge?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['John recoge melocotones durante 3\\xa0horas.']\nnew_fact = infer_new_fact(selected) # 'Recoge melocotones durante 3\\xa0*\\xa060\\xa0=\\xa0180\\xa0minutos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Puede recoger 2\\xa0melocotones por minuto.', 'Recoge melocotones durante 3\\xa0*\\xa060\\xa0=\\xa0180\\xa0minutos']\nnew_fact = infer_new_fact(selected) # 'Así que puede recoger 180\\xa0x\\xa02\\xa0=\\xa0360\\xa0melocotones'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos melocotones recoge?', 'Así que puede recoger 180\\xa0x\\xa02\\xa0=\\xa0360\\xa0melocotones']\nnew_fact = infer_new_fact(selected) # 'The answer is 360'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '360'"}
{"id": "GSM8K_191_127e4a8214", "context": "", "options": [], "answer": "5", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [1, 4], "consequent": 5}, {"antecedents": [2, 3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: The flock needs 35 pounds per week because 10 x 3.5 = 35; int1 & sent1 -> int2: They need 5 pounds per day because 35 / 7 = 5; int2 & sent2 & sent3 -> int3: The answer is 5;", "textual_logical_units": {"1": "Los patos necesitan comer 3,5 kilos de insectos cada semana para sobrevivir.", "2": "Si hay una bandada de diez patos,", "3": "¿cuántos kilos de insectos necesitan al día?", "4": "La bandada necesita 35 kilos a la semana porque 10 x 3,5 = 35", "5": "Necesitan 5 kilos al día porque 35 / 7 = 5", "6": "The answer is 5"}, "human_translated": true, "code_input": "####\nfacts = ['Los patos necesitan comer 3,5\\xa0kilos de insectos cada semana para sobrevivir.', 'Si hay una bandada de diez patos,']\nquestion = '¿cuántos kilos de insectos necesitan al día?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Los patos necesitan comer 3,5\\xa0kilos de insectos cada semana para sobrevivir.', 'Si hay una bandada de diez patos,']\nnew_fact = infer_new_fact(selected) # 'La bandada necesita 35\\xa0kilos a la semana porque 10\\xa0x\\xa03,5\\xa0=\\xa035'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Los patos necesitan comer 3,5\\xa0kilos de insectos cada semana para sobrevivir.', 'La bandada necesita 35\\xa0kilos a la semana porque 10\\xa0x\\xa03,5\\xa0=\\xa035']\nnew_fact = infer_new_fact(selected) # 'Necesitan 5\\xa0kilos al día porque 35\\xa0/\\xa07\\xa0=\\xa05'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si hay una bandada de diez patos,', '¿cuántos kilos de insectos necesitan al día?', 'Necesitan 5\\xa0kilos al día porque 35\\xa0/\\xa07\\xa0=\\xa05']\nnew_fact = infer_new_fact(selected) # 'The answer is 5'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '5'"}
{"id": "GSM8K_192_8c741df1ea", "context": "", "options": [], "answer": "91", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 6}, {"antecedents": [1, 6], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}, {"antecedents": [4, 8], "consequent": 9}, {"antecedents": [8, 9], "consequent": 10}, {"antecedents": [5, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: He gets 10-2=8 new trees a year; int1 & sent1 -> int2: After 10 years he has 8*10=80 new trees; int2 & sent3 -> int3: So he had 80+50=130 trees; int3 & sent4 -> int4: He lost 130*.3=39 trees; int3 & int4 -> int5: That means he had 130-39=91 trees; int5 & sent5 -> int6: The answer is 91;", "textual_logical_units": {"1": "Tom planta 10 árboles al año.", "2": "También corta 2 árboles cada año.", "3": "Empieza con 50 árboles.", "4": "Después de 10 años, el 30 % de los árboles mueren.", "5": "¿Cuántos árboles le quedan?", "6": "Tiene 10 - 2 = 8 árboles nuevos al año", "7": "Después de 10 años, tiene 8 * 10 = 80 árboles nuevos", "8": "Así que tenía 80 + 50 = 130 árboles", "9": "Perdió 130 * 0,3 = 39 árboles", "10": "Eso significa que tenía 130 - 39 = 91 árboles", "11": "The answer is 91"}, "human_translated": true, "code_input": "####\nfacts = [ 'Tom planta 10\\xa0árboles al año.',\n  'También corta 2\\xa0árboles cada año.',\n  'Empieza con 50\\xa0árboles.',\n  'Después de 10\\xa0años, el 30\\xa0% de los árboles mueren.']\nquestion = '¿Cuántos árboles le quedan?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Tom planta 10\\xa0árboles al año.', 'También corta 2\\xa0árboles cada año.']\nnew_fact = infer_new_fact(selected) # 'Tiene 10\\xa0-\\xa02\\xa0=\\xa08\\xa0árboles nuevos al año'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tom planta 10\\xa0árboles al año.', 'Tiene 10\\xa0-\\xa02\\xa0=\\xa08\\xa0árboles nuevos al año']\nnew_fact = infer_new_fact(selected) # 'Después de 10\\xa0años, tiene 8\\xa0*\\xa010\\xa0=\\xa080\\xa0árboles nuevos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Empieza con 50\\xa0árboles.', 'Después de 10\\xa0años, tiene 8\\xa0*\\xa010\\xa0=\\xa080\\xa0árboles nuevos']\nnew_fact = infer_new_fact(selected) # 'Así que tenía 80\\xa0+\\xa050\\xa0=\\xa0130\\xa0árboles'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Después de 10\\xa0años, el 30\\xa0% de los árboles mueren.', 'Así que tenía 80\\xa0+\\xa050\\xa0=\\xa0130\\xa0árboles']\nnew_fact = infer_new_fact(selected) # 'Perdió 130\\xa0*\\xa00,3\\xa0=\\xa039\\xa0árboles'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Así que tenía 80\\xa0+\\xa050\\xa0=\\xa0130\\xa0árboles', 'Perdió 130\\xa0*\\xa00,3\\xa0=\\xa039\\xa0árboles']\nnew_fact = infer_new_fact(selected) # 'Eso significa que tenía 130\\xa0-\\xa039\\xa0=\\xa091\\xa0árboles'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos árboles le quedan?', 'Eso significa que tenía 130\\xa0-\\xa039\\xa0=\\xa091\\xa0árboles']\nnew_fact = infer_new_fact(selected) # 'The answer is 91'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '91'"}
{"id": "GSM8K_193_bdd6ee8d04", "context": "", "options": [], "answer": "24", "reasoning_graph_edges": [{"antecedents": [3, 4], "consequent": 8}, {"antecedents": [8], "consequent": 9}, {"antecedents": [6, 8, 9], "consequent": 10}, {"antecedents": [8, 9, 10], "consequent": 11}, {"antecedents": [7, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent3 & sent4 -> int1: On Saturday, one third of the original 18 pink flamingos were removed and painted white: 18*1/3=6 white flamingos.; int1 -> int2: This left 18 pink - 6 = 12 pink flamingos.; int1 & int2 & sent6 -> int3: On Sunday, 18 more pink flamingos were added, for a total of 12 + 18 = 30 pink flamingos on the front lawn.; int1 & int2 & int3 -> int4: Altogether, there were 30 pink and 6 white flamingos on the lawn, so there were 30 pink - 6 white =24 more pink flamingos.; int4 & sent7 -> int5: The answer is 24;", "textual_logical_units": {"1": "Sue vive en un barrio divertido.", "2": "Un fin de semana, los vecinos decidieron gastar una broma a Sue.", "3": "El viernes por la mañana, los vecinos colocaron 18 flamencos rosas de plástico en el jardín delantero de Sue.", "4": "El sábado por la mañana, los vecinos recogieron un tercio de los flamencos, los pintaron de blanco", "5": "y pusieron estos flamencos blancos recién pintados en el patio de Sue.", "6": "Luego, el domingo por la mañana, añadieron otros 18 flamencos rosas de plástico a la colección.", "7": "Al mediodía del domingo, ¿cuántos flamencos rosas de plástico más había en comparación con los flamencos blancos de plástico?", "8": "El sábado, un tercio de los 18 flamencos rosas originales se retiraron y se pintaron de blanco: 18 * 1 / 3 = 6 flamencos blancos.", "9": "Esto dejó 18 flamencos rosas - 6 = 12 flamencos rosas.", "10": "El domingo, se añadieron 18 flamencos rosas más, para un total de 12 + 18 = 30 flamencos rosados en el jardín delantero.", "11": "En total, había 30 flamencos rosas y 6 blancos en el jardín, por lo que había 30 rosas - 6 blancos = 24 flamencos rosas más.", "12": "The answer is 24"}, "human_translated": true, "code_input": "####\nfacts = [ 'Sue vive en un barrio divertido.',\n  'Un fin de semana, los vecinos decidieron gastar una broma a Sue.',\n  'El viernes por la mañana, los vecinos colocaron 18\\xa0flamencos rosas de plástico en el jardín delantero de Sue.',\n  'El sábado por la mañana, los vecinos recogieron un tercio de los flamencos, los pintaron de blanco',\n  'y pusieron estos flamencos blancos recién pintados en el patio de Sue.',\n  'Luego, el domingo por la mañana, añadieron otros 18\\xa0flamencos rosas de plástico a la colección.']\nquestion = 'Al mediodía del domingo, ¿cuántos flamencos rosas de plástico más había en comparación con los flamencos blancos de plástico?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['El viernes por la mañana, los vecinos colocaron 18\\xa0flamencos rosas de plástico en el jardín delantero de Sue.', 'El sábado por la mañana, los vecinos recogieron un tercio de los flamencos, los pintaron de blanco']\nnew_fact = infer_new_fact(selected) # 'El sábado, un tercio de los 18\\xa0flamencos rosas originales se retiraron y se pintaron de blanco: 18\\xa0*\\xa01\\xa0/\\xa03\\xa0=\\xa06\\xa0flamencos blancos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El sábado, un tercio de los 18\\xa0flamencos rosas originales se retiraron y se pintaron de blanco: 18\\xa0*\\xa01\\xa0/\\xa03\\xa0=\\xa06\\xa0flamencos blancos.']\nnew_fact = infer_new_fact(selected) # 'Esto dejó 18\\xa0flamencos rosas\\xa0-\\xa06\\xa0=\\xa012\\xa0flamencos rosas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Luego, el domingo por la mañana, añadieron otros 18\\xa0flamencos rosas de plástico a la colección.', 'El sábado, un tercio de los 18\\xa0flamencos rosas originales se retiraron y se pintaron de blanco: 18\\xa0*\\xa01\\xa0/\\xa03\\xa0=\\xa06\\xa0flamencos blancos.', 'Esto dejó 18\\xa0flamencos rosas\\xa0-\\xa06\\xa0=\\xa012\\xa0flamencos rosas.']\nnew_fact = infer_new_fact(selected) # 'El domingo, se añadieron 18\\xa0flamencos rosas más, para un total de 12\\xa0+\\xa018\\xa0=\\xa030\\xa0flamencos rosados en el jardín delantero.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El sábado, un tercio de los 18\\xa0flamencos rosas originales se retiraron y se pintaron de blanco: 18\\xa0*\\xa01\\xa0/\\xa03\\xa0=\\xa06\\xa0flamencos blancos.', 'Esto dejó 18\\xa0flamencos rosas\\xa0-\\xa06\\xa0=\\xa012\\xa0flamencos rosas.', 'El domingo, se añadieron 18\\xa0flamencos rosas más, para un total de 12\\xa0+\\xa018\\xa0=\\xa030\\xa0flamencos rosados en el jardín delantero.']\nnew_fact = infer_new_fact(selected) # 'En total, había 30\\xa0flamencos rosas y 6\\xa0blancos en el jardín, por lo que había 30\\xa0rosas\\xa0-\\xa06\\xa0blancos\\xa0=\\xa024 flamencos rosas más.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Al mediodía del domingo, ¿cuántos flamencos rosas de plástico más había en comparación con los flamencos blancos de plástico?', 'En total, había 30\\xa0flamencos rosas y 6\\xa0blancos en el jardín, por lo que había 30\\xa0rosas\\xa0-\\xa06\\xa0blancos\\xa0=\\xa024 flamencos rosas más.']\nnew_fact = infer_new_fact(selected) # 'The answer is 24'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '24'"}
{"id": "GSM8K_194_18825f334d", "context": "", "options": [], "answer": "10", "reasoning_graph_edges": [{"antecedents": [2, 4], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 & sent4 -> int1: Violetta is going to pay 5 * 2 = $10 for the crayons she wants.; int1 & sent3 -> int2: If she pays $20, she will get 20 - 10 = $10 of change.; int2 & sent5 -> int3: The answer is 10;", "textual_logical_units": {"1": "Violetta quiere comprar ceras nuevas.", "2": "Las necesita en 5 colores diferentes y", "3": "preparó 20 € para esta compra.", "4": "Una cera cuesta 2 €.", "5": "¿Cuánto le darán de cambio?", "6": "Violetta va a pagar 5 x 2 = 10 € por las ceras que quiere.", "7": "Si paga 20 €, recibirá 20 - 10 = 10 € de cambio.", "8": "The answer is 10"}, "human_translated": true, "code_input": "####\nfacts = ['Violetta quiere comprar ceras nuevas.', 'Las necesita en 5\\xa0colores diferentes y', 'preparó 20\\xa0€ para esta compra.', 'Una cera cuesta 2\\xa0€.']\nquestion = '¿Cuánto le darán de cambio?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Las necesita en 5\\xa0colores diferentes y', 'Una cera cuesta 2\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Violetta va a pagar 5\\xa0x\\xa02\\xa0=\\xa010\\xa0€ por las ceras que quiere.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['preparó 20\\xa0€ para esta compra.', 'Violetta va a pagar 5\\xa0x\\xa02\\xa0=\\xa010\\xa0€ por las ceras que quiere.']\nnew_fact = infer_new_fact(selected) # 'Si paga 20\\xa0€, recibirá 20\\xa0-\\xa010\\xa0=\\xa010\\xa0€ de cambio.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto le darán de cambio?', 'Si paga 20\\xa0€, recibirá 20\\xa0-\\xa010\\xa0=\\xa010\\xa0€ de cambio.']\nnew_fact = infer_new_fact(selected) # 'The answer is 10'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '10'"}
{"id": "GSM8K_195_98efe060af", "context": "", "options": [], "answer": "12", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [3, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: A pen costs $1.20 + $0.30 = $1.50.; int1 & sent3 -> int2: So, 8 pens cost $1.50 x 8 = $12.; int2 & sent3 -> int3: The answer is 12;", "textual_logical_units": {"1": "Un bolígrafo cuesta tanto como un lápiz y una goma de borrar juntos.", "2": "Un lápiz cuesta 1,20 € y una goma de borrar cuesta 0,30 €.", "3": "¿Cuánto costarán 8 bolígrafos?", "4": "Un bolígrafo cuesta 1,20 € + 0,30 € = 1,50 €.", "5": "Por lo tanto, 8 bolígrafos cuestan 1,50 € x 8 = 12 €.", "6": "The answer is 12"}, "human_translated": true, "code_input": "####\nfacts = ['Un bolígrafo cuesta tanto como un lápiz y una goma de borrar juntos.', 'Un lápiz cuesta 1,20\\xa0€ y una goma de borrar cuesta 0,30\\xa0€.']\nquestion = '¿Cuánto costarán 8\\xa0bolígrafos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Un bolígrafo cuesta tanto como un lápiz y una goma de borrar juntos.', 'Un lápiz cuesta 1,20\\xa0€ y una goma de borrar cuesta 0,30\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Un bolígrafo cuesta 1,20\\xa0€\\xa0+\\xa00,30\\xa0€\\xa0=\\xa01,50\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto costarán 8\\xa0bolígrafos?', 'Un bolígrafo cuesta 1,20\\xa0€\\xa0+\\xa00,30\\xa0€\\xa0=\\xa01,50\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, 8\\xa0bolígrafos cuestan 1,50\\xa0€\\xa0x\\xa08\\xa0=\\xa012\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto costarán 8\\xa0bolígrafos?', 'Por lo tanto, 8\\xa0bolígrafos cuestan 1,50\\xa0€\\xa0x\\xa08\\xa0=\\xa012\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'The answer is 12'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '12'"}
{"id": "GSM8K_196_23d1fe5901", "context": "", "options": [], "answer": "120", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [1, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: The restaurants need 40 * 2 = 80 lbs. of carrots.; int1 & sent1 -> int2: So 200 - 80 = 120 lbs. of carrots will not be used.; int2 & sent3 -> int3: The answer is 120;", "textual_logical_units": {"1": "Se distribuirán 200 kilos de zanahorias a 40 restaurantes de una ciudad determinada.", "2": "Cada restaurante recibirá 2 kilos de zanahorias.", "3": "¿Cuántos kilos de zanahorias no se usarán?", "4": "Los restaurantes necesitan 40 * 2 = 80 kilos de zanahorias.", "5": "Por lo tanto, no se utilizarán 200 - 80 = 120 kilos de zanahorias.", "6": "The answer is 120"}, "human_translated": true, "code_input": "####\nfacts = ['Se distribuirán 200\\xa0kilos de zanahorias a 40\\xa0restaurantes de una ciudad determinada.', 'Cada restaurante recibirá 2\\xa0kilos de zanahorias.']\nquestion = '¿Cuántos kilos de zanahorias no se usarán?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Se distribuirán 200\\xa0kilos de zanahorias a 40\\xa0restaurantes de una ciudad determinada.', 'Cada restaurante recibirá 2\\xa0kilos de zanahorias.']\nnew_fact = infer_new_fact(selected) # 'Los restaurantes necesitan 40\\xa0*\\xa02\\xa0=\\xa080\\xa0kilos de zanahorias.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Se distribuirán 200\\xa0kilos de zanahorias a 40\\xa0restaurantes de una ciudad determinada.', 'Los restaurantes necesitan 40\\xa0*\\xa02\\xa0=\\xa080\\xa0kilos de zanahorias.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, no se utilizarán 200\\xa0-\\xa080\\xa0=\\xa0120\\xa0kilos de zanahorias.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos kilos de zanahorias no se usarán?', 'Por lo tanto, no se utilizarán 200\\xa0-\\xa080\\xa0=\\xa0120\\xa0kilos de zanahorias.']\nnew_fact = infer_new_fact(selected) # 'The answer is 120'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '120'"}
{"id": "GSM8K_197_9b62a1e506", "context": "", "options": [], "answer": "6277", "reasoning_graph_edges": [{"antecedents": [3], "consequent": 6}, {"antecedents": [2, 6], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent3 -> int1: The total number of adults is 8417 + 9092 = 17509; int1 & sent2 -> int2: Thus the number of children is 23786 - 17509 = 6277; int2 & sent5 -> int3: The answer is 6277;", "textual_logical_units": {"1": "En la ciudad de Soda,", "2": "hay exactamente 23 786 habitantes.", "3": "Hay 8417 hombres y 9092 mujeres.", "4": "El resto de la población está compuesta por niños.", "5": "¿Cuántos niños hay en Soda?", "6": "El número total de adultos es 8417 + 9092 = 17 509", "7": "Por lo tanto, el número de niños es de 23 786 - 17 509 = 6277", "8": "The answer is 6277"}, "human_translated": true, "code_input": "####\nfacts = [ 'En la ciudad de Soda,',\n  'hay exactamente 23\\xa0786\\xa0habitantes.',\n  'Hay 8417\\xa0hombres y 9092\\xa0mujeres.',\n  'El resto de la población está compuesta por niños.']\nquestion = '¿Cuántos niños hay en Soda?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Hay 8417\\xa0hombres y 9092\\xa0mujeres.']\nnew_fact = infer_new_fact(selected) # 'El número total de adultos es 8417\\xa0+\\xa09092\\xa0=\\xa017\\xa0509'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['hay exactamente 23\\xa0786\\xa0habitantes.', 'El número total de adultos es 8417\\xa0+\\xa09092\\xa0=\\xa017\\xa0509']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, el número de niños es de 23\\xa0786\\xa0-\\xa017\\xa0509\\xa0=\\xa06277'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos niños hay en Soda?', 'Por lo tanto, el número de niños es de 23\\xa0786\\xa0-\\xa017\\xa0509\\xa0=\\xa06277']\nnew_fact = infer_new_fact(selected) # 'The answer is 6277'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '6277'"}
{"id": "GSM8K_198_0524c63e39", "context": "", "options": [], "answer": "320", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}, {"antecedents": [6, 7], "consequent": 8}, {"antecedents": [4, 6, 7, 8], "consequent": 9}, {"antecedents": [1, 6, 7, 8, 9], "consequent": 10}, {"antecedents": [5, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: In the first month, Elaine collected 3*20= 60 pokemon cards.; int1 & sent3 -> int2: In the second month, she collected 60-20 = 40 cards.; int1 & int2 -> int3: After the two months, the new pokemon cards she'd collected is 40+60 = 100; int1 & int2 & int3 & sent4 -> int4: The number of cards in the third month is twice the combined number in the first and second month, which totals 2*100 = 200 pokemon cards.; int1 & int2 & int3 & int4 & sent1 -> int5: In total, Elaine has 20 cards she initially had+100 cards collected in the first and second month +200 cards collected in the third month = 320 cards; int5 & sent5 -> int6: The answer is 320;", "textual_logical_units": {"1": "Elaine inicialmente tenía 20 cartas de Pokémon.", "2": "Después de un mes, coleccionó tres veces ese número.", "3": "En el segundo mes, coleccionó 20 tarjetas menos que las que coleccionó en el primer mes.", "4": "En el tercer mes, coleccionó el doble del número combinado de cartas de Pokémon que coleccionó en el primer y el segundo mes.", "5": "¿Cuántas cartas de Pokémon tiene ahora en total?", "6": "En el primer mes, Elaine coleccionó 3 * 20 = 60 cartas de Pokémon.", "7": "En el segundo mes, coleccionó 60 - 20 = 40 cartas.", "8": "Después de los dos meses, las nuevas cartas de Pokémon que coleccionó son 40 + 60 = 100", "9": "El número de cartas en el tercer mes es el doble del número combinado del primer y el segundo mes, lo que suma un total de 2 * 100 = 200 cartas de Pokémon.", "10": "En total, Elaine tiene 20 cartas que tenía inicialmente, 100 cartas coleccionadas en el primer y el segundo mes + 200 cartas coleccionadas en el tercer mes = 320 cartas", "11": "The answer is 320"}, "human_translated": true, "code_input": "####\nfacts = [ 'Elaine inicialmente tenía 20\\xa0cartas de Pokémon.',\n  'Después de un mes, coleccionó tres veces ese número.',\n  'En el segundo mes, coleccionó 20\\xa0tarjetas menos que las que coleccionó en el primer mes.',\n  'En el tercer mes, coleccionó el doble del número combinado de cartas de Pokémon que coleccionó en el primer y el segundo mes.']\nquestion = '¿Cuántas cartas de Pokémon tiene ahora en total?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Elaine inicialmente tenía 20\\xa0cartas de Pokémon.', 'Después de un mes, coleccionó tres veces ese número.']\nnew_fact = infer_new_fact(selected) # 'En el primer mes, Elaine coleccionó 3\\xa0*\\xa020\\xa0=\\xa060\\xa0cartas de Pokémon.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En el segundo mes, coleccionó 20\\xa0tarjetas menos que las que coleccionó en el primer mes.', 'En el primer mes, Elaine coleccionó 3\\xa0*\\xa020\\xa0=\\xa060\\xa0cartas de Pokémon.']\nnew_fact = infer_new_fact(selected) # 'En el segundo mes, coleccionó 60\\xa0-\\xa020\\xa0=\\xa040\\xa0cartas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En el primer mes, Elaine coleccionó 3\\xa0*\\xa020\\xa0=\\xa060\\xa0cartas de Pokémon.', 'En el segundo mes, coleccionó 60\\xa0-\\xa020\\xa0=\\xa040\\xa0cartas.']\nnew_fact = infer_new_fact(selected) # 'Después de los dos meses, las nuevas cartas de Pokémon que coleccionó son 40\\xa0+\\xa060\\xa0=\\xa0100'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['En el tercer mes, coleccionó el doble del número combinado de cartas de Pokémon que coleccionó en el primer y el segundo mes.', 'En el primer mes, Elaine coleccionó 3\\xa0*\\xa020\\xa0=\\xa060\\xa0cartas de Pokémon.', 'En el segundo mes, coleccionó 60\\xa0-\\xa020\\xa0=\\xa040\\xa0cartas.', 'Después de los dos meses, las nuevas cartas de Pokémon que coleccionó son 40\\xa0+\\xa060\\xa0=\\xa0100']\nnew_fact = infer_new_fact(selected) # 'El número de cartas en el tercer mes es el doble del número combinado del primer y el segundo mes, lo que suma un total de 2\\xa0*\\xa0100\\xa0=\\xa0200\\xa0cartas de Pokémon.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Elaine inicialmente tenía 20\\xa0cartas de Pokémon.', 'En el primer mes, Elaine coleccionó 3\\xa0*\\xa020\\xa0=\\xa060\\xa0cartas de Pokémon.', 'En el segundo mes, coleccionó 60\\xa0-\\xa020\\xa0=\\xa040\\xa0cartas.', 'Después de los dos meses, las nuevas cartas de Pokémon que coleccionó son 40\\xa0+\\xa060\\xa0=\\xa0100', 'El número de cartas en el tercer mes es el doble del número combinado del primer y el segundo mes, lo que suma un total de 2\\xa0*\\xa0100\\xa0=\\xa0200\\xa0cartas de Pokémon.']\nnew_fact = infer_new_fact(selected) # 'En total, Elaine tiene 20\\xa0cartas que tenía inicialmente, 100\\xa0cartas coleccionadas en el primer y el segundo mes\\xa0+\\xa0200\\xa0cartas coleccionadas en el tercer mes\\xa0=\\xa0320\\xa0cartas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas cartas de Pokémon tiene ahora en total?', 'En total, Elaine tiene 20\\xa0cartas que tenía inicialmente, 100\\xa0cartas coleccionadas en el primer y el segundo mes\\xa0+\\xa0200\\xa0cartas coleccionadas en el tercer mes\\xa0=\\xa0320\\xa0cartas']\nnew_fact = infer_new_fact(selected) # 'The answer is 320'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '320'"}
{"id": "GSM8K_199_d34b138877", "context": "", "options": [], "answer": "7500", "reasoning_graph_edges": [{"antecedents": [2, 5], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}, {"antecedents": [4, 6], "consequent": 10}, {"antecedents": [8, 10], "consequent": 11}, {"antecedents": [9, 11], "consequent": 12}, {"antecedents": [7, 12], "consequent": 13}], "metadata": [], "linearized_output_en": "sent2 & sent5 -> int1: Since Mark edits an equal number of sentences for each publisher, he edits 1000 / 2 = 500 sentences for each of them.; int1 & sent5 -> int2: From Publisher A, he earns 5 cents per sentence * 500 sentences = 2500 cents.; sent4 & sent6 -> int3: Since Publisher B pays Mark twice as much, he earns 5 * 2 = 10 cents per sentence from Publisher B.; int1 & int3 -> int4: Thus, he earns 10 cents per sentence * 500 sentences = 5000 cents from publisher B.; int2 & int4 -> int5: Thus, he earns 2500 + 5000 = 7500 cents in total.; int5 & sent7 -> int6: The answer is 7500;", "textual_logical_units": {"1": "Mark es corrector de estilo.", "2": "Edita el mismo número de frases cada semana para dos editoriales diferentes,", "3": "cada una de los cuales le paga una tarifa diferente por oración.", "4": "El editor B paga a Mark el doble de lo que le paga el editor A.", "5": "Mark edita un número total de 1000 oraciones cada semana,", "6": "y el editor A le paga 5 céntimos por oración.", "7": "¿Cuánto gana Mark en una semana, en céntimos?", "8": "Como Mark edita un número igual de oraciones para cada editor, edita 1000 / 2 = 500 oraciones para cada una.", "9": "Del editor A, gana 5 céntimos por oración * 500 oraciones = 2500 céntimos.", "10": "Como el editor B paga a Mark el doble, gana 5 * 2 = 10 céntimos por oración del editor B.", "11": "Por lo tanto, gana 10 céntimos por oración * 500 oraciones = 5000 céntimos del editor B.", "12": "Por lo tanto, gana 2500 + 5000 = 7500 céntimos en total.", "13": "The answer is 7500"}, "human_translated": true, "code_input": "####\nfacts = [ 'Mark es corrector de estilo.',\n  'Edita el mismo número de frases cada semana para dos editoriales diferentes,',\n  'cada una de los cuales le paga una tarifa diferente por oración.',\n  'El editor B paga a Mark el doble de lo que le paga el editor A.',\n  'Mark edita un número total de 1000\\xa0oraciones cada semana,',\n  'y el editor A le paga 5\\xa0céntimos por oración.']\nquestion = '¿Cuánto gana Mark en una semana, en céntimos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Edita el mismo número de frases cada semana para dos editoriales diferentes,', 'Mark edita un número total de 1000\\xa0oraciones cada semana,']\nnew_fact = infer_new_fact(selected) # 'Como Mark edita un número igual de oraciones para cada editor, edita 1000\\xa0/\\xa02\\xa0=\\xa0500\\xa0oraciones para cada una.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Mark edita un número total de 1000\\xa0oraciones cada semana,', 'Como Mark edita un número igual de oraciones para cada editor, edita 1000\\xa0/\\xa02\\xa0=\\xa0500\\xa0oraciones para cada una.']\nnew_fact = infer_new_fact(selected) # 'Del editor A, gana 5\\xa0céntimos por oración\\xa0*\\xa0500\\xa0oraciones\\xa0=\\xa02500\\xa0céntimos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El editor B paga a Mark el doble de lo que le paga el editor A.', 'y el editor A le paga 5\\xa0céntimos por oración.']\nnew_fact = infer_new_fact(selected) # 'Como el editor B paga a Mark el doble, gana 5\\xa0*\\xa02\\xa0=\\xa010\\xa0céntimos por oración del editor B.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Como Mark edita un número igual de oraciones para cada editor, edita 1000\\xa0/\\xa02\\xa0=\\xa0500\\xa0oraciones para cada una.', 'Como el editor B paga a Mark el doble, gana 5\\xa0*\\xa02\\xa0=\\xa010\\xa0céntimos por oración del editor B.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, gana 10\\xa0céntimos por oración\\xa0*\\xa0500\\xa0oraciones\\xa0=\\xa05000\\xa0céntimos del editor B.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Del editor A, gana 5\\xa0céntimos por oración\\xa0*\\xa0500\\xa0oraciones\\xa0=\\xa02500\\xa0céntimos.', 'Por lo tanto, gana 10\\xa0céntimos por oración\\xa0*\\xa0500\\xa0oraciones\\xa0=\\xa05000\\xa0céntimos del editor B.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, gana 2500\\xa0+\\xa05000\\xa0=\\xa07500\\xa0céntimos en total.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto gana Mark en una semana, en céntimos?', 'Por lo tanto, gana 2500\\xa0+\\xa05000\\xa0=\\xa07500\\xa0céntimos en total.']\nnew_fact = infer_new_fact(selected) # 'The answer is 7500'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '7500'"}
{"id": "GSM8K_200_141aaef0a6", "context": "", "options": [], "answer": "55", "reasoning_graph_edges": [{"antecedents": [2, 4], "consequent": 6}, {"antecedents": [3, 4], "consequent": 7}, {"antecedents": [6, 7], "consequent": 8}, {"antecedents": [4, 5, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent2 & sent4 -> int1: Baldur gets 5 x 5 = 25 liters of water in the morning.; sent3 & sent4 -> int2: He gets 6 x 5 = 30 liters of water in the afternoon.; int1 & int2 -> int3: Therefore, the total liters of water he gets every day is 30 + 25 = 55.; int3 & sent4 & sent5 -> int4: The answer is 55;", "textual_logical_units": {"1": "Baldur saca agua de un pozo.", "2": "Saca 5 cubos de agua cada mañana y", "3": "6 cubos de agua cada tarde.", "4": "Si cada cubo contiene 5 litros de agua,", "5": "¿cuántos litros de agua saca todos los días?", "6": "Baldur saca 5 x 5 = 25 litros de agua por la mañana.", "7": "Saca 6 x 5 = 30 litros de agua por la tarde.", "8": "Por lo tanto, el total de litros de agua que saca todos los días es de 30 + 25 = 55.", "9": "The answer is 55"}, "human_translated": true, "code_input": "####\nfacts = ['Baldur saca agua de un pozo.', 'Saca 5\\xa0cubos de agua cada mañana y', '6\\xa0cubos de agua cada tarde.', 'Si cada cubo contiene 5\\xa0litros de agua,']\nquestion = '¿cuántos litros de agua saca todos los días?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Saca 5\\xa0cubos de agua cada mañana y', 'Si cada cubo contiene 5\\xa0litros de agua,']\nnew_fact = infer_new_fact(selected) # 'Baldur saca 5\\xa0x\\xa05\\xa0=\\xa025\\xa0litros de agua por la mañana.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['6\\xa0cubos de agua cada tarde.', 'Si cada cubo contiene 5\\xa0litros de agua,']\nnew_fact = infer_new_fact(selected) # 'Saca 6\\xa0x\\xa05\\xa0=\\xa030\\xa0litros de agua por la tarde.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Baldur saca 5\\xa0x\\xa05\\xa0=\\xa025\\xa0litros de agua por la mañana.', 'Saca 6\\xa0x\\xa05\\xa0=\\xa030\\xa0litros de agua por la tarde.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, el total de litros de agua que saca todos los días es de 30\\xa0+\\xa025\\xa0=\\xa055.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si cada cubo contiene 5\\xa0litros de agua,', '¿cuántos litros de agua saca todos los días?', 'Por lo tanto, el total de litros de agua que saca todos los días es de 30\\xa0+\\xa025\\xa0=\\xa055.']\nnew_fact = infer_new_fact(selected) # 'The answer is 55'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '55'"}
{"id": "GSM8K_201_3e73cccbdc", "context": "", "options": [], "answer": "114200", "reasoning_graph_edges": [{"antecedents": [4, 5], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}, {"antecedents": [7, 8], "consequent": 9}, {"antecedents": [2, 9], "consequent": 10}, {"antecedents": [4, 5, 6, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent4 & sent5 -> int1: He makes 2000*52=$104,000 a year; int1 & sent3 -> int2: So the raise is worth .05*104,000=$5200; int1 & int2 -> int3: So he makes 104,000+5200=$109,200 from his salary; int3 & sent2 -> int4: So in total he made 109,200+5,000=$114,200; int4 & sent4 & sent5 & sent6 -> int5: The answer is 114,200;", "textual_logical_units": {"1": "John gana un premio en el trabajo.", "2": "El premio tiene una recompensa monetaria única de 5000 € y", "3": "un aumento salarial del 5 %.", "4": "Si gana 2000 a la semana", "5": "todas las semanas del año y", "6": "recibió el premio el primer día del año, ¿cuánto dinero ganó ese año?", "7": "Gana 2000 * 52 = 104 000 € al año", "8": "Así que el aumento es de 0,05 * 104 000 = 5200 €", "9": "Así que gana 104 000 + 5200 = 109 200 € con su salario", "10": "Así que, en total, ganó 109 200 + 5000 = 114 200 €", "11": "The answer is 114,200"}, "human_translated": true, "code_input": "####\nfacts = [ 'John gana un premio en el trabajo.',\n  'El premio tiene una recompensa monetaria única de 5000\\xa0€ y',\n  'un aumento salarial del 5\\xa0%.',\n  'Si gana 2000 a la semana',\n  'todas las semanas del año y']\nquestion = 'recibió el premio el primer día del año, ¿cuánto dinero ganó ese año?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Si gana 2000 a la semana', 'todas las semanas del año y']\nnew_fact = infer_new_fact(selected) # 'Gana 2000\\xa0*\\xa052\\xa0=\\xa0104\\xa0000\\xa0€ al año'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['un aumento salarial del 5\\xa0%.', 'Gana 2000\\xa0*\\xa052\\xa0=\\xa0104\\xa0000\\xa0€ al año']\nnew_fact = infer_new_fact(selected) # 'Así que el aumento es de 0,05\\xa0*\\xa0104\\xa0000\\xa0=\\xa05200\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Gana 2000\\xa0*\\xa052\\xa0=\\xa0104\\xa0000\\xa0€ al año', 'Así que el aumento es de 0,05\\xa0*\\xa0104\\xa0000\\xa0=\\xa05200\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Así que gana 104\\xa0000\\xa0+\\xa05200\\xa0=\\xa0109\\xa0200\\xa0€ con su salario'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El premio tiene una recompensa monetaria única de 5000\\xa0€ y', 'Así que gana 104\\xa0000\\xa0+\\xa05200\\xa0=\\xa0109\\xa0200\\xa0€ con su salario']\nnew_fact = infer_new_fact(selected) # 'Así que, en total, ganó 109\\xa0200\\xa0+\\xa05000\\xa0=\\xa0114\\xa0200\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si gana 2000 a la semana', 'todas las semanas del año y', 'recibió el premio el primer día del año, ¿cuánto dinero ganó ese año?', 'Así que, en total, ganó 109\\xa0200\\xa0+\\xa05000\\xa0=\\xa0114\\xa0200\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 114,200'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '114200'"}
{"id": "GSM8K_202_60e1a5ff24", "context": "", "options": [], "answer": "100", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: If each acre produces 5 tons of grapes per year, then her ten-acre farm produces 10*5=50 tons of grapes per year.; int1 & sent3 -> int2: If each ton of grapes makes 2 barrels of wine, then 50 tons makes 2*50=100 barrels of wine per year.; int2 & sent4 -> int3: The answer is 100;", "textual_logical_units": {"1": "Josie cultiva uvas en su granja de 10 hectáreas.", "2": "Cada hectárea produce 5 toneladas de uvas al año,", "3": "y cada tonelada de uva produce 2 barriles de vino.", "4": "¿Cuántos barriles de vino produce su granja al año?", "5": "Si cada hectárea produce 5 toneladas de uvas al año, su granja de diez hectáreas produce 10 * 5 = 50 toneladas de uvas al año.", "6": "Si cada tonelada de uva produce 2 barriles de vino, 50 toneladas producen 2 * 50 = 100 barriles de vino al año.", "7": "The answer is 100"}, "human_translated": true, "code_input": "####\nfacts = [ 'Josie cultiva uvas en su granja de 10\\xa0hectáreas.',\n  'Cada hectárea produce 5\\xa0toneladas de uvas al año,',\n  'y cada tonelada de uva produce 2\\xa0barriles de vino.']\nquestion = '¿Cuántos barriles de vino produce su granja al año?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Josie cultiva uvas en su granja de 10\\xa0hectáreas.', 'Cada hectárea produce 5\\xa0toneladas de uvas al año,']\nnew_fact = infer_new_fact(selected) # 'Si cada hectárea produce 5\\xa0toneladas de uvas al año, su granja de diez hectáreas produce 10\\xa0*\\xa05\\xa0=\\xa050\\xa0toneladas de uvas al año.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y cada tonelada de uva produce 2\\xa0barriles de vino.', 'Si cada hectárea produce 5\\xa0toneladas de uvas al año, su granja de diez hectáreas produce 10\\xa0*\\xa05\\xa0=\\xa050\\xa0toneladas de uvas al año.']\nnew_fact = infer_new_fact(selected) # 'Si cada tonelada de uva produce 2\\xa0barriles de vino, 50\\xa0toneladas producen 2\\xa0*\\xa050\\xa0=\\xa0100\\xa0barriles de vino al año.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos barriles de vino produce su granja al año?', 'Si cada tonelada de uva produce 2\\xa0barriles de vino, 50\\xa0toneladas producen 2\\xa0*\\xa050\\xa0=\\xa0100\\xa0barriles de vino al año.']\nnew_fact = infer_new_fact(selected) # 'The answer is 100'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '100'"}
{"id": "GSM8K_203_fe330c480f", "context": "", "options": [], "answer": "31", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 9}, {"antecedents": [3, 4], "consequent": 10}, {"antecedents": [4, 10], "consequent": 11}, {"antecedents": [7, 9, 11], "consequent": 12}, {"antecedents": [8, 12], "consequent": 13}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: His 2-slice sandwiches used 2 * 7 = 14 slices of cheese for all 7 days of the week.; sent3 & sent4 -> int2: His cheese and egg omelets used one more slice than his sandwiches, so they used 2 + 1 = 3 slices of cheese each.; int2 & sent4 -> int3: He made 3 omelets, so they used 3 * 3 = 9 slices of cheese.; int1 & int3 & sent7 -> int4: Carl’s sandwiches, omelets, and macaroni used 14 + 9 + 8 = 31 slices of cheese in all.; int4 & sent8 -> int5: The answer is 31;", "textual_logical_units": {"1": "La comida favorita de Carl es el queso.", "2": "Se comió un bocadillo todos los días de esta semana para almorzar y", "3": "usó 2 lonchas de queso en cada bocadillo.", "4": "Desayunó tortillas de queso y huevo 3 días de la semana, con una loncha más por tortilla que por bocadillo.", "5": "Preparó un plato grande de macarrones y", "6": "queso para que le durara varias cenas de la semana y", "7": "usó 8 lonchas de queso.", "8": "¿Cuántas lonchas de queso usó?", "9": "Los bocadillos de 2 lonchas necesitaron 2 x 7 = 14 lonchas de queso para los 7 días de la semana.", "10": "Las tortillas de queso y huevo usaban una loncha más que los bocadillos, así que necesitaron 2 + 1 = 3 lonchas de queso cada una.", "11": "Hizo 3 tortillas, así que usó 3 x 3 = 9 lonchas de queso.", "12": "Los bocadillos, las tortillas y los macarrones de Carl usaron 14 + 9 + 8 = 31 lonchas de queso en total.", "13": "The answer is 31"}, "human_translated": true, "code_input": "####\nfacts = [ 'La comida favorita de Carl es el queso.',\n  'Se comió un bocadillo todos los días de esta semana para almorzar y',\n  'usó 2\\xa0lonchas de queso en cada bocadillo.',\n  'Desayunó tortillas de queso y huevo 3\\xa0días de la semana, con una loncha más por tortilla que por bocadillo.',\n  'Preparó un plato grande de macarrones y',\n  'queso para que le durara varias cenas de la semana y',\n  'usó 8\\xa0lonchas de queso.']\nquestion = '¿Cuántas lonchas de queso usó?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Se comió un bocadillo todos los días de esta semana para almorzar y', 'usó 2\\xa0lonchas de queso en cada bocadillo.']\nnew_fact = infer_new_fact(selected) # 'Los bocadillos de 2\\xa0lonchas necesitaron 2\\xa0x\\xa07\\xa0=\\xa014\\xa0lonchas de queso para los 7\\xa0días de la semana.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['usó 2\\xa0lonchas de queso en cada bocadillo.', 'Desayunó tortillas de queso y huevo 3\\xa0días de la semana, con una loncha más por tortilla que por bocadillo.']\nnew_fact = infer_new_fact(selected) # 'Las tortillas de queso y huevo usaban una loncha más que los bocadillos, así que necesitaron 2\\xa0+\\xa01\\xa0=\\xa03\\xa0lonchas de queso cada una.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Desayunó tortillas de queso y huevo 3\\xa0días de la semana, con una loncha más por tortilla que por bocadillo.', 'Las tortillas de queso y huevo usaban una loncha más que los bocadillos, así que necesitaron 2\\xa0+\\xa01\\xa0=\\xa03\\xa0lonchas de queso cada una.']\nnew_fact = infer_new_fact(selected) # 'Hizo 3\\xa0tortillas, así que usó 3\\xa0x\\xa03\\xa0=\\xa09\\xa0lonchas de queso.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['usó 8\\xa0lonchas de queso.', 'Los bocadillos de 2\\xa0lonchas necesitaron 2\\xa0x\\xa07\\xa0=\\xa014\\xa0lonchas de queso para los 7\\xa0días de la semana.', 'Hizo 3\\xa0tortillas, así que usó 3\\xa0x\\xa03\\xa0=\\xa09\\xa0lonchas de queso.']\nnew_fact = infer_new_fact(selected) # 'Los bocadillos, las tortillas y los macarrones de Carl usaron 14\\xa0+\\xa09\\xa0+\\xa08\\xa0=\\xa031\\xa0lonchas de queso en total.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas lonchas de queso usó?', 'Los bocadillos, las tortillas y los macarrones de Carl usaron 14\\xa0+\\xa09\\xa0+\\xa08\\xa0=\\xa031\\xa0lonchas de queso en total.']\nnew_fact = infer_new_fact(selected) # 'The answer is 31'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '31'"}
{"id": "GSM8K_204_2355a6acd6", "context": "", "options": [], "answer": "98", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 7}, {"antecedents": [2, 4], "consequent": 8}, {"antecedents": [3, 4], "consequent": 9}, {"antecedents": [7, 8, 9], "consequent": 10}, {"antecedents": [1, 6], "consequent": 11}], "metadata": [], "linearized_output_en": "sent1 -> int1: Janet previously had 22 + 10 = 32 pens.; sent2 & sent4 -> int2: The number of blue pens is 6 × 9 = 54.; sent3 & sent4 -> int3: The number of red pens is 2 × 6 = 12.; int1 & int2 & int3 -> int4: Janet has 32 + 54 + 12 = 98 pens now.; sent1 & sent6 -> int5: The answer is 98;", "textual_logical_units": {"1": "Janet tenía 22 bolígrafos verdes y 10 amarillos.", "2": "Luego compró 6 bolsas de bolígrafos azules y", "3": "2 bolsas de bolígrafos rojos.", "4": "Había 9 bolígrafos en cada bolsa de color azul y", "5": "6 bolígrafos rojos en cada bolsa.", "6": "¿Cuántos bolígrafos tiene Janet ahora?", "7": "Janet anteriormente tenía 22 + 10 = 32 bolígrafos.", "8": "El número de bolígrafos azules es 6 × 9 = 54.", "9": "El número de bolígrafos rojos es 2 × 6 = 12.", "10": "Janet tiene 32 + 54 + 12 = 98 bolígrafos ahora.", "11": "The answer is 98"}, "human_translated": true, "code_input": "####\nfacts = [ 'Janet tenía 22\\xa0bolígrafos verdes y 10\\xa0amarillos.',\n  'Luego compró 6\\xa0bolsas de bolígrafos azules y',\n  '2\\xa0bolsas de bolígrafos rojos.',\n  'Había 9\\xa0bolígrafos en cada bolsa de color azul y',\n  '6\\xa0bolígrafos rojos en cada bolsa.']\nquestion = '¿Cuántos bolígrafos tiene Janet ahora?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Janet tenía 22\\xa0bolígrafos verdes y 10\\xa0amarillos.']\nnew_fact = infer_new_fact(selected) # 'Janet anteriormente tenía 22\\xa0+\\xa010\\xa0=\\xa032\\xa0bolígrafos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Luego compró 6\\xa0bolsas de bolígrafos azules y', 'Había 9\\xa0bolígrafos en cada bolsa de color azul y']\nnew_fact = infer_new_fact(selected) # 'El número de bolígrafos azules es 6\\xa0×\\xa09\\xa0=\\xa054.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['2\\xa0bolsas de bolígrafos rojos.', 'Había 9\\xa0bolígrafos en cada bolsa de color azul y']\nnew_fact = infer_new_fact(selected) # 'El número de bolígrafos rojos es 2\\xa0×\\xa06\\xa0=\\xa012.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Janet anteriormente tenía 22\\xa0+\\xa010\\xa0=\\xa032\\xa0bolígrafos.', 'El número de bolígrafos azules es 6\\xa0×\\xa09\\xa0=\\xa054.', 'El número de bolígrafos rojos es 2\\xa0×\\xa06\\xa0=\\xa012.']\nnew_fact = infer_new_fact(selected) # 'Janet tiene 32\\xa0+\\xa054\\xa0+\\xa012\\xa0=\\xa098\\xa0bolígrafos ahora.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Janet tenía 22\\xa0bolígrafos verdes y 10\\xa0amarillos.', '¿Cuántos bolígrafos tiene Janet ahora?']\nnew_fact = infer_new_fact(selected) # 'The answer is 98'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '98'"}
{"id": "GSM8K_205_bd32892fb0", "context": "", "options": [], "answer": "98", "reasoning_graph_edges": [{"antecedents": [6], "consequent": 9}, {"antecedents": [8], "consequent": 10}, {"antecedents": [7, 8], "consequent": 11}, {"antecedents": [10, 11], "consequent": 12}, {"antecedents": [8, 12], "consequent": 13}], "metadata": [], "linearized_output_en": "sent6 -> int1: First, identify the lowest score, which is 71, and remove it.; sent8 -> int2: Since Brinley wants a score of 93, we know her total score needs to be 93 (average) * 5 (tests) = 465 points; sent7 & sent8 -> int3: So far, Brinley has earned 89 + 92 +100 + 86 = 367 points; int2 & int3 -> int4: The final test must be 465 - 367 = 98 points.; int4 & sent8 -> int5: The answer is 98;", "textual_logical_units": {"1": "Brinley está en", "2": "la clase de matemáticas del Sr. Bert.", "3": "El Sr.", "4": "Bert hace seis exámenes cada semestre.", "5": "Permite a los estudiantes eliminar la nota más baja de la media de cada semestre.", "6": "Si Brinley tiene unas notas de 89, 71, 92, 100 y", "7": "86 en los cinco primeros exámenes,", "8": "¿qué nota necesita en el sexto examen para obtener una media de 93?", "9": "Primero, identifica la nota más baja, que es 71, y elimínala.", "10": "Como Brinley quiere una nota de 93, sabemos que su nota total debe ser de 93 (media) * 5 (pruebas) = 465 puntos", "11": "Hasta ahora, Brinley ha sacado 89 + 92 + 100 + 86 = 367 puntos", "12": "En el examen final tiene que sacar 465 - 367 = 98 puntos.", "13": "The answer is 98"}, "human_translated": true, "code_input": "####\nfacts = [ 'Brinley está en',\n  'la clase de matemáticas del Sr. Bert.',\n  'El Sr.',\n  'Bert hace seis exámenes cada semestre.',\n  'Permite a los estudiantes eliminar la nota más baja de la media de cada semestre.',\n  'Si Brinley tiene unas notas de 89, 71, 92, 100 y',\n  '86 en los cinco primeros exámenes,']\nquestion = '¿qué nota necesita en el sexto examen para obtener una media de 93?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Si Brinley tiene unas notas de 89, 71, 92, 100 y']\nnew_fact = infer_new_fact(selected) # 'Primero, identifica la nota más baja, que es 71, y elimínala.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿qué nota necesita en el sexto examen para obtener una media de 93?']\nnew_fact = infer_new_fact(selected) # 'Como Brinley quiere una nota de 93, sabemos que su nota total debe ser de 93\\xa0(media)\\xa0*\\xa05\\xa0(pruebas)\\xa0=\\xa0465\\xa0puntos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['86 en los cinco primeros exámenes,', '¿qué nota necesita en el sexto examen para obtener una media de 93?']\nnew_fact = infer_new_fact(selected) # 'Hasta ahora, Brinley ha sacado 89\\xa0+\\xa092\\xa0+\\xa0100\\xa0+\\xa086\\xa0=\\xa0367\\xa0puntos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Como Brinley quiere una nota de 93, sabemos que su nota total debe ser de 93\\xa0(media)\\xa0*\\xa05\\xa0(pruebas)\\xa0=\\xa0465\\xa0puntos', 'Hasta ahora, Brinley ha sacado 89\\xa0+\\xa092\\xa0+\\xa0100\\xa0+\\xa086\\xa0=\\xa0367\\xa0puntos']\nnew_fact = infer_new_fact(selected) # 'En el examen final tiene que sacar 465\\xa0-\\xa0367\\xa0=\\xa098\\xa0puntos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿qué nota necesita en el sexto examen para obtener una media de 93?', 'En el examen final tiene que sacar 465\\xa0-\\xa0367\\xa0=\\xa098\\xa0puntos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 98'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '98'"}
{"id": "GSM8K_206_099f3278a8", "context": "", "options": [], "answer": "860", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 9}, {"antecedents": [4, 9], "consequent": 10}, {"antecedents": [5, 6], "consequent": 11}, {"antecedents": [7, 11], "consequent": 12}, {"antecedents": [10, 12], "consequent": 13}, {"antecedents": [8, 13], "consequent": 14}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: In the first part, Micheal did 5 * 25 = 125 kilometers every week.; int1 & sent4 -> int2: He did that for four weeks, which means he made during that time 125 * 4 = 500 kilometers.; sent5 & sent6 -> int3: After that, he made 2 * 60 = 120 kilometers a week.; int3 & sent7 -> int4: And Micheal did that for three weeks, so he rode 120 * 3 = 360 kilometers during that time.; int2 & int4 -> int5: In total Micheal did 500 + 360 = 860 kilometers.; int5 & sent8 -> int6: The answer is 860;", "textual_logical_units": {"1": "A Micheal le encanta ir en bicicleta.", "2": "Iba al menos 5 veces a la semana e", "3": "hizo 25 kilómetros cada vez.", "4": "Lo hizo durante cuatro semanas, pero luego decidió", "5": "ir en bicicleta solo 2 veces a la semana,", "6": "pero 60 kilómetros cada vez,", "7": "y lo hizo durante 3 semanas.", "8": "¿Cuántos kilómetros hizo Micheal en total?", "9": "En la primera parte, Micheal hizo 5 * 25 = 125 kilómetros cada semana.", "10": "Lo hizo durante cuatro semanas, lo que significa que durante ese tiempo hizo 125 * 4 = 500 kilómetros.", "11": "Después de eso, hizo 2 * 60 = 120 kilómetros por semana.", "12": "Y Micheal lo hizo durante tres semanas, así que recorrió 120 * 3 = 360 kilómetros durante ese tiempo.", "13": "En total, Micheal hizo 500 + 360 = 860 kilómetros.", "14": "The answer is 860"}, "human_translated": true, "code_input": "####\nfacts = [ 'A Micheal le encanta ir en bicicleta.',\n  'Iba al menos 5\\xa0veces a la semana e',\n  'hizo 25\\xa0kilómetros cada vez.',\n  'Lo hizo durante cuatro semanas, pero luego decidió',\n  'ir en bicicleta solo 2\\xa0veces a la semana,',\n  'pero 60\\xa0kilómetros cada vez,',\n  'y lo hizo durante 3 semanas.']\nquestion = '¿Cuántos kilómetros hizo Micheal en total?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Iba al menos 5\\xa0veces a la semana e', 'hizo 25\\xa0kilómetros cada vez.']\nnew_fact = infer_new_fact(selected) # 'En la primera parte, Micheal hizo 5\\xa0*\\xa025\\xa0=\\xa0125\\xa0kilómetros cada semana.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Lo hizo durante cuatro semanas, pero luego decidió', 'En la primera parte, Micheal hizo 5\\xa0*\\xa025\\xa0=\\xa0125\\xa0kilómetros cada semana.']\nnew_fact = infer_new_fact(selected) # 'Lo hizo durante cuatro semanas, lo que significa que durante ese tiempo hizo 125\\xa0*\\xa04\\xa0=\\xa0500 kilómetros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['ir en bicicleta solo 2\\xa0veces a la semana,', 'pero 60\\xa0kilómetros cada vez,']\nnew_fact = infer_new_fact(selected) # 'Después de eso, hizo 2\\xa0*\\xa060\\xa0=\\xa0120\\xa0kilómetros por semana.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y lo hizo durante 3 semanas.', 'Después de eso, hizo 2\\xa0*\\xa060\\xa0=\\xa0120\\xa0kilómetros por semana.']\nnew_fact = infer_new_fact(selected) # 'Y Micheal lo hizo durante tres semanas, así que recorrió 120\\xa0*\\xa03\\xa0=\\xa0360\\xa0kilómetros durante ese tiempo.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Lo hizo durante cuatro semanas, lo que significa que durante ese tiempo hizo 125\\xa0*\\xa04\\xa0=\\xa0500 kilómetros.', 'Y Micheal lo hizo durante tres semanas, así que recorrió 120\\xa0*\\xa03\\xa0=\\xa0360\\xa0kilómetros durante ese tiempo.']\nnew_fact = infer_new_fact(selected) # 'En total, Micheal hizo 500\\xa0+\\xa0360\\xa0=\\xa0860\\xa0kilómetros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos kilómetros hizo Micheal en total?', 'En total, Micheal hizo 500\\xa0+\\xa0360\\xa0=\\xa0860\\xa0kilómetros.']\nnew_fact = infer_new_fact(selected) # 'The answer is 860'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '860'"}
{"id": "GSM8K_207_52479bc41c", "context": "", "options": [], "answer": "2600", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [1, 3], "consequent": 6}, {"antecedents": [1, 5], "consequent": 7}, {"antecedents": [6, 7], "consequent": 8}, {"antecedents": [4, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: The candied apples weigh 40/2=20 grams each.; sent1 & sent3 -> int2: The chocolate bars weigh 40*25=1000 grams in total.; int1 & sent1 -> int3: The candied apples weigh 20*80=1600 grams in total.; int2 & int3 -> int4: Joe's bag weighs 1000+1600=2600 grams.; int4 & sent4 -> int5: The answer is 2600;", "textual_logical_units": {"1": "La bolsa de caramelos de Halloween de Joe tiene 25 barras de chocolate y 80 manzanas confitadas.", "2": "Cada barra de chocolate pesa el doble que cada manzana confitada.", "3": "Si cada barra de chocolate pesa 40 g,", "4": "¿Cuánto pesa la bolsa de caramelos de Joe, en gramos?", "5": "Las manzanas confitadas pesan 40 / 2 = 20 gramos cada una.", "6": "Las barras de chocolate pesan 40 * 25 = 1000 gramos en total.", "7": "Las manzanas confitadas pesan 20 * 80 = 1600 gramos en total.", "8": "La bolsa de Joe pesa 1000 + 1600 = 2600 gramos.", "9": "The answer is 2600"}, "human_translated": true, "code_input": "####\nfacts = [ 'La bolsa de caramelos de Halloween de Joe tiene 25\\xa0barras de chocolate y 80\\xa0manzanas confitadas.',\n  'Cada barra de chocolate pesa el doble que cada manzana confitada.',\n  'Si cada barra de chocolate pesa 40\\xa0g,']\nquestion = '¿Cuánto pesa la bolsa de caramelos de Joe, en gramos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Cada barra de chocolate pesa el doble que cada manzana confitada.', 'Si cada barra de chocolate pesa 40\\xa0g,']\nnew_fact = infer_new_fact(selected) # 'Las manzanas confitadas pesan 40\\xa0/\\xa02\\xa0=\\xa020\\xa0gramos cada una.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La bolsa de caramelos de Halloween de Joe tiene 25\\xa0barras de chocolate y 80\\xa0manzanas confitadas.', 'Si cada barra de chocolate pesa 40\\xa0g,']\nnew_fact = infer_new_fact(selected) # 'Las barras de chocolate pesan 40\\xa0*\\xa025\\xa0=\\xa01000\\xa0gramos en total.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La bolsa de caramelos de Halloween de Joe tiene 25\\xa0barras de chocolate y 80\\xa0manzanas confitadas.', 'Las manzanas confitadas pesan 40\\xa0/\\xa02\\xa0=\\xa020\\xa0gramos cada una.']\nnew_fact = infer_new_fact(selected) # 'Las manzanas confitadas pesan 20\\xa0*\\xa080\\xa0=\\xa01600\\xa0gramos en total.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Las barras de chocolate pesan 40\\xa0*\\xa025\\xa0=\\xa01000\\xa0gramos en total.', 'Las manzanas confitadas pesan 20\\xa0*\\xa080\\xa0=\\xa01600\\xa0gramos en total.']\nnew_fact = infer_new_fact(selected) # 'La bolsa de Joe pesa 1000\\xa0+\\xa01600\\xa0=\\xa02600\\xa0gramos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto pesa la bolsa de caramelos de Joe, en gramos?', 'La bolsa de Joe pesa 1000\\xa0+\\xa01600\\xa0=\\xa02600\\xa0gramos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 2600'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '2600'"}
{"id": "GSM8K_208_55aedda100", "context": "", "options": [], "answer": "76", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 7}, {"antecedents": [2, 3, 7], "consequent": 8}, {"antecedents": [4, 5, 8], "consequent": 9}, {"antecedents": [7, 8, 9], "consequent": 10}, {"antecedents": [1, 6], "consequent": 11}], "metadata": [], "linearized_output_en": "sent1 -> int1: On Monday she bought 4 cakes; int1 & sent2 & sent3 -> int2: On Tuesday she bought 4*3=12 cakes; int2 & sent4 & sent5 -> int3: On Wednesday she bought 12*5=60 cakes; int1 & int2 & int3 -> int4: Rose bought a total of 4+12+60= 76 cakes during the three days; sent1 & sent6 -> int5: The answer is 76;", "textual_logical_units": {"1": "Rose fue a la tienda el lunes y compró 4 pasteles.", "2": "El martes fue a otra tienda y", "3": "compró tres veces esa cantidad de pasteles.", "4": "El miércoles fue a otra tienda y", "5": "compró 5 veces más pasteles que el martes.", "6": "¿Cuántos pasteles compró después de los tres días?", "7": "El lunes compró 4 pasteles", "8": "El martes compró 4 * 3= 12 pasteles", "9": "El miércoles compró 12 * 5 = 60 pasteles", "10": "Rose compró un total de 4 + 12 + 60 = 76 pasteles durante los tres días", "11": "The answer is 76"}, "human_translated": true, "code_input": "####\nfacts = [ 'Rose fue a la tienda el lunes y compró 4\\xa0pasteles.',\n  'El martes fue a otra tienda y',\n  'compró tres veces esa cantidad de pasteles.',\n  'El miércoles fue a otra tienda y',\n  'compró 5\\xa0veces más pasteles que el martes.']\nquestion = '¿Cuántos pasteles compró después de los tres días?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Rose fue a la tienda el lunes y compró 4\\xa0pasteles.']\nnew_fact = infer_new_fact(selected) # 'El lunes compró 4\\xa0pasteles'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El martes fue a otra tienda y', 'compró tres veces esa cantidad de pasteles.', 'El lunes compró 4\\xa0pasteles']\nnew_fact = infer_new_fact(selected) # 'El martes compró 4\\xa0*\\xa03=\\xa012\\xa0pasteles'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El miércoles fue a otra tienda y', 'compró 5\\xa0veces más pasteles que el martes.', 'El martes compró 4\\xa0*\\xa03=\\xa012\\xa0pasteles']\nnew_fact = infer_new_fact(selected) # 'El miércoles compró 12\\xa0*\\xa05\\xa0=\\xa060\\xa0pasteles'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El lunes compró 4\\xa0pasteles', 'El martes compró 4\\xa0*\\xa03=\\xa012\\xa0pasteles', 'El miércoles compró 12\\xa0*\\xa05\\xa0=\\xa060\\xa0pasteles']\nnew_fact = infer_new_fact(selected) # 'Rose compró un total de 4\\xa0+\\xa012\\xa0+\\xa060\\xa0=\\xa076\\xa0pasteles durante los tres días'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Rose fue a la tienda el lunes y compró 4\\xa0pasteles.', '¿Cuántos pasteles compró después de los tres días?']\nnew_fact = infer_new_fact(selected) # 'The answer is 76'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '76'"}
{"id": "GSM8K_209_59d74b32a3", "context": "", "options": [], "answer": "145", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 3}, {"antecedents": [1, 3], "consequent": 4}, {"antecedents": [1, 4], "consequent": 5}, {"antecedents": [3], "consequent": 6}, {"antecedents": [5, 6], "consequent": 7}, {"antecedents": [2, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 -> int1: Since a dozen has 12 items, half a dozen plates are 12/2 = 6; int1 & sent1 -> int2: Half a dozen plates sold at $6000 each cost 6*$6000 = $36000; int2 & sent1 -> int3: Twenty dozen cups cost $1200 less than the total cost of half a dozen plates, meaning the twenty dozen cups cost a total of $36000-$1200 = 34800; int1 -> int4: Since a dozen has 12 items, twenty dozen cups are 20*12 = 240 cups.; int3 & int4 -> int5: If the twenty dozen cups cost $34800, each cup costs $34800/240=$145; int5 & sent2 -> int6: The answer is 145;", "textual_logical_units": {"1": "Veinte docenas de tazas cuestan 1200 € menos que el coste total de media docena de platos vendidos a 6000 € cada uno.", "2": "Calcula el coste total de comprar cada taza.", "3": "Como una docena tiene 12 artículos, media docena de platos son 12 / 2 = 6", "4": "Media docena de platos vendidos a 6000 € cada uno cuestan 6 * 6000 € = 36 000 €", "5": "Veinte docenas de tazas cuestan 1200 € menos que el coste total de media docena de platos, lo que significa que las veinte docenas de tazas cuestan un total de 36 000 € - 1200 € = 34 800", "6": "Como una docena tiene 12 artículos, veinte docenas de tazas son 20 * 12 = 240 tazas.", "7": "Si las veinte docenas de tazas cuestan 34 800 euros, cada taza cuesta 34 800 € / 240 = 145 €", "8": "The answer is 145"}, "human_translated": true, "code_input": "####\nfacts = ['Veinte docenas de tazas cuestan 1200\\xa0€ menos que el coste total de media docena de platos vendidos a 6000\\xa0€ cada uno.']\nquestion = 'Calcula el coste total de comprar cada taza.'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Veinte docenas de tazas cuestan 1200\\xa0€ menos que el coste total de media docena de platos vendidos a 6000\\xa0€ cada uno.']\nnew_fact = infer_new_fact(selected) # 'Como una docena tiene 12\\xa0artículos, media docena de platos son 12\\xa0/\\xa02\\xa0=\\xa06'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Veinte docenas de tazas cuestan 1200\\xa0€ menos que el coste total de media docena de platos vendidos a 6000\\xa0€ cada uno.', 'Como una docena tiene 12\\xa0artículos, media docena de platos son 12\\xa0/\\xa02\\xa0=\\xa06']\nnew_fact = infer_new_fact(selected) # 'Media docena de platos vendidos a 6000\\xa0€ cada uno cuestan 6\\xa0*\\xa06000\\xa0€\\xa0=\\xa036\\xa0000\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Veinte docenas de tazas cuestan 1200\\xa0€ menos que el coste total de media docena de platos vendidos a 6000\\xa0€ cada uno.', 'Media docena de platos vendidos a 6000\\xa0€ cada uno cuestan 6\\xa0*\\xa06000\\xa0€\\xa0=\\xa036\\xa0000\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Veinte docenas de tazas cuestan 1200\\xa0€ menos que el coste total de media docena de platos, lo que significa que las veinte docenas de tazas cuestan un total de 36\\xa0000\\xa0€\\xa0-\\xa01200\\xa0€\\xa0=\\xa034\\xa0800'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Como una docena tiene 12\\xa0artículos, media docena de platos son 12\\xa0/\\xa02\\xa0=\\xa06']\nnew_fact = infer_new_fact(selected) # 'Como una docena tiene 12\\xa0artículos, veinte docenas de tazas son 20\\xa0*\\xa012\\xa0=\\xa0240\\xa0tazas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Veinte docenas de tazas cuestan 1200\\xa0€ menos que el coste total de media docena de platos, lo que significa que las veinte docenas de tazas cuestan un total de 36\\xa0000\\xa0€\\xa0-\\xa01200\\xa0€\\xa0=\\xa034\\xa0800', 'Como una docena tiene 12\\xa0artículos, veinte docenas de tazas son 20\\xa0*\\xa012\\xa0=\\xa0240\\xa0tazas.']\nnew_fact = infer_new_fact(selected) # 'Si las veinte docenas de tazas cuestan 34\\xa0800\\xa0euros, cada taza cuesta 34\\xa0800\\xa0€\\xa0/\\xa0240\\xa0=\\xa0145\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Calcula el coste total de comprar cada taza.', 'Si las veinte docenas de tazas cuestan 34\\xa0800\\xa0euros, cada taza cuesta 34\\xa0800\\xa0€\\xa0/\\xa0240\\xa0=\\xa0145\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 145'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '145'"}
{"id": "GSM8K_210_67f7bd36f7", "context": "", "options": [], "answer": "10", "reasoning_graph_edges": [{"antecedents": [1, 3], "consequent": 9}, {"antecedents": [2, 9], "consequent": 10}, {"antecedents": [4, 5], "consequent": 11}, {"antecedents": [7, 11], "consequent": 12}, {"antecedents": [10, 12], "consequent": 13}, {"antecedents": [6, 13], "consequent": 14}, {"antecedents": [8, 14], "consequent": 15}], "metadata": [], "linearized_output_en": "sent1 & sent3 -> int1: Both pairs of shoes will cost a total of 2 * $20 = $40.; int1 & sent2 -> int2: Sara will need to save a total of $30 + $40 = $70 to buy everything that she wants.; sent4 & sent5 -> int3: Sara has earned 4 * $5 = $20 from babysitting.; int3 & sent7 -> int4: Between her savings and the babysitting, Sara has already saved $10 + $20 = $30.; int2 & int4 -> int5: Sara needs to earn an additional $70 - $30 = $40 from mowing the lawn to afford her clothes.; int5 & sent6 -> int6: Sara must mow the lawn $40 / $4 = 10 times to afford to buy the jacket and shoes.; int6 & sent8 -> int7: The answer is 10;", "textual_logical_units": {"1": "Sara quiere comprarse una chaqueta nueva y dos pares de zapatos.", "2": "La chaqueta que quiere cuesta 30 € y", "3": "cada par de zapatos cuesta 20 €.", "4": "Sara cuida a los hijos del vecino 4 veces", "5": "y gana 5 € cada vez que los cuida.", "6": "Sus padres le pagan 4 € cada vez que corta el césped.", "7": "Si Sara ya tenía 10 euros ahorrados antes de empezar a hacer de canguro,", "8": "¿Cuántas veces tiene que cortar el césped antes de poder pagar la chaqueta y los zapatos?", "9": "Los pares de zapatos costarán un total de 2 * 20 € = 40 €.", "10": "Sara tendrá que ahorrar un total de 30 € + 40 € = 70 € para comprar todo lo que quiere.", "11": "Sara ha ganado 4 * 5 € = 20 € cuidando niños.", "12": "Entre sus ahorros y el cuidado de niños, Sara ya ha ahorrado 10 € + 20 € = 30 €.", "13": "Sara necesita ganar 70 € - 30 € = 40 € más cortando el césped para poder comprar su ropa.", "14": "Sara debe cortar el césped 40 € / 4 € = 10 veces para poder comprar la chaqueta y los zapatos.", "15": "The answer is 10"}, "human_translated": true, "code_input": "####\nfacts = [ 'Sara quiere comprarse una chaqueta nueva y dos pares de zapatos.',\n  'La chaqueta que quiere cuesta 30\\xa0€ y',\n  'cada par de zapatos cuesta 20\\xa0€.',\n  'Sara cuida a los hijos del vecino 4\\xa0veces',\n  'y gana 5\\xa0€ cada vez que los cuida.',\n  'Sus padres le pagan 4\\xa0€ cada vez que corta el césped.',\n  'Si Sara ya tenía 10\\xa0euros ahorrados antes de empezar a hacer de canguro,']\nquestion = '¿Cuántas veces tiene que cortar el césped antes de poder pagar la chaqueta y los zapatos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Sara quiere comprarse una chaqueta nueva y dos pares de zapatos.', 'cada par de zapatos cuesta 20\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Los pares de zapatos costarán un total de 2\\xa0*\\xa020\\xa0€\\xa0=\\xa040\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La chaqueta que quiere cuesta 30\\xa0€ y', 'Los pares de zapatos costarán un total de 2\\xa0*\\xa020\\xa0€\\xa0=\\xa040\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Sara tendrá que ahorrar un total de 30\\xa0€\\xa0+\\xa040\\xa0€\\xa0=\\xa070\\xa0€ para comprar todo lo que quiere.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Sara cuida a los hijos del vecino 4\\xa0veces', 'y gana 5\\xa0€ cada vez que los cuida.']\nnew_fact = infer_new_fact(selected) # 'Sara ha ganado 4\\xa0*\\xa05\\xa0€\\xa0=\\xa020\\xa0€ cuidando niños.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Sara ya tenía 10\\xa0euros ahorrados antes de empezar a hacer de canguro,', 'Sara ha ganado 4\\xa0*\\xa05\\xa0€\\xa0=\\xa020\\xa0€ cuidando niños.']\nnew_fact = infer_new_fact(selected) # 'Entre sus ahorros y el cuidado de niños, Sara ya ha ahorrado 10\\xa0€\\xa0+\\xa020\\xa0€\\xa0=\\xa030\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Sara tendrá que ahorrar un total de 30\\xa0€\\xa0+\\xa040\\xa0€\\xa0=\\xa070\\xa0€ para comprar todo lo que quiere.', 'Entre sus ahorros y el cuidado de niños, Sara ya ha ahorrado 10\\xa0€\\xa0+\\xa020\\xa0€\\xa0=\\xa030\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Sara necesita ganar 70\\xa0€\\xa0-\\xa030\\xa0€\\xa0=\\xa040\\xa0€ más cortando el césped para poder comprar su ropa.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Sus padres le pagan 4\\xa0€ cada vez que corta el césped.', 'Sara necesita ganar 70\\xa0€\\xa0-\\xa030\\xa0€\\xa0=\\xa040\\xa0€ más cortando el césped para poder comprar su ropa.']\nnew_fact = infer_new_fact(selected) # 'Sara debe cortar el césped 40\\xa0€\\xa0/\\xa04\\xa0€\\xa0=\\xa010\\xa0veces para poder comprar la chaqueta y los zapatos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas veces tiene que cortar el césped antes de poder pagar la chaqueta y los zapatos?', 'Sara debe cortar el césped 40\\xa0€\\xa0/\\xa04\\xa0€\\xa0=\\xa010\\xa0veces para poder comprar la chaqueta y los zapatos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 10'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '10'"}
{"id": "GSM8K_211_768dd956ae", "context": "", "options": [], "answer": "4", "reasoning_graph_edges": [{"antecedents": [2, 3, 4], "consequent": 7}, {"antecedents": [7], "consequent": 8}, {"antecedents": [7, 8], "consequent": 9}, {"antecedents": [3, 9], "consequent": 10}, {"antecedents": [10], "consequent": 11}, {"antecedents": [11], "consequent": 12}, {"antecedents": [12], "consequent": 13}, {"antecedents": [6, 13], "consequent": 14}], "metadata": [], "linearized_output_en": "sent2 & sent3 & sent4 -> int1: First, set up the equation for the number of eggs the chickens lay each day: 3r + 5w = 42, where r is the number of red chickens and w is the number of white chickens.; int1 -> int2: Then, express r in terms of w based on the information in the problem: w = r + 2; int1 & int2 -> int3: Now substitute r + 2 for w in the equation for the number of eggs: 3r + 5(r + 2) = 42; int3 & sent3 -> int4: Now multiply 5 through the parentheses: 3r + 5r + 10 = 42; int4 -> int5: Now add like terms to get 8r + 10 = 42; int5 -> int6: Now subtract 10 from both sides of the equation: 8r = 32; int6 -> int7: Finally, divide both sides of the equation by 8 to get r = 4; int7 & sent6 -> int8: The answer is 4;", "textual_logical_units": {"1": "Jerry tiene unas cuantas gallinas.", "2": "Las gallinas rojas producen 3 huevos al día", "3": "y las gallinas blancas producen 5 huevos al día.", "4": "Todos los días, Jerry recoge 42 huevos.", "5": "Si tiene dos gallinas blancas más que rojas,", "6": "¿cuántas gallinas rojas tiene?", "7": "Primero, establece la ecuación para el número de huevos que ponen las gallinas cada día: 3r + 5w = 42, donde r es el número de gallinas rojas y w es el número de gallinas blancas.", "8": "Luego, expresa r en términos de w según la información del problema: w = r + 2", "9": "Ahora, sustituye r + 2 por w en la ecuación para el número de huevos: 3r + 5 * (r + 2) = 42", "10": "Ahora, multiplica 5 por el paréntesis: 3r + 5r + 10 = 42", "11": "Ahora, suma los términos semejantes para obtener 8r + 10 = 42", "12": "Ahora, resta 10 a ambos lados de la ecuación: 8r = 32", "13": "Por último, divide ambos lados de la ecuación entre 8 para obtener r = 4", "14": "The answer is 4"}, "human_translated": true, "code_input": "####\nfacts = [ 'Jerry tiene unas cuantas gallinas.',\n  'Las gallinas rojas producen 3\\xa0huevos al día',\n  'y las gallinas blancas producen 5\\xa0huevos al día.',\n  'Todos los días, Jerry recoge 42\\xa0huevos.',\n  'Si tiene dos gallinas blancas más que rojas,']\nquestion = '¿cuántas gallinas rojas tiene?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Las gallinas rojas producen 3\\xa0huevos al día', 'y las gallinas blancas producen 5\\xa0huevos al día.', 'Todos los días, Jerry recoge 42\\xa0huevos.']\nnew_fact = infer_new_fact(selected) # 'Primero, establece la ecuación para el número de huevos que ponen las gallinas cada día: 3r\\xa0+\\xa05w\\xa0=\\xa042, donde r es el número de gallinas rojas y w es el número de gallinas blancas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Primero, establece la ecuación para el número de huevos que ponen las gallinas cada día: 3r\\xa0+\\xa05w\\xa0=\\xa042, donde r es el número de gallinas rojas y w es el número de gallinas blancas.']\nnew_fact = infer_new_fact(selected) # 'Luego, expresa r en términos de w según la información del problema: w\\xa0=\\xa0r\\xa0+ 2'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Primero, establece la ecuación para el número de huevos que ponen las gallinas cada día: 3r\\xa0+\\xa05w\\xa0=\\xa042, donde r es el número de gallinas rojas y w es el número de gallinas blancas.', 'Luego, expresa r en términos de w según la información del problema: w\\xa0=\\xa0r\\xa0+ 2']\nnew_fact = infer_new_fact(selected) # 'Ahora, sustituye r\\xa0+\\xa02 por w en la ecuación para el número de huevos: 3r\\xa0+\\xa05\\xa0*\\xa0(r\\xa0+\\xa02)\\xa0=\\xa042'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y las gallinas blancas producen 5\\xa0huevos al día.', 'Ahora, sustituye r\\xa0+\\xa02 por w en la ecuación para el número de huevos: 3r\\xa0+\\xa05\\xa0*\\xa0(r\\xa0+\\xa02)\\xa0=\\xa042']\nnew_fact = infer_new_fact(selected) # 'Ahora, multiplica 5 por el paréntesis: 3r\\xa0+\\xa05r\\xa0+\\xa010\\xa0=\\xa042'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Ahora, multiplica 5 por el paréntesis: 3r\\xa0+\\xa05r\\xa0+\\xa010\\xa0=\\xa042']\nnew_fact = infer_new_fact(selected) # 'Ahora, suma los términos semejantes para obtener 8r\\xa0+\\xa010\\xa0=\\xa042'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Ahora, suma los términos semejantes para obtener 8r\\xa0+\\xa010\\xa0=\\xa042']\nnew_fact = infer_new_fact(selected) # 'Ahora, resta 10 a ambos lados de la ecuación: 8r\\xa0=\\xa032'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Ahora, resta 10 a ambos lados de la ecuación: 8r\\xa0=\\xa032']\nnew_fact = infer_new_fact(selected) # 'Por último, divide ambos lados de la ecuación entre 8 para obtener r\\xa0=\\xa04'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántas gallinas rojas tiene?', 'Por último, divide ambos lados de la ecuación entre 8 para obtener r\\xa0=\\xa04']\nnew_fact = infer_new_fact(selected) # 'The answer is 4'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '4'"}
{"id": "GSM8K_212_cf4e9f2382", "context": "", "options": [], "answer": "5", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 5}, {"antecedents": [2], "consequent": 6}, {"antecedents": [5, 6], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}, {"antecedents": [4, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent2 -> int1: First find the length of the two long sides of the park: 6 miles * 2 = 12 miles; sent2 -> int2: Then find the length of the two short sides of the park: 1.5 miles * 2 = 3 miles; int1 & int2 -> int3: Then add those two lengthes to find the total distance around the park: 12 miles + 3 miles = 15 miles; int3 & sent3 -> int4: Then divide the total length by Gary's speed to find how long he spends walking: 15 miles / 3 miles/hour = 5 hours; int4 & sent4 -> int5: The answer is 5;", "textual_logical_units": {"1": "A Gary le gusta pasear rodeando el parque local,", "2": "que es un rectángulo que tiene unas dimensiones de 1,5 kilómetros por 6 kilómetros.", "3": "Si camina a 3 kilómetros/hora,", "4": "¿cuántas horas pasa caminando?", "5": "Primero, encuentra la longitud de los dos lados largos del parque: 6 kilómetros * 2 = 12 kilómetros", "6": "Luego, encuentra la longitud de los dos lados cortos del parque: 1,5 kilómetros * 2 = 3 kilómetros", "7": "Luego, añade esas dos longitudes para encontrar la distancia total alrededor del parque: 12 kilómetros + 3 kilómetros = 15 kilómetros", "8": "Luego, divide la longitud total por la velocidad de Gary para calcular cuánto tiempo pasa caminando: 15 kilómetros / 3 kilómetros/hora = 5 horas", "9": "The answer is 5"}, "human_translated": true, "code_input": "####\nfacts = [ 'A Gary le gusta pasear rodeando el parque local,',\n  'que es un rectángulo que tiene unas dimensiones de 1,5\\xa0kilómetros por\\xa06 kilómetros.',\n  'Si camina a 3\\xa0kilómetros/hora,']\nquestion = '¿cuántas horas pasa caminando?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['que es un rectángulo que tiene unas dimensiones de 1,5\\xa0kilómetros por\\xa06 kilómetros.']\nnew_fact = infer_new_fact(selected) # 'Primero, encuentra la longitud de los dos lados largos del parque: 6\\xa0kilómetros\\xa0*\\xa02\\xa0=\\xa012\\xa0kilómetros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['que es un rectángulo que tiene unas dimensiones de 1,5\\xa0kilómetros por\\xa06 kilómetros.']\nnew_fact = infer_new_fact(selected) # 'Luego, encuentra la longitud de los dos lados cortos del parque: 1,5\\xa0kilómetros\\xa0*\\xa02\\xa0=\\xa03\\xa0kilómetros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Primero, encuentra la longitud de los dos lados largos del parque: 6\\xa0kilómetros\\xa0*\\xa02\\xa0=\\xa012\\xa0kilómetros', 'Luego, encuentra la longitud de los dos lados cortos del parque: 1,5\\xa0kilómetros\\xa0*\\xa02\\xa0=\\xa03\\xa0kilómetros']\nnew_fact = infer_new_fact(selected) # 'Luego, añade esas dos longitudes para encontrar la distancia total alrededor del parque: 12\\xa0kilómetros\\xa0+\\xa03\\xa0kilómetros\\xa0=\\xa015\\xa0kilómetros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si camina a 3\\xa0kilómetros/hora,', 'Luego, añade esas dos longitudes para encontrar la distancia total alrededor del parque: 12\\xa0kilómetros\\xa0+\\xa03\\xa0kilómetros\\xa0=\\xa015\\xa0kilómetros']\nnew_fact = infer_new_fact(selected) # 'Luego, divide la longitud total por la velocidad de Gary para calcular cuánto tiempo pasa caminando: 15\\xa0kilómetros\\xa0/\\xa03\\xa0kilómetros/hora\\xa0=\\xa05\\xa0horas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántas horas pasa caminando?', 'Luego, divide la longitud total por la velocidad de Gary para calcular cuánto tiempo pasa caminando: 15\\xa0kilómetros\\xa0/\\xa03\\xa0kilómetros/hora\\xa0=\\xa05\\xa0horas']\nnew_fact = infer_new_fact(selected) # 'The answer is 5'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '5'"}
{"id": "GSM8K_213_1624cd3d64", "context": "", "options": [], "answer": "250", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 6}, {"antecedents": [2, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: On the second day, she counted 100+50 = 150 customers.; int1 & sent2 -> int2: The total for the first two days is 150+100 = 250 customers.; int2 & sent4 -> int3: If the total count for three days was 500, she counted 500-250 = 250 customers on the third day.; int3 & sent5 -> int4: The answer is 250;", "textual_logical_units": {"1": "Mientras está en la tienda de todo a un euro,", "2": "Sloane cuenta que 100 clientes entran a la tienda.", "3": "Al día siguiente, cuenta 50 clientes más que el primer día.", "4": "Si el número total de clientes al final del tercer día fue de 500,", "5": "¿cuántos clientes contó el tercer día?", "6": "El segundo día, contó 100 + 50 = 150 clientes.", "7": "El total de los dos primeros días es de 150 + 100 = 250 clientes.", "8": "Si el recuento total de tres días fue de 500, contó 500 - 250 = 250 clientes el tercer día.", "9": "The answer is 250"}, "human_translated": true, "code_input": "####\nfacts = [ 'Mientras está en la tienda de todo a un euro,',\n  'Sloane cuenta que 100\\xa0clientes entran a la tienda.',\n  'Al día siguiente, cuenta 50\\xa0clientes más que el primer día.',\n  'Si el número total de clientes al final del tercer día fue de 500,']\nquestion = '¿cuántos clientes contó el tercer día?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Sloane cuenta que 100\\xa0clientes entran a la tienda.', 'Al día siguiente, cuenta 50\\xa0clientes más que el primer día.']\nnew_fact = infer_new_fact(selected) # 'El segundo día, contó 100\\xa0+\\xa050\\xa0=\\xa0150\\xa0clientes.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Sloane cuenta que 100\\xa0clientes entran a la tienda.', 'El segundo día, contó 100\\xa0+\\xa050\\xa0=\\xa0150\\xa0clientes.']\nnew_fact = infer_new_fact(selected) # 'El total de los dos primeros días es de 150\\xa0+\\xa0100\\xa0=\\xa0250\\xa0clientes.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si el número total de clientes al final del tercer día fue de 500,', 'El total de los dos primeros días es de 150\\xa0+\\xa0100\\xa0=\\xa0250\\xa0clientes.']\nnew_fact = infer_new_fact(selected) # 'Si el recuento total de tres días fue de 500, contó 500\\xa0-\\xa0250\\xa0=\\xa0250\\xa0clientes el tercer día.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos clientes contó el tercer día?', 'Si el recuento total de tres días fue de 500, contó 500\\xa0-\\xa0250\\xa0=\\xa0250\\xa0clientes el tercer día.']\nnew_fact = infer_new_fact(selected) # 'The answer is 250'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '250'"}
{"id": "GSM8K_214_b58697d1c3", "context": "", "options": [], "answer": "8", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 5}, {"antecedents": [3, 4, 5], "consequent": 6}, {"antecedents": [6], "consequent": 7}, {"antecedents": [7], "consequent": 8}, {"antecedents": [8], "consequent": 9}, {"antecedents": [9], "consequent": 10}, {"antecedents": [10], "consequent": 11}, {"antecedents": [4, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent1 -> int1: First find how many gallons of water flow out of the pools in 4 minutes: 4 gallons/minute * 4 minutes = 16 gallons; int1 & sent3 & sent4 -> int2: Let b be the amount of water the big pool has now and s be the amount of water the small pool has. We know that b = 4s, and b + 16 = 2(s + 16); int2 -> int3: Substituting the first equation into the second equation, we get 4s + 16 = 2(s + 16); int3 -> int4: Multiplying through the parentheses, we get 4s + 16 = 2s + 32; int4 -> int5: Subtracting 2s from both sides, we get 2s + 16 = 32; int5 -> int6: Subtracting 16 from both sides, we get 2s = 16; int6 -> int7: Dividing both sides by 2, we get s = 8; int7 & sent4 -> int8: The answer is 8;", "textual_logical_units": {"1": "Jerry tiene dos piscinas, ambas con fugas que las vacían a un ritmo de 4 litros/minuto.", "2": "Hace 4 minutos, la piscina grande tenía el doble de agua que la piscina pequeña.", "3": "Ahora, la piscina grande tiene cuatro veces más agua que la piscina pequeña.", "4": "¿Cuánta agua tiene ahora la piscina pequeña?", "5": "Primero, averigua cuántos litros de agua salen de las piscinas en 4 minutos: 4 litros/minuto * 4 minutos = 16 litros", "6": "Si b es la cantidad de agua que tiene la piscina grande ahora y s es la cantidad de agua que tiene la piscina pequeña, sabemos que b = 4s, y b + 16 = 2 * (s + 16)", "7": "Al sustituir la primera ecuación en la segunda, obtenemos 4s + 16 = 2 * (s + 16)", "8": "Al multiplicar los paréntesis, obtenemos 4s + 16 = 2s + 32", "9": "Al restar 2s de ambos lados, obtenemos 2s + 16 = 32", "10": "Al restar 16 de ambos lados, obtenemos 2s = 16", "11": "Al dividir ambos lados entre 2, obtenemos s = 8", "12": "The answer is 8"}, "human_translated": true, "code_input": "####\nfacts = [ 'Jerry tiene dos piscinas, ambas con fugas que las vacían a un ritmo de 4\\xa0litros/minuto.',\n  'Hace 4\\xa0minutos, la piscina grande tenía el doble de agua que la piscina pequeña.',\n  'Ahora, la piscina grande tiene cuatro veces más agua que la piscina pequeña.']\nquestion = '¿Cuánta agua tiene ahora la piscina pequeña?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Jerry tiene dos piscinas, ambas con fugas que las vacían a un ritmo de 4\\xa0litros/minuto.']\nnew_fact = infer_new_fact(selected) # 'Primero, averigua cuántos litros de agua salen de las piscinas en 4\\xa0minutos: 4\\xa0litros/minuto\\xa0*\\xa04\\xa0minutos\\xa0=\\xa016\\xa0litros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Ahora, la piscina grande tiene cuatro veces más agua que la piscina pequeña.', '¿Cuánta agua tiene ahora la piscina pequeña?', 'Primero, averigua cuántos litros de agua salen de las piscinas en 4\\xa0minutos: 4\\xa0litros/minuto\\xa0*\\xa04\\xa0minutos\\xa0=\\xa016\\xa0litros']\nnew_fact = infer_new_fact(selected) # 'Si b es la cantidad de agua que tiene la piscina grande ahora y s es la cantidad de agua que tiene la piscina pequeña, sabemos que b\\xa0=\\xa04s, y b\\xa0+\\xa016\\xa0=\\xa02\\xa0*\\xa0(s\\xa0+\\xa016)'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si b es la cantidad de agua que tiene la piscina grande ahora y s es la cantidad de agua que tiene la piscina pequeña, sabemos que b\\xa0=\\xa04s, y b\\xa0+\\xa016\\xa0=\\xa02\\xa0*\\xa0(s\\xa0+\\xa016)']\nnew_fact = infer_new_fact(selected) # 'Al sustituir la primera ecuación en la segunda, obtenemos 4s\\xa0+\\xa016\\xa0=\\xa02\\xa0*\\xa0(s\\xa0+\\xa016)'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Al sustituir la primera ecuación en la segunda, obtenemos 4s\\xa0+\\xa016\\xa0=\\xa02\\xa0*\\xa0(s\\xa0+\\xa016)']\nnew_fact = infer_new_fact(selected) # 'Al multiplicar los paréntesis, obtenemos 4s\\xa0+\\xa016\\xa0=\\xa02s\\xa0+\\xa032'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Al multiplicar los paréntesis, obtenemos 4s\\xa0+\\xa016\\xa0=\\xa02s\\xa0+\\xa032']\nnew_fact = infer_new_fact(selected) # 'Al restar 2s de ambos lados, obtenemos 2s\\xa0+\\xa016\\xa0=\\xa032'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Al restar 2s de ambos lados, obtenemos 2s\\xa0+\\xa016\\xa0=\\xa032']\nnew_fact = infer_new_fact(selected) # 'Al restar 16 de ambos lados, obtenemos 2s\\xa0=\\xa016'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Al restar 16 de ambos lados, obtenemos 2s\\xa0=\\xa016']\nnew_fact = infer_new_fact(selected) # 'Al dividir ambos lados entre 2, obtenemos s\\xa0=\\xa08'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánta agua tiene ahora la piscina pequeña?', 'Al dividir ambos lados entre 2, obtenemos s\\xa0=\\xa08']\nnew_fact = infer_new_fact(selected) # 'The answer is 8'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '8'"}
{"id": "GSM8K_215_92bce8e84c", "context": "", "options": [], "answer": "44", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: She wants to buy a pair of shoes for $320.00 and a belt for $32.00 for a total of 320+32 = $352.00; int1 & sent3 -> int2: Her purchase will total $352.00 and she makes $8.00 at her part-time job so she'll have to work 352/8 = 44 hours; int2 & sent4 -> int3: The answer is 44;", "textual_logical_units": {"1": "Lori quiere comprar un par de zapatos de 320,00 € y", "2": "un cinturón a juego que cuesta 32,00 €.", "3": "Por su trabajo a tiempo parcial le pagan 8,00 € la hora.", "4": "¿Cuántas horas tendrá que trabajar antes de poder hacer la compra?", "5": "Quiere comprar un par de zapatos por 320,00 € y un cinturón por 32,00 €, lo que hace un total de 320 + 32 = 352,00 €", "6": "Su compra será de un total de 352,00 € y ella gana 8,00 € en su trabajo a tiempo parcial, por lo que tendrá que trabajar 352 / 8 = 44 horas", "7": "The answer is 44"}, "human_translated": true, "code_input": "####\nfacts = [ 'Lori quiere comprar un par de zapatos de 320,00\\xa0€ y',\n  'un cinturón a juego que cuesta 32,00\\xa0€.',\n  'Por su trabajo a tiempo parcial le pagan 8,00\\xa0€ la hora.']\nquestion = '¿Cuántas horas tendrá que trabajar antes de poder hacer la compra?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Lori quiere comprar un par de zapatos de 320,00\\xa0€ y', 'un cinturón a juego que cuesta 32,00\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Quiere comprar un par de zapatos por 320,00\\xa0€ y un cinturón por 32,00\\xa0€, lo que hace un total de 320\\xa0+\\xa032\\xa0=\\xa0352,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Por su trabajo a tiempo parcial le pagan 8,00\\xa0€ la hora.', 'Quiere comprar un par de zapatos por 320,00\\xa0€ y un cinturón por 32,00\\xa0€, lo que hace un total de 320\\xa0+\\xa032\\xa0=\\xa0352,00\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Su compra será de un total de 352,00\\xa0€ y ella gana 8,00\\xa0€ en su trabajo a tiempo parcial, por lo que tendrá que trabajar 352\\xa0/\\xa08\\xa0=\\xa044\\xa0horas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas horas tendrá que trabajar antes de poder hacer la compra?', 'Su compra será de un total de 352,00\\xa0€ y ella gana 8,00\\xa0€ en su trabajo a tiempo parcial, por lo que tendrá que trabajar 352\\xa0/\\xa08\\xa0=\\xa044\\xa0horas']\nnew_fact = infer_new_fact(selected) # 'The answer is 44'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '44'"}
{"id": "GSM8K_216_126c1ae606", "context": "", "options": [], "answer": "220", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 4}, {"antecedents": [4], "consequent": 5}, {"antecedents": [2], "consequent": 6}, {"antecedents": [3, 5, 6], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 -> int1: Janeth will pay an additional $2000x 10/100 =$200.; int1 -> int2: So she is going to pay off a total of $2000 + $200 = $2200.; sent2 -> int3: Janeth will be able to pay off $165 x 12 = $1980 in 12 months.; int2 & int3 & sent3 -> int4: Hence, her remaining balance by then will be $2200 - $1980 = $220.; int4 & sent3 -> int5: The answer is 220;", "textual_logical_units": {"1": "Janeth pidió un préstamo de 2000 € y prometió devolverlos con un 10 % adicional del importe.", "2": "Si va a pagar 165 € al mes durante 12 meses,", "3": "¿cuánto será el saldo restante de Janeth para entonces?", "4": "Janeth pagará 2000 € x 10 / 100 = 200 €.", "5": "Así que va a pagar un total de 2000 € + 200 € = 2200 €.", "6": "Janeth podrá pagar 165 € x 12 = 1980 € en 12 meses.", "7": "Por lo tanto, su saldo restante para entonces será de 2200 € - 1980 € = 220 €.", "8": "The answer is 220"}, "human_translated": true, "code_input": "####\nfacts = ['Janeth pidió un préstamo de 2000\\xa0€ y prometió devolverlos con un 10\\xa0% adicional del importe.', 'Si va a pagar 165\\xa0€ al mes durante 12\\xa0meses,']\nquestion = '¿cuánto será el saldo restante de Janeth para entonces?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Janeth pidió un préstamo de 2000\\xa0€ y prometió devolverlos con un 10\\xa0% adicional del importe.']\nnew_fact = infer_new_fact(selected) # 'Janeth pagará 2000\\xa0€\\xa0x\\xa010\\xa0/\\xa0100\\xa0=\\xa0200\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Janeth pagará 2000\\xa0€\\xa0x\\xa010\\xa0/\\xa0100\\xa0=\\xa0200\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Así que va a pagar un total de 2000\\xa0€\\xa0+\\xa0200\\xa0€\\xa0=\\xa02200\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si va a pagar 165\\xa0€ al mes durante 12\\xa0meses,']\nnew_fact = infer_new_fact(selected) # 'Janeth podrá pagar 165\\xa0€\\xa0x\\xa012\\xa0=\\xa01980\\xa0€ en 12\\xa0meses.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuánto será el saldo restante de Janeth para entonces?', 'Así que va a pagar un total de 2000\\xa0€\\xa0+\\xa0200\\xa0€\\xa0=\\xa02200\\xa0€.', 'Janeth podrá pagar 165\\xa0€\\xa0x\\xa012\\xa0=\\xa01980\\xa0€ en 12\\xa0meses.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, su saldo restante para entonces será de 2200\\xa0€\\xa0-\\xa01980\\xa0€\\xa0=\\xa0220\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuánto será el saldo restante de Janeth para entonces?', 'Por lo tanto, su saldo restante para entonces será de 2200\\xa0€\\xa0-\\xa01980\\xa0€\\xa0=\\xa0220\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'The answer is 220'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '220'"}
{"id": "GSM8K_217_a40ee07fbd", "context": "", "options": [], "answer": "15", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: There are 4 + 7 = 11 dahlias in the vase.; int1 -> int2: In total there are 4 + 11 = 15 flowers in the vase.; int2 & sent3 -> int3: The answer is 15;", "textual_logical_units": {"1": "Hay 4 rosas en el jarrón.", "2": "Hay 7 dalias más que rosas en el jarrón.", "3": "¿Cuántas flores hay en total en el jarrón?", "4": "Hay 4 + 7 = 11 dalias en el jarrón.", "5": "En total hay 4 + 11 = 15 flores en el jarrón.", "6": "The answer is 15"}, "human_translated": true, "code_input": "####\nfacts = ['Hay 4\\xa0rosas en el jarrón.', 'Hay 7\\xa0dalias más que rosas en el jarrón.']\nquestion = '¿Cuántas flores hay en total en el jarrón?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Hay 4\\xa0rosas en el jarrón.', 'Hay 7\\xa0dalias más que rosas en el jarrón.']\nnew_fact = infer_new_fact(selected) # 'Hay 4\\xa0+\\xa07\\xa0=\\xa011\\xa0dalias en el jarrón.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Hay 4\\xa0+\\xa07\\xa0=\\xa011\\xa0dalias en el jarrón.']\nnew_fact = infer_new_fact(selected) # 'En total hay 4\\xa0+\\xa011\\xa0=\\xa015\\xa0flores en el jarrón.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas flores hay en total en el jarrón?', 'En total hay 4\\xa0+\\xa011\\xa0=\\xa015\\xa0flores en el jarrón.']\nnew_fact = infer_new_fact(selected) # 'The answer is 15'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '15'"}
{"id": "GSM8K_218_6ed8827b09", "context": "", "options": [], "answer": "45", "reasoning_graph_edges": [{"antecedents": [3], "consequent": 4}, {"antecedents": [1, 3], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [2, 3], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}, {"antecedents": [3, 4, 6, 8], "consequent": 9}, {"antecedents": [3, 9], "consequent": 10}, {"antecedents": [1, 3], "consequent": 11}], "metadata": [], "linearized_output_en": "sent3 -> int1: In three years, Harriet will be 21+3 = 24 years old.; sent1 & sent3 -> int2: Since Adrian's age is three times that of Harriet, Adrian is 3*21 = 63 years old.; int2 & sent3 -> int3: In three years, he will be 63+3 =66 years old.; sent2 & sent3 -> int4: If Harriet is half times the age of Zack, Zack is 21*2 = 42 years old.; int4 & sent3 -> int5: In three years, he will be 42+3 = 45 years old.; int1 & int3 & int5 & sent3 -> int6: The combined age of the three in 3 years will be 45+66+24 = 135 years.; int6 & sent3 -> int7: The average age for the in three years will be 135/3 =45 years; sent1 & sent3 -> int8: The answer is 45;", "textual_logical_units": {"1": "La edad de Adrian es tres veces más que la de Harriet", "2": "y la edad de Harriet es la mitad de la edad de Zack.", "3": "Calcula la edad media de los tres en tres años si Harriet tiene 21 años ahora.", "4": "En tres años, Harriet tendrá 21 + 3 = 24 años.", "5": "Como la edad de Adrian es tres veces mayor que la de Harriet, Adrian tiene 3 * 21 = 63 años.", "6": "En tres años, tendrá 63 + 3 = 66 años.", "7": "Si la edad de Harriet es la mitad de la edad de Zack, Zack tiene 21 * 2 = 42 años.", "8": "En tres años, tendrá 42 + 3 = 45 años.", "9": "La edad combinada de los tres en 3 años será 45 + 66 + 24 = 135 años.", "10": "La edad media dentro de tres años será de 135 / 3 = 45 años", "11": "The answer is 45"}, "human_translated": true, "code_input": "####\nfacts = ['La edad de Adrian es tres veces más que la de Harriet', 'y la edad de Harriet es la mitad de la edad de Zack.']\nquestion = 'Calcula la edad media de los tres en tres años si Harriet tiene 21\\xa0años ahora.'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Calcula la edad media de los tres en tres años si Harriet tiene 21\\xa0años ahora.']\nnew_fact = infer_new_fact(selected) # 'En tres años, Harriet tendrá 21\\xa0+\\xa03\\xa0=\\xa024\\xa0años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La edad de Adrian es tres veces más que la de Harriet', 'Calcula la edad media de los tres en tres años si Harriet tiene 21\\xa0años ahora.']\nnew_fact = infer_new_fact(selected) # 'Como la edad de Adrian es tres veces mayor que la de Harriet, Adrian tiene 3\\xa0*\\xa021\\xa0=\\xa063\\xa0años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Calcula la edad media de los tres en tres años si Harriet tiene 21\\xa0años ahora.', 'Como la edad de Adrian es tres veces mayor que la de Harriet, Adrian tiene 3\\xa0*\\xa021\\xa0=\\xa063\\xa0años.']\nnew_fact = infer_new_fact(selected) # 'En tres años, tendrá 63\\xa0+\\xa03\\xa0=\\xa066\\xa0años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y la edad de Harriet es la mitad de la edad de Zack.', 'Calcula la edad media de los tres en tres años si Harriet tiene 21\\xa0años ahora.']\nnew_fact = infer_new_fact(selected) # 'Si la edad de Harriet es la mitad de la edad de Zack, Zack tiene 21\\xa0*\\xa02\\xa0=\\xa042\\xa0años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Calcula la edad media de los tres en tres años si Harriet tiene 21\\xa0años ahora.', 'Si la edad de Harriet es la mitad de la edad de Zack, Zack tiene 21\\xa0*\\xa02\\xa0=\\xa042\\xa0años.']\nnew_fact = infer_new_fact(selected) # 'En tres años, tendrá 42\\xa0+\\xa03\\xa0=\\xa045\\xa0años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Calcula la edad media de los tres en tres años si Harriet tiene 21\\xa0años ahora.', 'En tres años, Harriet tendrá 21\\xa0+\\xa03\\xa0=\\xa024\\xa0años.', 'En tres años, tendrá 63\\xa0+\\xa03\\xa0=\\xa066\\xa0años.', 'En tres años, tendrá 42\\xa0+\\xa03\\xa0=\\xa045\\xa0años.']\nnew_fact = infer_new_fact(selected) # 'La edad combinada de los tres en 3 años será 45\\xa0+\\xa066\\xa0+\\xa024\\xa0=\\xa0135\\xa0años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Calcula la edad media de los tres en tres años si Harriet tiene 21\\xa0años ahora.', 'La edad combinada de los tres en 3 años será 45\\xa0+\\xa066\\xa0+\\xa024\\xa0=\\xa0135\\xa0años.']\nnew_fact = infer_new_fact(selected) # 'La edad media dentro de tres años será de 135\\xa0/\\xa03\\xa0=\\xa045\\xa0años'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La edad de Adrian es tres veces más que la de Harriet', 'Calcula la edad media de los tres en tres años si Harriet tiene 21\\xa0años ahora.']\nnew_fact = infer_new_fact(selected) # 'The answer is 45'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '45'"}
{"id": "GSM8K_219_4e84897434", "context": "", "options": [], "answer": "54", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}, {"antecedents": [4, 6], "consequent": 8}, {"antecedents": [6, 7, 8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}, {"antecedents": [10], "consequent": 11}, {"antecedents": [5, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent2 -> int1: Naomi scored 68 points.; int1 & sent3 -> int2: Yuri scored 1/2 (68) + 10 = 44 points; int1 & sent4 -> int3: Brianna scored 68 + 17 = 85 points; int1 & int2 & int3 -> int4: Naomi, Yuri + Brianna scored = 68 + 44 + 85 = 197 points; int4 & sent5 -> int5: Jojo scored the rest 251 - 197 = 54 points; int5 -> int6: Jojo scored 54 points.; int6 & sent5 -> int7: The answer is 54;", "textual_logical_units": {"1": "Cuatro estudiantes obtuvieron un total de 251 puntos en un juego de mesa.", "2": "Naomi anotó 68 de los puntos.", "3": "Yuri anotó 10 puntos más de la mitad de los puntos de Naomi y", "4": "Brianna anotó 17 puntos más que Naomi.", "5": "¿Cuántos puntos anotó Jojo?", "6": "Naomi anotó 68 puntos.", "7": "Yuri anotó 1 / 2 * (68) + 10 = 44 puntos", "8": "Brianna anotó 68 + 17 = 85 puntos", "9": "Naomi, Yuri y Brianna anotaron 68 + 44 + 85 = 197 puntos", "10": "Jojo anotó el resto, 251 - 197 = 54 puntos", "11": "Jojo anotó 54 puntos.", "12": "The answer is 54"}, "human_translated": true, "code_input": "####\nfacts = [ 'Cuatro estudiantes obtuvieron un total de 251 puntos en un juego de mesa.',\n  'Naomi anotó 68 de los puntos.',\n  'Yuri anotó 10\\xa0puntos más de la mitad de los puntos de Naomi y',\n  'Brianna anotó 17\\xa0puntos más que Naomi.']\nquestion = '¿Cuántos puntos anotó Jojo?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Naomi anotó 68 de los puntos.']\nnew_fact = infer_new_fact(selected) # 'Naomi anotó 68\\xa0puntos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Yuri anotó 10\\xa0puntos más de la mitad de los puntos de Naomi y', 'Naomi anotó 68\\xa0puntos.']\nnew_fact = infer_new_fact(selected) # 'Yuri anotó 1\\xa0/\\xa02\\xa0*\\xa0(68)\\xa0+\\xa010\\xa0=\\xa044\\xa0puntos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Brianna anotó 17\\xa0puntos más que Naomi.', 'Naomi anotó 68\\xa0puntos.']\nnew_fact = infer_new_fact(selected) # 'Brianna anotó 68\\xa0+\\xa017\\xa0=\\xa085\\xa0puntos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Naomi anotó 68\\xa0puntos.', 'Yuri anotó 1\\xa0/\\xa02\\xa0*\\xa0(68)\\xa0+\\xa010\\xa0=\\xa044\\xa0puntos', 'Brianna anotó 68\\xa0+\\xa017\\xa0=\\xa085\\xa0puntos']\nnew_fact = infer_new_fact(selected) # 'Naomi, Yuri y Brianna anotaron 68\\xa0+\\xa044\\xa0+\\xa085\\xa0=\\xa0197\\xa0puntos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos puntos anotó Jojo?', 'Naomi, Yuri y Brianna anotaron 68\\xa0+\\xa044\\xa0+\\xa085\\xa0=\\xa0197\\xa0puntos']\nnew_fact = infer_new_fact(selected) # 'Jojo anotó el resto, 251\\xa0-\\xa0197\\xa0=\\xa054\\xa0puntos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Jojo anotó el resto, 251\\xa0-\\xa0197\\xa0=\\xa054\\xa0puntos']\nnew_fact = infer_new_fact(selected) # 'Jojo anotó 54\\xa0puntos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos puntos anotó Jojo?', 'Jojo anotó 54\\xa0puntos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 54'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '54'"}
{"id": "GSM8K_220_d42c6be462", "context": "", "options": [], "answer": "70", "reasoning_graph_edges": [{"antecedents": [1, 3], "consequent": 5}, {"antecedents": [2, 3], "consequent": 6}, {"antecedents": [5, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent3 -> int1: It takes 10 minutes to complete a crossword puzzle and she completed 3 for a total of 10*3 = 30 minutes; sent2 & sent3 -> int2: It takes 5 minutes to complete a sudoku puzzle and she completed 8 for a total of 5*8 = 40 minutes; int1 & int2 -> int3: She spent 30 minutes on crosswords and 40 minutes on sudoku for a total of 30+40 = 70 minutes; int3 & sent4 -> int4: The answer is 70;", "textual_logical_units": {"1": "Carmen tarda 10 minutos en terminar un crucigrama y", "2": "5 minutos en terminar un sudoku.", "3": "Durante el fin de semana, resolvió 3 crucigramas y 8 sudokus.", "4": "¿Cuánto tiempo pasó jugando a estos juegos?", "5": "Tarda 10 minutos en completar un crucigrama y completó 3, lo que hace un total de 10 * 3 = 30 minutos", "6": "Tarda 5 minutos en completar un sudoku y completó 8, lo que hace un total de 5 * 8 = 40 minutos", "7": "Pasó 30 minutos haciendo crucigramas y 40 minutos haciendo sudokus, lo que hace un total de 30 + 40 = 70 minutos", "8": "The answer is 70"}, "human_translated": true, "code_input": "####\nfacts = [ 'Carmen tarda 10\\xa0minutos en terminar un crucigrama y',\n  '5\\xa0minutos en terminar un sudoku.',\n  'Durante el fin de semana, resolvió 3\\xa0crucigramas y 8\\xa0sudokus.']\nquestion = '¿Cuánto tiempo pasó jugando a estos juegos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Carmen tarda 10\\xa0minutos en terminar un crucigrama y', 'Durante el fin de semana, resolvió 3\\xa0crucigramas y 8\\xa0sudokus.']\nnew_fact = infer_new_fact(selected) # 'Tarda 10\\xa0minutos en completar un crucigrama y completó\\xa03, lo que hace un total de 10\\xa0*\\xa03\\xa0=\\xa030\\xa0minutos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['5\\xa0minutos en terminar un sudoku.', 'Durante el fin de semana, resolvió 3\\xa0crucigramas y 8\\xa0sudokus.']\nnew_fact = infer_new_fact(selected) # 'Tarda 5\\xa0minutos en completar un sudoku y completó\\xa08, lo que hace un total de 5\\xa0*\\xa08\\xa0=\\xa040\\xa0minutos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tarda 10\\xa0minutos en completar un crucigrama y completó\\xa03, lo que hace un total de 10\\xa0*\\xa03\\xa0=\\xa030\\xa0minutos', 'Tarda 5\\xa0minutos en completar un sudoku y completó\\xa08, lo que hace un total de 5\\xa0*\\xa08\\xa0=\\xa040\\xa0minutos']\nnew_fact = infer_new_fact(selected) # 'Pasó 30\\xa0minutos haciendo crucigramas y 40\\xa0minutos haciendo sudokus, lo que hace un total de 30\\xa0+\\xa040\\xa0=\\xa070\\xa0minutos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto tiempo pasó jugando a estos juegos?', 'Pasó 30\\xa0minutos haciendo crucigramas y 40\\xa0minutos haciendo sudokus, lo que hace un total de 30\\xa0+\\xa040\\xa0=\\xa070\\xa0minutos']\nnew_fact = infer_new_fact(selected) # 'The answer is 70'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '70'"}
{"id": "GSM8K_221_be07c6fc3b", "context": "", "options": [], "answer": "90", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [5, 6], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: After watering Celine's garden, 120 - 90 = 30 liters of water were left in the tank.; int1 & sent3 -> int2: Celine was able to collect 30 x 2 = 60 liters of rainwater.; int1 & int2 -> int3: Thus, there are 30 + 60 = 90 liters of water in the tank.; int3 & sent3 -> int4: The answer is 90;", "textual_logical_units": {"1": "Un depósito de agua se llena con 120 litros de agua.", "2": "Celine usó 90 litros de agua del depósito para regar su pequeño jardín.", "3": "Luego pudo recoger agua de lluvia que es el doble de lo que quedaba.", "4": "¿Cuántos litros de agua hay en el depósito ahora?", "5": "Después de regar el jardín de Celine, quedaron 120 - 90 = 30 litros de agua en el tanque.", "6": "Celine pudo recoger 30 x 2 = 60 litros de agua de lluvia.", "7": "Por lo tanto, hay 30 + 60 = 90 litros de agua en el depósito.", "8": "The answer is 90"}, "human_translated": true, "code_input": "####\nfacts = [ 'Un depósito de agua se llena con 120\\xa0litros de agua.',\n  'Celine usó 90\\xa0litros de agua del depósito para regar su pequeño jardín.',\n  'Luego pudo recoger agua de lluvia que es el doble de lo que quedaba.']\nquestion = '¿Cuántos litros de agua hay en el depósito ahora?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Un depósito de agua se llena con 120\\xa0litros de agua.', 'Celine usó 90\\xa0litros de agua del depósito para regar su pequeño jardín.']\nnew_fact = infer_new_fact(selected) # 'Después de regar el jardín de Celine, quedaron 120\\xa0-\\xa090\\xa0=\\xa030\\xa0litros de agua en el tanque.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Luego pudo recoger agua de lluvia que es el doble de lo que quedaba.', 'Después de regar el jardín de Celine, quedaron 120\\xa0-\\xa090\\xa0=\\xa030\\xa0litros de agua en el tanque.']\nnew_fact = infer_new_fact(selected) # 'Celine pudo recoger 30\\xa0x\\xa02\\xa0=\\xa060\\xa0litros de agua de lluvia.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Después de regar el jardín de Celine, quedaron 120\\xa0-\\xa090\\xa0=\\xa030\\xa0litros de agua en el tanque.', 'Celine pudo recoger 30\\xa0x\\xa02\\xa0=\\xa060\\xa0litros de agua de lluvia.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, hay 30\\xa0+\\xa060\\xa0=\\xa090\\xa0litros de agua en el depósito.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Luego pudo recoger agua de lluvia que es el doble de lo que quedaba.', 'Por lo tanto, hay 30\\xa0+\\xa060\\xa0=\\xa090\\xa0litros de agua en el depósito.']\nnew_fact = infer_new_fact(selected) # 'The answer is 90'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '90'"}
{"id": "GSM8K_222_d91f050b29", "context": "", "options": [], "answer": "140", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [1, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: First find the number of petunias Andy plants: 90 flowers - 40 = 50 flowers; int1 & sent1 -> int2: Then add the number of each kind of flower he plants to find the total number: 50 flowers + 90 flowers = 140 flowers; int2 & sent3 -> int3: The answer is 140;", "textual_logical_units": {"1": "Andy planta 90 geranios y", "2": "40 petunias menos que geranios.", "3": "¿Cuántas flores planta en total?", "4": "Primero, encuentra la cantidad de petunias que planta Andy: 90 flores - 40 = 50 flores", "5": "Luego, suma el número de cada tipo de flor que planta para encontrar el número total: 50 flores + 90 flores = 140 flores", "6": "The answer is 140"}, "human_translated": true, "code_input": "####\nfacts = ['Andy planta 90\\xa0geranios y', '40\\xa0petunias menos que geranios.']\nquestion = '¿Cuántas flores planta en total?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Andy planta 90\\xa0geranios y', '40\\xa0petunias menos que geranios.']\nnew_fact = infer_new_fact(selected) # 'Primero, encuentra la cantidad de petunias que planta Andy: 90\\xa0flores\\xa0-\\xa040\\xa0=\\xa050\\xa0flores'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Andy planta 90\\xa0geranios y', 'Primero, encuentra la cantidad de petunias que planta Andy: 90\\xa0flores\\xa0-\\xa040\\xa0=\\xa050\\xa0flores']\nnew_fact = infer_new_fact(selected) # 'Luego, suma el número de cada tipo de flor que planta para encontrar el número total: 50\\xa0flores\\xa0+\\xa090\\xa0flores\\xa0=\\xa0140\\xa0flores'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas flores planta en total?', 'Luego, suma el número de cada tipo de flor que planta para encontrar el número total: 50\\xa0flores\\xa0+\\xa090\\xa0flores\\xa0=\\xa0140\\xa0flores']\nnew_fact = infer_new_fact(selected) # 'The answer is 140'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '140'"}
{"id": "GSM8K_223_3290e1a204", "context": "", "options": [], "answer": "20000", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 3}, {"antecedents": [1, 2, 3], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: 15000/3 = 5,000 is spent on advertisement in the second year.; int1 & sent1 & sent2 -> int2: The total on advertisement for the two years is 15000+5000 = 20000 dollars.; int2 & sent2 -> int3: The answer is 20000;", "textual_logical_units": {"1": "Una empresa gasta 15 000 € en publicidad durante un año y luego", "2": "gasta un tercio de esa cantidad en publicidad durante otro año.  ¿Cuál es el importe total que la empresa gastó en publicidad durante los dos años?", "3": "15 000 / 3 = 5000 gastados en publicidad en el segundo año.", "4": "El total de la publicidad de los dos años es de 15 000 + 5000 = 20 000 euros.", "5": "The answer is 20000"}, "human_translated": true, "code_input": "####\nfacts = ['Una empresa gasta 15\\xa0000\\xa0€ en publicidad durante un año y luego']\nquestion = 'gasta un tercio de esa cantidad en publicidad durante otro año.\\xa0 ¿Cuál es el importe total que la empresa gastó en publicidad durante los dos años?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Una empresa gasta 15\\xa0000\\xa0€ en publicidad durante un año y luego', 'gasta un tercio de esa cantidad en publicidad durante otro año.\\xa0 ¿Cuál es el importe total que la empresa gastó en publicidad durante los dos años?']\nnew_fact = infer_new_fact(selected) # '15\\xa0000\\xa0/\\xa03\\xa0=\\xa05000\\xa0gastados en publicidad en el segundo año.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Una empresa gasta 15\\xa0000\\xa0€ en publicidad durante un año y luego', 'gasta un tercio de esa cantidad en publicidad durante otro año.\\xa0 ¿Cuál es el importe total que la empresa gastó en publicidad durante los dos años?', '15\\xa0000\\xa0/\\xa03\\xa0=\\xa05000\\xa0gastados en publicidad en el segundo año.']\nnew_fact = infer_new_fact(selected) # 'El total de la publicidad de los dos años es de 15\\xa0000\\xa0+\\xa05000\\xa0=\\xa020\\xa0000\\xa0euros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['gasta un tercio de esa cantidad en publicidad durante otro año.\\xa0 ¿Cuál es el importe total que la empresa gastó en publicidad durante los dos años?', 'El total de la publicidad de los dos años es de 15\\xa0000\\xa0+\\xa05000\\xa0=\\xa020\\xa0000\\xa0euros.']\nnew_fact = infer_new_fact(selected) # 'The answer is 20000'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '20000'"}
{"id": "GSM8K_224_34806f09cd", "context": "", "options": [], "answer": "180", "reasoning_graph_edges": [{"antecedents": [2, 4], "consequent": 7}, {"antecedents": [3, 5], "consequent": 8}, {"antecedents": [7, 8], "consequent": 9}, {"antecedents": [6, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent2 & sent4 -> int1: Carlos would have to pay $30 x 3 = $90; sent3 & sent5 -> int2: Benji would have to pay $18 x 5 = $90; int1 & int2 -> int3: All together, Carlos and Benji will have to pay $90 + $90 = $180; int3 & sent6 -> int4: The answer is 180;", "textual_logical_units": {"1": "Carlos y Benji están en la playa.", "2": "Carlos alquila una canoa por 30 € la hora y", "3": "Benji alquila una balsa por 18 € la hora.", "4": "Si Carlos usa la canoa durante 3 horas y", "5": "Benji usa la balsa durante 5 horas,", "6": "¿cuánto pagarán en total por sus alquileres?", "7": "Carlos tendría que pagar 30 € x 3 = 90 €", "8": "Benji tendría que pagar 18 € x 5 = 90 €", "9": "En total, Carlos y Benji deberán pagar 90 € + 90 € = 180 €", "10": "The answer is 180"}, "human_translated": true, "code_input": "####\nfacts = [ 'Carlos y Benji están en la playa.',\n  'Carlos alquila una canoa por 30\\xa0€ la hora y',\n  'Benji alquila una balsa por 18\\xa0€ la hora.',\n  'Si Carlos usa la canoa durante 3\\xa0horas y',\n  'Benji usa la balsa durante 5\\xa0horas,']\nquestion = '¿cuánto pagarán en total por sus alquileres?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Carlos alquila una canoa por 30\\xa0€ la hora y', 'Si Carlos usa la canoa durante 3\\xa0horas y']\nnew_fact = infer_new_fact(selected) # 'Carlos tendría que pagar 30\\xa0€\\xa0x\\xa03\\xa0=\\xa090\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Benji alquila una balsa por 18\\xa0€ la hora.', 'Benji usa la balsa durante 5\\xa0horas,']\nnew_fact = infer_new_fact(selected) # 'Benji tendría que pagar 18\\xa0€\\xa0x\\xa05\\xa0=\\xa090\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Carlos tendría que pagar 30\\xa0€\\xa0x\\xa03\\xa0=\\xa090\\xa0€', 'Benji tendría que pagar 18\\xa0€\\xa0x\\xa05\\xa0=\\xa090\\xa0€']\nnew_fact = infer_new_fact(selected) # 'En total, Carlos y Benji deberán pagar 90\\xa0€\\xa0+\\xa090\\xa0€\\xa0=\\xa0180\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuánto pagarán en total por sus alquileres?', 'En total, Carlos y Benji deberán pagar 90\\xa0€\\xa0+\\xa090\\xa0€\\xa0=\\xa0180\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 180'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '180'"}
{"id": "GSM8K_225_4b7a00fa22", "context": "", "options": [], "answer": "9", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 6}, {"antecedents": [2, 6], "consequent": 7}, {"antecedents": [4, 5, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: The number of days to travel by car are 6/2 = 3 days.; int1 & sent2 -> int2: The total number of days for the whole trip is 6 + 3 = 9 days.; int2 & sent4 & sent5 -> int3: The answer is 9;", "textual_logical_units": {"1": "Andrew planea un viaje por carretera de Nueva Jersey a Rochester.", "2": "Se tardan 6 días en viajar en autobús y", "3": "la mitad de días en viajar en coche de Nueva Jersey a Rochester.", "4": "¿Cuántos días viajará si planea ir a Rochester en autobús y", "5": "volver de Rochester en coche?", "6": "El número de días para viajar en coche es de 6 / 2 = 3 días.", "7": "El número total de días para todo el viaje es 6 + 3 = 9 días.", "8": "The answer is 9"}, "human_translated": true, "code_input": "####\nfacts = [ 'Andrew planea un viaje por carretera de Nueva Jersey a Rochester.',\n  'Se tardan 6\\xa0días en viajar en autobús y',\n  'la mitad de días en viajar en coche de Nueva Jersey a Rochester.',\n  '¿Cuántos días viajará si planea ir a Rochester en autobús y']\nquestion = 'volver de Rochester en coche?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Se tardan 6\\xa0días en viajar en autobús y', 'la mitad de días en viajar en coche de Nueva Jersey a Rochester.']\nnew_fact = infer_new_fact(selected) # 'El número de días para viajar en coche es de 6\\xa0/\\xa02\\xa0=\\xa03\\xa0días.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Se tardan 6\\xa0días en viajar en autobús y', 'El número de días para viajar en coche es de 6\\xa0/\\xa02\\xa0=\\xa03\\xa0días.']\nnew_fact = infer_new_fact(selected) # 'El número total de días para todo el viaje es 6\\xa0+\\xa03\\xa0=\\xa09\\xa0días.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos días viajará si planea ir a Rochester en autobús y', 'volver de Rochester en coche?', 'El número total de días para todo el viaje es 6\\xa0+\\xa03\\xa0=\\xa09\\xa0días.']\nnew_fact = infer_new_fact(selected) # 'The answer is 9'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '9'"}
{"id": "GSM8K_226_197541af27", "context": "", "options": [], "answer": "33", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [2, 3], "consequent": 6}, {"antecedents": [2, 5, 6], "consequent": 7}, {"antecedents": [4, 6, 7], "consequent": 8}, {"antecedents": [4, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: First find the final number of grass type Pokemon: 20 grass type + 14 grass type = 34 grass type; sent2 & sent3 -> int2: Then find the final number of water type Pokemon: 40 water type - 8 water type = 32 water type; int1 & int2 & sent2 -> int3: Then add the number of each type of Pokemon to find the total number: 34 Pokemon + 32 Pokemon + 30 Pokemon = 96 Pokemon; int2 & int3 & sent4 -> int4: Then divide the number of water type Pokemon by the total number of Pokemon and multiply by 100% to express the answer as a percentage: 32 water type / 96 Pokemon * 100% = 33.333...%, which rounds down to 33%; int4 & sent4 -> int5: The answer is 33;", "textual_logical_units": {"1": "James está contando sus cartas de Pokémon.", "2": "Tiene 30 de tipo fuego, 20 de tipo planta y 40 de tipo agua.", "3": "Si pierde 8 del tipo agua y compra 14 del tipo planta,", "4": "¿cuál es el porcentaje de probabilidad (redondeado al número entero más cercano) de que una carta elegida al azar sea de tipo agua?", "5": "Primero, encuentra el número final de Pokémon de tipo planta: 20 de tipo planta + 14 de tipo planta = 34 de tipo planta", "6": "Luego, encuentra el número final de Pokémon de tipo agua: 40 de tipo agua - 8 de tipo agua = 32 de tipo agua", "7": "Luego, suma el número de cada tipo de Pokémon para encontrar el número total: 34 Pokémon + 32 Pokémon + 30 Pokémon = 96 Pokémon", "8": "Luego, divide el número de Pokémon de tipo agua entre el número total de Pokémon y multiplícalo por 100 % para expresar la respuesta como un porcentaje: 32 de tipo agua / 96 Pokémon * 100 % = 33,333... %, lo que se redondea al 33 %", "9": "The answer is 33"}, "human_translated": true, "code_input": "####\nfacts = [ 'James está contando sus cartas de Pokémon.',\n  'Tiene 30\\xa0de tipo fuego, 20\\xa0de tipo planta y 40\\xa0de tipo agua.',\n  'Si pierde 8\\xa0del tipo agua y compra 14\\xa0del tipo planta,']\nquestion = '¿cuál es el porcentaje de probabilidad (redondeado al número entero más cercano) de que una carta elegida al azar sea de tipo agua?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Tiene 30\\xa0de tipo fuego, 20\\xa0de tipo planta y 40\\xa0de tipo agua.', 'Si pierde 8\\xa0del tipo agua y compra 14\\xa0del tipo planta,']\nnew_fact = infer_new_fact(selected) # 'Primero, encuentra el número final de Pokémon de tipo planta: 20\\xa0de tipo planta\\xa0+\\xa014\\xa0de tipo planta\\xa0=\\xa034\\xa0de tipo planta'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tiene 30\\xa0de tipo fuego, 20\\xa0de tipo planta y 40\\xa0de tipo agua.', 'Si pierde 8\\xa0del tipo agua y compra 14\\xa0del tipo planta,']\nnew_fact = infer_new_fact(selected) # 'Luego, encuentra el número final de Pokémon de tipo agua: 40\\xa0de tipo agua\\xa0-\\xa08\\xa0de tipo agua\\xa0=\\xa032\\xa0de tipo agua'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tiene 30\\xa0de tipo fuego, 20\\xa0de tipo planta y 40\\xa0de tipo agua.', 'Primero, encuentra el número final de Pokémon de tipo planta: 20\\xa0de tipo planta\\xa0+\\xa014\\xa0de tipo planta\\xa0=\\xa034\\xa0de tipo planta', 'Luego, encuentra el número final de Pokémon de tipo agua: 40\\xa0de tipo agua\\xa0-\\xa08\\xa0de tipo agua\\xa0=\\xa032\\xa0de tipo agua']\nnew_fact = infer_new_fact(selected) # 'Luego, suma el número de cada tipo de Pokémon para encontrar el número total: 34\\xa0Pokémon\\xa0+\\xa032\\xa0Pokémon\\xa0+\\xa030\\xa0Pokémon\\xa0=\\xa096\\xa0Pokémon'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuál es el porcentaje de probabilidad (redondeado al número entero más cercano) de que una carta elegida al azar sea de tipo agua?', 'Luego, encuentra el número final de Pokémon de tipo agua: 40\\xa0de tipo agua\\xa0-\\xa08\\xa0de tipo agua\\xa0=\\xa032\\xa0de tipo agua', 'Luego, suma el número de cada tipo de Pokémon para encontrar el número total: 34\\xa0Pokémon\\xa0+\\xa032\\xa0Pokémon\\xa0+\\xa030\\xa0Pokémon\\xa0=\\xa096\\xa0Pokémon']\nnew_fact = infer_new_fact(selected) # 'Luego, divide el número de Pokémon de tipo agua entre el número total de Pokémon y multiplícalo por 100\\xa0% para expresar la respuesta como un porcentaje: 32\\xa0de tipo agua\\xa0/\\xa096\\xa0Pokémon\\xa0*\\xa0100\\xa0%\\xa0=\\xa033,333...\\xa0%, lo que se redondea al 33\\xa0%'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuál es el porcentaje de probabilidad (redondeado al número entero más cercano) de que una carta elegida al azar sea de tipo agua?', 'Luego, divide el número de Pokémon de tipo agua entre el número total de Pokémon y multiplícalo por 100\\xa0% para expresar la respuesta como un porcentaje: 32\\xa0de tipo agua\\xa0/\\xa096\\xa0Pokémon\\xa0*\\xa0100\\xa0%\\xa0=\\xa033,333...\\xa0%, lo que se redondea al 33\\xa0%']\nnew_fact = infer_new_fact(selected) # 'The answer is 33'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '33'"}
{"id": "GSM8K_227_b64de3691a", "context": "", "options": [], "answer": "9", "reasoning_graph_edges": [{"antecedents": [4], "consequent": 8}, {"antecedents": [3, 8], "consequent": 9}, {"antecedents": [2, 5, 9], "consequent": 10}, {"antecedents": [1, 6], "consequent": 11}, {"antecedents": [7, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent4 -> int1: He orders 2 sauces at $0.25 each so 2*.25 = $0.50 for sauce; int1 & sent3 -> int2: He orders extra meat for $2.00, extra cheese for $1.00, avocado for $1.00 and $0.50 for sauce for a total of 2+1+1+.50 = $4.50 in extras; int2 & sent2 & sent5 -> int3: His burrito cost $6.50 and he adds $4.50 in extras and upgrades his meal for $3.00 so now he owes, 6.50+4.50+3 = $14.00; sent1 & sent6 -> int4: He has a $5.00 gift card and his current bill is $14.00 so he will owe 14-5 = $9.00; int4 & sent7 -> int5: The answer is 9;", "textual_logical_units": {"1": "Chad pidió un burrito personalizado para almorzar.", "2": "El burrito base cuesta 6,50 €.", "3": "Añade carne extra por 2,00 €, queso extra por 1,00 €, aguacate por 1,00 € y", "4": "2 salsas por 0,25 € cada una.", "5": "Decide mejorar su comida por 3,00 € más, lo que añadirá patatas fritas y una bebida.", "6": "Tiene una tarjeta regalo de 5,00 € que usa al momento de pagar.", "7": "¿Cuánto debe todavía?", "8": "Pide 2 salsas por 0,25 € cada una, así que 2 * 0,25 = 0,50 € por las salsas", "9": "Pide carne extra por 2,00 €, queso extra por 1,00 €, aguacate por 1,00 € y 0,50 € por las salsas, lo que hace un total de 2 + 1 + 1 +0,50 = 4,50 € en extras", "10": "Su burrito costaba 6,50 € y añade 4,50 € en extras y mejora su comida por 3,00 €, por lo que ahora debe 6,50 + 4,50 + 3 = 14,00 €", "11": "Tiene una tarjeta regalo de 5,00 € y su factura actual es de 14,00 €, por lo que deberá 14 - 5 = 9,00 €", "12": "The answer is 9"}, "human_translated": true, "code_input": "####\nfacts = [ 'Chad pidió un burrito personalizado para almorzar.',\n  'El burrito base cuesta 6,50\\xa0€.',\n  'Añade carne extra por 2,00\\xa0€, queso extra por 1,00\\xa0€, aguacate por 1,00\\xa0€ y',\n  '2\\xa0salsas por 0,25\\xa0€ cada una.',\n  'Decide mejorar su comida por 3,00\\xa0€ más, lo que añadirá patatas fritas y una bebida.',\n  'Tiene una tarjeta regalo de 5,00\\xa0€ que usa al momento de pagar.']\nquestion = '¿Cuánto debe todavía?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['2\\xa0salsas por 0,25\\xa0€ cada una.']\nnew_fact = infer_new_fact(selected) # 'Pide 2\\xa0salsas por 0,25\\xa0€ cada una, así que 2\\xa0*\\xa00,25\\xa0=\\xa00,50\\xa0€ por las salsas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Añade carne extra por 2,00\\xa0€, queso extra por 1,00\\xa0€, aguacate por 1,00\\xa0€ y', 'Pide 2\\xa0salsas por 0,25\\xa0€ cada una, así que 2\\xa0*\\xa00,25\\xa0=\\xa00,50\\xa0€ por las salsas']\nnew_fact = infer_new_fact(selected) # 'Pide carne extra por 2,00\\xa0€, queso extra por 1,00\\xa0€, aguacate por 1,00\\xa0€ y 0,50\\xa0€ por las salsas, lo que hace un total de 2\\xa0+\\xa01\\xa0+\\xa01\\xa0+0,50\\xa0=\\xa04,50\\xa0€ en extras'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El burrito base cuesta 6,50\\xa0€.', 'Decide mejorar su comida por 3,00\\xa0€ más, lo que añadirá patatas fritas y una bebida.', 'Pide carne extra por 2,00\\xa0€, queso extra por 1,00\\xa0€, aguacate por 1,00\\xa0€ y 0,50\\xa0€ por las salsas, lo que hace un total de 2\\xa0+\\xa01\\xa0+\\xa01\\xa0+0,50\\xa0=\\xa04,50\\xa0€ en extras']\nnew_fact = infer_new_fact(selected) # 'Su burrito costaba 6,50\\xa0€ y añade 4,50\\xa0€ en extras y mejora su comida por 3,00\\xa0€, por lo que ahora debe 6,50\\xa0+\\xa04,50\\xa0+\\xa03\\xa0=\\xa014,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Chad pidió un burrito personalizado para almorzar.', 'Tiene una tarjeta regalo de 5,00\\xa0€ que usa al momento de pagar.']\nnew_fact = infer_new_fact(selected) # 'Tiene una tarjeta regalo de 5,00\\xa0€ y su factura actual es de 14,00\\xa0€, por lo que deberá 14\\xa0-\\xa05\\xa0=\\xa09,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto debe todavía?', 'Tiene una tarjeta regalo de 5,00\\xa0€ y su factura actual es de 14,00\\xa0€, por lo que deberá 14\\xa0-\\xa05\\xa0=\\xa09,00\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 9'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '9'"}
{"id": "GSM8K_228_0a1e116105", "context": "", "options": [], "answer": "1", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [2, 5], "consequent": 6}, {"antecedents": [1, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}, {"antecedents": [4, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Her mom places 2 pieces per minute because 4 / 2 = 2; int1 & sent2 -> int2: On average they get in 6 pieces per minute because 4 + 2 = 6; int2 & sent1 -> int3: It will take 60 minutes to complete the puzzle because 360 / 6 = 60; int3 & sent4 -> int4: It will take one hour because 60 / 60 = 1; int4 & sent4 -> int5: The answer is 1;", "textual_logical_units": {"1": "Kalinda trabaja en un rompecabezas de 360 piezas con su madre.", "2": "Kalinda puede añadir normalmente 4 piezas por minuto.", "3": "Su madre puede colocar normalmente la mitad de piezas por minuto que Kalinda.", "4": "¿Cuántas horas tardarán en completar este rompecabezas?", "5": "Su madre coloca 2 piezas por minuto porque 4 / 2 = 2", "6": "De media, salen 6 piezas por minuto porque 4 + 2 = 6", "7": "Tardarán 60 minutos en completar el rompecabezas porque 360 / 6 = 60", "8": "Tardarán una hora porque 60 / 60 = 1", "9": "The answer is 1"}, "human_translated": true, "code_input": "####\nfacts = [ 'Kalinda trabaja en un rompecabezas de 360\\xa0piezas con su madre.',\n  'Kalinda puede añadir normalmente 4\\xa0piezas por minuto.',\n  'Su madre puede colocar normalmente la mitad de piezas por minuto que Kalinda.']\nquestion = '¿Cuántas horas tardarán en completar este rompecabezas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Kalinda puede añadir normalmente 4\\xa0piezas por minuto.', 'Su madre puede colocar normalmente la mitad de piezas por minuto que Kalinda.']\nnew_fact = infer_new_fact(selected) # 'Su madre coloca 2\\xa0piezas por minuto porque 4\\xa0/\\xa02\\xa0=\\xa02'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Kalinda puede añadir normalmente 4\\xa0piezas por minuto.', 'Su madre coloca 2\\xa0piezas por minuto porque 4\\xa0/\\xa02\\xa0=\\xa02']\nnew_fact = infer_new_fact(selected) # 'De media, salen 6\\xa0piezas por minuto porque 4\\xa0+\\xa02\\xa0=\\xa06'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Kalinda trabaja en un rompecabezas de 360\\xa0piezas con su madre.', 'De media, salen 6\\xa0piezas por minuto porque 4\\xa0+\\xa02\\xa0=\\xa06']\nnew_fact = infer_new_fact(selected) # 'Tardarán 60\\xa0minutos en completar el rompecabezas porque 360\\xa0/\\xa06\\xa0=\\xa060'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas horas tardarán en completar este rompecabezas?', 'Tardarán 60\\xa0minutos en completar el rompecabezas porque 360\\xa0/\\xa06\\xa0=\\xa060']\nnew_fact = infer_new_fact(selected) # 'Tardarán una hora porque 60\\xa0/\\xa060\\xa0=\\xa01'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas horas tardarán en completar este rompecabezas?', 'Tardarán una hora porque 60\\xa0/\\xa060\\xa0=\\xa01']\nnew_fact = infer_new_fact(selected) # 'The answer is 1'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '1'"}
{"id": "GSM8K_229_b451177ace", "context": "", "options": [], "answer": "21", "reasoning_graph_edges": [{"antecedents": [1, 3], "consequent": 8}, {"antecedents": [1, 8], "consequent": 9}, {"antecedents": [5, 6, 9], "consequent": 10}, {"antecedents": [1, 9], "consequent": 11}, {"antecedents": [7, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent1 & sent3 -> int1: When Ashlyn found out that 30% of the melons were ready, she took home 30/100 *120 = 36 watermelons.; int1 & sent1 -> int2: The number of watermelons remaining on the farm is 120-36 =84; int2 & sent5 & sent6 -> int3: When she returned two weeks later, she found that 3/4*84 = 63 were ready for harvest,; int2 & sent1 -> int4: The number of watermelons that were not ready is 84-63 =21; int4 & sent7 -> int5: The answer is 21;", "textual_logical_units": {"1": "Una granja de sandías produjo 120 sandías pequeñas.", "2": "Ashlyn fue a la granja después de dos meses y", "3": "descubrió que el 30 % de las sandías estaban listas para la cosecha,", "4": "así que se las llevó a casa.", "5": "Cuando regresó dos semanas después,", "6": "3/4 de las sandías restantes estaban listas, así que las cosechó.", "7": "¿Cuántas sandías no estaban listos para la cosecha después de dos semanas?", "8": "Cuando Ashlyn descubrió que el 30 % de las sandías estaban listas, se llevó a casa 30 / 100 * 120 = 36 sandías.", "9": "El número de sandías que quedan en la granja es de 120 - 36 = 84", "10": "Cuando regresó dos semanas después, descubrió que 3 / 4 * 84 = 63 estaban listas para la cosecha.", "11": "El número de sandías que no estaban listas es 84 - 63 = 21", "12": "The answer is 21"}, "human_translated": true, "code_input": "####\nfacts = [ 'Una granja de sandías produjo 120\\xa0sandías pequeñas.',\n  'Ashlyn fue a la granja después de dos meses y',\n  'descubrió que el 30\\xa0% de las sandías estaban listas para la cosecha,',\n  'así que se las llevó a casa.',\n  'Cuando regresó dos semanas después,',\n  '3/4 de las sandías restantes estaban listas, así que las cosechó.']\nquestion = '¿Cuántas sandías no estaban listos para la cosecha después de dos semanas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Una granja de sandías produjo 120\\xa0sandías pequeñas.', 'descubrió que el 30\\xa0% de las sandías estaban listas para la cosecha,']\nnew_fact = infer_new_fact(selected) # 'Cuando Ashlyn descubrió que el 30\\xa0% de las sandías estaban listas, se llevó a casa 30\\xa0/\\xa0100\\xa0*\\xa0120\\xa0=\\xa036\\xa0sandías.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Una granja de sandías produjo 120\\xa0sandías pequeñas.', 'Cuando Ashlyn descubrió que el 30\\xa0% de las sandías estaban listas, se llevó a casa 30\\xa0/\\xa0100\\xa0*\\xa0120\\xa0=\\xa036\\xa0sandías.']\nnew_fact = infer_new_fact(selected) # 'El número de sandías que quedan en la granja es de 120\\xa0-\\xa036\\xa0=\\xa084'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cuando regresó dos semanas después,', '3/4 de las sandías restantes estaban listas, así que las cosechó.', 'El número de sandías que quedan en la granja es de 120\\xa0-\\xa036\\xa0=\\xa084']\nnew_fact = infer_new_fact(selected) # 'Cuando regresó dos semanas después, descubrió que 3\\xa0/\\xa04\\xa0*\\xa084\\xa0=\\xa063 estaban listas para la cosecha.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Una granja de sandías produjo 120\\xa0sandías pequeñas.', 'El número de sandías que quedan en la granja es de 120\\xa0-\\xa036\\xa0=\\xa084']\nnew_fact = infer_new_fact(selected) # 'El número de sandías que no estaban listas es 84\\xa0-\\xa063\\xa0=\\xa021'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas sandías no estaban listos para la cosecha después de dos semanas?', 'El número de sandías que no estaban listas es 84\\xa0-\\xa063\\xa0=\\xa021']\nnew_fact = infer_new_fact(selected) # 'The answer is 21'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '21'"}
{"id": "GSM8K_230_341cf3f089", "context": "", "options": [], "answer": "276000", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}, {"antecedents": [6, 7], "consequent": 8}, {"antecedents": [1, 4], "consequent": 9}, {"antecedents": [8, 9], "consequent": 10}, {"antecedents": [1, 5], "consequent": 11}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: The cars cost 20000*12=$240,000; int1 & sent3 -> int2: So the tax came out to 240,000*.1=$24,000; int1 & int2 -> int3: So the cars cost 240,000+24,000=$264,000; sent1 & sent4 -> int4: Registration cost another 12*1000=12,000; int3 & int4 -> int5: So his total cost is 264,000+12,000=$276,000; sent1 & sent5 -> int6: The answer is 276,000;", "textual_logical_units": {"1": "Mark compra una flota de 12 coches para su empresa.", "2": "Cada coche se vende por 20 000 €.", "3": "Paga un 10 % de impuestos sobre los coches y", "4": "y luego otros 1000 € para registrar cada uno de ellos.", "5": "¿Cuánto paga por todo?", "6": "Los coches cuestan 20 000 * 12 = 240 000 €", "7": "Así que el impuesto ascendió a 240 000 * 0,1 = 24 000 €", "8": "Así que los coches cuestan 240 000 + 24 000 = 264 000 €", "9": "El registro costó otros 12 * 1000 = 12 000", "10": "Así que su coste total es de 264 000 + 12 000 = 276 000 €", "11": "The answer is 276,000"}, "human_translated": true, "code_input": "####\nfacts = [ 'Mark compra una flota de 12\\xa0coches para su empresa.',\n  'Cada coche se vende por 20\\xa0000\\xa0€.',\n  'Paga un 10\\xa0% de impuestos sobre los coches y',\n  'y luego otros 1000\\xa0€ para registrar cada uno de ellos.']\nquestion = '¿Cuánto paga por todo?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Mark compra una flota de 12\\xa0coches para su empresa.', 'Cada coche se vende por 20\\xa0000\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Los coches cuestan 20\\xa0000\\xa0*\\xa012\\xa0=\\xa0240\\xa0000\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Paga un 10\\xa0% de impuestos sobre los coches y', 'Los coches cuestan 20\\xa0000\\xa0*\\xa012\\xa0=\\xa0240\\xa0000\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Así que el impuesto ascendió a 240\\xa0000\\xa0*\\xa00,1\\xa0=\\xa024\\xa0000\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Los coches cuestan 20\\xa0000\\xa0*\\xa012\\xa0=\\xa0240\\xa0000\\xa0€', 'Así que el impuesto ascendió a 240\\xa0000\\xa0*\\xa00,1\\xa0=\\xa024\\xa0000\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Así que los coches cuestan 240\\xa0000\\xa0+\\xa024\\xa0000\\xa0=\\xa0264\\xa0000\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Mark compra una flota de 12\\xa0coches para su empresa.', 'y luego otros 1000\\xa0€ para registrar cada uno de ellos.']\nnew_fact = infer_new_fact(selected) # 'El registro costó otros 12\\xa0*\\xa01000\\xa0=\\xa012\\xa0000'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Así que los coches cuestan 240\\xa0000\\xa0+\\xa024\\xa0000\\xa0=\\xa0264\\xa0000\\xa0€', 'El registro costó otros 12\\xa0*\\xa01000\\xa0=\\xa012\\xa0000']\nnew_fact = infer_new_fact(selected) # 'Así que su coste total es de 264\\xa0000\\xa0+\\xa012\\xa0000\\xa0=\\xa0276\\xa0000\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Mark compra una flota de 12\\xa0coches para su empresa.', '¿Cuánto paga por todo?']\nnew_fact = infer_new_fact(selected) # 'The answer is 276,000'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '276000'"}
{"id": "GSM8K_231_dfc5dc70ec", "context": "", "options": [], "answer": "50", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 5}, {"antecedents": [3], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 -> int1: On Monday, Kylie collects 20 + 5 = 25 shells; sent3 -> int2: On Tuesday, Kylie collects 25 * 2 = 50 shells; int2 & sent4 -> int3: The answer is 50;", "textual_logical_units": {"1": "A Kylie y Robert les gusta ir a la playa a recoger conchas.", "2": "El lunes, Kylie recoge 5 conchas más que Robert, que recoge 20 conchas.", "3": "El martes, Kylie recoge el doble de conchas que el lunes.", "4": "¿Cuántas conchas recoge Kylie el martes?", "5": "El lunes, Kylie recoge 20 + 5 = 25 conchas", "6": "El martes, Kylie recoge 25 * 2 = 50 conchas", "7": "The answer is 50"}, "human_translated": true, "code_input": "####\nfacts = [ 'A Kylie y Robert les gusta ir a la playa a recoger conchas.',\n  'El lunes, Kylie recoge 5\\xa0conchas más que Robert, que recoge 20\\xa0conchas.',\n  'El martes, Kylie recoge el doble de conchas que el lunes.']\nquestion = '¿Cuántas conchas recoge Kylie el martes?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['El lunes, Kylie recoge 5\\xa0conchas más que Robert, que recoge 20\\xa0conchas.']\nnew_fact = infer_new_fact(selected) # 'El lunes, Kylie recoge 20\\xa0+\\xa05\\xa0=\\xa025\\xa0conchas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El martes, Kylie recoge el doble de conchas que el lunes.']\nnew_fact = infer_new_fact(selected) # 'El martes, Kylie recoge 25\\xa0*\\xa02\\xa0=\\xa050\\xa0conchas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas conchas recoge Kylie el martes?', 'El martes, Kylie recoge 25\\xa0*\\xa02\\xa0=\\xa050\\xa0conchas']\nnew_fact = infer_new_fact(selected) # 'The answer is 50'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '50'"}
{"id": "GSM8K_232_0687e50a8c", "context": "", "options": [], "answer": "75", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: If there were 50 ants, the total number of bugs in the garden is 1 bug/2 ants * 50 ants = 25 bugs; int1 & sent3 -> int2: The total number of insects in the garden is 25 bugs + 50 ants = 75 insects; int2 & sent4 -> int3: The answer is 75;", "textual_logical_units": {"1": "Dax fue a su granja a recoger manzanas y", "2": "encontró la mitad de bichos que hormigas en el jardín.", "3": "Si había 50 hormigas,", "4": "calcula el número total de insectos en el jardín.", "5": "Si había 50 hormigas, el número total de bichos en el jardín es 1 bicho / 2 hormigas * 50 hormigas = 25 bichos", "6": "El número total de insectos en el jardín es de 25 bichos + 50 hormigas = 75 insectos", "7": "The answer is 75"}, "human_translated": true, "code_input": "####\nfacts = ['Dax fue a su granja a recoger manzanas y', 'encontró la mitad de bichos que hormigas en el jardín.', 'Si había 50\\xa0hormigas,']\nquestion = 'calcula el número total de insectos en el jardín.'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['encontró la mitad de bichos que hormigas en el jardín.', 'Si había 50\\xa0hormigas,']\nnew_fact = infer_new_fact(selected) # 'Si había 50\\xa0hormigas, el número total de bichos en el jardín es 1\\xa0bicho\\xa0/\\xa02\\xa0hormigas\\xa0*\\xa050\\xa0hormigas\\xa0=\\xa025\\xa0bichos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si había 50\\xa0hormigas,', 'Si había 50\\xa0hormigas, el número total de bichos en el jardín es 1\\xa0bicho\\xa0/\\xa02\\xa0hormigas\\xa0*\\xa050\\xa0hormigas\\xa0=\\xa025\\xa0bichos']\nnew_fact = infer_new_fact(selected) # 'El número total de insectos en el jardín es de 25\\xa0bichos\\xa0+\\xa050\\xa0hormigas\\xa0=\\xa075\\xa0insectos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['calcula el número total de insectos en el jardín.', 'El número total de insectos en el jardín es de 25\\xa0bichos\\xa0+\\xa050\\xa0hormigas\\xa0=\\xa075\\xa0insectos']\nnew_fact = infer_new_fact(selected) # 'The answer is 75'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '75'"}
{"id": "GSM8K_233_2021bf8148", "context": "", "options": [], "answer": "12", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [1, 3], "consequent": 6}, {"antecedents": [5, 6], "consequent": 7}, {"antecedents": [1, 7], "consequent": 8}, {"antecedents": [4, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: This many penguins are swimming: 36/3 = 12 penguins.; sent1 & sent3 -> int2: This many penguins are eating their dinner: 36/3 = 12 penguins.; int1 & int2 -> int3: This many penguins are not sunbathing: 12 + 12 = 24.; int3 & sent1 -> int4: This many penguins are still sunbathing: 36 - 24 = 12 penguins.; int4 & sent4 -> int5: The answer is 12;", "textual_logical_units": {"1": "Hay 36 pingüinos tomando el sol en la nieve.", "2": "Un tercio de ellos salta y nada en el océano.", "3": "Otro tercio entra en la cueva para cenar.", "4": "¿Cuántos pingüinos siguen tomando el sol?", "5": "Estos pingüinos están nadando: 36 / 3 = 12 pingüinos.", "6": "Estos pingüinos están cenando: 36 / 3 = 12 pingüinos.", "7": "Estos pingüinos no están tomando el sol: 12 + 12 = 24.", "8": "Estos pingüinos siguen tomando el sol: 36 - 24 = 12 pingüinos.", "9": "The answer is 12"}, "human_translated": true, "code_input": "####\nfacts = ['Hay 36\\xa0pingüinos tomando el sol en la nieve.', 'Un tercio de ellos salta y nada en el océano.', 'Otro tercio entra en la cueva para cenar.']\nquestion = '¿Cuántos pingüinos siguen tomando el sol?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Hay 36\\xa0pingüinos tomando el sol en la nieve.', 'Un tercio de ellos salta y nada en el océano.']\nnew_fact = infer_new_fact(selected) # 'Estos pingüinos están nadando: 36\\xa0/\\xa03\\xa0=\\xa012\\xa0pingüinos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Hay 36\\xa0pingüinos tomando el sol en la nieve.', 'Otro tercio entra en la cueva para cenar.']\nnew_fact = infer_new_fact(selected) # 'Estos pingüinos están cenando: 36\\xa0/\\xa03\\xa0=\\xa012\\xa0pingüinos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Estos pingüinos están nadando: 36\\xa0/\\xa03\\xa0=\\xa012\\xa0pingüinos.', 'Estos pingüinos están cenando: 36\\xa0/\\xa03\\xa0=\\xa012\\xa0pingüinos.']\nnew_fact = infer_new_fact(selected) # 'Estos pingüinos no están tomando el sol: 12\\xa0+\\xa012\\xa0=\\xa024.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Hay 36\\xa0pingüinos tomando el sol en la nieve.', 'Estos pingüinos no están tomando el sol: 12\\xa0+\\xa012\\xa0=\\xa024.']\nnew_fact = infer_new_fact(selected) # 'Estos pingüinos siguen tomando el sol: 36\\xa0-\\xa024\\xa0=\\xa012\\xa0pingüinos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos pingüinos siguen tomando el sol?', 'Estos pingüinos siguen tomando el sol: 36\\xa0-\\xa024\\xa0=\\xa012\\xa0pingüinos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 12'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '12'"}
{"id": "GSM8K_234_a8e9df9d49", "context": "", "options": [], "answer": "21", "reasoning_graph_edges": [{"antecedents": [3, 4], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent3 & sent4 -> int1: His girlfriend eats 6/2=3 tomatoes per day; int1 & sent4 -> int2: So together they eat 6+3=9 tomatoes a day; int2 & sent5 -> int3: That means they eat 9*7=63 tomatoes a day; int3 & sent5 -> int4: So he needs 63/3=21 tomato vines; int4 & sent5 -> int5: The answer is 21;", "textual_logical_units": {"1": "Steve decide empezar a comer más tomates y", "2": "decide cultivar sus propios tomates cherry.", "3": "Come el doble que su novia.", "4": "Come 6 al día.", "5": "Si una rama puede producir 3 tomates a la semana, ¿cuántas ramas necesita?", "6": "Su novia come 6 / 2 = 3 tomates al día", "7": "Así que juntos comen 6 + 3 = 9 tomates al día", "8": "Eso significa que comen 9 * 7 = 63 tomates al día", "9": "Así que necesita 63 / 3 = 21 ramas de tomate", "10": "The answer is 21"}, "human_translated": true, "code_input": "####\nfacts = ['Steve decide empezar a comer más tomates y', 'decide cultivar sus propios tomates cherry.', 'Come el doble que su novia.', 'Come 6 al día.']\nquestion = 'Si una rama puede producir 3\\xa0tomates a la semana, ¿cuántas ramas necesita?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Come el doble que su novia.', 'Come 6 al día.']\nnew_fact = infer_new_fact(selected) # 'Su novia come 6\\xa0/\\xa02\\xa0=\\xa03\\xa0tomates al día'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Come 6 al día.', 'Su novia come 6\\xa0/\\xa02\\xa0=\\xa03\\xa0tomates al día']\nnew_fact = infer_new_fact(selected) # 'Así que juntos comen 6\\xa0+\\xa03\\xa0=\\xa09\\xa0tomates al día'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si una rama puede producir 3\\xa0tomates a la semana, ¿cuántas ramas necesita?', 'Así que juntos comen 6\\xa0+\\xa03\\xa0=\\xa09\\xa0tomates al día']\nnew_fact = infer_new_fact(selected) # 'Eso significa que comen 9\\xa0*\\xa07\\xa0=\\xa063\\xa0tomates al día'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si una rama puede producir 3\\xa0tomates a la semana, ¿cuántas ramas necesita?', 'Eso significa que comen 9\\xa0*\\xa07\\xa0=\\xa063\\xa0tomates al día']\nnew_fact = infer_new_fact(selected) # 'Así que necesita 63\\xa0/\\xa03\\xa0=\\xa021\\xa0ramas de tomate'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si una rama puede producir 3\\xa0tomates a la semana, ¿cuántas ramas necesita?', 'Así que necesita 63\\xa0/\\xa03\\xa0=\\xa021\\xa0ramas de tomate']\nnew_fact = infer_new_fact(selected) # 'The answer is 21'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '21'"}
{"id": "GSM8K_235_ab136ec39d", "context": "", "options": [], "answer": "10", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: John's 20 friends each need 4 slices, so that means 4*20= 80 slices are needed; int1 & sent4 -> int2: Each pizza has 8 slices, so to get 80 slices in total 80/8= 10 pizzas are needed; int2 & sent5 -> int3: The answer is 10;", "textual_logical_units": {"1": "John pide unas pizzas para compartir con sus amigos.", "2": "Hay 20 amigos en total", "3": "y John quiere asegurarse de que cada uno pueda tener 4 porciones.", "4": "Las pizzas solo se venden cortadas en 8 porciones.", "5": "¿Cuántas pizzas tiene que pedir John?", "6": "Los 20 amigos de John necesitan 4 porciones cada uno, lo que significa que se necesitan 4 * 20 = 80 porciones", "7": "Cada pizza tiene 8 porciones, por lo que para obtener 80 porciones se necesitan 80 / 8 = 10 pizzas en total", "8": "The answer is 10"}, "human_translated": true, "code_input": "####\nfacts = [ 'John pide unas pizzas para compartir con sus amigos.',\n  'Hay 20\\xa0amigos en total',\n  'y John quiere asegurarse de que cada uno pueda tener 4\\xa0porciones.',\n  'Las pizzas solo se venden cortadas en 8\\xa0porciones.']\nquestion = '¿Cuántas pizzas tiene que pedir John?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Hay 20\\xa0amigos en total', 'y John quiere asegurarse de que cada uno pueda tener 4\\xa0porciones.']\nnew_fact = infer_new_fact(selected) # 'Los 20\\xa0amigos de John necesitan 4\\xa0porciones cada uno, lo que significa que se necesitan 4\\xa0*\\xa020\\xa0=\\xa080\\xa0porciones'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Las pizzas solo se venden cortadas en 8\\xa0porciones.', 'Los 20\\xa0amigos de John necesitan 4\\xa0porciones cada uno, lo que significa que se necesitan 4\\xa0*\\xa020\\xa0=\\xa080\\xa0porciones']\nnew_fact = infer_new_fact(selected) # 'Cada pizza tiene 8\\xa0porciones, por lo que para obtener 80\\xa0porciones se necesitan 80\\xa0/\\xa08\\xa0=\\xa010\\xa0pizzas en total'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas pizzas tiene que pedir John?', 'Cada pizza tiene 8\\xa0porciones, por lo que para obtener 80\\xa0porciones se necesitan 80\\xa0/\\xa08\\xa0=\\xa010\\xa0pizzas en total']\nnew_fact = infer_new_fact(selected) # 'The answer is 10'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '10'"}
{"id": "GSM8K_236_efdf40916f", "context": "", "options": [], "answer": "31", "reasoning_graph_edges": [{"antecedents": [2, 3, 4], "consequent": 6}, {"antecedents": [6], "consequent": 7}, {"antecedents": [6, 7], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent2 & sent3 & sent4 -> int1: He can make 5 pens when the 25 run low because 25 / 5 = 5; int1 -> int2: He can make 1 pen when the ink in the re-made pens runs low because 5 / 1 = 5; int1 & int2 -> int3: He will have 31 total pens because 25 + 5 + 1 = 31; int3 & sent5 -> int4: The answer is 31;", "textual_logical_units": {"1": "Ram usa muchos bolígrafos.", "2": "Descubrió que podía ahorrar dinero mezclando la tinta de cinco bolígrafos vacíos para hacer un bolígrafo lleno.", "3": "Si compra 25 bolígrafos y", "4": "luego los usa para hacer nuevos bolígrafos cuando la tinta se agota,", "5": "¿cuántos bolígrafos tiene en total?", "6": "Puede hacer 5 bolígrafos cuando se le acaben los 25 porque 25 / 5 = 5", "7": "Puede hacer 1 bolígrafo cuando la tinta de los bolígrafos rehechos se agota porque 5 / 1 = 5", "8": "Tendrá 31 bolígrafos en total porque 25 + 5 + 1 = 31", "9": "The answer is 31"}, "human_translated": true, "code_input": "####\nfacts = [ 'Ram usa muchos bolígrafos.',\n  'Descubrió que podía ahorrar dinero mezclando la tinta de cinco bolígrafos vacíos para hacer un bolígrafo lleno.',\n  'Si compra 25 bolígrafos y',\n  'luego los usa para hacer nuevos bolígrafos cuando la tinta se agota,']\nquestion = '¿cuántos bolígrafos tiene en total?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Descubrió que podía ahorrar dinero mezclando la tinta de cinco bolígrafos vacíos para hacer un bolígrafo lleno.', 'Si compra 25 bolígrafos y', 'luego los usa para hacer nuevos bolígrafos cuando la tinta se agota,']\nnew_fact = infer_new_fact(selected) # 'Puede hacer 5\\xa0bolígrafos cuando se le acaben los\\xa025 porque 25\\xa0/\\xa05\\xa0=\\xa05'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Puede hacer 5\\xa0bolígrafos cuando se le acaben los\\xa025 porque 25\\xa0/\\xa05\\xa0=\\xa05']\nnew_fact = infer_new_fact(selected) # 'Puede hacer 1\\xa0bolígrafo cuando la tinta de los bolígrafos rehechos se agota porque 5\\xa0/\\xa01\\xa0= 5'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Puede hacer 5\\xa0bolígrafos cuando se le acaben los\\xa025 porque 25\\xa0/\\xa05\\xa0=\\xa05', 'Puede hacer 1\\xa0bolígrafo cuando la tinta de los bolígrafos rehechos se agota porque 5\\xa0/\\xa01\\xa0= 5']\nnew_fact = infer_new_fact(selected) # 'Tendrá 31\\xa0bolígrafos en total porque 25\\xa0+\\xa05\\xa0+\\xa01\\xa0=\\xa031'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos bolígrafos tiene en total?', 'Tendrá 31\\xa0bolígrafos en total porque 25\\xa0+\\xa05\\xa0+\\xa01\\xa0=\\xa031']\nnew_fact = infer_new_fact(selected) # 'The answer is 31'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '31'"}
{"id": "GSM8K_237_dd4ed51c58", "context": "", "options": [], "answer": "90", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Johnny invested twenty and ten dollars for a total of 20+10=30 dollars invested; int1 & sent4 -> int2: Johnny tripled this amount of money over the year, for a total of 30*=90 dollars; int2 & sent5 -> int3: The answer is 90;", "textual_logical_units": {"1": "Johnny cogió su paga de 20 € y", "2": "le añadió 10 € adicionales.", "3": "Luego invirtió esta suma de dinero,", "4": "que se triplicó en un año.", "5": "¿Cuánto dinero tenía después de un año?", "6": "Johnny invirtió veinte y diez euros para un total de 20 + 10 = 30 euros invertidos", "7": "Johnny triplicó esta cantidad de dinero a lo largo del año, para un total de 30 * 3 = 90 euros", "8": "The answer is 90"}, "human_translated": true, "code_input": "####\nfacts = ['Johnny cogió su paga de 20\\xa0€ y', 'le añadió 10\\xa0€ adicionales.', 'Luego invirtió esta suma de dinero,', 'que se triplicó en un año.']\nquestion = '¿Cuánto dinero tenía después de un año?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Johnny cogió su paga de 20\\xa0€ y', 'le añadió 10\\xa0€ adicionales.']\nnew_fact = infer_new_fact(selected) # 'Johnny invirtió veinte y diez euros para un total de 20\\xa0+\\xa010\\xa0=\\xa030\\xa0euros invertidos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['que se triplicó en un año.', 'Johnny invirtió veinte y diez euros para un total de 20\\xa0+\\xa010\\xa0=\\xa030\\xa0euros invertidos']\nnew_fact = infer_new_fact(selected) # 'Johnny triplicó esta cantidad de dinero a lo largo del año, para un total de 30\\xa0*\\xa03\\xa0=\\xa090\\xa0euros'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto dinero tenía después de un año?', 'Johnny triplicó esta cantidad de dinero a lo largo del año, para un total de 30\\xa0*\\xa03\\xa0=\\xa090\\xa0euros']\nnew_fact = infer_new_fact(selected) # 'The answer is 90'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '90'"}
{"id": "GSM8K_238_adba7edfd8", "context": "", "options": [], "answer": "68", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [3, 4, 5, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Joan is 20 + 5 = 25 years old.; int1 & sent1 -> int2: Mary is 25 – 2 = 23 years old.; int1 & int2 & sent3 & sent4 -> int3: Therefore, the sum of their ages is 20 + 25 + 23 = 68.; int3 & sent4 -> int4: The answer is 68;", "textual_logical_units": {"1": "Mary es dos años menor que Joan,", "2": "que es cinco años mayor que Jessa.", "3": "Si Jessa tiene 20 años,", "4": "¿Cuál es la suma de las edades de las tres chicas?", "5": "Joan tiene 20 + 5 = 25 años.", "6": "Mary tiene 25 - 2 = 23 años.", "7": "Por lo tanto, la suma de sus edades es 20 + 25 + 23 = 68.", "8": "The answer is 68"}, "human_translated": true, "code_input": "####\nfacts = ['Mary es dos años menor que Joan,', 'que es cinco años mayor que Jessa.', 'Si Jessa tiene 20\\xa0años,']\nquestion = '¿Cuál es la suma de las edades de las tres chicas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['que es cinco años mayor que Jessa.', 'Si Jessa tiene 20\\xa0años,']\nnew_fact = infer_new_fact(selected) # 'Joan tiene 20\\xa0+\\xa05\\xa0=\\xa025\\xa0años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Mary es dos años menor que Joan,', 'Joan tiene 20\\xa0+\\xa05\\xa0=\\xa025\\xa0años.']\nnew_fact = infer_new_fact(selected) # 'Mary tiene 25\\xa0-\\xa02\\xa0=\\xa023\\xa0años.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si Jessa tiene 20\\xa0años,', '¿Cuál es la suma de las edades de las tres chicas?', 'Joan tiene 20\\xa0+\\xa05\\xa0=\\xa025\\xa0años.', 'Mary tiene 25\\xa0-\\xa02\\xa0=\\xa023\\xa0años.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, la suma de sus edades es 20\\xa0+\\xa025\\xa0+\\xa023\\xa0=\\xa068.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál es la suma de las edades de las tres chicas?', 'Por lo tanto, la suma de sus edades es 20\\xa0+\\xa025\\xa0+\\xa023\\xa0=\\xa068.']\nnew_fact = infer_new_fact(selected) # 'The answer is 68'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '68'"}
{"id": "GSM8K_239_ffde322075", "context": "", "options": [], "answer": "280", "reasoning_graph_edges": [{"antecedents": [1, 4], "consequent": 8}, {"antecedents": [8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}, {"antecedents": [1, 6], "consequent": 11}, {"antecedents": [7, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent1 & sent4 -> int1: The number of students who went out through exit A is 30/100%1000 = 300 students.; int1 -> int2: The number of students who didn't use exit A is 1000-300 = 700; int2 & sent5 -> int3: 3/5 of the students used exit B, a total of 3/5*700 = 420 students.; sent1 & sent6 -> int4: If 420 of the remaining students who didn't use exit A used exit B, the number who used exit C is 700-420 = 280 students.; int4 & sent7 -> int5: The answer is 280;", "textual_logical_units": {"1": "El número de estudiantes en un salón escolar era de 1000.", "2": "La sala tenía 3 entradas A, B", "3": "y C, que también servían de salidas.", "4": "Si, después de una reunión el 30 % de los estudiantes salió del edificio por la salida A,", "5": "3/5 de los restantes salieron por la salida B", "6": "y el resto salió por la salida C,", "7": "calcula el número de estudiantes que salieron por la salida C.", "8": "El número de estudiantes que salieron por la salida A es del 30 / 100 *1000 = 300 estudiantes.", "9": "El número de estudiantes que no usaron la salida A es 1000 - 300 = 700", "10": "3/5 de los estudiantes usaron la salida B, un total de 3 / 5 * 700 = 420 estudiantes.", "11": "Si 420 de los estudiantes restantes que no usaron la salida A usaron la salida B, el número que usó la salida C es 700 - 420 = 280 estudiantes.", "12": "The answer is 280"}, "human_translated": true, "code_input": "####\nfacts = [ 'El número de estudiantes en un salón escolar era de 1000.',\n  'La sala tenía 3\\xa0entradas A, B',\n  'y C, que también servían de salidas.',\n  'Si, después de una reunión el 30\\xa0% de los estudiantes salió del edificio por la salida A,',\n  '3/5 de los restantes salieron por la salida B',\n  'y el resto salió por la salida C,']\nquestion = 'calcula el número de estudiantes que salieron por la salida C.'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['El número de estudiantes en un salón escolar era de 1000.', 'Si, después de una reunión el 30\\xa0% de los estudiantes salió del edificio por la salida A,']\nnew_fact = infer_new_fact(selected) # 'El número de estudiantes que salieron por la salida A es del 30\\xa0/\\xa0100\\xa0*1000\\xa0=\\xa0300\\xa0estudiantes.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El número de estudiantes que salieron por la salida A es del 30\\xa0/\\xa0100\\xa0*1000\\xa0=\\xa0300\\xa0estudiantes.']\nnew_fact = infer_new_fact(selected) # 'El número de estudiantes que no usaron la salida A es 1000\\xa0-\\xa0300\\xa0=\\xa0700'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['3/5 de los restantes salieron por la salida B', 'El número de estudiantes que no usaron la salida A es 1000\\xa0-\\xa0300\\xa0=\\xa0700']\nnew_fact = infer_new_fact(selected) # '3/5 de los estudiantes usaron la salida B, un total de 3\\xa0/\\xa05\\xa0*\\xa0700\\xa0=\\xa0420\\xa0estudiantes.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El número de estudiantes en un salón escolar era de 1000.', 'y el resto salió por la salida C,']\nnew_fact = infer_new_fact(selected) # 'Si 420 de los estudiantes restantes que no usaron la salida A usaron la salida B, el número que usó la salida C es 700\\xa0-\\xa0420\\xa0=\\xa0280 estudiantes.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['calcula el número de estudiantes que salieron por la salida C.', 'Si 420 de los estudiantes restantes que no usaron la salida A usaron la salida B, el número que usó la salida C es 700\\xa0-\\xa0420\\xa0=\\xa0280 estudiantes.']\nnew_fact = infer_new_fact(selected) # 'The answer is 280'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '280'"}
{"id": "GSM8K_240_270aee8e9a", "context": "", "options": [], "answer": "21", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [3, 4, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Robert has 54/2 = 27 candies.; int1 & sent1 -> int2: James has 27+6 = 33 candies.; int2 & sent3 & sent4 -> int3: John has 54-33= 21 more candies than James.; int3 & sent4 -> int4: The answer is 21;", "textual_logical_units": {"1": "James tiene 6 caramelos más que Robert.", "2": "John tiene el doble de caramelos que Robert.", "3": "Si John tiene 54 caramelos,", "4": "¿cuántos caramelos más tiene John que James?", "5": "Robert tiene 54 / 2 = 27 caramelos.", "6": "James tiene 27 + 6 = 33 caramelos.", "7": "John tiene 54 - 33 = 21 caramelos más que James.", "8": "The answer is 21"}, "human_translated": true, "code_input": "####\nfacts = ['James tiene 6\\xa0caramelos más que Robert.', 'John tiene el doble de caramelos que Robert.', 'Si John tiene 54\\xa0caramelos,']\nquestion = '¿cuántos caramelos más tiene John que James?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['John tiene el doble de caramelos que Robert.', 'Si John tiene 54\\xa0caramelos,']\nnew_fact = infer_new_fact(selected) # 'Robert tiene 54\\xa0/\\xa02\\xa0=\\xa027\\xa0caramelos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['James tiene 6\\xa0caramelos más que Robert.', 'Robert tiene 54\\xa0/\\xa02\\xa0=\\xa027\\xa0caramelos.']\nnew_fact = infer_new_fact(selected) # 'James tiene 27\\xa0+\\xa06\\xa0=\\xa033\\xa0caramelos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si John tiene 54\\xa0caramelos,', '¿cuántos caramelos más tiene John que James?', 'James tiene 27\\xa0+\\xa06\\xa0=\\xa033\\xa0caramelos.']\nnew_fact = infer_new_fact(selected) # 'John tiene 54\\xa0-\\xa033\\xa0=\\xa021\\xa0caramelos más que James.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos caramelos más tiene John que James?', 'John tiene 54\\xa0-\\xa033\\xa0=\\xa021\\xa0caramelos más que James.']\nnew_fact = infer_new_fact(selected) # 'The answer is 21'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '21'"}
{"id": "GSM8K_241_11576e8b3a", "context": "", "options": [], "answer": "6", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: There are 2 + 1 = 3 books in total.; int1 & sent3 -> int2: Dolly and Pandora both read all 3 books, so 3 books/person x 2 people = 6 books total; int2 & sent4 -> int3: The answer is 6;", "textual_logical_units": {"1": "Dolly tiene dos libros.", "2": "Pandora tiene uno.", "3": "Si tanto Dolly como Pandora se leen los libros de la otra y los suyos,", "4": "¿cuántos libros leerán juntas al final?", "5": "Hay 2 + 1 = 3 libros en total.", "6": "Dolly y Pandora leen los 3 libros, por lo que 3 libros/persona x 2 personas = 6 libros en total", "7": "The answer is 6"}, "human_translated": true, "code_input": "####\nfacts = ['Dolly tiene dos libros.', 'Pandora tiene uno.', 'Si tanto Dolly como Pandora se leen los libros de la otra y los suyos,']\nquestion = '¿cuántos libros leerán juntas al final?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Dolly tiene dos libros.', 'Pandora tiene uno.']\nnew_fact = infer_new_fact(selected) # 'Hay 2\\xa0+\\xa01\\xa0=\\xa03\\xa0libros en total.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si tanto Dolly como Pandora se leen los libros de la otra y los suyos,', 'Hay 2\\xa0+\\xa01\\xa0=\\xa03\\xa0libros en total.']\nnew_fact = infer_new_fact(selected) # 'Dolly y Pandora leen los 3\\xa0libros, por lo que 3\\xa0libros/persona\\xa0x\\xa02\\xa0personas\\xa0=\\xa06\\xa0libros en total'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos libros leerán juntas al final?', 'Dolly y Pandora leen los 3\\xa0libros, por lo que 3\\xa0libros/persona\\xa0x\\xa02\\xa0personas\\xa0=\\xa06\\xa0libros en total']\nnew_fact = infer_new_fact(selected) # 'The answer is 6'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '6'"}
{"id": "GSM8K_242_6407ca527a", "context": "", "options": [], "answer": "3", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}, {"antecedents": [3, 4, 8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}, {"antecedents": [10], "consequent": 11}, {"antecedents": [6, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: He is penpals with 5-2=3 people; int1 & sent3 -> int2: Thus he gets 3*2=6 letters a week; int2 & sent3 & sent4 -> int3: So he writes 6*5=30 pages a week; int3 & sent5 -> int4: So he writes for 30*6=180 minutes a week; int4 -> int5: So he writes 180/60=3 hours a week; int5 & sent6 -> int6: The answer is 3;", "textual_logical_units": {"1": "Mike era amigo por correspondencia de 5 personas.", "2": "Dejó de ser amigo por correspondencia de dos de ellas.", "3": "Cada persona envía 2 cartas a la semana de 5 páginas", "4": "y él responde de la misma manera.", "5": "Puede escribir una página cada 6 minutos.", "6": "¿Cuántas horas dedica a escribir a la semana?", "7": "Es amigo por correspondencia de 5 - 2 = 3 personas", "8": "Por lo tanto, recibe 3 * 2 = 6 cartas a la semana", "9": "Así que escribe 6 * 5 = 30 páginas a la semana", "10": "Así que escribe durante 30 * 6 = 180 minutos a la semana", "11": "Así que escribe 180 / 60 = 3 horas a la semana", "12": "The answer is 3"}, "human_translated": true, "code_input": "####\nfacts = [ 'Mike era amigo por correspondencia de 5\\xa0personas.',\n  'Dejó de ser amigo por correspondencia de dos de ellas.',\n  'Cada persona envía 2\\xa0cartas a la semana de 5\\xa0páginas',\n  'y él responde de la misma manera.',\n  'Puede escribir una página cada 6\\xa0minutos.']\nquestion = '¿Cuántas horas dedica a escribir a la semana?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Mike era amigo por correspondencia de 5\\xa0personas.', 'Dejó de ser amigo por correspondencia de dos de ellas.']\nnew_fact = infer_new_fact(selected) # 'Es amigo por correspondencia de 5\\xa0-\\xa02\\xa0=\\xa03\\xa0personas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada persona envía 2\\xa0cartas a la semana de 5\\xa0páginas', 'Es amigo por correspondencia de 5\\xa0-\\xa02\\xa0=\\xa03\\xa0personas']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, recibe 3\\xa0*\\xa02\\xa0=\\xa06\\xa0cartas a la semana'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada persona envía 2\\xa0cartas a la semana de 5\\xa0páginas', 'y él responde de la misma manera.', 'Por lo tanto, recibe 3\\xa0*\\xa02\\xa0=\\xa06\\xa0cartas a la semana']\nnew_fact = infer_new_fact(selected) # 'Así que escribe 6\\xa0*\\xa05\\xa0=\\xa030\\xa0páginas a la semana'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Puede escribir una página cada 6\\xa0minutos.', 'Así que escribe 6\\xa0*\\xa05\\xa0=\\xa030\\xa0páginas a la semana']\nnew_fact = infer_new_fact(selected) # 'Así que escribe durante 30\\xa0*\\xa06\\xa0=\\xa0180\\xa0minutos a la semana'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Así que escribe durante 30\\xa0*\\xa06\\xa0=\\xa0180\\xa0minutos a la semana']\nnew_fact = infer_new_fact(selected) # 'Así que escribe 180\\xa0/\\xa060\\xa0=\\xa03\\xa0horas a la semana'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas horas dedica a escribir a la semana?', 'Así que escribe 180\\xa0/\\xa060\\xa0=\\xa03\\xa0horas a la semana']\nnew_fact = infer_new_fact(selected) # 'The answer is 3'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '3'"}
{"id": "GSM8K_243_d43ec45285", "context": "", "options": [], "answer": "250", "reasoning_graph_edges": [{"antecedents": [2, 4], "consequent": 5}, {"antecedents": [1, 3, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 & sent4 -> int1: First find the total time Jason spends calling his boss: 15 minutes/call * 30 calls/month = 450 minutes; int1 & sent1 & sent3 -> int2: Then subtract the minutes Jason has already used to find how many he has left: 1000 minutes - 450 minutes - 300 minutes = 250 minutes; int2 & sent4 -> int3: The answer is 250;", "textual_logical_units": {"1": "Jason tiene un plan de teléfono de 1000 minutos al mes.", "2": "Todos los días tiene una llamada de 15 minutos con su jefe", "3": "y este mes ha tenido 300 minutos extra de llamadas a otras personas.", "4": "¿Cuántos minutos le quedan a Jason si este mes tiene 30 días?", "5": "Primero, calcula el tiempo total que Jason pasa llamando a su jefe: 15 minutos/llamada * 30 llamadas/mes = 450 minutos", "6": "Luego, resta los minutos que Jason ya usó para encontrar cuántos le quedan: 1000 minutos - 450 minutos - 300 minutos = 250 minutos", "7": "The answer is 250"}, "human_translated": true, "code_input": "####\nfacts = [ 'Jason tiene un plan de teléfono de 1000\\xa0minutos al mes.',\n  'Todos los días tiene una llamada de 15\\xa0minutos con su jefe',\n  'y este mes ha tenido 300\\xa0minutos extra de llamadas a otras personas.']\nquestion = '¿Cuántos minutos le quedan a Jason si este mes tiene 30\\xa0días?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Todos los días tiene una llamada de 15\\xa0minutos con su jefe', '¿Cuántos minutos le quedan a Jason si este mes tiene 30\\xa0días?']\nnew_fact = infer_new_fact(selected) # 'Primero, calcula el tiempo total que Jason pasa llamando a su jefe: 15\\xa0minutos/llamada\\xa0*\\xa030\\xa0llamadas/mes\\xa0=\\xa0450\\xa0minutos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Jason tiene un plan de teléfono de 1000\\xa0minutos al mes.', 'y este mes ha tenido 300\\xa0minutos extra de llamadas a otras personas.', 'Primero, calcula el tiempo total que Jason pasa llamando a su jefe: 15\\xa0minutos/llamada\\xa0*\\xa030\\xa0llamadas/mes\\xa0=\\xa0450\\xa0minutos']\nnew_fact = infer_new_fact(selected) # 'Luego, resta los minutos que Jason ya usó para encontrar cuántos le quedan: 1000\\xa0minutos\\xa0-\\xa0450\\xa0minutos\\xa0-\\xa0300\\xa0minutos\\xa0=\\xa0250\\xa0minutos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos minutos le quedan a Jason si este mes tiene 30\\xa0días?', 'Luego, resta los minutos que Jason ya usó para encontrar cuántos le quedan: 1000\\xa0minutos\\xa0-\\xa0450\\xa0minutos\\xa0-\\xa0300\\xa0minutos\\xa0=\\xa0250\\xa0minutos']\nnew_fact = infer_new_fact(selected) # 'The answer is 250'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '250'"}
{"id": "GSM8K_244_6be47fa721", "context": "", "options": [], "answer": "20", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 8}, {"antecedents": [3, 8], "consequent": 9}, {"antecedents": [5, 8], "consequent": 10}, {"antecedents": [6, 8, 9, 10], "consequent": 11}, {"antecedents": [11], "consequent": 12}, {"antecedents": [7, 12], "consequent": 13}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Griffin had 24 french fries, but Kyle took 5 of them.; int1 & sent3 -> int2: Billy took twice as many as Kyle, removing 2*5=10 fries.; int1 & sent5 -> int3: Colby took 3 less than the number of fries that Kyle had taken, removing 5-3=2 fries.; int1 & int2 & int3 & sent6 -> int4: If we let X be the number of fries given to Griffin by Ginger, then 24-5-10-2+x=27; int4 -> int5: Thus, Ginger had given Griffin x=20 fries; int5 & sent7 -> int6: The answer is 20;", "textual_logical_units": {"1": "Griffin comió 24 patatas fritas,", "2": "pero Kyle se llevó 5.", "3": "Billy se llevó el doble que Kyle.", "4": "Ginger le dio a Griffin un puñado de sus patatas fritas y luego", "5": "Colby le quitó a Griffin 3 patatas menos de las que había cogido Kyle.", "6": "Si al final Griffin se comió 27 patatas fritas,", "7": "¿cuántas patatas fritas le dio Ginger a Griffin?", "8": "Griffin comió 24 patatas fritas, pero Kyle se llevó 5.", "9": "Billy se llevó el doble que Kyle, de modo que le quitó 2 * 5 = 10 patatas fritas.", "10": "Colby cogió 3 patatas menos que Kyle, de modo que le quitó 5 - 3 = 2 patatas fritas.", "11": "Si dejamos que X sea el número de patatas fritas que Ginger le dio a Griffin, entonces 24 - 5 - 10 - 2 + x = 27", "12": "Por lo tanto, Ginger le dio a Griffin x = 20 patatas fritas", "13": "The answer is 20"}, "human_translated": true, "code_input": "####\nfacts = [ 'Griffin comió 24\\xa0patatas fritas,',\n  'pero Kyle se llevó 5.',\n  'Billy se llevó el doble que Kyle.',\n  'Ginger le dio a Griffin un puñado de sus patatas fritas y luego',\n  'Colby le quitó a Griffin 3\\xa0patatas menos de las que había cogido Kyle.',\n  'Si al final Griffin se comió 27\\xa0patatas fritas,']\nquestion = '¿cuántas patatas fritas le dio Ginger a Griffin?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Griffin comió 24\\xa0patatas fritas,', 'pero Kyle se llevó 5.']\nnew_fact = infer_new_fact(selected) # 'Griffin comió 24\\xa0patatas fritas, pero Kyle se llevó 5.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Billy se llevó el doble que Kyle.', 'Griffin comió 24\\xa0patatas fritas, pero Kyle se llevó 5.']\nnew_fact = infer_new_fact(selected) # 'Billy se llevó el doble que Kyle, de modo que le quitó 2\\xa0*\\xa05\\xa0=\\xa010\\xa0patatas fritas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Colby le quitó a Griffin 3\\xa0patatas menos de las que había cogido Kyle.', 'Griffin comió 24\\xa0patatas fritas, pero Kyle se llevó 5.']\nnew_fact = infer_new_fact(selected) # 'Colby cogió 3\\xa0patatas menos que Kyle, de modo que le quitó 5\\xa0-\\xa03\\xa0=\\xa02\\xa0patatas fritas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si al final Griffin se comió 27\\xa0patatas fritas,', 'Griffin comió 24\\xa0patatas fritas, pero Kyle se llevó 5.', 'Billy se llevó el doble que Kyle, de modo que le quitó 2\\xa0*\\xa05\\xa0=\\xa010\\xa0patatas fritas.', 'Colby cogió 3\\xa0patatas menos que Kyle, de modo que le quitó 5\\xa0-\\xa03\\xa0=\\xa02\\xa0patatas fritas.']\nnew_fact = infer_new_fact(selected) # 'Si dejamos que X sea el número de patatas fritas que Ginger le dio a Griffin, entonces 24\\xa0-\\xa05\\xa0-\\xa010\\xa0-\\xa02\\xa0+\\xa0x\\xa0=\\xa027'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si dejamos que X sea el número de patatas fritas que Ginger le dio a Griffin, entonces 24\\xa0-\\xa05\\xa0-\\xa010\\xa0-\\xa02\\xa0+\\xa0x\\xa0=\\xa027']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, Ginger le dio a Griffin x\\xa0=\\xa020\\xa0patatas fritas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántas patatas fritas le dio Ginger a Griffin?', 'Por lo tanto, Ginger le dio a Griffin x\\xa0=\\xa020\\xa0patatas fritas']\nnew_fact = infer_new_fact(selected) # 'The answer is 20'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '20'"}
{"id": "GSM8K_245_6805733f9a", "context": "", "options": [], "answer": "7", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: The difference between the number of snails is 32 - 4 = 28 snails.; int1 & sent3 -> int2: There are 28/2 = 14 fish in both aquariums.; int2 & sent4 -> int3: There are 14/2 = 7 fish in each aquarium.; int3 & sent5 -> int4: The answer is 7;", "textual_logical_units": {"1": "Hay 4 caracoles en un acuario y", "2": "32 caracoles en otro acuario.", "3": "La diferencia entre el número de caracoles en los dos acuarios es el doble de la cantidad de peces de ambos acuarios.", "4": "Si ambos acuarios tienen el mismo número de peces,", "5": "¿cuántos peces hay en cada acuario?", "6": "La diferencia entre el número de caracoles es 32 - 4 = 28 caracoles.", "7": "Hay 28 / 2 = 14 peces en ambos acuarios.", "8": "Hay 14 / 2 = 7 peces en cada acuario.", "9": "The answer is 7"}, "human_translated": true, "code_input": "####\nfacts = [ 'Hay 4\\xa0caracoles en un acuario y',\n  '32\\xa0caracoles en otro acuario.',\n  'La diferencia entre el número de caracoles en los dos acuarios es el doble de la cantidad de peces de ambos acuarios.',\n  'Si ambos acuarios tienen el mismo número de peces,']\nquestion = '¿cuántos peces hay en cada acuario?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Hay 4\\xa0caracoles en un acuario y', '32\\xa0caracoles en otro acuario.']\nnew_fact = infer_new_fact(selected) # 'La diferencia entre el número de caracoles es 32\\xa0-\\xa04\\xa0=\\xa028\\xa0caracoles.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La diferencia entre el número de caracoles en los dos acuarios es el doble de la cantidad de peces de ambos acuarios.', 'La diferencia entre el número de caracoles es 32\\xa0-\\xa04\\xa0=\\xa028\\xa0caracoles.']\nnew_fact = infer_new_fact(selected) # 'Hay 28\\xa0/\\xa02\\xa0=\\xa014\\xa0peces en ambos acuarios.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si ambos acuarios tienen el mismo número de peces,', 'Hay 28\\xa0/\\xa02\\xa0=\\xa014\\xa0peces en ambos acuarios.']\nnew_fact = infer_new_fact(selected) # 'Hay 14\\xa0/\\xa02\\xa0=\\xa07\\xa0peces en cada acuario.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántos peces hay en cada acuario?', 'Hay 14\\xa0/\\xa02\\xa0=\\xa07\\xa0peces en cada acuario.']\nnew_fact = infer_new_fact(selected) # 'The answer is 7'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '7'"}
{"id": "GSM8K_246_5ad129280b", "context": "", "options": [], "answer": "27000", "reasoning_graph_edges": [{"antecedents": [1, 3], "consequent": 8}, {"antecedents": [4, 8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}, {"antecedents": [1, 6], "consequent": 11}, {"antecedents": [10, 11], "consequent": 12}, {"antecedents": [7, 12], "consequent": 13}], "metadata": [], "linearized_output_en": "sent1 & sent3 -> int1: Jean pays 250*6=$1500 a day; int1 & sent4 -> int2: So he pays 1500*4=$6000 a week; int2 & sent5 -> int3: So the work cost 6000*5=$30,000; sent1 & sent6 -> int4: They give a discount of 30,000*.1=$3000; int3 & int4 -> int5: So the total cost paid is 30,000-3000=$27,000; int5 & sent7 -> int6: The answer is 27000;", "textual_logical_units": {"1": "La maquilladora de Jean le cobra 250 € la hora.", "2": "Necesita un maquillaje muy caro para una película en la que sale y", "3": "se necesitan 6 horas para hacerlo cada día y", "4": "lo necesita 4 veces a la semana.", "5": "La película tarda 5 semanas en terminarse.", "6": "Una vez finalizada la película, la maquilladora le hace a Jean un descuento del 10 % debido a la cantidad de trabajo hecho.", "7": "¿Cuánto pagó Jean?", "8": "Jean paga 250 * 6 = 1500 € al día", "9": "Así que paga 1500 * 4 = 6000 € a la semana", "10": "Así que el trabajo costó 6000 x 5 = 30 000 €", "11": "Ofrece un descuento de 30 000 * 0,1 = 3000 €", "12": "Por lo tanto, el coste total pagado es de 30 000 - 3000 = 27 000 €", "13": "The answer is 27000"}, "human_translated": true, "code_input": "####\nfacts = [ 'La maquilladora de Jean le cobra 250\\xa0€ la hora.',\n  'Necesita un maquillaje muy caro para una película en la que sale y',\n  'se necesitan 6\\xa0horas para hacerlo cada día y',\n  'lo necesita 4\\xa0veces a la semana.',\n  'La película tarda 5\\xa0semanas en terminarse.',\n  'Una vez finalizada la película, la maquilladora le hace a Jean un descuento del 10\\xa0% debido a la cantidad de trabajo hecho.']\nquestion = '¿Cuánto pagó Jean?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['La maquilladora de Jean le cobra 250\\xa0€ la hora.', 'se necesitan 6\\xa0horas para hacerlo cada día y']\nnew_fact = infer_new_fact(selected) # 'Jean paga 250\\xa0*\\xa06\\xa0=\\xa01500\\xa0€ al día'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['lo necesita 4\\xa0veces a la semana.', 'Jean paga 250\\xa0*\\xa06\\xa0=\\xa01500\\xa0€ al día']\nnew_fact = infer_new_fact(selected) # 'Así que paga 1500\\xa0*\\xa04\\xa0=\\xa06000 € a la semana'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La película tarda 5\\xa0semanas en terminarse.', 'Así que paga 1500\\xa0*\\xa04\\xa0=\\xa06000 € a la semana']\nnew_fact = infer_new_fact(selected) # 'Así que el trabajo costó 6000\\xa0x\\xa05\\xa0=\\xa030\\xa0000\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La maquilladora de Jean le cobra 250\\xa0€ la hora.', 'Una vez finalizada la película, la maquilladora le hace a Jean un descuento del 10\\xa0% debido a la cantidad de trabajo hecho.']\nnew_fact = infer_new_fact(selected) # 'Ofrece un descuento de 30\\xa0000\\xa0*\\xa00,1\\xa0=\\xa03000\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Así que el trabajo costó 6000\\xa0x\\xa05\\xa0=\\xa030\\xa0000\\xa0€', 'Ofrece un descuento de 30\\xa0000\\xa0*\\xa00,1\\xa0=\\xa03000\\xa0€']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, el coste total pagado es de 30\\xa0000\\xa0-\\xa03000\\xa0=\\xa027\\xa0000\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto pagó Jean?', 'Por lo tanto, el coste total pagado es de 30\\xa0000\\xa0-\\xa03000\\xa0=\\xa027\\xa0000\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 27000'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '27000'"}
{"id": "GSM8K_247_5e46618d7e", "context": "", "options": [], "answer": "32", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}, {"antecedents": [5, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Isabelle spent 12 + 43 + 15 + 4 + 22 = $96 on party supplies.; int1 & sent4 -> int2: The cost was evenly split 3 ways, so each person paid 96 / 3 = $32.; int2 & sent5 -> int3: The answer is 32;", "textual_logical_units": {"1": "Isabelle compró artículos de fiesta para la fiesta de cumpleaños de su hermana pequeña.", "2": "Gastó 12 € en ingredientes para la tarta, 43 € en regalos de cumpleaños, 15 € en decoraciones, 4 € en invitaciones", "3": "y 22 € en bolsas de regalos para los invitados a la fiesta.", "4": "Dividió el coste en tres partes iguales con sus padres.", "5": "¿Cuántos euros pagó cada persona?", "6": "Isabelle gastó 12 + 43 + 15 + 4 + 22 = 96 € en artículos de fiesta.", "7": "El coste se dividió en 3 partes iguales, por lo que cada persona pagó 96 / 3 = 32 €.", "8": "The answer is 32"}, "human_translated": true, "code_input": "####\nfacts = [ 'Isabelle compró artículos de fiesta para la fiesta de cumpleaños de su hermana pequeña.',\n  'Gastó 12\\xa0€ en ingredientes para la tarta, 43\\xa0€ en regalos de cumpleaños, 15\\xa0€ en decoraciones, 4\\xa0€ en invitaciones',\n  'y 22\\xa0€ en bolsas de regalos para los invitados a la fiesta.',\n  'Dividió el coste en tres partes iguales con sus padres.']\nquestion = '¿Cuántos euros pagó cada persona?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Gastó 12\\xa0€ en ingredientes para la tarta, 43\\xa0€ en regalos de cumpleaños, 15\\xa0€ en decoraciones, 4\\xa0€ en invitaciones', 'y 22\\xa0€ en bolsas de regalos para los invitados a la fiesta.']\nnew_fact = infer_new_fact(selected) # 'Isabelle gastó 12\\xa0+\\xa043\\xa0+\\xa015\\xa0+\\xa04\\xa0+\\xa022\\xa0=\\xa096\\xa0€ en artículos de fiesta.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Dividió el coste en tres partes iguales con sus padres.', 'Isabelle gastó 12\\xa0+\\xa043\\xa0+\\xa015\\xa0+\\xa04\\xa0+\\xa022\\xa0=\\xa096\\xa0€ en artículos de fiesta.']\nnew_fact = infer_new_fact(selected) # 'El coste se dividió en 3\\xa0partes iguales, por lo que cada persona pagó 96\\xa0/\\xa03\\xa0=\\xa032\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos euros pagó cada persona?', 'El coste se dividió en 3\\xa0partes iguales, por lo que cada persona pagó 96\\xa0/\\xa03\\xa0=\\xa032\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'The answer is 32'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '32'"}
{"id": "GSM8K_248_fee350ec70", "context": "", "options": [], "answer": "300", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: A bag of onions cost $1.50 x 50 = $75.; int1 & sent1 -> int2: Therefore, the chef spent $75 x 4 = $300 for the four bags of onions.; int2 & sent4 -> int3: The answer is 300;", "textual_logical_units": {"1": "Un chef compró 4 sacos de cebollas.", "2": "Cada saco pesa 50 kilos.", "3": "Un kilo de cebolla cuesta 1,50 €.", "4": "¿Cuánto gastó el chef?", "5": "Un saco de cebollas cuesta 1,50 € x 50 = 75 €.", "6": "Por lo tanto, el chef gastó 75 € x 4 = 300 € por los cuatro sacos de cebollas.", "7": "The answer is 300"}, "human_translated": true, "code_input": "####\nfacts = ['Un chef compró 4\\xa0sacos de cebollas.', 'Cada saco pesa 50\\xa0kilos.', 'Un kilo de cebolla cuesta 1,50\\xa0€.']\nquestion = '¿Cuánto gastó el chef?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Cada saco pesa 50\\xa0kilos.', 'Un kilo de cebolla cuesta 1,50\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Un saco de cebollas cuesta 1,50\\xa0€\\xa0x\\xa050\\xa0=\\xa075\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Un chef compró 4\\xa0sacos de cebollas.', 'Un saco de cebollas cuesta 1,50\\xa0€\\xa0x\\xa050\\xa0=\\xa075\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, el chef gastó 75\\xa0€\\xa0x\\xa04\\xa0=\\xa0300\\xa0€ por los cuatro sacos de cebollas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto gastó el chef?', 'Por lo tanto, el chef gastó 75\\xa0€\\xa0x\\xa04\\xa0=\\xa0300\\xa0€ por los cuatro sacos de cebollas.']\nnew_fact = infer_new_fact(selected) # 'The answer is 300'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '300'"}
{"id": "GSM8K_249_aa8699a929", "context": "", "options": [], "answer": "5600", "reasoning_graph_edges": [{"antecedents": [1, 3], "consequent": 6}, {"antecedents": [2, 3], "consequent": 7}, {"antecedents": [6, 7], "consequent": 8}, {"antecedents": [3], "consequent": 9}, {"antecedents": [8, 9], "consequent": 10}, {"antecedents": [1, 4], "consequent": 11}, {"antecedents": [5, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent1 & sent3 -> int1: Sue’s Monday cookie intake is 4*5 = 20.; sent2 & sent3 -> int2: Sue’s Tuesday cookie intake is 2*13 = 26.; int1 & int2 -> int3: Total cookies Sue consumed is 20+26 = 46.; sent3 -> int4: Sue’s sister ate a total of 5+13 = 18 cookies.; int3 & int4 -> int5: Sue ate 46-18=28 more cookies.; sent1 & sent4 -> int6: Sue consumed 28*200=5,600 more calories.; int6 & sent5 -> int7: The answer is 5,600;", "textual_logical_units": {"1": "El lunes, Sue comió 4 veces más galletas que su hermana.", "2": "El martes, comió el doble de galletas que su hermana.", "3": "Su hermana se comió 5 galletas el lunes y 13 al día siguiente.", "4": "Si 1 galleta tiene 200 calorías,", "5": "¿cuántas calorías más consumió Sue que su hermana?", "6": "La ingesta de galletas de Sue el lunes fue de 4 * 5 = 20.", "7": "La ingesta de galletas de Sue el martes fue de 2 * 13 = 26.", "8": "El total de galletas que Sue consumió es de 20 + 26 = 46.", "9": "La hermana de Sue se comió un total de 5 + 13 = 18 galletas.", "10": "Se comió 46 - 18 = 28 galletas más.", "11": "Sue consumió 28 * 200 = 5600 calorías más.", "12": "The answer is 5,600"}, "human_translated": true, "code_input": "####\nfacts = [ 'El lunes, Sue comió 4\\xa0veces más galletas que su hermana.',\n  'El martes, comió el doble de galletas que su hermana.',\n  'Su hermana se comió 5\\xa0galletas el lunes y 13 al día siguiente.',\n  'Si 1\\xa0galleta tiene 200\\xa0calorías,']\nquestion = '¿cuántas calorías más consumió Sue que su hermana?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['El lunes, Sue comió 4\\xa0veces más galletas que su hermana.', 'Su hermana se comió 5\\xa0galletas el lunes y 13 al día siguiente.']\nnew_fact = infer_new_fact(selected) # 'La ingesta de galletas de Sue el lunes fue de 4\\xa0*\\xa05\\xa0=\\xa020.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El martes, comió el doble de galletas que su hermana.', 'Su hermana se comió 5\\xa0galletas el lunes y 13 al día siguiente.']\nnew_fact = infer_new_fact(selected) # 'La ingesta de galletas de Sue el martes fue de 2\\xa0*\\xa013\\xa0=\\xa026.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La ingesta de galletas de Sue el lunes fue de 4\\xa0*\\xa05\\xa0=\\xa020.', 'La ingesta de galletas de Sue el martes fue de 2\\xa0*\\xa013\\xa0=\\xa026.']\nnew_fact = infer_new_fact(selected) # 'El total de galletas que Sue consumió es de 20\\xa0+\\xa026\\xa0=\\xa046.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Su hermana se comió 5\\xa0galletas el lunes y 13 al día siguiente.']\nnew_fact = infer_new_fact(selected) # 'La hermana de Sue se comió un total de 5\\xa0+\\xa013\\xa0=\\xa018\\xa0galletas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El total de galletas que Sue consumió es de 20\\xa0+\\xa026\\xa0=\\xa046.', 'La hermana de Sue se comió un total de 5\\xa0+\\xa013\\xa0=\\xa018\\xa0galletas.']\nnew_fact = infer_new_fact(selected) # 'Se comió 46\\xa0-\\xa018\\xa0=\\xa028\\xa0galletas más.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El lunes, Sue comió 4\\xa0veces más galletas que su hermana.', 'Si 1\\xa0galleta tiene 200\\xa0calorías,']\nnew_fact = infer_new_fact(selected) # 'Sue consumió 28\\xa0*\\xa0200\\xa0=\\xa05600\\xa0calorías más.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuántas calorías más consumió Sue que su hermana?', 'Sue consumió 28\\xa0*\\xa0200\\xa0=\\xa05600\\xa0calorías más.']\nnew_fact = infer_new_fact(selected) # 'The answer is 5,600'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '5600'"}
{"id": "GSM8K_250_19fab02dec", "context": "", "options": [], "answer": "17", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 7}, {"antecedents": [3, 7], "consequent": 8}, {"antecedents": [4, 5, 8], "consequent": 9}, {"antecedents": [1, 9], "consequent": 10}, {"antecedents": [1, 6], "consequent": 11}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: The school has 60 students because 3 x 20 = 60; int1 & sent3 -> int2: The school has 30 girls because 60 x .5 = 30; int2 & sent4 & sent5 -> int3: The third class has 3 girls because 30 - 15 - 12 = 3; int3 & sent1 -> int4: The third class has 17 boys because 20 - 3 = 17; sent1 & sent6 -> int5: The answer is 17;", "textual_logical_units": {"1": "Cada clase de una escuela tiene 20 estudiantes.", "2": "Hay 3 clases.", "3": "La escuela en su conjunto está compuesta por un 50 % de niños y un 50 % de niñas.", "4": "La primera clase tiene 15 niñas.", "5": "La segunda clase tiene 12 niñas.", "6": "¿Cuántos niños hay en la tercera clase?", "7": "La escuela tiene 60 alumnos porque 3 x 20 = 60", "8": "La escuela tiene 30 niñas porque 60 x 0,5 = 30", "9": "La tercera clase tiene 3 niñas porque 30 - 15 - 12 = 3", "10": "La tercera clase tiene 17 niños porque 20 - 3 = 17", "11": "The answer is 17"}, "human_translated": true, "code_input": "####\nfacts = [ 'Cada clase de una escuela tiene 20\\xa0estudiantes.',\n  'Hay 3\\xa0clases.',\n  'La escuela en su conjunto está compuesta por un 50\\xa0% de niños y un 50\\xa0% de niñas.',\n  'La primera clase tiene 15\\xa0niñas.',\n  'La segunda clase tiene 12\\xa0niñas.']\nquestion = '¿Cuántos niños hay en la tercera clase?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Cada clase de una escuela tiene 20\\xa0estudiantes.', 'Hay 3\\xa0clases.']\nnew_fact = infer_new_fact(selected) # 'La escuela tiene 60\\xa0alumnos porque 3\\xa0x\\xa020\\xa0=\\xa060'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La escuela en su conjunto está compuesta por un 50\\xa0% de niños y un 50\\xa0% de niñas.', 'La escuela tiene 60\\xa0alumnos porque 3\\xa0x\\xa020\\xa0=\\xa060']\nnew_fact = infer_new_fact(selected) # 'La escuela tiene 30\\xa0niñas porque 60\\xa0x\\xa00,5\\xa0=\\xa030'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La primera clase tiene 15\\xa0niñas.', 'La segunda clase tiene 12\\xa0niñas.', 'La escuela tiene 30\\xa0niñas porque 60\\xa0x\\xa00,5\\xa0=\\xa030']\nnew_fact = infer_new_fact(selected) # 'La tercera clase tiene 3\\xa0niñas porque 30\\xa0-\\xa015\\xa0-\\xa012\\xa0=\\xa03'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada clase de una escuela tiene 20\\xa0estudiantes.', 'La tercera clase tiene 3\\xa0niñas porque 30\\xa0-\\xa015\\xa0-\\xa012\\xa0=\\xa03']\nnew_fact = infer_new_fact(selected) # 'La tercera clase tiene 17\\xa0niños porque 20\\xa0-\\xa03\\xa0=\\xa017'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada clase de una escuela tiene 20\\xa0estudiantes.', '¿Cuántos niños hay en la tercera clase?']\nnew_fact = infer_new_fact(selected) # 'The answer is 17'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '17'"}
{"id": "GSM8K_251_a9450aed84", "context": "", "options": [], "answer": "70", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Travis had 61 - 9 = 52 apps after deleting the ones he didn't use.; int1 & sent2 -> int2: After downloading some more he now has 52 + 18 = 70 apps on his tablet.; int2 & sent3 -> int3: The answer is 70;", "textual_logical_units": {"1": "Travis tenía 61 aplicaciones en su tablet.", "2": "Eliminó 9 aplicaciones que ya no usaba y descargó 18 más.", "3": "¿Cuántas aplicaciones hay en su tablet ahora?", "4": "Travis tenía 61 - 9 = 52 aplicaciones después de eliminar las que no usaba.", "5": "Después de descargar algunas más, ahora tiene 52 + 18 = 70 aplicaciones en su tablet.", "6": "The answer is 70"}, "human_translated": true, "code_input": "####\nfacts = ['Travis tenía 61\\xa0aplicaciones en su tablet.', 'Eliminó 9\\xa0aplicaciones que ya no usaba y descargó 18\\xa0más.']\nquestion = '¿Cuántas aplicaciones hay en su tablet ahora?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Travis tenía 61\\xa0aplicaciones en su tablet.', 'Eliminó 9\\xa0aplicaciones que ya no usaba y descargó 18\\xa0más.']\nnew_fact = infer_new_fact(selected) # 'Travis tenía 61\\xa0-\\xa09\\xa0=\\xa052\\xa0aplicaciones después de eliminar las que no usaba.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Eliminó 9\\xa0aplicaciones que ya no usaba y descargó 18\\xa0más.', 'Travis tenía 61\\xa0-\\xa09\\xa0=\\xa052\\xa0aplicaciones después de eliminar las que no usaba.']\nnew_fact = infer_new_fact(selected) # 'Después de descargar algunas más, ahora tiene 52\\xa0+\\xa018\\xa0=\\xa070\\xa0aplicaciones en su tablet.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas aplicaciones hay en su tablet ahora?', 'Después de descargar algunas más, ahora tiene 52\\xa0+\\xa018\\xa0=\\xa070\\xa0aplicaciones en su tablet.']\nnew_fact = infer_new_fact(selected) # 'The answer is 70'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '70'"}
{"id": "GSM8K_252_58daff43f0", "context": "", "options": [], "answer": "73", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 5}, {"antecedents": [1, 3], "consequent": 6}, {"antecedents": [2, 6], "consequent": 7}, {"antecedents": [6, 7], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}, {"antecedents": [4, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent1 -> int1: The total number of animals that Rick killed while hunting yesterday is 15+10 = 25; sent1 & sent3 -> int2: Today, Rick killed three fewer cougars than the previous night, a total of 15-3 = 12 cougars.; int2 & sent2 -> int3: He also killed three times as many wolves as cougars today, a total of 3*12 = 36 wolves.; int2 & int3 -> int4: Together, his hunt today yielded 36+12 = 48 animals.; int1 & int4 -> int5: In total, he has 48+25 = 73 animals from the hunt.; int5 & sent4 -> int6: The answer is 73;", "textual_logical_units": {"1": "Anoche, Rick mató a diez lobos y 15 pumas mientras cazaba.", "2": "Hoy Rick mató el triple de lobos que de pumas y", "3": "tres pumas menos que la noche anterior.", "4": "¿Cuántos animales mató Rick?", "5": "El número total de animales que Rick mató ayer mientras cazaba es 15 + 10 = 25", "6": "Hoy, Rick mató a tres pumas menos que la noche anterior, un total de 15 - 3 = 12 pumas.", "7": "También mató hoy el triple de lobos que de pumas, un total de 3 * 12 = 36 lobos.", "8": "En conjunto, su caza de hoy fue de 36 + 12 = 48 animales.", "9": "En total, cazó 48 + 25 = 73 animales.", "10": "The answer is 73"}, "human_translated": true, "code_input": "####\nfacts = ['Anoche, Rick mató a diez lobos y 15\\xa0pumas mientras cazaba.', 'Hoy Rick mató el triple de lobos que de pumas y', 'tres pumas menos que la noche anterior.']\nquestion = '¿Cuántos animales mató Rick?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Anoche, Rick mató a diez lobos y 15\\xa0pumas mientras cazaba.']\nnew_fact = infer_new_fact(selected) # 'El número total de animales que Rick mató ayer mientras cazaba es 15\\xa0+\\xa010\\xa0=\\xa025'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Anoche, Rick mató a diez lobos y 15\\xa0pumas mientras cazaba.', 'tres pumas menos que la noche anterior.']\nnew_fact = infer_new_fact(selected) # 'Hoy, Rick mató a tres pumas menos que la noche anterior, un total de 15\\xa0-\\xa03\\xa0=\\xa012\\xa0pumas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Hoy Rick mató el triple de lobos que de pumas y', 'Hoy, Rick mató a tres pumas menos que la noche anterior, un total de 15\\xa0-\\xa03\\xa0=\\xa012\\xa0pumas.']\nnew_fact = infer_new_fact(selected) # 'También mató hoy el triple de lobos que de pumas, un total de 3\\xa0*\\xa012\\xa0=\\xa036\\xa0lobos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Hoy, Rick mató a tres pumas menos que la noche anterior, un total de 15\\xa0-\\xa03\\xa0=\\xa012\\xa0pumas.', 'También mató hoy el triple de lobos que de pumas, un total de 3\\xa0*\\xa012\\xa0=\\xa036\\xa0lobos.']\nnew_fact = infer_new_fact(selected) # 'En conjunto, su caza de hoy fue de 36\\xa0+\\xa012\\xa0=\\xa048\\xa0animales.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El número total de animales que Rick mató ayer mientras cazaba es 15\\xa0+\\xa010\\xa0=\\xa025', 'En conjunto, su caza de hoy fue de 36\\xa0+\\xa012\\xa0=\\xa048\\xa0animales.']\nnew_fact = infer_new_fact(selected) # 'En total, cazó 48\\xa0+\\xa025\\xa0=\\xa073\\xa0animales.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos animales mató Rick?', 'En total, cazó 48\\xa0+\\xa025\\xa0=\\xa073\\xa0animales.']\nnew_fact = infer_new_fact(selected) # 'The answer is 73'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '73'"}
{"id": "GSM8K_253_1faf68b44c", "context": "", "options": [], "answer": "18", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: First multiply Bill's starting floor number by 4: 3 * 4 = 12; int1 & sent2 -> int2: Then add six to find the ending floor Bill is on: 12 + 6 = 18; int2 & sent3 -> int3: The answer is 18;", "textual_logical_units": {"1": "Bill comienza en el tercer piso.", "2": "Coge el ascensor hasta el piso que equivale a 4 veces su piso inicial más 6.", "3": "¿En qué piso está Bill ahora?", "4": "Primero, multiplica el número del piso inicial de Bill por 4: 3 * 4 = 12", "5": "Luego, suma seis para encontrar el piso final en el que se encuentra Bill: 12 + 6 = 18", "6": "The answer is 18"}, "human_translated": true, "code_input": "####\nfacts = ['Bill comienza en el tercer piso.', 'Coge el ascensor hasta el piso que equivale a 4\\xa0veces su piso inicial más 6.']\nquestion = '¿En qué piso está Bill ahora?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Bill comienza en el tercer piso.', 'Coge el ascensor hasta el piso que equivale a 4\\xa0veces su piso inicial más 6.']\nnew_fact = infer_new_fact(selected) # 'Primero, multiplica el número del piso inicial de Bill por 4: 3\\xa0*\\xa04\\xa0=\\xa012'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Coge el ascensor hasta el piso que equivale a 4\\xa0veces su piso inicial más 6.', 'Primero, multiplica el número del piso inicial de Bill por 4: 3\\xa0*\\xa04\\xa0=\\xa012']\nnew_fact = infer_new_fact(selected) # 'Luego, suma seis para encontrar el piso final en el que se encuentra Bill: 12\\xa0+\\xa06\\xa0=\\xa018'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿En qué piso está Bill ahora?', 'Luego, suma seis para encontrar el piso final en el que se encuentra Bill: 12\\xa0+\\xa06\\xa0=\\xa018']\nnew_fact = infer_new_fact(selected) # 'The answer is 18'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '18'"}
{"id": "GSM8K_254_ef307513f1", "context": "", "options": [], "answer": "84", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 6}, {"antecedents": [2, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}, {"antecedents": [5, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Anne went down the slide 30% less than Mitchel who went down 30 times so that's .30*30 = 9 times less; int1 & sent2 -> int2: Mitchel went down 30 times and Anne went down 9 times less than him for a total of 30-9 = 21 times; int2 & sent4 -> int3: Robert went down the slide 4 times as much as Anne, who went down 21 times so Robert went down the slide 4*21 = 84 times; int3 & sent5 -> int4: The answer is 84;", "textual_logical_units": {"1": "Los tres hijos de Shelly pasaron todo el día en el parque acuático.", "2": "Mitchel se lanzó 30 veces por el tobogán acuático.", "3": "Anne se lanzó un 30 % menos que Mitchel y", "4": "Robert se lanzó el cuádruple de veces que Anne.", "5": "¿Cuántas veces se lanzó Robert por el tobogán acuático?", "6": "Anne se lanzó por el tobogán un 30 % menos que Mitchel, que se lanzó 30 veces, así que eso es 0,30 * 30 = 9 veces menos", "7": "Mitchel se lanzó 30 veces y Anne se lanzó 9 veces menos que él, lo que hace un total de 30 - 9 = 21 veces", "8": "Robert se lanzó por el tobogán el cuádruple de veces que Anne, que se lanzó 21 veces, por lo que Robert se lanzó por el tobogán 4 * 21 = 84 veces", "9": "The answer is 84"}, "human_translated": true, "code_input": "####\nfacts = [ 'Los tres hijos de Shelly pasaron todo el día en el parque acuático.',\n  'Mitchel se lanzó 30\\xa0veces por el tobogán acuático.',\n  'Anne se lanzó un 30\\xa0% menos que Mitchel y',\n  'Robert se lanzó el cuádruple de veces que Anne.']\nquestion = '¿Cuántas veces se lanzó Robert por el tobogán acuático?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Mitchel se lanzó 30\\xa0veces por el tobogán acuático.', 'Anne se lanzó un 30\\xa0% menos que Mitchel y']\nnew_fact = infer_new_fact(selected) # 'Anne se lanzó por el tobogán un 30\\xa0% menos que Mitchel, que se lanzó 30\\xa0veces, así que eso es 0,30\\xa0*\\xa030\\xa0=\\xa09\\xa0veces menos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Mitchel se lanzó 30\\xa0veces por el tobogán acuático.', 'Anne se lanzó por el tobogán un 30\\xa0% menos que Mitchel, que se lanzó 30\\xa0veces, así que eso es 0,30\\xa0*\\xa030\\xa0=\\xa09\\xa0veces menos']\nnew_fact = infer_new_fact(selected) # 'Mitchel se lanzó 30\\xa0veces y Anne se lanzó 9\\xa0veces menos que él, lo que hace un total de 30\\xa0-\\xa09\\xa0=\\xa021\\xa0veces'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Robert se lanzó el cuádruple de veces que Anne.', 'Mitchel se lanzó 30\\xa0veces y Anne se lanzó 9\\xa0veces menos que él, lo que hace un total de 30\\xa0-\\xa09\\xa0=\\xa021\\xa0veces']\nnew_fact = infer_new_fact(selected) # 'Robert se lanzó por el tobogán el cuádruple de veces que Anne, que se lanzó 21\\xa0veces, por lo que Robert se lanzó por el tobogán 4\\xa0*\\xa021\\xa0=\\xa084\\xa0veces'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas veces se lanzó Robert por el tobogán acuático?', 'Robert se lanzó por el tobogán el cuádruple de veces que Anne, que se lanzó 21\\xa0veces, por lo que Robert se lanzó por el tobogán 4\\xa0*\\xa021\\xa0=\\xa084\\xa0veces']\nnew_fact = infer_new_fact(selected) # 'The answer is 84'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '84'"}
{"id": "GSM8K_255_f3d4779ee4", "context": "", "options": [], "answer": "192", "reasoning_graph_edges": [{"antecedents": [1, 3, 4], "consequent": 6}, {"antecedents": [5, 6], "consequent": 7}, {"antecedents": [1, 5], "consequent": 8}, {"antecedents": [7, 8], "consequent": 9}, {"antecedents": [5, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent1 & sent3 & sent4 -> int1: When Mr. Sylas puts an equal number of the cows he bought into the stalls, each stall gets 40/10 = 4 new cows.; int1 & sent5 -> int2: Each of the stalls gets four cows, meaning a total of 8*4 = 32 cows are placed into eight of the stalls.; sent1 & sent5 -> int3: Since each stall had 20 cows before Mr. Sylas added four into each of the stalls, the total number of cows in eight of the stalls was 8*20= 160 cows.; int2 & int3 -> int4: There are 160+32 = 192 cows in eight stalls after Mr. Sylas adds four into each of the stalls.; int4 & sent5 -> int5: The answer is 192;", "textual_logical_units": {"1": "Diez establos tienen 20 vacas cada uno.", "2": "El Sr.", "3": "Sylas compra 40 vacas y las divide en partes iguales,", "4": "de modo que pone un número igual de vacas nuevas en cada uno de los veinte establos.", "5": "¿Cuántas vacas hay en 8 de los establos?", "6": "Cuando el Sr. Sylas coloca el mismo número de vacas que compró en los establos, cada establo recibe 40 / 10 = 4 vacas nuevas.", "7": "Cada uno de los establos tiene cuatro vacas nuevas, lo que significa que se colocan un total de 8 *4 = 32 vacas en ocho de los establos.", "8": "Como cada establo tenía 20 vacas antes de que el Sr. Sylas añadiera cuatro a cada establo, el número total de vacas en ocho de los establos era de 8 * 20 = 160 vacas.", "9": "Hay 160 + 32 = 192 vacas en ocho establos después de que el Sr. Sylas añada cuatro en cada uno de los establos.", "10": "The answer is 192"}, "human_translated": true, "code_input": "####\nfacts = [ 'Diez establos tienen 20\\xa0vacas cada uno.',\n  'El Sr.',\n  'Sylas compra 40\\xa0vacas y las divide en partes iguales,',\n  'de modo que pone un número igual de vacas nuevas en cada uno de los veinte establos.']\nquestion = '¿Cuántas vacas hay en 8 de los establos?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Diez establos tienen 20\\xa0vacas cada uno.', 'Sylas compra 40\\xa0vacas y las divide en partes iguales,', 'de modo que pone un número igual de vacas nuevas en cada uno de los veinte establos.']\nnew_fact = infer_new_fact(selected) # 'Cuando el Sr. Sylas coloca el mismo número de vacas que compró en los establos, cada establo recibe 40\\xa0/\\xa010\\xa0=\\xa04\\xa0vacas nuevas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas vacas hay en 8 de los establos?', 'Cuando el Sr. Sylas coloca el mismo número de vacas que compró en los establos, cada establo recibe 40\\xa0/\\xa010\\xa0=\\xa04\\xa0vacas nuevas.']\nnew_fact = infer_new_fact(selected) # 'Cada uno de los establos tiene cuatro vacas nuevas, lo que significa que se colocan un total de 8\\xa0*4\\xa0=\\xa032\\xa0vacas en ocho de los establos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Diez establos tienen 20\\xa0vacas cada uno.', '¿Cuántas vacas hay en 8 de los establos?']\nnew_fact = infer_new_fact(selected) # 'Como cada establo tenía 20\\xa0vacas antes de que el Sr. Sylas añadiera cuatro a cada establo, el número total de vacas en ocho de los establos era de 8\\xa0*\\xa020\\xa0=\\xa0160\\xa0vacas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada uno de los establos tiene cuatro vacas nuevas, lo que significa que se colocan un total de 8\\xa0*4\\xa0=\\xa032\\xa0vacas en ocho de los establos.', 'Como cada establo tenía 20\\xa0vacas antes de que el Sr. Sylas añadiera cuatro a cada establo, el número total de vacas en ocho de los establos era de 8\\xa0*\\xa020\\xa0=\\xa0160\\xa0vacas.']\nnew_fact = infer_new_fact(selected) # 'Hay 160\\xa0+\\xa032\\xa0=\\xa0192\\xa0vacas en ocho establos después de que el Sr. Sylas añada cuatro en cada uno de los establos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas vacas hay en 8 de los establos?', 'Hay 160\\xa0+\\xa032\\xa0=\\xa0192\\xa0vacas en ocho establos después de que el Sr. Sylas añada cuatro en cada uno de los establos.']\nnew_fact = infer_new_fact(selected) # 'The answer is 192'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '192'"}
{"id": "GSM8K_256_7b552d5cd5", "context": "", "options": [], "answer": "45", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 5}, {"antecedents": [2], "consequent": 6}, {"antecedents": [2], "consequent": 7}, {"antecedents": [5, 6, 7], "consequent": 8}, {"antecedents": [4, 8], "consequent": 9}, {"antecedents": [3, 9], "consequent": 10}, {"antecedents": [1, 4], "consequent": 11}], "metadata": [], "linearized_output_en": "sent2 -> int1: Since a penny is 1 cent, then 100 pennies is equal to 100 x 1 cent = 100 cents.; sent2 -> int2: Since nickel is 5 cents, then 40 nickels is equal to 40 x 5 = 200 cents.; sent2 -> int3: Since a dime is equal to 10 cents, then 20 dimes are equal to 20 x 10 = 200 cents.; int1 & int2 & int3 -> int4: So, Brady has a total of 100 + 200 + 200 = 500 cents.; int4 & sent4 -> int5: Since a dollar is equal to 100 cents, then 500 cents is equal to 500/100 = 5 dollars.; int5 & sent3 -> int6: Thus, Brady has a total of $40 + $5 = $45 in his piggy bank.; sent1 & sent4 -> int7: The answer is 45;", "textual_logical_units": {"1": "Brady está contando el dinero de su hucha.", "2": "Tiene 100 monedas de 1 céntimo, 40 monedas de 5 céntimos, 20 monedas de 10 céntimos", "3": "y 40 monedas de un euro.", "4": "¿Cuánto tiene Brady en su hucha en euros?", "5": "Como tiene 100 monedas de 1 céntimo, tiene 100 x 1 céntimo = 100 céntimos.", "6": "Como tiene 40 monedas de 5 céntimos, tiene 40 x 5 = 200 céntimos.", "7": "Como tiene 20 monedas de 10 céntimos, tiene 20 x 10 = 200 céntimos.", "8": "Entonces, Brady tiene un total de 100 + 200 + 200 = 500 céntimos.", "9": "Como un euro es igual a 100 céntimos, 500 céntimos es igual a 500 / 100 = 5 euros.", "10": "Por lo tanto, Brady tiene un total de 40 € + 5 € = 45 € en su hucha.", "11": "The answer is 45"}, "human_translated": true, "code_input": "####\nfacts = [ 'Brady está contando el dinero de su hucha.',\n  'Tiene 100\\xa0monedas de 1\\xa0céntimo, 40\\xa0monedas de 5\\xa0céntimos, 20\\xa0monedas de 10\\xa0céntimos',\n  'y 40\\xa0monedas de un euro.']\nquestion = '¿Cuánto tiene Brady en su hucha en euros?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Tiene 100\\xa0monedas de 1\\xa0céntimo, 40\\xa0monedas de 5\\xa0céntimos, 20\\xa0monedas de 10\\xa0céntimos']\nnew_fact = infer_new_fact(selected) # 'Como tiene 100\\xa0monedas de 1\\xa0céntimo, tiene 100\\xa0x\\xa01\\xa0céntimo\\xa0=\\xa0100\\xa0céntimos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tiene 100\\xa0monedas de 1\\xa0céntimo, 40\\xa0monedas de 5\\xa0céntimos, 20\\xa0monedas de 10\\xa0céntimos']\nnew_fact = infer_new_fact(selected) # 'Como tiene 40\\xa0monedas de 5\\xa0céntimos, tiene 40\\xa0x\\xa05\\xa0=\\xa0200\\xa0céntimos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tiene 100\\xa0monedas de 1\\xa0céntimo, 40\\xa0monedas de 5\\xa0céntimos, 20\\xa0monedas de 10\\xa0céntimos']\nnew_fact = infer_new_fact(selected) # 'Como tiene 20\\xa0monedas de 10\\xa0céntimos, tiene 20\\xa0x\\xa010\\xa0=\\xa0200\\xa0céntimos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Como tiene 100\\xa0monedas de 1\\xa0céntimo, tiene 100\\xa0x\\xa01\\xa0céntimo\\xa0=\\xa0100\\xa0céntimos.', 'Como tiene 40\\xa0monedas de 5\\xa0céntimos, tiene 40\\xa0x\\xa05\\xa0=\\xa0200\\xa0céntimos.', 'Como tiene 20\\xa0monedas de 10\\xa0céntimos, tiene 20\\xa0x\\xa010\\xa0=\\xa0200\\xa0céntimos.']\nnew_fact = infer_new_fact(selected) # 'Entonces, Brady tiene un total de 100\\xa0+\\xa0200\\xa0+\\xa0200\\xa0=\\xa0500\\xa0céntimos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto tiene Brady en su hucha en euros?', 'Entonces, Brady tiene un total de 100\\xa0+\\xa0200\\xa0+\\xa0200\\xa0=\\xa0500\\xa0céntimos.']\nnew_fact = infer_new_fact(selected) # 'Como un euro es igual a 100\\xa0céntimos, 500\\xa0céntimos es igual a 500\\xa0/\\xa0100\\xa0=\\xa05\\xa0euros.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y 40\\xa0monedas de un euro.', 'Como un euro es igual a 100\\xa0céntimos, 500\\xa0céntimos es igual a 500\\xa0/\\xa0100\\xa0=\\xa05\\xa0euros.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, Brady tiene un total de 40\\xa0€\\xa0+\\xa05\\xa0€\\xa0=\\xa045\\xa0€ en su hucha.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Brady está contando el dinero de su hucha.', '¿Cuánto tiene Brady en su hucha en euros?']\nnew_fact = infer_new_fact(selected) # 'The answer is 45'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '45'"}
{"id": "GSM8K_257_14b15c1a0f", "context": "", "options": [], "answer": "5600", "reasoning_graph_edges": [{"antecedents": [1, 3], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [2, 6], "consequent": 7}, {"antecedents": [7], "consequent": 8}, {"antecedents": [4, 8], "consequent": 9}], "metadata": [], "linearized_output_en": "sent1 & sent3 -> int1: First find how many 10-foot sections are in the redwood: 200 feet / 10 feet/section = 20 sections; int1 & sent1 -> int2: Then multiply the number of sections by the weight of each section to find the total weight of the redwood: 20 sections * 400 pounds/section = 8000 pounds; int2 & sent2 -> int3: Then find the amount of the wood the termites ate: 8000 pounds * 30% = 2400 pounds; int3 -> int4: Then subtract that amount from the total weight of the wood: 8000 pounds - 2400 pounds = 5600 pounds; int4 & sent4 -> int5: The answer is 5600;", "textual_logical_units": {"1": "Cada sección sólida de 10 metros de una secuoya pesa 400 kilos.", "2": "Las termitas se comieron el 30 % de la madera de esta secuoya.", "3": "Si la secuoya mide 200 metros de altura,", "4": "¿cuánto pesa?", "5": "Primero, encuentra cuántas secciones de 10 metros hay en la secuoya: 200 metros / 10 metros/sección = 20 secciones", "6": "Luego, multiplica el número de secciones por el peso de cada sección para encontrar el peso total de la secuoya: 20 secciones * 400 kilos/sección = 8000 kilos", "7": "Luego, encuentra la cantidad de madera que se comieron las termitas: 8000 kilos * 30 % = 2400 kilos", "8": "Luego, resta esa cantidad del peso total de la madera: 8000 kilos - 2400 kilos = 5600 kilos", "9": "The answer is 5600"}, "human_translated": true, "code_input": "####\nfacts = [ 'Cada sección sólida de 10\\xa0metros de una secuoya pesa 400\\xa0kilos.',\n  'Las termitas se comieron el 30\\xa0% de la madera de esta secuoya.',\n  'Si la secuoya mide 200\\xa0metros de altura,']\nquestion = '¿cuánto pesa?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Cada sección sólida de 10\\xa0metros de una secuoya pesa 400\\xa0kilos.', 'Si la secuoya mide 200\\xa0metros de altura,']\nnew_fact = infer_new_fact(selected) # 'Primero, encuentra cuántas secciones de 10\\xa0metros hay en la secuoya: 200\\xa0metros\\xa0/\\xa010\\xa0metros/sección\\xa0=\\xa020\\xa0secciones'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Cada sección sólida de 10\\xa0metros de una secuoya pesa 400\\xa0kilos.', 'Primero, encuentra cuántas secciones de 10\\xa0metros hay en la secuoya: 200\\xa0metros\\xa0/\\xa010\\xa0metros/sección\\xa0=\\xa020\\xa0secciones']\nnew_fact = infer_new_fact(selected) # 'Luego, multiplica el número de secciones por el peso de cada sección para encontrar el peso total de la secuoya: 20\\xa0secciones\\xa0*\\xa0400\\xa0kilos/sección\\xa0=\\xa08000\\xa0kilos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Las termitas se comieron el 30\\xa0% de la madera de esta secuoya.', 'Luego, multiplica el número de secciones por el peso de cada sección para encontrar el peso total de la secuoya: 20\\xa0secciones\\xa0*\\xa0400\\xa0kilos/sección\\xa0=\\xa08000\\xa0kilos']\nnew_fact = infer_new_fact(selected) # 'Luego, encuentra la cantidad de madera que se comieron las termitas: 8000\\xa0kilos\\xa0*\\xa030\\xa0%\\xa0=\\xa02400\\xa0kilos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Luego, encuentra la cantidad de madera que se comieron las termitas: 8000\\xa0kilos\\xa0*\\xa030\\xa0%\\xa0=\\xa02400\\xa0kilos']\nnew_fact = infer_new_fact(selected) # 'Luego, resta esa cantidad del peso total de la madera: 8000\\xa0kilos\\xa0-\\xa02400\\xa0kilos\\xa0=\\xa05600\\xa0kilos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿cuánto pesa?', 'Luego, resta esa cantidad del peso total de la madera: 8000\\xa0kilos\\xa0-\\xa02400\\xa0kilos\\xa0=\\xa05600\\xa0kilos']\nnew_fact = infer_new_fact(selected) # 'The answer is 5600'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '5600'"}
{"id": "GSM8K_258_6adcaec483", "context": "", "options": [], "answer": "6", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 -> int1: First multiply the late fee per book by the number of books: $0.50/book * 8 books = $4.00; int1 & sent3 -> int2: Then add the \"more than a week overdue\" fee to the answer from the previous step to find the total: $4.00 + $2.00 = $6.00; int2 & sent4 -> int3: The answer is 6;", "textual_logical_units": {"1": "Nancy devolverá los libros atrasados a la biblioteca.", "2": "Debe 0,50 € por cada uno de los 8 libros,", "3": "más un recargo fijo de 2,00 € por tener al menos un libro con más de una semana de retraso.", "4": "¿Cuánto tiene que pagar en total?", "5": "Primero, multiplica el recargo por retraso por libro por el número de libros: 0,50 €/libro * 8 libros = 4,00 €", "6": "A continuación, añade el cargo por «más de una semana de retraso» a la respuesta del paso anterior para calcular el total: 4,00 € + 2,00 € = 6,00 €", "7": "The answer is 6"}, "human_translated": true, "code_input": "####\nfacts = [ 'Nancy devolverá los libros atrasados a la biblioteca.',\n  'Debe 0,50\\xa0€ por cada uno de los 8\\xa0libros,',\n  'más un recargo fijo de 2,00\\xa0€ por tener al menos un libro con más de una semana de retraso.']\nquestion = '¿Cuánto tiene que pagar en total?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Debe 0,50\\xa0€ por cada uno de los 8\\xa0libros,']\nnew_fact = infer_new_fact(selected) # 'Primero, multiplica el recargo por retraso por libro por el número de libros: 0,50\\xa0€/libro\\xa0*\\xa08\\xa0libros\\xa0=\\xa04,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['más un recargo fijo de 2,00\\xa0€ por tener al menos un libro con más de una semana de retraso.', 'Primero, multiplica el recargo por retraso por libro por el número de libros: 0,50\\xa0€/libro\\xa0*\\xa08\\xa0libros\\xa0=\\xa04,00\\xa0€']\nnew_fact = infer_new_fact(selected) # 'A continuación, añade el cargo por «más de una semana de retraso» a la respuesta del paso anterior para calcular el total: 4,00\\xa0€\\xa0+\\xa02,00\\xa0€\\xa0=\\xa06,00\\xa0€'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto tiene que pagar en total?', 'A continuación, añade el cargo por «más de una semana de retraso» a la respuesta del paso anterior para calcular el total: 4,00\\xa0€\\xa0+\\xa02,00\\xa0€\\xa0=\\xa06,00\\xa0€']\nnew_fact = infer_new_fact(selected) # 'The answer is 6'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '6'"}
{"id": "GSM8K_259_fdf8ed1f57", "context": "", "options": [], "answer": "168", "reasoning_graph_edges": [{"antecedents": [1, 4], "consequent": 5}, {"antecedents": [5], "consequent": 6}, {"antecedents": [3, 5], "consequent": 7}, {"antecedents": [2, 7], "consequent": 8}, {"antecedents": [7, 8], "consequent": 9}, {"antecedents": [6, 9], "consequent": 10}, {"antecedents": [1, 4], "consequent": 11}], "metadata": [], "linearized_output_en": "sent1 & sent4 -> int1: Since Andrea has 8 more apples than Jamal, if Andrea has 52 apples, Jamal has 52-8 = 44 apples.; int1 -> int2: The total number of apples is 44+52 = 96; int1 & sent3 -> int3: Jamal has 4 more bananas than apples, meaning he has 44+4 = 48 bananas.; int3 & sent2 -> int4: Andrea has half as many bananas as Jamal, which totals 48/2 = 24 bananas.; int3 & int4 -> int5: There are a total of 48+24 = 72 bananas.; int2 & int5 -> int6: Altogether, there are 96 apples + 72 bananas = 168 fruits; sent1 & sent4 -> int7: The answer is 168;", "textual_logical_units": {"1": "Andrea tiene 8 manzanas más que Jamal y", "2": "la mitad de plátanos que Jamal.", "3": "Jamal tiene 4 plátanos más que manzanas.", "4": "¿Cuántas frutas hay si Andrea tiene 52 manzanas?", "5": "Como Andrea tiene 8 manzanas más que Jamal, si Andrea tiene 52 manzanas, Jamal tiene 52 - 8 = 44 manzanas.", "6": "El número total de manzanas es 44 + 52 = 96", "7": "Jamal tiene 4 plátanos más que manzanas, lo que significa que tiene 44 + 4 = 48 plátanos.", "8": "Andrea tiene la mitad de plátanos que Jamal, lo que suma 48 / 2 = 24 plátanos.", "9": "Hay un total de 48 + 24 = 72 plátanos.", "10": "En total, hay 96 manzanas + 72 plátanos = 168 frutas", "11": "The answer is 168"}, "human_translated": true, "code_input": "####\nfacts = ['Andrea tiene 8\\xa0manzanas más que Jamal y', 'la mitad de plátanos que Jamal.', 'Jamal tiene 4\\xa0plátanos más que manzanas.']\nquestion = '¿Cuántas frutas hay si Andrea tiene 52\\xa0manzanas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Andrea tiene 8\\xa0manzanas más que Jamal y', '¿Cuántas frutas hay si Andrea tiene 52\\xa0manzanas?']\nnew_fact = infer_new_fact(selected) # 'Como Andrea tiene 8\\xa0manzanas más que Jamal, si Andrea tiene 52\\xa0manzanas, Jamal tiene 52\\xa0-\\xa08\\xa0=\\xa044\\xa0manzanas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Como Andrea tiene 8\\xa0manzanas más que Jamal, si Andrea tiene 52\\xa0manzanas, Jamal tiene 52\\xa0-\\xa08\\xa0=\\xa044\\xa0manzanas.']\nnew_fact = infer_new_fact(selected) # 'El número total de manzanas es 44\\xa0+\\xa052\\xa0=\\xa096'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Jamal tiene 4\\xa0plátanos más que manzanas.', 'Como Andrea tiene 8\\xa0manzanas más que Jamal, si Andrea tiene 52\\xa0manzanas, Jamal tiene 52\\xa0-\\xa08\\xa0=\\xa044\\xa0manzanas.']\nnew_fact = infer_new_fact(selected) # 'Jamal tiene 4\\xa0plátanos más que manzanas, lo que significa que tiene 44\\xa0+\\xa04\\xa0=\\xa048\\xa0plátanos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['la mitad de plátanos que Jamal.', 'Jamal tiene 4\\xa0plátanos más que manzanas, lo que significa que tiene 44\\xa0+\\xa04\\xa0=\\xa048\\xa0plátanos.']\nnew_fact = infer_new_fact(selected) # 'Andrea tiene la mitad de plátanos que Jamal, lo que suma 48\\xa0/\\xa02\\xa0=\\xa024\\xa0plátanos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Jamal tiene 4\\xa0plátanos más que manzanas, lo que significa que tiene 44\\xa0+\\xa04\\xa0=\\xa048\\xa0plátanos.', 'Andrea tiene la mitad de plátanos que Jamal, lo que suma 48\\xa0/\\xa02\\xa0=\\xa024\\xa0plátanos.']\nnew_fact = infer_new_fact(selected) # 'Hay un total de 48\\xa0+\\xa024\\xa0=\\xa072\\xa0plátanos.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El número total de manzanas es 44\\xa0+\\xa052\\xa0=\\xa096', 'Hay un total de 48\\xa0+\\xa024\\xa0=\\xa072\\xa0plátanos.']\nnew_fact = infer_new_fact(selected) # 'En total, hay 96\\xa0manzanas\\xa0+\\xa072\\xa0plátanos\\xa0=\\xa0168\\xa0frutas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Andrea tiene 8\\xa0manzanas más que Jamal y', '¿Cuántas frutas hay si Andrea tiene 52\\xa0manzanas?']\nnew_fact = infer_new_fact(selected) # 'The answer is 168'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '168'"}
{"id": "GSM8K_260_d1c764238f", "context": "", "options": [], "answer": "11", "reasoning_graph_edges": [{"antecedents": [2], "consequent": 4}, {"antecedents": [1, 4], "consequent": 5}, {"antecedents": [1, 5], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent2 -> int1: Carla will bake a total of 36 + 30 = 66 cookies.; int1 & sent1 -> int2: Since 1 dozen is equal to 12, then 66 cookies are equal to 66/12 = 5.5 dozens.; int2 & sent1 -> int3: Hence, Carla will need 5.5 x 2 = 11 cups of flour.; int3 & sent3 -> int4: The answer is 11;", "textual_logical_units": {"1": "Se necesitan dos tazas de harina para hacer una docena de galletas.", "2": "Carla hará 36 galletas hoy y 30 galletas mañana.", "3": "¿Cuántas tazas de harina necesitará Carla para hornear las galletas hoy y mañana?", "4": "Carla horneará un total de 36 + 30 = 66 galletas.", "5": "Como 1 docena es igual a 12, entonces 66 galletas equivalen a 66 / 12 = 5,5 docenas.", "6": "Por lo tanto, Carla necesitará 5,5 x 2 = 11 tazas de harina.", "7": "The answer is 11"}, "human_translated": true, "code_input": "####\nfacts = ['Se necesitan dos tazas de harina para hacer una docena de galletas.', 'Carla hará 36\\xa0galletas hoy y 30\\xa0galletas mañana.']\nquestion = '¿Cuántas tazas de harina necesitará Carla para hornear las galletas hoy y mañana?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Carla hará 36\\xa0galletas hoy y 30\\xa0galletas mañana.']\nnew_fact = infer_new_fact(selected) # 'Carla horneará un total de 36\\xa0+\\xa030\\xa0=\\xa066\\xa0galletas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Se necesitan dos tazas de harina para hacer una docena de galletas.', 'Carla horneará un total de 36\\xa0+\\xa030\\xa0=\\xa066\\xa0galletas.']\nnew_fact = infer_new_fact(selected) # 'Como 1\\xa0docena es igual a 12, entonces 66\\xa0galletas equivalen a 66\\xa0/\\xa012\\xa0=\\xa05,5\\xa0docenas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Se necesitan dos tazas de harina para hacer una docena de galletas.', 'Como 1\\xa0docena es igual a 12, entonces 66\\xa0galletas equivalen a 66\\xa0/\\xa012\\xa0=\\xa05,5\\xa0docenas.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, Carla necesitará 5,5\\xa0x\\xa02\\xa0=\\xa011\\xa0tazas de harina.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas tazas de harina necesitará Carla para hornear las galletas hoy y mañana?', 'Por lo tanto, Carla necesitará 5,5\\xa0x\\xa02\\xa0=\\xa011\\xa0tazas de harina.']\nnew_fact = infer_new_fact(selected) # 'The answer is 11'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '11'"}
{"id": "GSM8K_261_b200c99def", "context": "", "options": [], "answer": "62", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 3}, {"antecedents": [2, 3], "consequent": 4}, {"antecedents": [4], "consequent": 5}, {"antecedents": [2, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: A third of the pennies in a cup is 9,300/3 = 3,100.; int1 & sent2 -> int2: Number of pennies in the stack is 3,100*2 = 6,200.; int2 -> int3: Total dollar amount in the stack is 6,200/100 = 62.; int3 & sent2 -> int4: The answer is 62;", "textual_logical_units": {"1": "Hay 9300 monedas de un céntimo en un bote.", "2": "¿Cuál es la cantidad total en euros de una pila que contiene dos tercios de las monedas del bote?", "3": "Un tercio de las monedas del bote son 9300 / 3 = 3100.", "4": "El número de céntimos de la pila es 3100 * 2 = 6200.", "5": "El importe total en euros de la pila es de 6200 / 100 = 62.", "6": "The answer is 62"}, "human_translated": true, "code_input": "####\nfacts = ['Hay 9300\\xa0monedas de un céntimo en un bote.']\nquestion = '¿Cuál es la cantidad total en euros de una pila que contiene dos tercios de las monedas del bote?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Hay 9300\\xa0monedas de un céntimo en un bote.', '¿Cuál es la cantidad total en euros de una pila que contiene dos tercios de las monedas del bote?']\nnew_fact = infer_new_fact(selected) # 'Un tercio de las monedas del bote son 9300\\xa0/\\xa03\\xa0=\\xa03100.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál es la cantidad total en euros de una pila que contiene dos tercios de las monedas del bote?', 'Un tercio de las monedas del bote son 9300\\xa0/\\xa03\\xa0=\\xa03100.']\nnew_fact = infer_new_fact(selected) # 'El número de céntimos de la pila es 3100\\xa0*\\xa02\\xa0=\\xa06200.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El número de céntimos de la pila es 3100\\xa0*\\xa02\\xa0=\\xa06200.']\nnew_fact = infer_new_fact(selected) # 'El importe total en euros de la pila es de 6200\\xa0/\\xa0100\\xa0=\\xa062.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuál es la cantidad total en euros de una pila que contiene dos tercios de las monedas del bote?', 'El importe total en euros de la pila es de 6200\\xa0/\\xa0100\\xa0=\\xa062.']\nnew_fact = infer_new_fact(selected) # 'The answer is 62'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '62'"}
{"id": "GSM8K_262_49eb131d8e", "context": "", "options": [], "answer": "270", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}], "metadata": [], "linearized_output_en": "sent1 -> int1: Maddison has 5 x 50 = 250 marbles from her boxes.; int1 & sent2 -> int2: So she has a total of 250 + 20 = 270 marbles now.; int2 & sent3 -> int3: The answer is 270;", "textual_logical_units": {"1": "Maddison tiene 5 cajas con 50 canicas en cada caja.", "2": "Luego, recibe 20 canicas de su amiga.", "3": "¿Cuántas canicas tiene ahora?", "4": "Maddison tiene 5 x 50 = 250 canicas en sus cajas.", "5": "Así que ahora tiene un total de 250 + 20 = 270 canicas.", "6": "The answer is 270"}, "human_translated": true, "code_input": "####\nfacts = ['Maddison tiene 5\\xa0cajas con 50\\xa0canicas en cada caja.', 'Luego, recibe 20\\xa0canicas de su amiga.']\nquestion = '¿Cuántas canicas tiene ahora?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Maddison tiene 5\\xa0cajas con 50\\xa0canicas en cada caja.']\nnew_fact = infer_new_fact(selected) # 'Maddison tiene 5\\xa0x\\xa050\\xa0=\\xa0250\\xa0canicas en sus cajas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Luego, recibe 20\\xa0canicas de su amiga.', 'Maddison tiene 5\\xa0x\\xa050\\xa0=\\xa0250\\xa0canicas en sus cajas.']\nnew_fact = infer_new_fact(selected) # 'Así que ahora tiene un total de 250\\xa0+\\xa020\\xa0=\\xa0270\\xa0canicas.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas canicas tiene ahora?', 'Así que ahora tiene un total de 250\\xa0+\\xa020\\xa0=\\xa0270\\xa0canicas.']\nnew_fact = infer_new_fact(selected) # 'The answer is 270'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '270'"}
{"id": "GSM8K_263_763de04a2c", "context": "", "options": [], "answer": "8", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [5, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Ferdinand:6/2=3 trees; int1 & sent3 -> int2: Harry:5+2(3)=5+6=11 trees; int1 & int2 -> int3: 11-3=8 trees; int3 & sent4 -> int4: The answer is 8;", "textual_logical_units": {"1": "Hay 6 árboles en el patio de Chris.", "2": "Ferdinand tiene la mitad de árboles que Chris.", "3": "Harry tiene el quíntuple del doble de árboles de los que tiene Ferdinand.", "4": "¿Cuántos árboles más hay en el patio de Harry que en el de Ferdinand?", "5": "Ferdinand: 6 / 2 = 3 árboles", "6": "Harry: 5 + 2 * (3) = 5 + 6 = 11 árboles", "7": "11 - 3 = 8 árboles", "8": "The answer is 8"}, "human_translated": true, "code_input": "####\nfacts = [ 'Hay 6\\xa0árboles en el patio de Chris.',\n  'Ferdinand tiene la mitad de árboles que Chris.',\n  'Harry tiene el quíntuple del doble de árboles de los que tiene Ferdinand.']\nquestion = '¿Cuántos árboles más hay en el patio de Harry que en el de Ferdinand?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Hay 6\\xa0árboles en el patio de Chris.', 'Ferdinand tiene la mitad de árboles que Chris.']\nnew_fact = infer_new_fact(selected) # 'Ferdinand: 6\\xa0/\\xa02\\xa0=\\xa03\\xa0árboles'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Harry tiene el quíntuple del doble de árboles de los que tiene Ferdinand.', 'Ferdinand: 6\\xa0/\\xa02\\xa0=\\xa03\\xa0árboles']\nnew_fact = infer_new_fact(selected) # 'Harry: 5\\xa0+\\xa02\\xa0*\\xa0(3)\\xa0=\\xa05\\xa0+\\xa06\\xa0=\\xa011\\xa0árboles'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Ferdinand: 6\\xa0/\\xa02\\xa0=\\xa03\\xa0árboles', 'Harry: 5\\xa0+\\xa02\\xa0*\\xa0(3)\\xa0=\\xa05\\xa0+\\xa06\\xa0=\\xa011\\xa0árboles']\nnew_fact = infer_new_fact(selected) # '11\\xa0-\\xa03\\xa0=\\xa08\\xa0árboles'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántos árboles más hay en el patio de Harry que en el de Ferdinand?', '11\\xa0-\\xa03\\xa0=\\xa08\\xa0árboles']\nnew_fact = infer_new_fact(selected) # 'The answer is 8'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '8'"}
{"id": "GSM8K_264_743e854af1", "context": "", "options": [], "answer": "400", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 4}, {"antecedents": [2, 4], "consequent": 5}, {"antecedents": [1, 4, 5], "consequent": 6}, {"antecedents": [3, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 -> int1: Samantha has $100+$25 = $125.; int1 & sent2 -> int2: Daisy has $125+$50 = $175.; int1 & int2 & sent1 -> int3: The total amount of money that the three girls have is $175+$125+$100 = $400.; int3 & sent3 -> int4: The answer is 400;", "textual_logical_units": {"1": "Carmen tiene 100 €, Samantha tiene 25 € más que Carmen", "2": "y Daisy tiene 50 € más que Samantha.", "3": "¿Cuánto tienen las tres chicas juntas?", "4": "Samantha tiene 100 € + 25 € = 125 €.", "5": "Daisy tiene 125 €+ 50 € = 175 €.", "6": "La cantidad total de dinero que tienen las tres chicas es de 175 € + 125 € + 100 € = 400 €.", "7": "The answer is 400"}, "human_translated": true, "code_input": "####\nfacts = ['Carmen tiene 100\\xa0€, Samantha tiene 25\\xa0€ más que Carmen', 'y Daisy tiene 50\\xa0€ más que Samantha.']\nquestion = '¿Cuánto tienen las tres chicas juntas?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Carmen tiene 100\\xa0€, Samantha tiene 25\\xa0€ más que Carmen']\nnew_fact = infer_new_fact(selected) # 'Samantha tiene 100\\xa0€\\xa0+\\xa025\\xa0€\\xa0=\\xa0125\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y Daisy tiene 50\\xa0€ más que Samantha.', 'Samantha tiene 100\\xa0€\\xa0+\\xa025\\xa0€\\xa0=\\xa0125\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Daisy tiene 125\\xa0€+\\xa050\\xa0€\\xa0=\\xa0175\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Carmen tiene 100\\xa0€, Samantha tiene 25\\xa0€ más que Carmen', 'Samantha tiene 100\\xa0€\\xa0+\\xa025\\xa0€\\xa0=\\xa0125\\xa0€.', 'Daisy tiene 125\\xa0€+\\xa050\\xa0€\\xa0=\\xa0175\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'La cantidad total de dinero que tienen las tres chicas es de 175\\xa0€\\xa0+\\xa0125\\xa0€\\xa0+\\xa0100\\xa0€\\xa0=\\xa0400\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto tienen las tres chicas juntas?', 'La cantidad total de dinero que tienen las tres chicas es de 175\\xa0€\\xa0+\\xa0125\\xa0€\\xa0+\\xa0100\\xa0€\\xa0=\\xa0400\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'The answer is 400'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '400'"}
{"id": "GSM8K_265_27a7504bc5", "context": "", "options": [], "answer": "9500", "reasoning_graph_edges": [{"antecedents": [3, 4], "consequent": 8}, {"antecedents": [3, 5], "consequent": 9}, {"antecedents": [8, 9], "consequent": 10}, {"antecedents": [1, 2], "consequent": 11}, {"antecedents": [6, 7, 11], "consequent": 12}], "metadata": [], "linearized_output_en": "sent3 & sent4 -> int1: The brokerage fee is $350 000 x 5/100 = $17500.; sent3 & sent5 -> int2: The transfer fee is $350 000 x 12/100 = $42000.; int1 & int2 -> int3: The total price of the house is $350 000 + $17500 + $42000 = $409 500.; sent1 & sent2 -> int4: So, it is $409 500 - $400 000 = $9500 more than Mrs. Cruz's budget.; int4 & sent6 & sent7 -> int5: The answer is 9500;", "textual_logical_units": {"1": "La Sra.", "2": "Cruz busca una casa que no supere su presupuesto de 400 000 €.", "3": "Vio una propiedad que tiene un precio de venta de 350 000 €.", "4": "Además de eso, el comprador tiene que pagar una comisión de agencia que es el 5 % del precio de venta", "5": "y también el impuesto de transferencia que es del 12 % del precio de venta.", "6": "¿Por cuánto supera el precio total de la casa el presupuesto de la Sra.", "7": "Cruz?", "8": "La comisión de agencia es de 350 000 € x 5 / 100 = 17 500 €.", "9": "El impuesto de transferencia es de 350 000 € x 12 / 100 = 42 000 €.", "10": "El precio total de la casa es de 350 000 € + 17 500 € + 42 000 € = 409 500 €.", "11": "Por lo tanto, supera en 409 500 € - 400 000 € = 9500 € el presupuesto de la Sra. Cruz.", "12": "The answer is 9500"}, "human_translated": true, "code_input": "####\nfacts = [ 'La Sra.',\n  'Cruz busca una casa que no supere su presupuesto de 400\\xa0000\\xa0€.',\n  'Vio una propiedad que tiene un precio de venta de 350\\xa0000\\xa0€.',\n  'Además de eso, el comprador tiene que pagar una comisión de agencia que es el 5\\xa0% del precio de venta',\n  'y también el impuesto de transferencia que es del 12\\xa0% del precio de venta.',\n  '¿Por cuánto supera el precio total de la casa el presupuesto de la Sra.']\nquestion = 'Cruz?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Vio una propiedad que tiene un precio de venta de 350\\xa0000\\xa0€.', 'Además de eso, el comprador tiene que pagar una comisión de agencia que es el 5\\xa0% del precio de venta']\nnew_fact = infer_new_fact(selected) # 'La comisión de agencia es de 350\\xa0000\\xa0€\\xa0x\\xa05\\xa0/\\xa0100\\xa0=\\xa017\\xa0500\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Vio una propiedad que tiene un precio de venta de 350\\xa0000\\xa0€.', 'y también el impuesto de transferencia que es del 12\\xa0% del precio de venta.']\nnew_fact = infer_new_fact(selected) # 'El impuesto de transferencia es de 350\\xa0000\\xa0€\\xa0x\\xa012\\xa0/\\xa0100\\xa0=\\xa042\\xa0000\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La comisión de agencia es de 350\\xa0000\\xa0€\\xa0x\\xa05\\xa0/\\xa0100\\xa0=\\xa017\\xa0500\\xa0€.', 'El impuesto de transferencia es de 350\\xa0000\\xa0€\\xa0x\\xa012\\xa0/\\xa0100\\xa0=\\xa042\\xa0000\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'El precio total de la casa es de 350\\xa0000\\xa0€\\xa0+\\xa017\\xa0500\\xa0€\\xa0+\\xa042\\xa0000\\xa0€\\xa0=\\xa0409\\xa0500\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['La Sra.', 'Cruz busca una casa que no supere su presupuesto de 400\\xa0000\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, supera en 409\\xa0500\\xa0€\\xa0-\\xa0400 000\\xa0€\\xa0=\\xa09500\\xa0€ el presupuesto de la Sra. Cruz.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Por cuánto supera el precio total de la casa el presupuesto de la Sra.', 'Cruz?', 'Por lo tanto, supera en 409\\xa0500\\xa0€\\xa0-\\xa0400 000\\xa0€\\xa0=\\xa09500\\xa0€ el presupuesto de la Sra. Cruz.']\nnew_fact = infer_new_fact(selected) # 'The answer is 9500'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '9500'"}
{"id": "GSM8K_266_822c7f0af0", "context": "", "options": [], "answer": "118000", "reasoning_graph_edges": [{"antecedents": [2, 3], "consequent": 7}, {"antecedents": [2, 4], "consequent": 8}, {"antecedents": [5, 7, 8], "consequent": 9}, {"antecedents": [2, 9], "consequent": 10}, {"antecedents": [5, 6, 10], "consequent": 11}], "metadata": [], "linearized_output_en": "sent2 & sent3 -> int1: Mr. Tan paid $400 000 x 3/100 = $12 000 for the transfer fees.; sent2 & sent4 -> int2: He paid $400 000 x 5/100 = $20 000 for the brokerage fee.; int1 & int2 & sent5 -> int3: So, Mr. Tan paid a total of $12 000 + $20 000 + $250 000 = $282 000 for the transfer, brokerage, and loan fees.; int3 & sent2 -> int4: Hence, Mr. Tan's net proceeds is $400 000 - $282 000 = $118 000.; int4 & sent5 & sent6 -> int5: The answer is 118000;", "textual_logical_units": {"1": "El Sr.", "2": "Tan vendió su casa por 400 000 €.", "3": "Pagó el impuesto de transferencia que asciende al 3 % del precio de venta y", "4": "también pagó una comisión de agencia que es del 5 % del precio de venta.", "5": "Si también pagó 250 000 € por el importe restante de la hipoteca, ¿cuáles son los ingresos netos del Sr.", "6": "Tan por la venta de la casa?", "7": "El Sr. Tan pagó 400 000 € x 3 / 100 = 12 000 € por el impuesto de transferencia.", "8": "Pagó 400 000 x 5 / 100 = 20 000 € por la comisión de agencia.", "9": "Por lo tanto, el Sr. Tan pagó un total de 12 000 € + 20 000 € + 250 000 € = 282 000 € por el impuesto de transferencia, la comisión de agencia y la hipoteca.", "10": "Por lo tanto, los ingresos netos del Sr. Tan son de 400 000 € - 282 000 € = 118 000 €.", "11": "The answer is 118000"}, "human_translated": true, "code_input": "####\nfacts = [ 'El Sr.',\n  'Tan vendió su casa por 400\\xa0000\\xa0€.',\n  'Pagó el impuesto de transferencia que asciende al 3\\xa0% del precio de venta y',\n  'también pagó una comisión de agencia que es del 5\\xa0% del precio de venta.',\n  'Si también pagó 250\\xa0000\\xa0€ por el importe restante de la hipoteca, ¿cuáles son los ingresos netos del Sr.']\nquestion = 'Tan por la venta de la casa?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Tan vendió su casa por 400\\xa0000\\xa0€.', 'Pagó el impuesto de transferencia que asciende al 3\\xa0% del precio de venta y']\nnew_fact = infer_new_fact(selected) # 'El Sr.\\xa0Tan pagó 400\\xa0000\\xa0€\\xa0x\\xa03\\xa0/\\xa0100\\xa0=\\xa012\\xa0000\\xa0€ por el impuesto de transferencia.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tan vendió su casa por 400\\xa0000\\xa0€.', 'también pagó una comisión de agencia que es del 5\\xa0% del precio de venta.']\nnew_fact = infer_new_fact(selected) # 'Pagó 400\\xa0000\\xa0x\\xa05\\xa0/\\xa0100\\xa0=\\xa020\\xa0000\\xa0€ por la comisión de agencia.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si también pagó 250\\xa0000\\xa0€ por el importe restante de la hipoteca, ¿cuáles son los ingresos netos del Sr.', 'El Sr.\\xa0Tan pagó 400\\xa0000\\xa0€\\xa0x\\xa03\\xa0/\\xa0100\\xa0=\\xa012\\xa0000\\xa0€ por el impuesto de transferencia.', 'Pagó 400\\xa0000\\xa0x\\xa05\\xa0/\\xa0100\\xa0=\\xa020\\xa0000\\xa0€ por la comisión de agencia.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, el Sr. Tan pagó un total de 12\\xa0000\\xa0€\\xa0+\\xa020\\xa0000\\xa0€\\xa0+\\xa0250\\xa0000\\xa0€\\xa0=\\xa0282\\xa0000\\xa0€ por el impuesto de transferencia, la comisión de agencia y la hipoteca.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Tan vendió su casa por 400\\xa0000\\xa0€.', 'Por lo tanto, el Sr. Tan pagó un total de 12\\xa0000\\xa0€\\xa0+\\xa020\\xa0000\\xa0€\\xa0+\\xa0250\\xa0000\\xa0€\\xa0=\\xa0282\\xa0000\\xa0€ por el impuesto de transferencia, la comisión de agencia y la hipoteca.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, los ingresos netos del Sr. Tan son de 400\\xa0000\\xa0€\\xa0-\\xa0282\\xa0000\\xa0€\\xa0=\\xa0118\\xa0000\\xa0€.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Si también pagó 250\\xa0000\\xa0€ por el importe restante de la hipoteca, ¿cuáles son los ingresos netos del Sr.', 'Tan por la venta de la casa?', 'Por lo tanto, los ingresos netos del Sr. Tan son de 400\\xa0000\\xa0€\\xa0-\\xa0282\\xa0000\\xa0€\\xa0=\\xa0118\\xa0000\\xa0€.']\nnew_fact = infer_new_fact(selected) # 'The answer is 118000'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '118000'"}
{"id": "GSM8K_267_9ca7796fed", "context": "", "options": [], "answer": "91", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [5], "consequent": 6}, {"antecedents": [1, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}, {"antecedents": [7, 8], "consequent": 9}, {"antecedents": [4, 9], "consequent": 10}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: It takes 20*.4=8 more minutes to go from 300 to 400 degrees than from room temperature to 300; int1 -> int2: So it takes 20+8=28 minutes to warm up; int2 & sent1 -> int3: So the total warming time was 28+20=48 minutes; int3 & sent4 -> int4: So it took 48-5=43 minutes to cook the chicken; int3 & int4 -> int5: So it took 48+43=91 minutes to make the chicken.; int5 & sent4 -> int6: The answer is 91;", "textual_logical_units": {"1": "El aceite tarda 20 minutos en calentarse hasta llegar a los 300 grados.", "2": "Luego, el aceite tarda un 40 % más en calentarse hasta la temperatura deseada de 400 grados.", "3": "Después de calentar el aceite, se tarda 5 minutos menos en cocinar que en calentar el aceite.", "4": "¿Cuánto tiempo pasa desde que se empieza a calentar el aceite hasta que se cocina el pollo?", "5": "Se necesitan 20 * 0,4 = 8 minutos más para pasar de 300 a 400 grados que de temperatura ambiente a 300", "6": "Por lo tanto, se necesitan 20 + 8 = 28 minutos para calentarse", "7": "Así que el tiempo total de calentamiento fue de 28 + 20 = 48 minutos", "8": "Así que se necesitaron 48 - 5 = 43 minutos para cocinar el pollo", "9": "Así que se necesitaron 48 + 43 = 91 minutos para hacer el pollo.", "10": "The answer is 91"}, "human_translated": true, "code_input": "####\nfacts = [ 'El aceite tarda 20\\xa0minutos en calentarse hasta llegar a los 300\\xa0grados.',\n  'Luego, el aceite tarda un 40\\xa0% más en calentarse hasta la temperatura deseada de 400\\xa0grados.',\n  'Después de calentar el aceite, se tarda 5\\xa0minutos menos en cocinar que en calentar el aceite.']\nquestion = '¿Cuánto tiempo pasa desde que se empieza a calentar el aceite hasta que se cocina el pollo?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['El aceite tarda 20\\xa0minutos en calentarse hasta llegar a los 300\\xa0grados.', 'Luego, el aceite tarda un 40\\xa0% más en calentarse hasta la temperatura deseada de 400\\xa0grados.']\nnew_fact = infer_new_fact(selected) # 'Se necesitan 20\\xa0*\\xa00,4\\xa0=\\xa08\\xa0minutos más para pasar de 300 a 400 grados que de temperatura ambiente a 300'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Se necesitan 20\\xa0*\\xa00,4\\xa0=\\xa08\\xa0minutos más para pasar de 300 a 400 grados que de temperatura ambiente a 300']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, se necesitan 20\\xa0+\\xa08\\xa0=\\xa028\\xa0minutos para calentarse'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['El aceite tarda 20\\xa0minutos en calentarse hasta llegar a los 300\\xa0grados.', 'Por lo tanto, se necesitan 20\\xa0+\\xa08\\xa0=\\xa028\\xa0minutos para calentarse']\nnew_fact = infer_new_fact(selected) # 'Así que el tiempo total de calentamiento fue de 28\\xa0+\\xa020\\xa0=\\xa048\\xa0minutos'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto tiempo pasa desde que se empieza a calentar el aceite hasta que se cocina el pollo?', 'Así que el tiempo total de calentamiento fue de 28\\xa0+\\xa020\\xa0=\\xa048\\xa0minutos']\nnew_fact = infer_new_fact(selected) # 'Así que se necesitaron 48\\xa0-\\xa05\\xa0=\\xa043\\xa0minutos para cocinar el pollo'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Así que el tiempo total de calentamiento fue de 28\\xa0+\\xa020\\xa0=\\xa048\\xa0minutos', 'Así que se necesitaron 48\\xa0-\\xa05\\xa0=\\xa043\\xa0minutos para cocinar el pollo']\nnew_fact = infer_new_fact(selected) # 'Así que se necesitaron 48\\xa0+\\xa043\\xa0=\\xa091\\xa0minutos para hacer el pollo.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto tiempo pasa desde que se empieza a calentar el aceite hasta que se cocina el pollo?', 'Así que se necesitaron 48\\xa0+\\xa043\\xa0=\\xa091\\xa0minutos para hacer el pollo.']\nnew_fact = infer_new_fact(selected) # 'The answer is 91'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '91'"}
{"id": "GSM8K_268_015248df44", "context": "", "options": [], "answer": "1375", "reasoning_graph_edges": [{"antecedents": [1, 3], "consequent": 5}, {"antecedents": [2, 3], "consequent": 6}, {"antecedents": [5, 6], "consequent": 7}, {"antecedents": [4, 7], "consequent": 8}], "metadata": [], "linearized_output_en": "sent1 & sent3 -> int1: He spent a total of $5 x 50 = $250 for the newspaper ads.; sent2 & sent3 -> int2: He spent a total of $75 x 15 = $1125 for the television ads.; int1 & int2 -> int3: Therefore, the real estate agent spent $250 + $1125 = $1375 on buying all the ads.; int3 & sent4 -> int4: The answer is 1375;", "textual_logical_units": {"1": "Un agente inmobiliario ha gastado 5 € en cada anuncio de periódico y", "2": "75 euros en cada anuncio de televisión.", "3": "Compró 50 anuncios de periódico y 15 anuncios de televisión.", "4": "¿Cuánto gastó el agente inmobiliario en comprar todos los anuncios?", "5": "Gastó un total de 5 x 50 = 250 € en los anuncios de periódico.", "6": "Gastó un total de 75 x 15 € = 1125 € en los anuncios de televisión.", "7": "Por lo tanto, el agente inmobiliario gastó 250 € + 1125 € = 1375 € en la compra de todos los anuncios.", "8": "The answer is 1375"}, "human_translated": true, "code_input": "####\nfacts = [ 'Un agente inmobiliario ha gastado 5\\xa0€ en cada anuncio de periódico y',\n  '75\\xa0euros en cada anuncio de televisión.',\n  'Compró 50\\xa0anuncios de periódico y 15\\xa0anuncios de televisión.']\nquestion = '¿Cuánto gastó el agente inmobiliario en comprar todos los anuncios?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Un agente inmobiliario ha gastado 5\\xa0€ en cada anuncio de periódico y', 'Compró 50\\xa0anuncios de periódico y 15\\xa0anuncios de televisión.']\nnew_fact = infer_new_fact(selected) # 'Gastó un total de 5\\xa0x\\xa050\\xa0=\\xa0250\\xa0€ en los anuncios de periódico.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['75\\xa0euros en cada anuncio de televisión.', 'Compró 50\\xa0anuncios de periódico y 15\\xa0anuncios de televisión.']\nnew_fact = infer_new_fact(selected) # 'Gastó un total de 75\\xa0x\\xa015\\xa0€\\xa0=\\xa01125\\xa0€ en los anuncios de televisión.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['Gastó un total de 5\\xa0x\\xa050\\xa0=\\xa0250\\xa0€ en los anuncios de periódico.', 'Gastó un total de 75\\xa0x\\xa015\\xa0€\\xa0=\\xa01125\\xa0€ en los anuncios de televisión.']\nnew_fact = infer_new_fact(selected) # 'Por lo tanto, el agente inmobiliario gastó 250\\xa0€\\xa0+\\xa01125\\xa0€\\xa0=\\xa01375\\xa0€ en la compra de todos los anuncios.'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuánto gastó el agente inmobiliario en comprar todos los anuncios?', 'Por lo tanto, el agente inmobiliario gastó 250\\xa0€\\xa0+\\xa01125\\xa0€\\xa0=\\xa01375\\xa0€ en la compra de todos los anuncios.']\nnew_fact = infer_new_fact(selected) # 'The answer is 1375'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '1375'"}
{"id": "GSM8K_269_5e020deff1", "context": "", "options": [], "answer": "4", "reasoning_graph_edges": [{"antecedents": [1, 2], "consequent": 5}, {"antecedents": [3, 5], "consequent": 6}, {"antecedents": [4, 6], "consequent": 7}], "metadata": [], "linearized_output_en": "sent1 & sent2 -> int1: Golf Balls:16/2=8; int1 & sent3 -> int2: Blue Golf Balls:8/2=4 balls; int2 & sent4 -> int3: The answer is 4;", "textual_logical_units": {"1": "Un malabarista puede hacer malabares con 16 pelotas.", "2": "La mitad son pelotas de golf", "3": "y la mitad de las pelotas de golf son azules.", "4": "¿Cuántas pelotas de golf azules hay?", "5": "Pelotas de golf: 16 / 2 = 8", "6": "Pelotas de golf azules: 8 / 2 = 4 pelotas", "7": "The answer is 4"}, "human_translated": true, "code_input": "####\nfacts = ['Un malabarista puede hacer malabares con 16\\xa0pelotas.', 'La mitad son pelotas de golf', 'y la mitad de las pelotas de golf son azules.']\nquestion = '¿Cuántas pelotas de golf azules hay?'\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['Un malabarista puede hacer malabares con 16\\xa0pelotas.', 'La mitad son pelotas de golf']\nnew_fact = infer_new_fact(selected) # 'Pelotas de golf: 16\\xa0/\\xa02\\xa0=\\xa08'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['y la mitad de las pelotas de golf son azules.', 'Pelotas de golf: 16\\xa0/\\xa02\\xa0=\\xa08']\nnew_fact = infer_new_fact(selected) # 'Pelotas de golf azules: 8\\xa0/\\xa02\\xa0=\\xa04\\xa0pelotas'\nis_solved(new_fact, question) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['¿Cuántas pelotas de golf azules hay?', 'Pelotas de golf azules: 8\\xa0/\\xa02\\xa0=\\xa04\\xa0pelotas']\nnew_fact = infer_new_fact(selected) # 'The answer is 4'\nis_solved(new_fact, question) # True\nanswer = extract_answer(new_fact) # '4'"}
