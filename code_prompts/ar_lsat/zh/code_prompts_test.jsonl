{"id": "AR-LSAT_0_08192f129b", "context": "Of the eight students—George, Helen, Irving, Kyle, Lenore, Nina, Olivia, and Robert—in a seminar, exactly six will give individual oral reports during three consecutive days—Monday, Tuesday, and Wednesday. Exactly two reports will be given each day—one in the morning and one in the afternoon—according to the following conditions: Tuesday is the only day on which George can give a report. Neither Olivia nor Robert can give an afternoon report. If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday.", "options": ["Mon. morning: Helen; Mon. afternoon: Robert Tues. morning: Olivia; Tues. afternoon: Irving Wed. morning: Lenore; Wed. afternoon: Kyle", "Mon. morning: Irving; Mon. afternoon: Olivia Tues. morning: Helen; Tues. afternoon: Kyle Wed. morning: Nina; Wed. afternoon: Lenore", "Mon. morning: Lenore; Mon. afternoon: Helen Tues. morning: George; Tues. afternoon: Kyle Wed. morning: Robert; Wed. afternoon: Irving", "Mon. morning: Nina; Mon. afternoon: Helen Tues. morning: Robert; Tues. afternoon: Irving Wed. morning: Olivia; Wed. afternoon: Lenore", "Mon. morning: Olivia; Mon. afternoon: Nina Tues. morning: Irving; Tues. afternoon: Helen Wed. morning: Kyle; Wed. afternoon: George"], "answer": "C", "reasoning_graph_edges": [{"antecedents": [10, 11, 12, 13, 18], "consequent": 20}, {"antecedents": [8, 19], "consequent": 21}, {"antecedents": [9, 15, 16], "consequent": 22}, {"antecedents": [14, 17, 20, 21, 22], "consequent": 23}, {"antecedents": [23], "consequent": 24}], "metadata": [], "linearized_output_en": "sent10 & sent11 & sent12 & sent13 & sent18 -> int1: If Nina gives a report on Monday or Tuesday, Helen and Irving have to give a report the next day, so we rule out option D.; sent19 & sent8 -> int2: George can only give a report on Tuesday, so we rule out option E.; sent15 & sent16 & sent9 -> int3: Olivia and Robert cannot give afternoon reports, so we rule out option A and B.; int1 & int2 & int3 & sent14 & sent17 -> int4: Answer is C.; int4 -> int5: The answer is C);", "textual_logical_units": {"1": "在参加研讨会的八名学生", "2": "(乔治、海伦、欧文、凯尔、莱诺尔、尼娜、奥利维亚和罗伯特)中，", "3": "有六名学生将在连续三天", "4": "(星期一、星期二和星期三)内进行个人口头报告。", "5": "根据以下条件，", "6": "每天将作两份报告", "7": "(一份在上午，一份在下午)：", "8": "星期二是乔治唯一可以作报告的日子。", "9": "奥利维亚和罗伯特都无法在下午作报告。", "10": "如果尼娜作报告，", "11": "那么第二天海伦和", "12": "欧文都必须作报告，", "13": "除非尼娜在星期三作报告。", "14": "以下哪一项可能是学生作报告的时间表？", "15": "A) 星期一上午： 海伦；星期一下午： 罗伯特；星期二上午： 奥利维亚；星期二下午： 欧文；星期三上午： 莱诺尔；星期三下午： 凯尔", "16": "B) 星期一上午： 欧文；星期一下午： 奥利维亚；星期二上午： 海伦；星期二下午： 凯文；星期三上午： 尼娜；星期三下午： 莱诺尔", "17": "C) 星期一上午： 莱诺尔；星期一下午： 海伦；星期二上午： 乔治；星期二下午： 凯文；星期三上午： 罗伯特；星期三下午： 欧文", "18": "D) 星期一上午： 尼娜；星期一下午： 海伦；星期二上午： 罗伯特；星期二下午： 欧文；星期三上午： 奥利维亚；星期三下午： 莱诺尔", "19": "E) 星期一上午： 奥利维亚；星期一下午： 尼娜；星期二上午： 欧文；星期二下午： 海伦；星期三上午： 凯尔；星期三下午： 乔治", "20": "如果尼娜在星期一或星期二作报告，那么海伦和欧文必须在第二天作报告，因此我们排除了选项 D。", "21": "乔治只能在星期二作报告，因此我们排除了选项 E。", "22": "奥利维亚和罗伯特无法在下午作报告，因此我们排除了选项 A 和 B。", "23": "答案是 C。", "24": "The answer is C)"}, "human_translated": true, "code_input": "####\nfacts = [ '在参加研讨会的八名学生',\n  '(乔治、海伦、欧文、凯尔、莱诺尔、尼娜、奥利维亚和罗伯特)中，',\n  '有六名学生将在连续三天',\n  '(星期一、星期二和星期三)内进行个人口头报告。',\n  '根据以下条件，',\n  '每天将作两份报告',\n  '(一份在上午，一份在下午)：',\n  '星期二是乔治唯一可以作报告的日子。',\n  '奥利维亚和罗伯特都无法在下午作报告。',\n  '如果尼娜作报告，',\n  '那么第二天海伦和',\n  '欧文都必须作报告，',\n  '除非尼娜在星期三作报告。']\nquestion = '以下哪一项可能是学生作报告的时间表？'\nchoices = { 'A': '星期一上午： 海伦；星期一下午： 罗伯特；星期二上午： 奥利维亚；星期二下午： 欧文；星期三上午： 莱诺尔；星期三下午： 凯尔',\n  'B': '星期一上午： 欧文；星期一下午： 奥利维亚；星期二上午： 海伦；星期二下午： 凯文；星期三上午： 尼娜；星期三下午： 莱诺尔',\n  'C': '星期一上午： 莱诺尔；星期一下午： 海伦；星期二上午： 乔治；星期二下午： 凯文；星期三上午： 罗伯特；星期三下午： 欧文',\n  'D': '星期一上午： 尼娜；星期一下午： 海伦；星期二上午： 罗伯特；星期二下午： 欧文；星期三上午： 奥利维亚；星期三下午： 莱诺尔',\n  'E': '星期一上午： 奥利维亚；星期一下午： 尼娜；星期二上午： 欧文；星期二下午： 海伦；星期三上午： 凯尔；星期三下午： 乔治'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['如果尼娜作报告，', '那么第二天海伦和', '欧文都必须作报告，', '除非尼娜在星期三作报告。', 'D) 星期一上午： 尼娜；星期一下午： 海伦；星期二上午： 罗伯特；星期二下午： 欧文；星期三上午： 奥利维亚；星期三下午： 莱诺尔']\nnew_fact = infer_new_fact(selected) # '如果尼娜在星期一或星期二作报告，那么海伦和欧文必须在第二天作报告，因此我们排除了选项 D。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['星期二是乔治唯一可以作报告的日子。', 'E) 星期一上午： 奥利维亚；星期一下午： 尼娜；星期二上午： 欧文；星期二下午： 海伦；星期三上午： 凯尔；星期三下午： 乔治']\nnew_fact = infer_new_fact(selected) # '乔治只能在星期二作报告，因此我们排除了选项 E。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['奥利维亚和罗伯特都无法在下午作报告。', 'A) 星期一上午： 海伦；星期一下午： 罗伯特；星期二上午： 奥利维亚；星期二下午： 欧文；星期三上午： 莱诺尔；星期三下午： 凯尔', 'B) 星期一上午： 欧文；星期一下午： 奥利维亚；星期二上午： 海伦；星期二下午： 凯文；星期三上午： 尼娜；星期三下午： 莱诺尔']\nnew_fact = infer_new_fact(selected) # '奥利维亚和罗伯特无法在下午作报告，因此我们排除了选项 A 和 B。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一项可能是学生作报告的时间表？', 'C) 星期一上午： 莱诺尔；星期一下午： 海伦；星期二上午： 乔治；星期二下午： 凯文；星期三上午： 罗伯特；星期三下午： 欧文', '如果尼娜在星期一或星期二作报告，那么海伦和欧文必须在第二天作报告，因此我们排除了选项 D。', '乔治只能在星期二作报告，因此我们排除了选项 E。', '奥利维亚和罗伯特无法在下午作报告，因此我们排除了选项 A 和 B。']\nnew_fact = infer_new_fact(selected) # '答案是 C。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 C。']\nnew_fact = infer_new_fact(selected) # 'The answer is C'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'C'"}
{"id": "AR-LSAT_1_765d8869dc", "context": "Of the eight students—George, Helen, Irving, Kyle, Lenore, Nina, Olivia, and Robert—in a seminar, exactly six will give individual oral reports during three consecutive days—Monday, Tuesday, and Wednesday. Exactly two reports will be given each day—one in the morning and one in the afternoon—according to the following conditions: Tuesday is the only day on which George can give a report. Neither Olivia nor Robert can give an afternoon report. If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday.", "options": ["Helen, George, and Nina", "Irving, Robert, and Helen", "Nina, Helen, and Olivia", "Olivia, Robert, and Irving", "Robert, George, and Helen"], "answer": "D", "reasoning_graph_edges": [{"antecedents": [2, 14], "consequent": 21}, {"antecedents": [9, 16, 17, 18, 20, 21], "consequent": 22}, {"antecedents": [14, 15, 19, 22], "consequent": 23}, {"antecedents": [23], "consequent": 24}], "metadata": [], "linearized_output_en": "sent14 & sent2 -> int1: If Kyle (K) and Lenore (L) do not give reports, we will have George (G), Helen (H), Irving (I), Nina (N), Olivia (O), and Robert (R) giving reports.; int1 & sent16 & sent17 & sent18 & sent20 & sent9 -> int2: Olivia and Robert must give morning reports, so we rule out options A, B, C, and E where both are not present.; int2 & sent14 & sent15 & sent19 -> int3: The answer is D.; int3 -> int4: The answer is D);", "textual_logical_units": {"1": "在参加研讨会的八名学生", "2": "(乔治、海伦、欧文、凯尔、莱诺尔、尼娜、奥利维亚和罗伯特)中，", "3": "有六名学生将在连续三天", "4": "(星期一、星期二和星期三)内进行个人口头报告。", "5": "根据以下条件，", "6": "每天将作两份报告", "7": "(一份在上午，一份在下午)：", "8": "星期二是乔治唯一可以作报告的日子。", "9": "奥利维亚和罗伯特都无法在下午作报告。", "10": "如果尼娜作报告，", "11": "那么第二天海伦和", "12": "欧文都必须作报告，", "13": "除非尼娜在星期三作报告。", "14": "如果凯尔和莱诺尔不作报告，", "15": "那么在星期一、星期二和星期三上午作报告的人分别可以是", "16": "A) 海伦、乔治和尼娜", "17": "B) 欧文、罗伯特和海伦", "18": "C) 尼娜、海伦和奥利维亚", "19": "D) 奥利维亚、罗伯特和欧文", "20": "E) 罗伯特、乔治和海伦", "21": "如果凯尔 (K) 和莱诺尔 (L) 不作报告，将由乔治 (G)、海伦 (H)、欧文 (I)、尼娜 (N)、奥利维亚 (O) 和罗伯特 (R) 作报告。", "22": "奥利维亚和罗伯特必须在上午作报告，因此我们排除了选项 A、B、C 和 E，因为两人都不在内。", "23": "答案是 D。", "24": "The answer is D)"}, "human_translated": true, "code_input": "####\nfacts = [ '在参加研讨会的八名学生',\n  '(乔治、海伦、欧文、凯尔、莱诺尔、尼娜、奥利维亚和罗伯特)中，',\n  '有六名学生将在连续三天',\n  '(星期一、星期二和星期三)内进行个人口头报告。',\n  '根据以下条件，',\n  '每天将作两份报告',\n  '(一份在上午，一份在下午)：',\n  '星期二是乔治唯一可以作报告的日子。',\n  '奥利维亚和罗伯特都无法在下午作报告。',\n  '如果尼娜作报告，',\n  '那么第二天海伦和',\n  '欧文都必须作报告，',\n  '除非尼娜在星期三作报告。',\n  '如果凯尔和莱诺尔不作报告，']\nquestion = '那么在星期一、星期二和星期三上午作报告的人分别可以是'\nchoices = {'A': '海伦、乔治和尼娜', 'B': '欧文、罗伯特和海伦', 'C': '尼娜、海伦和奥利维亚', 'D': '奥利维亚、罗伯特和欧文', 'E': '罗伯特、乔治和海伦'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['(乔治、海伦、欧文、凯尔、莱诺尔、尼娜、奥利维亚和罗伯特)中，', '如果凯尔和莱诺尔不作报告，']\nnew_fact = infer_new_fact(selected) # '如果凯尔 (K) 和莱诺尔 (L) 不作报告，将由乔治 (G)、海伦 (H)、欧文 (I)、尼娜 (N)、奥利维亚 (O) 和罗伯特 (R) 作报告。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['奥利维亚和罗伯特都无法在下午作报告。', 'A) 海伦、乔治和尼娜', 'B) 欧文、罗伯特和海伦', 'C) 尼娜、海伦和奥利维亚', 'E) 罗伯特、乔治和海伦', '如果凯尔 (K) 和莱诺尔 (L) 不作报告，将由乔治 (G)、海伦 (H)、欧文 (I)、尼娜 (N)、奥利维亚 (O) 和罗伯特 (R) 作报告。']\nnew_fact = infer_new_fact(selected) # '奥利维亚和罗伯特必须在上午作报告，因此我们排除了选项 A、B、C 和 E，因为两人都不在内。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果凯尔和莱诺尔不作报告，', '那么在星期一、星期二和星期三上午作报告的人分别可以是', 'D) 奥利维亚、罗伯特和欧文', '奥利维亚和罗伯特必须在上午作报告，因此我们排除了选项 A、B、C 和 E，因为两人都不在内。']\nnew_fact = infer_new_fact(selected) # '答案是 D。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 D。']\nnew_fact = infer_new_fact(selected) # 'The answer is D'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'D'"}
{"id": "AR-LSAT_2_291114c694", "context": "Of the eight students—George, Helen, Irving, Kyle, Lenore, Nina, Olivia, and Robert—in a seminar, exactly six will give individual oral reports during three consecutive days—Monday, Tuesday, and Wednesday. Exactly two reports will be given each day—one in the morning and one in the afternoon—according to the following conditions: Tuesday is the only day on which George can give a report. Neither Olivia nor Robert can give an afternoon report. If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday.", "options": ["George and Lenore", "Helen and Nina", "Irving and Robert", "Kyle and Nina", "Olivia and Kyle"], "answer": "B", "reasoning_graph_edges": [{"antecedents": [10, 11, 12, 13], "consequent": 22}, {"antecedents": [22], "consequent": 23}, {"antecedents": [14, 15, 18, 23], "consequent": 24}, {"antecedents": [24], "consequent": 25}], "metadata": [], "linearized_output_en": "sent10 & sent11 & sent12 & sent13 -> int1: If Nina presents a report on Monday and Tuesday, then Helen and Irving must present on the next day.; int1 -> int2: If and only if Nina's report is on Wednesday, then she can present on the same day as Helen or Irving.; int2 & sent14 & sent15 & sent18 -> int3: The answer is B.; int3 -> int4: The answer is B);", "textual_logical_units": {"1": "在参加研讨会的八名学生", "2": "(乔治、海伦、欧文、凯尔、莱诺尔、尼娜、奥利维亚和罗伯特)中，", "3": "有六名学生将在连续三天", "4": "(星期一、星期二和星期三)内进行个人口头报告。", "5": "根据以下条件，", "6": "每天将作两份报告", "7": "(一份在上午，一份在下午)：", "8": "星期二是乔治唯一可以作报告的日子。", "9": "奥利维亚和罗伯特都无法在下午作报告。", "10": "如果尼娜作报告，", "11": "那么第二天海伦和", "12": "欧文都必须作报告，", "13": "除非尼娜在星期三作报告。", "14": "以下哪两名学生", "15": "如果在同一天作报告，", "16": "则必须在星期三作报告？", "17": "A) 乔治和莱诺尔", "18": "B) 海伦和尼娜", "19": "C) 欧文和罗伯特", "20": "D) 凯尔和尼娜", "21": "E) 奥利维亚和凯尔", "22": "如果尼娜在星期一和星期二作报告，那么海伦和欧文必须在第二天作报告。", "23": "当且仅当尼娜在星期三作报告时，她才能与海伦或欧文在同一天作报告。", "24": "答案是 B。", "25": "The answer is B)"}, "human_translated": true, "code_input": "####\nfacts = [ '在参加研讨会的八名学生',\n  '(乔治、海伦、欧文、凯尔、莱诺尔、尼娜、奥利维亚和罗伯特)中，',\n  '有六名学生将在连续三天',\n  '(星期一、星期二和星期三)内进行个人口头报告。',\n  '根据以下条件，',\n  '每天将作两份报告',\n  '(一份在上午，一份在下午)：',\n  '星期二是乔治唯一可以作报告的日子。',\n  '奥利维亚和罗伯特都无法在下午作报告。',\n  '如果尼娜作报告，',\n  '那么第二天海伦和',\n  '欧文都必须作报告，',\n  '除非尼娜在星期三作报告。',\n  '以下哪两名学生',\n  '如果在同一天作报告，']\nquestion = '则必须在星期三作报告？'\nchoices = {'A': '乔治和莱诺尔', 'B': '海伦和尼娜', 'C': '欧文和罗伯特', 'D': '凯尔和尼娜', 'E': '奥利维亚和凯尔'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['如果尼娜作报告，', '那么第二天海伦和', '欧文都必须作报告，', '除非尼娜在星期三作报告。']\nnew_fact = infer_new_fact(selected) # '如果尼娜在星期一和星期二作报告，那么海伦和欧文必须在第二天作报告。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果尼娜在星期一和星期二作报告，那么海伦和欧文必须在第二天作报告。']\nnew_fact = infer_new_fact(selected) # '当且仅当尼娜在星期三作报告时，她才能与海伦或欧文在同一天作报告。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪两名学生', '如果在同一天作报告，', 'B) 海伦和尼娜', '当且仅当尼娜在星期三作报告时，她才能与海伦或欧文在同一天作报告。']\nnew_fact = infer_new_fact(selected) # '答案是 B。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 B。']\nnew_fact = infer_new_fact(selected) # 'The answer is B'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'B'"}
{"id": "AR-LSAT_3_3d59347ca7", "context": "Of the eight students—George, Helen, Irving, Kyle, Lenore, Nina, Olivia, and Robert—in a seminar, exactly six will give individual oral reports during three consecutive days—Monday, Tuesday, and Wednesday. Exactly two reports will be given each day—one in the morning and one in the afternoon—according to the following conditions: Tuesday is the only day on which George can give a report. Neither Olivia nor Robert can give an afternoon report. If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday.", "options": ["Helen gives a report on Wednesday.", "Nina gives a report on Monday.", "Nina gives a report on Tuesday.", "Olivia gives a report on Monday.", "Robert gives a report on Wednesday."], "answer": "A", "reasoning_graph_edges": [{"antecedents": [8, 14], "consequent": 22}, {"antecedents": [10, 11, 12], "consequent": 23}, {"antecedents": [14, 22, 23], "consequent": 24}, {"antecedents": [14, 15, 18, 19, 22, 24], "consequent": 25}, {"antecedents": [14, 15, 21, 22, 25], "consequent": 26}, {"antecedents": [9, 26], "consequent": 27}, {"antecedents": [20, 27], "consequent": 28}, {"antecedents": [14, 15, 16, 17, 25, 26, 28], "consequent": 29}, {"antecedents": [29], "consequent": 30}], "metadata": [], "linearized_output_en": "sent14 & sent8 -> int1: George can only give a report on Tuesday.; sent10 & sent11 & sent12 -> int2: Since Helen and Irving must give a report on the day after Nina gives a report,; int1 & int2 & sent14 -> int3: Nina cannot give a report on Monday since Tuesday will have 1 slot occupied.; int1 & int3 & sent14 & sent15 & sent18 & sent19 -> int4: Nina must present on Wednesday since she must present on a different day from George, so we rule out options B and C.; int1 & int4 & sent14 & sent15 & sent21 -> int5: Robert must present on Monday since he must present on a different day from George and Nina, so we rule out option E.; int5 & sent9 -> int6: Olivia and Robert can only present in the morning, so Robert presents Monday morning; int6 & sent20 -> int7: Since the Monday morning slot is already occupied, Olivia cannot present on Monday at all, so we rule out option D.; int4 & int5 & int7 & sent14 & sent15 & sent16 & sent17 -> int8: The answer is A.; int8 -> int9: The answer is A);", "textual_logical_units": {"1": "在参加研讨会的八名学生", "2": "(乔治、海伦、欧文、凯尔、莱诺尔、尼娜、奥利维亚和罗伯特)中，", "3": "有六名学生将在连续三天", "4": "(星期一、星期二和星期三)内进行个人口头报告。", "5": "根据以下条件，", "6": "每天将作两份报告", "7": "(一份在上午，一份在下午)：", "8": "星期二是乔治唯一可以作报告的日子。", "9": "奥利维亚和罗伯特都无法在下午作报告。", "10": "如果尼娜作报告，", "11": "那么第二天海伦和", "12": "欧文都必须作报告，", "13": "除非尼娜在星期三作报告。", "14": "如果乔治、尼娜和罗伯特", "15": "均不在同一天作报告，", "16": "则以下哪一项可能是正确的？", "17": "A) 海伦星期三作报告。", "18": "B) 尼娜星期一作报告。", "19": "C) 尼娜星期二作报告。", "20": "D) 奥利维亚星期一作报告。", "21": "E) 罗伯特星期三作报告。", "22": "乔治只能在星期二作报告。", "23": "由于海伦和欧文必须在尼娜作报告的第二天作报告，", "24": "尼娜无法在星期一作报告，因为星期二将有 1 个名额被占用。", "25": "尼娜必须在星期三作报告，因为她不能与乔治同一天作报告，因此我们排除了选项 B 和 C。", "26": "罗伯特必须在星期一作报告，因为他不能与乔治和尼娜同一天作报告，因此我们排除了选项 E。", "27": "奥利维亚和罗伯特只能在上午作报告，所以罗伯特在星期一上午作报告", "28": "由于星期一上午的时段已经被占用，奥利维亚无法在星期一作报告，因此我们排除了选项 D。", "29": "答案是 A。", "30": "The answer is A)"}, "human_translated": true, "code_input": "####\nfacts = [ '在参加研讨会的八名学生',\n  '(乔治、海伦、欧文、凯尔、莱诺尔、尼娜、奥利维亚和罗伯特)中，',\n  '有六名学生将在连续三天',\n  '(星期一、星期二和星期三)内进行个人口头报告。',\n  '根据以下条件，',\n  '每天将作两份报告',\n  '(一份在上午，一份在下午)：',\n  '星期二是乔治唯一可以作报告的日子。',\n  '奥利维亚和罗伯特都无法在下午作报告。',\n  '如果尼娜作报告，',\n  '那么第二天海伦和',\n  '欧文都必须作报告，',\n  '除非尼娜在星期三作报告。',\n  '如果乔治、尼娜和罗伯特',\n  '均不在同一天作报告，']\nquestion = '则以下哪一项可能是正确的？'\nchoices = {'A': '海伦星期三作报告。', 'B': '尼娜星期一作报告。', 'C': '尼娜星期二作报告。', 'D': '奥利维亚星期一作报告。', 'E': '罗伯特星期三作报告。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['星期二是乔治唯一可以作报告的日子。', '如果乔治、尼娜和罗伯特']\nnew_fact = infer_new_fact(selected) # '乔治只能在星期二作报告。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果尼娜作报告，', '那么第二天海伦和', '欧文都必须作报告，']\nnew_fact = infer_new_fact(selected) # '由于海伦和欧文必须在尼娜作报告的第二天作报告，'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果乔治、尼娜和罗伯特', '乔治只能在星期二作报告。', '由于海伦和欧文必须在尼娜作报告的第二天作报告，']\nnew_fact = infer_new_fact(selected) # '尼娜无法在星期一作报告，因为星期二将有 1 个名额被占用。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果乔治、尼娜和罗伯特', '均不在同一天作报告，', 'B) 尼娜星期一作报告。', 'C) 尼娜星期二作报告。', '乔治只能在星期二作报告。', '尼娜无法在星期一作报告，因为星期二将有 1 个名额被占用。']\nnew_fact = infer_new_fact(selected) # '尼娜必须在星期三作报告，因为她不能与乔治同一天作报告，因此我们排除了选项 B 和 C。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果乔治、尼娜和罗伯特', '均不在同一天作报告，', 'E) 罗伯特星期三作报告。', '乔治只能在星期二作报告。', '尼娜必须在星期三作报告，因为她不能与乔治同一天作报告，因此我们排除了选项 B 和 C。']\nnew_fact = infer_new_fact(selected) # '罗伯特必须在星期一作报告，因为他不能与乔治和尼娜同一天作报告，因此我们排除了选项 E。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['奥利维亚和罗伯特都无法在下午作报告。', '罗伯特必须在星期一作报告，因为他不能与乔治和尼娜同一天作报告，因此我们排除了选项 E。']\nnew_fact = infer_new_fact(selected) # '奥利维亚和罗伯特只能在上午作报告，所以罗伯特在星期一上午作报告'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['D) 奥利维亚星期一作报告。', '奥利维亚和罗伯特只能在上午作报告，所以罗伯特在星期一上午作报告']\nnew_fact = infer_new_fact(selected) # '由于星期一上午的时段已经被占用，奥利维亚无法在星期一作报告，因此我们排除了选项 D。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果乔治、尼娜和罗伯特', '均不在同一天作报告，', '则以下哪一项可能是正确的？', 'A) 海伦星期三作报告。', '尼娜必须在星期三作报告，因为她不能与乔治同一天作报告，因此我们排除了选项 B 和 C。', '罗伯特必须在星期一作报告，因为他不能与乔治和尼娜同一天作报告，因此我们排除了选项 E。', '由于星期一上午的时段已经被占用，奥利维亚无法在星期一作报告，因此我们排除了选项 D。']\nnew_fact = infer_new_fact(selected) # '答案是 A。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 A。']\nnew_fact = infer_new_fact(selected) # 'The answer is A'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'A'"}
{"id": "AR-LSAT_4_5740a46512", "context": "Of the eight students—George, Helen, Irving, Kyle, Lenore, Nina, Olivia, and Robert—in a seminar, exactly six will give individual oral reports during three consecutive days—Monday, Tuesday, and Wednesday. Exactly two reports will be given each day—one in the morning and one in the afternoon—according to the following conditions: Tuesday is the only day on which George can give a report. Neither Olivia nor Robert can give an afternoon report. If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday.", "options": ["Irving, Lenore, and Nina", "Lenore, George, and Irving", "Nina, Irving, and Lenore", "Robert, George, and Irving", "Robert, Irving, and Lenore"], "answer": "D", "reasoning_graph_edges": [{"antecedents": [14, 15], "consequent": 22}, {"antecedents": [10, 11, 12], "consequent": 23}, {"antecedents": [22, 23], "consequent": 24}, {"antecedents": [8], "consequent": 25}, {"antecedents": [9], "consequent": 26}, {"antecedents": [22, 24, 25, 26], "consequent": 27}, {"antecedents": [16, 27], "consequent": 28}, {"antecedents": [14, 15, 16, 20, 28], "consequent": 29}, {"antecedents": [29], "consequent": 30}], "metadata": [], "linearized_output_en": "sent14 & sent15 -> int1: We know Kyle gives the Tuesday afternoon report and Helen gives the Wednesday afternoon report.; sent10 & sent11 & sent12 -> int2: If Nina presents on Monday, then Helen and Irving must present on Tuesday.; int1 & int2 -> int3: We know that Helen presents on Wednesday and 1 Tuesday slot is already occupied by Kyle, so Nina cannot present on Monday.; sent8 -> int4: George cannot present on Monday or Tuesday.; sent9 -> int5: If Olivia and Robert present, they can only present in the morning.; int1 & int3 & int4 & int5 -> int6: So for the Monday afternoon slot, we know Kyle, Helen, Nina, George, Olivia, and Robert cannot present so only Lenore or Irving can.; int6 & sent16 -> int7: Thus, the morning reports can only be given by a combination of students that does not include both Lenore and Irving since one of them must fill the Monday afternoon slot.; int7 & sent14 & sent15 & sent16 & sent20 -> int8: The answer is D.; int8 -> int9: The answer is D);", "textual_logical_units": {"1": "在参加研讨会的八名学生", "2": "(乔治、海伦、欧文、凯尔、莱诺尔、尼娜、奥利维亚和罗伯特)中，", "3": "有六名学生将在连续三天", "4": "(星期一、星期二和星期三)内进行个人口头报告。", "5": "根据以下条件，", "6": "每天将作两份报告", "7": "(一份在上午，一份在下午)：", "8": "星期二是乔治唯一可以作报告的日子。", "9": "奥利维亚和罗伯特都无法在下午作报告。", "10": "如果尼娜作报告，", "11": "那么第二天海伦和", "12": "欧文都必须作报告，", "13": "除非尼娜在星期三作报告。", "14": "如果凯尔在星期二下午作报告，", "15": "海伦在星期三下午作报告，", "16": "以下哪一项可能是分别在星期一、星期二和星期三上午作报告的学生名单？", "17": "A) 欧文、莱诺尔和尼娜", "18": "B) 莱诺尔、乔治和欧文", "19": "C) 尼娜、欧文和莱诺尔", "20": "D) 罗伯特、乔治和欧文", "21": "E) 罗伯特、欧文和莱诺尔", "22": "我们知道凯尔在星期二下午作报告，海伦在星期三下午作报告。", "23": "如果尼娜在星期一作报告，那么海伦和欧文必须在星期二作报告。", "24": "我们知道海伦在星期三作报告，而星期二的 1 个时段已经被凯尔占用，因此尼娜无法在星期一作报告。", "25": "乔治不能在星期一或星期二作报告。", "26": "如果奥利维亚和罗伯特作报告，他们只能在上午作报告。", "27": "因此，对于星期一下午的时段，我们知道凯尔、海伦、尼娜、乔治、奥利维亚和罗伯特无法作报告，因此只有莱诺尔或欧文可以作报告。", "28": "因此，上午只能由不包括莱诺尔和欧文的学生组合作报告，因为其中一人必须填补星期一下午的时段。", "29": "答案是 D。", "30": "The answer is D)"}, "human_translated": true, "code_input": "####\nfacts = [ '在参加研讨会的八名学生',\n  '(乔治、海伦、欧文、凯尔、莱诺尔、尼娜、奥利维亚和罗伯特)中，',\n  '有六名学生将在连续三天',\n  '(星期一、星期二和星期三)内进行个人口头报告。',\n  '根据以下条件，',\n  '每天将作两份报告',\n  '(一份在上午，一份在下午)：',\n  '星期二是乔治唯一可以作报告的日子。',\n  '奥利维亚和罗伯特都无法在下午作报告。',\n  '如果尼娜作报告，',\n  '那么第二天海伦和',\n  '欧文都必须作报告，',\n  '除非尼娜在星期三作报告。',\n  '如果凯尔在星期二下午作报告，',\n  '海伦在星期三下午作报告，']\nquestion = '以下哪一项可能是分别在星期一、星期二和星期三上午作报告的学生名单？'\nchoices = {'A': '欧文、莱诺尔和尼娜', 'B': '莱诺尔、乔治和欧文', 'C': '尼娜、欧文和莱诺尔', 'D': '罗伯特、乔治和欧文', 'E': '罗伯特、欧文和莱诺尔'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['如果凯尔在星期二下午作报告，', '海伦在星期三下午作报告，']\nnew_fact = infer_new_fact(selected) # '我们知道凯尔在星期二下午作报告，海伦在星期三下午作报告。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果尼娜作报告，', '那么第二天海伦和', '欧文都必须作报告，']\nnew_fact = infer_new_fact(selected) # '如果尼娜在星期一作报告，那么海伦和欧文必须在星期二作报告。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['我们知道凯尔在星期二下午作报告，海伦在星期三下午作报告。', '如果尼娜在星期一作报告，那么海伦和欧文必须在星期二作报告。']\nnew_fact = infer_new_fact(selected) # '我们知道海伦在星期三作报告，而星期二的 1 个时段已经被凯尔占用，因此尼娜无法在星期一作报告。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['星期二是乔治唯一可以作报告的日子。']\nnew_fact = infer_new_fact(selected) # '乔治不能在星期一或星期二作报告。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['奥利维亚和罗伯特都无法在下午作报告。']\nnew_fact = infer_new_fact(selected) # '如果奥利维亚和罗伯特作报告，他们只能在上午作报告。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['我们知道凯尔在星期二下午作报告，海伦在星期三下午作报告。', '我们知道海伦在星期三作报告，而星期二的 1 个时段已经被凯尔占用，因此尼娜无法在星期一作报告。', '乔治不能在星期一或星期二作报告。', '如果奥利维亚和罗伯特作报告，他们只能在上午作报告。']\nnew_fact = infer_new_fact(selected) # '因此，对于星期一下午的时段，我们知道凯尔、海伦、尼娜、乔治、奥利维亚和罗伯特无法作报告，因此只有莱诺尔或欧文可以作报告。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一项可能是分别在星期一、星期二和星期三上午作报告的学生名单？', '因此，对于星期一下午的时段，我们知道凯尔、海伦、尼娜、乔治、奥利维亚和罗伯特无法作报告，因此只有莱诺尔或欧文可以作报告。']\nnew_fact = infer_new_fact(selected) # '因此，上午只能由不包括莱诺尔和欧文的学生组合作报告，因为其中一人必须填补星期一下午的时段。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果凯尔在星期二下午作报告，', '海伦在星期三下午作报告，', '以下哪一项可能是分别在星期一、星期二和星期三上午作报告的学生名单？', 'D) 罗伯特、乔治和欧文', '因此，上午只能由不包括莱诺尔和欧文的学生组合作报告，因为其中一人必须填补星期一下午的时段。']\nnew_fact = infer_new_fact(selected) # '答案是 D。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 D。']\nnew_fact = infer_new_fact(selected) # 'The answer is D'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'D'"}
{"id": "AR-LSAT_5_bd579d212a", "context": "Of the eight students—George, Helen, Irving, Kyle, Lenore, Nina, Olivia, and Robert—in a seminar, exactly six will give individual oral reports during three consecutive days—Monday, Tuesday, and Wednesday. Exactly two reports will be given each day—one in the morning and one in the afternoon—according to the following conditions: Tuesday is the only day on which George can give a report. Neither Olivia nor Robert can give an afternoon report. If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday.", "options": ["Helen gives a report on Monday.", "Irving gives a report on Monday.", "Irving gives a report on Wednesday.", "Kyle gives a report on Tuesday.", "Kyle gives a report on Wednesday."], "answer": "B", "reasoning_graph_edges": [{"antecedents": [14, 15, 16], "consequent": 23}, {"antecedents": [9], "consequent": 24}, {"antecedents": [23, 24], "consequent": 25}, {"antecedents": [2, 25], "consequent": 26}, {"antecedents": [8, 26], "consequent": 27}, {"antecedents": [10, 11, 12, 26], "consequent": 28}, {"antecedents": [27, 28], "consequent": 29}, {"antecedents": [27, 29], "consequent": 30}, {"antecedents": [14, 15, 16, 17, 19, 30], "consequent": 31}, {"antecedents": [31], "consequent": 32}], "metadata": [], "linearized_output_en": "sent14 & sent15 & sent16 -> int1: Helen (H), Kyle (K), and Lenore (L) present the morning reports.; sent9 -> int2: Olivia (O) and Robert (R) can only give morning reports.; int1 & int2 -> int3: Because H, K, and L are already filling the morning slots, then O, R, H, K, and L can never be used for the afternoon reports.; int3 & sent2 -> int4: Irving (I), George (G), and Nina (N) must give the afternoon reports; int4 & sent8 -> int5: George can only present on Tuesday, so he presents on Tuesday afternoon.; int4 & sent10 & sent11 & sent12 -> int6: If Nina gives a report on Monday, Irving and Helen must give a report on Tuesday.; int5 & int6 -> int7: We know George and one of Helen, Kyle, or Lenore present on Tuesday, so Nina must give the Wednesday afternoon report.; int5 & int7 -> int8: Irving must give the Monday afternoon report since all the other days are occupied.; int8 & sent14 & sent15 & sent16 & sent17 & sent19 -> int9: The answer is B.; int9 -> int10: The answer is B);", "textual_logical_units": {"1": "在参加研讨会的八名学生", "2": "(乔治、海伦、欧文、凯尔、莱诺尔、尼娜、奥利维亚和罗伯特)中，", "3": "有六名学生将在连续三天", "4": "(星期一、星期二和星期三)内进行个人口头报告。", "5": "根据以下条件，", "6": "每天将作两份报告", "7": "(一份在上午，一份在下午)：", "8": "星期二是乔治唯一可以作报告的日子。", "9": "奥利维亚和罗伯特都无法在下午作报告。", "10": "如果尼娜作报告，", "11": "那么第二天海伦和", "12": "欧文都必须作报告，", "13": "除非尼娜在星期三作报告。", "14": "如果海伦、凯尔和莱诺尔", "15": "(不一定按此顺序)", "16": "三人均在上午作报告，", "17": "则以下哪一项一定是正确的？", "18": "A) 海伦星期一作报告。", "19": "B) 欧文星期一作报告。", "20": "C) 欧文星期三作报告。", "21": "D) 凯尔星期二作报告。", "22": "E) 凯尔星期三作报告。", "23": "海伦 (H)、凯尔 (K) 和莱诺尔 (L) 在上午作报告。", "24": "奥利维亚 (O) 和罗伯特 (R) 只能在上午作报告。", "25": "由于 H、K 和 L 已经占用了上午的时段，因此 O、R、H、K 和 L 永远无法不会下午作报告。", "26": "欧文 (I)、乔治 (G) 和尼娜 (N) 必须下午作报告", "27": "乔治只能在星期二作报告，因此他在星期二下午作报告。", "28": "如果尼娜在星期一作报告，欧文和海伦必须在星期二作报告。", "29": "我们知道乔治和海伦、凯尔或莱诺尔中的一位在星期二作报告，因此尼娜必须在星期三下午作报告。", "30": "欧文必须在星期一下午作报告，因为其他时间均被占用。", "31": "答案是 B。", "32": "The answer is B)"}, "human_translated": true, "code_input": "####\nfacts = [ '在参加研讨会的八名学生',\n  '(乔治、海伦、欧文、凯尔、莱诺尔、尼娜、奥利维亚和罗伯特)中，',\n  '有六名学生将在连续三天',\n  '(星期一、星期二和星期三)内进行个人口头报告。',\n  '根据以下条件，',\n  '每天将作两份报告',\n  '(一份在上午，一份在下午)：',\n  '星期二是乔治唯一可以作报告的日子。',\n  '奥利维亚和罗伯特都无法在下午作报告。',\n  '如果尼娜作报告，',\n  '那么第二天海伦和',\n  '欧文都必须作报告，',\n  '除非尼娜在星期三作报告。',\n  '如果海伦、凯尔和莱诺尔',\n  '(不一定按此顺序)',\n  '三人均在上午作报告，']\nquestion = '则以下哪一项一定是正确的？'\nchoices = {'A': '海伦星期一作报告。', 'B': '欧文星期一作报告。', 'C': '欧文星期三作报告。', 'D': '凯尔星期二作报告。', 'E': '凯尔星期三作报告。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['如果海伦、凯尔和莱诺尔', '(不一定按此顺序)', '三人均在上午作报告，']\nnew_fact = infer_new_fact(selected) # '海伦 (H)、凯尔 (K) 和莱诺尔 (L) 在上午作报告。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['奥利维亚和罗伯特都无法在下午作报告。']\nnew_fact = infer_new_fact(selected) # '奥利维亚 (O) 和罗伯特 (R) 只能在上午作报告。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['海伦 (H)、凯尔 (K) 和莱诺尔 (L) 在上午作报告。', '奥利维亚 (O) 和罗伯特 (R) 只能在上午作报告。']\nnew_fact = infer_new_fact(selected) # '由于 H、K 和 L 已经占用了上午的时段，因此 O、R、H、K 和 L 永远无法不会下午作报告。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['(乔治、海伦、欧文、凯尔、莱诺尔、尼娜、奥利维亚和罗伯特)中，', '由于 H、K 和 L 已经占用了上午的时段，因此 O、R、H、K 和 L 永远无法不会下午作报告。']\nnew_fact = infer_new_fact(selected) # '欧文 (I)、乔治 (G) 和尼娜 (N) 必须下午作报告'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['星期二是乔治唯一可以作报告的日子。', '欧文 (I)、乔治 (G) 和尼娜 (N) 必须下午作报告']\nnew_fact = infer_new_fact(selected) # '乔治只能在星期二作报告，因此他在星期二下午作报告。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果尼娜作报告，', '那么第二天海伦和', '欧文都必须作报告，', '欧文 (I)、乔治 (G) 和尼娜 (N) 必须下午作报告']\nnew_fact = infer_new_fact(selected) # '如果尼娜在星期一作报告，欧文和海伦必须在星期二作报告。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['乔治只能在星期二作报告，因此他在星期二下午作报告。', '如果尼娜在星期一作报告，欧文和海伦必须在星期二作报告。']\nnew_fact = infer_new_fact(selected) # '我们知道乔治和海伦、凯尔或莱诺尔中的一位在星期二作报告，因此尼娜必须在星期三下午作报告。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['乔治只能在星期二作报告，因此他在星期二下午作报告。', '我们知道乔治和海伦、凯尔或莱诺尔中的一位在星期二作报告，因此尼娜必须在星期三下午作报告。']\nnew_fact = infer_new_fact(selected) # '欧文必须在星期一下午作报告，因为其他时间均被占用。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果海伦、凯尔和莱诺尔', '(不一定按此顺序)', '三人均在上午作报告，', '则以下哪一项一定是正确的？', 'B) 欧文星期一作报告。', '欧文必须在星期一下午作报告，因为其他时间均被占用。']\nnew_fact = infer_new_fact(selected) # '答案是 B。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 B。']\nnew_fact = infer_new_fact(selected) # 'The answer is B'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'B'"}
{"id": "AR-LSAT_6_f738be1d3d", "context": "The organizer of a reading club will select at least five and at most six works from a group of nine works. The group consists of three French novels, three Russian novels, two French plays, and one Russian play. The organizer's selection of works must conform to the following requirements: No more than four French works are selected. At least three but no more than four novels are selected. At least as many French novels as Russian novels are selected. If both French plays are selected, then the Russian play is not selected.", "options": ["one French novel, two Russian novels, one French play, one Russian play", "two French novels, one Russian novel, two French plays, one Russian play", "two French novels, two Russian novels, two French plays", "three French novels, one Russian novel, two French plays", "three French novels, two Russian novels, one Russian play"], "answer": "C", "reasoning_graph_edges": [{"antecedents": [8, 9, 12], "consequent": 16}, {"antecedents": [7, 11], "consequent": 17}, {"antecedents": [5, 15], "consequent": 18}, {"antecedents": [6, 15], "consequent": 19}, {"antecedents": [10, 13, 16, 17, 18, 19], "consequent": 20}, {"antecedents": [20], "consequent": 21}], "metadata": [], "linearized_output_en": "sent12 & sent8 & sent9 -> int1: If both French plays are selected, then the Russian play is not selected. B is not an answer.; sent11 & sent7 -> int2: At least as many French novels as Russian novels should be selected. A is not an answer; sent15 & sent5 -> int3: No more than four French works may be selected. D is not an answer; sent15 & sent6 -> int4: No more than four novels may be selected. E is not an answer; int1 & int2 & int3 & int4 & sent10 & sent13 -> int5: The answer is C; int5 -> int6: The answer is C);", "textual_logical_units": {"1": "读书会的组织者将从九部作品中选出", "2": "至少五部、最多六部作品。", "3": "待选作品包括三部法国小说、三部俄国小说、两部法国戏剧和一部俄国戏剧。", "4": "组织者选择的作品必须遵循以下要求：", "5": "入选的法国作品不超过四部。", "6": "至少有三部小说入选，但不超过四部。", "7": "入选的法国小说至少和俄国小说一样多。", "8": "如果两部法国戏剧入选，", "9": "则不会选择俄国戏剧。", "10": "以下哪一项可能是组织者选择的作品？", "11": "A) 一部法国小说、两部俄国小说、一部法国戏剧、一部俄国戏剧", "12": "B) 两部法国小说、一部俄国小说、两部法国戏剧、一部俄国戏剧", "13": "C) 两部法国小说、两部俄国小说、两部法国戏剧", "14": "D) 三部法国小说、一部俄国小说、两部法国戏剧", "15": "E) 三部法国小说、两部俄国小说、一部俄国戏剧", "16": "如果两部法国戏剧均入选，则不会选择俄国戏剧。B 不是答案。", "17": "入选的法国小说应至少和俄国小说一样多。A 不是答案", "18": "入选的法国作品不得超过四部。D 不是答案", "19": "入选的小说不得超过四部。E 不是答案", "20": "答案是 C", "21": "The answer is C)"}, "human_translated": true, "code_input": "####\nfacts = [ '读书会的组织者将从九部作品中选出',\n  '至少五部、最多六部作品。',\n  '待选作品包括三部法国小说、三部俄国小说、两部法国戏剧和一部俄国戏剧。',\n  '组织者选择的作品必须遵循以下要求：',\n  '入选的法国作品不超过四部。',\n  '至少有三部小说入选，但不超过四部。',\n  '入选的法国小说至少和俄国小说一样多。',\n  '如果两部法国戏剧入选，',\n  '则不会选择俄国戏剧。']\nquestion = '以下哪一项可能是组织者选择的作品？'\nchoices = {'A': '一部法国小说、两部俄国小说、一部法国戏剧、一部俄国戏剧', 'B': '两部法国小说、一部俄国小说、两部法国戏剧、一部俄国戏剧', 'C': '两部法国小说、两部俄国小说、两部法国戏剧', 'D': '三部法国小说、一部俄国小说、两部法国戏剧', 'E': '三部法国小说、两部俄国小说、一部俄国戏剧'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['如果两部法国戏剧入选，', '则不会选择俄国戏剧。', 'B) 两部法国小说、一部俄国小说、两部法国戏剧、一部俄国戏剧']\nnew_fact = infer_new_fact(selected) # '如果两部法国戏剧均入选，则不会选择俄国戏剧。B 不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['入选的法国小说至少和俄国小说一样多。', 'A) 一部法国小说、两部俄国小说、一部法国戏剧、一部俄国戏剧']\nnew_fact = infer_new_fact(selected) # '入选的法国小说应至少和俄国小说一样多。A 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['入选的法国作品不超过四部。', 'E) 三部法国小说、两部俄国小说、一部俄国戏剧']\nnew_fact = infer_new_fact(selected) # '入选的法国作品不得超过四部。D 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['至少有三部小说入选，但不超过四部。', 'E) 三部法国小说、两部俄国小说、一部俄国戏剧']\nnew_fact = infer_new_fact(selected) # '入选的小说不得超过四部。E 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一项可能是组织者选择的作品？', 'C) 两部法国小说、两部俄国小说、两部法国戏剧', '如果两部法国戏剧均入选，则不会选择俄国戏剧。B 不是答案。', '入选的法国小说应至少和俄国小说一样多。A 不是答案', '入选的法国作品不得超过四部。D 不是答案', '入选的小说不得超过四部。E 不是答案']\nnew_fact = infer_new_fact(selected) # '答案是 C'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 C']\nnew_fact = infer_new_fact(selected) # 'The answer is C'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'C'"}
{"id": "AR-LSAT_7_ae526b34c8", "context": "The organizer of a reading club will select at least five and at most six works from a group of nine works. The group consists of three French novels, three Russian novels, two French plays, and one Russian play. The organizer's selection of works must conform to the following requirements: No more than four French works are selected. At least three but no more than four novels are selected. At least as many French novels as Russian novels are selected. If both French plays are selected, then the Russian play is not selected.", "options": ["No Russian novels are selected.", "Exactly one French novel is selected.", "All three plays are selected.", "All three Russian novels are selected.", "All five French works are selected."], "answer": "A", "reasoning_graph_edges": [{"antecedents": [8, 9, 13], "consequent": 16}, {"antecedents": [6, 7, 14], "consequent": 17}, {"antecedents": [5, 15], "consequent": 18}, {"antecedents": [1, 2, 7, 8, 9], "consequent": 19}, {"antecedents": [10, 11, 16, 17, 18, 19], "consequent": 20}, {"antecedents": [20], "consequent": 21}], "metadata": [], "linearized_output_en": "sent13 & sent8 & sent9 -> int1: If the French plays are selected, no plays may be selected. C is not an anwer; sent14 & sent6 & sent7 -> int2: At least as many French novels as Russian ones may be selected. D is not an answer; sent15 & sent5 -> int3: At most, four French works may be selected. E is not an answer; sent1 & sent2 & sent7 & sent8 & sent9 -> int4: More Russian novels than French ones may not be selected, and once the French plays have been selected, the Russian one cannot be selected. Not enough works are available for the reading group with B as the answer.; int1 & int2 & int3 & int4 & sent10 & sent11 -> int5: The answer is A.; int5 -> int6: The answer is A);", "textual_logical_units": {"1": "读书会的组织者将从九部作品中选出", "2": "至少五部、最多六部作品。", "3": "待选作品包括三部法国小说、三部俄国小说、两部法国戏剧和一部俄国戏剧。", "4": "组织者选择的作品必须遵循以下要求：", "5": "入选的法国作品不超过四部。", "6": "至少有三部小说入选，但不超过四部。", "7": "入选的法国小说至少和俄国小说一样多。", "8": "如果两部法国戏剧入选，", "9": "则不会选择俄国戏剧。", "10": "关于组织者的作品选择，以下哪一项可能是正确的？", "11": "A) 俄国小说未入选。", "12": "B) 只有一部法国小说入选。", "13": "C) 所有三部戏剧均入选。", "14": "D) 所有三部俄国小说均入选。", "15": "E) 所有五部法国作品均入选。", "16": "如果法国戏剧入选，则不能选择任何戏剧。C 不是答案", "17": "入选的法国小说至少和俄国小说一样多。D 不是答案", "18": "最多可以有四部法国作品入选。E 不是答案", "19": "入选的俄国小说可能比法国小说更多，如果法国戏剧入选，则无法选择俄国戏剧。如果答案为 B，读书会没有足够的作品。", "20": "答案是 A。", "21": "The answer is A)"}, "human_translated": true, "code_input": "####\nfacts = [ '读书会的组织者将从九部作品中选出',\n  '至少五部、最多六部作品。',\n  '待选作品包括三部法国小说、三部俄国小说、两部法国戏剧和一部俄国戏剧。',\n  '组织者选择的作品必须遵循以下要求：',\n  '入选的法国作品不超过四部。',\n  '至少有三部小说入选，但不超过四部。',\n  '入选的法国小说至少和俄国小说一样多。',\n  '如果两部法国戏剧入选，',\n  '则不会选择俄国戏剧。']\nquestion = '关于组织者的作品选择，以下哪一项可能是正确的？'\nchoices = {'A': '俄国小说未入选。', 'B': '只有一部法国小说入选。', 'C': '所有三部戏剧均入选。', 'D': '所有三部俄国小说均入选。', 'E': '所有五部法国作品均入选。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['如果两部法国戏剧入选，', '则不会选择俄国戏剧。', 'C) 所有三部戏剧均入选。']\nnew_fact = infer_new_fact(selected) # '如果法国戏剧入选，则不能选择任何戏剧。C 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['至少有三部小说入选，但不超过四部。', '入选的法国小说至少和俄国小说一样多。', 'D) 所有三部俄国小说均入选。']\nnew_fact = infer_new_fact(selected) # '入选的法国小说至少和俄国小说一样多。D 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['入选的法国作品不超过四部。', 'E) 所有五部法国作品均入选。']\nnew_fact = infer_new_fact(selected) # '最多可以有四部法国作品入选。E 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['读书会的组织者将从九部作品中选出', '至少五部、最多六部作品。', '入选的法国小说至少和俄国小说一样多。', '如果两部法国戏剧入选，', '则不会选择俄国戏剧。']\nnew_fact = infer_new_fact(selected) # '入选的俄国小说可能比法国小说更多，如果法国戏剧入选，则无法选择俄国戏剧。如果答案为 B，读书会没有足够的作品。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['关于组织者的作品选择，以下哪一项可能是正确的？', 'A) 俄国小说未入选。', '如果法国戏剧入选，则不能选择任何戏剧。C 不是答案', '入选的法国小说至少和俄国小说一样多。D 不是答案', '最多可以有四部法国作品入选。E 不是答案', '入选的俄国小说可能比法国小说更多，如果法国戏剧入选，则无法选择俄国戏剧。如果答案为 B，读书会没有足够的作品。']\nnew_fact = infer_new_fact(selected) # '答案是 A。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 A。']\nnew_fact = infer_new_fact(selected) # 'The answer is A'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'A'"}
{"id": "AR-LSAT_8_a884112958", "context": "The organizer of a reading club will select at least five and at most six works from a group of nine works. The group consists of three French novels, three Russian novels, two French plays, and one Russian play. The organizer's selection of works must conform to the following requirements: No more than four French works are selected. At least three but no more than four novels are selected. At least as many French novels as Russian novels are selected. If both French plays are selected, then the Russian play is not selected.", "options": ["one Russian novel", "two French plays", "one Russian novel, one Russian play", "one Russian novel, two French plays", "two Russian novels, one French play"], "answer": "C", "reasoning_graph_edges": [{"antecedents": [5, 10, 14, 16], "consequent": 18}, {"antecedents": [6, 10, 17], "consequent": 19}, {"antecedents": [3, 11, 12, 13], "consequent": 20}, {"antecedents": [10, 11, 12, 15, 18, 19, 20], "consequent": 21}, {"antecedents": [21], "consequent": 22}], "metadata": [], "linearized_output_en": "sent10 & sent14 & sent16 & sent5 -> int1: No more than four French works may be selected. B and D are not answers; sent10 & sent17 & sent6 -> int2: No more than four novels may be selected. E is not an answer; sent11 & sent12 & sent13 & sent3 -> int3: A complete list should include all types of works. A is not an answer/; int1 & int2 & int3 & sent10 & sent11 & sent12 & sent15 -> int4: The answer is C; int4 -> int5: The answer is C);", "textual_logical_units": {"1": "读书会的组织者将从九部作品中选出", "2": "至少五部、最多六部作品。", "3": "待选作品包括三部法国小说、三部俄国小说、两部法国戏剧和一部俄国戏剧。", "4": "组织者选择的作品必须遵循以下要求：", "5": "入选的法国作品不超过四部。", "6": "至少有三部小说入选，但不超过四部。", "7": "入选的法国小说至少和俄国小说一样多。", "8": "如果两部法国戏剧入选，", "9": "则不会选择俄国戏剧。", "10": "如果入选的作品包括三部法国小说，", "11": "则以下哪一项完整准确地列出了", "12": "剩余入选作品？", "13": "A) 一部俄国小说", "14": "B) 两部法国戏剧", "15": "C) 一部俄国小说，一部俄国戏剧", "16": "D) 一部俄国小说，两部法国戏剧", "17": "E) 两部俄国小说，一部法国戏剧", "18": "入选的法国作品不得超过四部。B 和 D 不是答案", "19": "入选的小说不得超过四部。E 不是答案", "20": "完整列表应包含所有类型的作品。A 不是答案/", "21": "答案是 C", "22": "The answer is C)"}, "human_translated": true, "code_input": "####\nfacts = [ '读书会的组织者将从九部作品中选出',\n  '至少五部、最多六部作品。',\n  '待选作品包括三部法国小说、三部俄国小说、两部法国戏剧和一部俄国戏剧。',\n  '组织者选择的作品必须遵循以下要求：',\n  '入选的法国作品不超过四部。',\n  '至少有三部小说入选，但不超过四部。',\n  '入选的法国小说至少和俄国小说一样多。',\n  '如果两部法国戏剧入选，',\n  '则不会选择俄国戏剧。',\n  '如果入选的作品包括三部法国小说，',\n  '则以下哪一项完整准确地列出了']\nquestion = '剩余入选作品？'\nchoices = {'A': '一部俄国小说', 'B': '两部法国戏剧', 'C': '一部俄国小说，一部俄国戏剧', 'D': '一部俄国小说，两部法国戏剧', 'E': '两部俄国小说，一部法国戏剧'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['入选的法国作品不超过四部。', '如果入选的作品包括三部法国小说，', 'B) 两部法国戏剧', 'D) 一部俄国小说，两部法国戏剧']\nnew_fact = infer_new_fact(selected) # '入选的法国作品不得超过四部。B 和 D 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['至少有三部小说入选，但不超过四部。', '如果入选的作品包括三部法国小说，', 'E) 两部俄国小说，一部法国戏剧']\nnew_fact = infer_new_fact(selected) # '入选的小说不得超过四部。E 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['待选作品包括三部法国小说、三部俄国小说、两部法国戏剧和一部俄国戏剧。', '则以下哪一项完整准确地列出了', '剩余入选作品？', 'A) 一部俄国小说']\nnew_fact = infer_new_fact(selected) # '完整列表应包含所有类型的作品。A 不是答案/'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果入选的作品包括三部法国小说，', '则以下哪一项完整准确地列出了', '剩余入选作品？', 'C) 一部俄国小说，一部俄国戏剧', '入选的法国作品不得超过四部。B 和 D 不是答案', '入选的小说不得超过四部。E 不是答案', '完整列表应包含所有类型的作品。A 不是答案/']\nnew_fact = infer_new_fact(selected) # '答案是 C'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 C']\nnew_fact = infer_new_fact(selected) # 'The answer is C'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'C'"}
{"id": "AR-LSAT_9_aab53466b8", "context": "The organizer of a reading club will select at least five and at most six works from a group of nine works. The group consists of three French novels, three Russian novels, two French plays, and one Russian play. The organizer's selection of works must conform to the following requirements: No more than four French works are selected. At least three but no more than four novels are selected. At least as many French novels as Russian novels are selected. If both French plays are selected, then the Russian play is not selected.", "options": ["one French novel and one French play", "one French novel and one Russian play", "one Russian novel and one French play", "two French novels", "two Russian novels"], "answer": "D", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 16}, {"antecedents": [7], "consequent": 17}, {"antecedents": [5, 6, 8, 9, 16, 17], "consequent": 18}, {"antecedents": [17], "consequent": 19}, {"antecedents": [10, 14, 14, 19], "consequent": 20}, {"antecedents": [20], "consequent": 21}], "metadata": [], "linearized_output_en": "sent1 -> int1: The organizer must select at least five works; sent7 -> int2: At least as many French novels are Russian ones may be selected; int1 & int2 & sent5 & sent6 & sent8 & sent9 -> int3: The less restrictive option is at least two French novels, since one can choose either one or two Russian novels, and a play or two.; int2 -> int4: With two Russian novels, one must select two French ones.; int4 & sent10 & sent14 & sent14 -> int5: The answer is D; int5 -> int6: The answer is D);", "textual_logical_units": {"1": "读书会的组织者将从九部作品中选出", "2": "至少五部、最多六部作品。", "3": "待选作品包括三部法国小说、三部俄国小说、两部法国戏剧和一部俄国戏剧。", "4": "组织者选择的作品必须遵循以下要求：", "5": "入选的法国作品不超过四部。", "6": "至少有三部小说入选，但不超过四部。", "7": "入选的法国小说至少和俄国小说一样多。", "8": "如果两部法国戏剧入选，", "9": "则不会选择俄国戏剧。", "10": "组织者必须至少选择", "11": "A) 一部法国小说和一部法国戏剧", "12": "B) 一部法国小说和一部俄国戏剧", "13": "C) 一部俄国小说和一部法国戏剧", "14": "D) 两部法国小说", "15": "E) 两部俄国小说", "16": "组织者必须至少选择五部作品", "17": "入选的法国小说至少和俄国小说一样多", "18": "限制较少的选项是至少两部法国小说，因为组织者可以选择一或两部俄国小说，也可以选择一或两部戏剧。", "19": "如果入选两部俄国小说，必须选择两部法国小说。", "20": "答案是 D", "21": "The answer is D)"}, "human_translated": true, "code_input": "####\nfacts = [ '读书会的组织者将从九部作品中选出',\n  '至少五部、最多六部作品。',\n  '待选作品包括三部法国小说、三部俄国小说、两部法国戏剧和一部俄国戏剧。',\n  '组织者选择的作品必须遵循以下要求：',\n  '入选的法国作品不超过四部。',\n  '至少有三部小说入选，但不超过四部。',\n  '入选的法国小说至少和俄国小说一样多。',\n  '如果两部法国戏剧入选，',\n  '则不会选择俄国戏剧。']\nquestion = '组织者必须至少选择'\nchoices = {'A': '一部法国小说和一部法国戏剧', 'B': '一部法国小说和一部俄国戏剧', 'C': '一部俄国小说和一部法国戏剧', 'D': '两部法国小说', 'E': '两部俄国小说'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['读书会的组织者将从九部作品中选出']\nnew_fact = infer_new_fact(selected) # '组织者必须至少选择五部作品'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['入选的法国小说至少和俄国小说一样多。']\nnew_fact = infer_new_fact(selected) # '入选的法国小说至少和俄国小说一样多'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['入选的法国作品不超过四部。', '至少有三部小说入选，但不超过四部。', '如果两部法国戏剧入选，', '则不会选择俄国戏剧。', '组织者必须至少选择五部作品', '入选的法国小说至少和俄国小说一样多']\nnew_fact = infer_new_fact(selected) # '限制较少的选项是至少两部法国小说，因为组织者可以选择一或两部俄国小说，也可以选择一或两部戏剧。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['入选的法国小说至少和俄国小说一样多']\nnew_fact = infer_new_fact(selected) # '如果入选两部俄国小说，必须选择两部法国小说。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['组织者必须至少选择', 'D) 两部法国小说', 'D) 两部法国小说', '如果入选两部俄国小说，必须选择两部法国小说。']\nnew_fact = infer_new_fact(selected) # '答案是 D'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 D']\nnew_fact = infer_new_fact(selected) # 'The answer is D'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'D'"}
{"id": "AR-LSAT_10_c6851062fd", "context": "The organizer of a reading club will select at least five and at most six works from a group of nine works. The group consists of three French novels, three Russian novels, two French plays, and one Russian play. The organizer's selection of works must conform to the following requirements: No more than four French works are selected. At least three but no more than four novels are selected. At least as many French novels as Russian novels are selected. If both French plays are selected, then the Russian play is not selected.", "options": ["No Russian novels and exactly one play are selected.", "Exactly one Russian novel and both French plays are selected.", "Exactly two French novels and the Russian play are selected.", "Exactly two French novels and exactly two plays are selected.", "Exactly two Russian novels and exactly one play are selected."], "answer": "A", "reasoning_graph_edges": [{"antecedents": [1], "consequent": 16}, {"antecedents": [10, 11, 16], "consequent": 17}, {"antecedents": [17], "consequent": 18}], "metadata": [], "linearized_output_en": "sent1 -> int1: At least five works may be selected. Three French novels and a play are not enough; int1 & sent10 & sent11 -> int2: The answer is A; int2 -> int3: The answer is A);", "textual_logical_units": {"1": "读书会的组织者将从九部作品中选出", "2": "至少五部、最多六部作品。", "3": "待选作品包括三部法国小说、三部俄国小说、两部法国戏剧和一部俄国戏剧。", "4": "组织者选择的作品必须遵循以下要求：", "5": "入选的法国作品不超过四部。", "6": "至少有三部小说入选，但不超过四部。", "7": "入选的法国小说至少和俄国小说一样多。", "8": "如果两部法国戏剧入选，", "9": "则不会选择俄国戏剧。", "10": "关于组织者选择的作品，除了以下哪一项，其他选项都是正确的：", "11": "A) 俄国小说未入选，仅一部戏剧入选。", "12": "B) 一部俄国小说和两部法国戏剧入选。", "13": "C) 两部法国小说和一部俄国戏剧入选。", "14": "D) 两部法国小说和两部戏剧入选。", "15": "E) 两部俄国小说和一部戏剧入选。", "16": "至少可以选择五部作品。三部法国小说和一部戏剧不够", "17": "答案是 A", "18": "The answer is A)"}, "human_translated": true, "code_input": "####\nfacts = [ '读书会的组织者将从九部作品中选出',\n  '至少五部、最多六部作品。',\n  '待选作品包括三部法国小说、三部俄国小说、两部法国戏剧和一部俄国戏剧。',\n  '组织者选择的作品必须遵循以下要求：',\n  '入选的法国作品不超过四部。',\n  '至少有三部小说入选，但不超过四部。',\n  '入选的法国小说至少和俄国小说一样多。',\n  '如果两部法国戏剧入选，',\n  '则不会选择俄国戏剧。']\nquestion = '关于组织者选择的作品，除了以下哪一项，其他选项都是正确的：'\nchoices = {'A': '俄国小说未入选，仅一部戏剧入选。', 'B': '一部俄国小说和两部法国戏剧入选。', 'C': '两部法国小说和一部俄国戏剧入选。', 'D': '两部法国小说和两部戏剧入选。', 'E': '两部俄国小说和一部戏剧入选。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['读书会的组织者将从九部作品中选出']\nnew_fact = infer_new_fact(selected) # '至少可以选择五部作品。三部法国小说和一部戏剧不够'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['关于组织者选择的作品，除了以下哪一项，其他选项都是正确的：', 'A) 俄国小说未入选，仅一部戏剧入选。', '至少可以选择五部作品。三部法国小说和一部戏剧不够']\nnew_fact = infer_new_fact(selected) # '答案是 A'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 A']\nnew_fact = infer_new_fact(selected) # 'The answer is A'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'A'"}
{"id": "AR-LSAT_11_ff498a5655", "context": "At a concert, exactly eight compositions—F, H, L, O, P, R, S, and T—are to be performed exactly once each, consecutively and one composition at a time. The order of their performance must satisfy the following conditions: T is performed either immediately before F or immediately after R. At least two compositions are performed either after F and before R, or after R and before F. O is performed either first or fifth. The eighth composition performed is either L or H. P is performed at some time before S. At least one composition is performed either after O and before S, or after S and before O.", "options": ["L, P, S, R, O, T, F, H", "O, T, P, F, S, H, R, L", "P, T, F, S, L, R, O, H", "P, T, F, S, O, R, L, H", "T, F, P, R, O, L, S, H"], "answer": "A", "reasoning_graph_edges": [{"antecedents": [8, 15], "consequent": 18}, {"antecedents": [7, 17], "consequent": 19}, {"antecedents": [11, 16], "consequent": 20}, {"antecedents": [6, 14], "consequent": 21}, {"antecedents": [12, 13, 18, 19, 20, 21], "consequent": 22}, {"antecedents": [22], "consequent": 23}], "metadata": [], "linearized_output_en": "sent15 & sent8 -> int1: O must be performed first or fifth, so we rule out option C.; sent17 & sent7 -> int2: 2 compositions must be performed between F and R, so we rule out option E.; sent11 & sent16 -> int3: At least one composition must be performed between S and O, so we rule out option D.; sent14 & sent6 -> int4: T must be performed either immediately before F or immediately after R, so we rule out option B.; int1 & int2 & int3 & int4 & sent12 & sent13 -> int5: The answer is A.; int5 -> int6: The answer is A);", "textual_logical_units": {"1": "在一场音乐会上，共演奏八首乐曲", "2": "(F、H、L、O、P、R、S 和 T)，", "3": "每首乐曲只能连续演奏一次，", "4": "一次演奏一首乐曲。", "5": "乐曲的演奏顺序必须遵循以下条件：", "6": "T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。", "7": "在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。", "8": "O 在第一首或第五首演奏。", "9": "演奏的第八首乐曲是 L 或 H。", "10": "P 在 S 之前的某个时间演奏。", "11": "在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。", "12": "以下哪一项按音乐会期间的演奏顺序(从第一首到第八首)列出了乐曲？", "13": "A) L、P、S、R、O、T、F、H", "14": "B) O、T、P、F、S、H、R、L", "15": "C) P、T、F、S、L、R、O、H", "16": "D) P、T、F、S、O、R、L、H", "17": "E) T、F、P、R、O、L、S、H", "18": "O 必须在第一首或第五首演奏，因此我们排除了选项 C。", "19": "F 和 R 之间必须演奏 2 首乐曲，因此我们排除了选项 E。", "20": "S 和 O 之间必须演奏至少一首乐曲，因此我们排除了选项 D。", "21": "T 必须紧接在 F 之前或紧接在 R 之后演奏，因此我们排除了选项 B。", "22": "答案是 A。", "23": "The answer is A)"}, "human_translated": true, "code_input": "####\nfacts = [ '在一场音乐会上，共演奏八首乐曲',\n  '(F、H、L、O、P、R、S 和 T)，',\n  '每首乐曲只能连续演奏一次，',\n  '一次演奏一首乐曲。',\n  '乐曲的演奏顺序必须遵循以下条件：',\n  'T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。',\n  '在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。',\n  'O 在第一首或第五首演奏。',\n  '演奏的第八首乐曲是 L 或 H。',\n  'P 在 S 之前的某个时间演奏。',\n  '在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。']\nquestion = '以下哪一项按音乐会期间的演奏顺序(从第一首到第八首)列出了乐曲？'\nchoices = {'A': 'L、P、S、R、O、T、F、H', 'B': 'O、T、P、F、S、H、R、L', 'C': 'P、T、F、S、L、R、O、H', 'D': 'P、T、F、S、O、R、L、H', 'E': 'T、F、P、R、O、L、S、H'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['O 在第一首或第五首演奏。', 'C) P、T、F、S、L、R、O、H']\nnew_fact = infer_new_fact(selected) # 'O 必须在第一首或第五首演奏，因此我们排除了选项 C。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。', 'E) T、F、P、R、O、L、S、H']\nnew_fact = infer_new_fact(selected) # 'F 和 R 之间必须演奏 2 首乐曲，因此我们排除了选项 E。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。', 'D) P、T、F、S、O、R、L、H']\nnew_fact = infer_new_fact(selected) # 'S 和 O 之间必须演奏至少一首乐曲，因此我们排除了选项 D。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。', 'B) O、T、P、F、S、H、R、L']\nnew_fact = infer_new_fact(selected) # 'T 必须紧接在 F 之前或紧接在 R 之后演奏，因此我们排除了选项 B。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一项按音乐会期间的演奏顺序(从第一首到第八首)列出了乐曲？', 'A) L、P、S、R、O、T、F、H', 'O 必须在第一首或第五首演奏，因此我们排除了选项 C。', 'F 和 R 之间必须演奏 2 首乐曲，因此我们排除了选项 E。', 'S 和 O 之间必须演奏至少一首乐曲，因此我们排除了选项 D。', 'T 必须紧接在 F 之前或紧接在 R 之后演奏，因此我们排除了选项 B。']\nnew_fact = infer_new_fact(selected) # '答案是 A。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 A。']\nnew_fact = infer_new_fact(selected) # 'The answer is A'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'A'"}
{"id": "AR-LSAT_12_04806d651e", "context": "At a concert, exactly eight compositions—F, H, L, O, P, R, S, and T—are to be performed exactly once each, consecutively and one composition at a time. The order of their performance must satisfy the following conditions: T is performed either immediately before F or immediately after R. At least two compositions are performed either after F and before R, or after R and before F. O is performed either first or fifth. The eighth composition performed is either L or H. P is performed at some time before S. At least one composition is performed either after O and before S, or after S and before O.", "options": ["second", "third", "fourth", "sixth", "seventh"], "answer": "E", "reasoning_graph_edges": [{"antecedents": [10], "consequent": 18}, {"antecedents": [9], "consequent": 19}, {"antecedents": [1, 2, 3, 4, 18, 19], "consequent": 20}, {"antecedents": [12, 17, 20], "consequent": 21}, {"antecedents": [21], "consequent": 22}], "metadata": [], "linearized_output_en": "sent10 -> int1: P must be performed before S.; sent9 -> int2: Slot 8 is already occupied, either by L or H (and only L or H).; int1 & int2 & sent1 & sent2 & sent3 & sent4 -> int3: Since there are only 8 slots and slot 8 cannot be S, P cannot be in slot 7.; int3 & sent12 & sent17 -> int4: The answer is 7.; int4 -> int5: The answer is E);", "textual_logical_units": {"1": "在一场音乐会上，共演奏八首乐曲", "2": "(F、H、L、O、P、R、S 和 T)，", "3": "每首乐曲只能连续演奏一次，", "4": "一次演奏一首乐曲。", "5": "乐曲的演奏顺序必须遵循以下条件：", "6": "T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。", "7": "在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。", "8": "O 在第一首或第五首演奏。", "9": "演奏的第八首乐曲是 L 或 H。", "10": "P 在 S 之前的某个时间演奏。", "11": "在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。", "12": "P 无法在第几首演奏", "13": "A) 第二首", "14": "B) 第三首", "15": "C) 第四首", "16": "D) 第六首", "17": "E) 第七首", "18": "P 必须在 S 之前演奏。", "19": "位置 8 已被 L 或 H 占用(并且只能是 L 或 H)。", "20": "由于只有 8 个位置并且位置 8 不能是 S，因此 P 不能在位置 7。", "21": "答案是 7。", "22": "The answer is E)"}, "human_translated": true, "code_input": "####\nfacts = [ '在一场音乐会上，共演奏八首乐曲',\n  '(F、H、L、O、P、R、S 和 T)，',\n  '每首乐曲只能连续演奏一次，',\n  '一次演奏一首乐曲。',\n  '乐曲的演奏顺序必须遵循以下条件：',\n  'T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。',\n  '在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。',\n  'O 在第一首或第五首演奏。',\n  '演奏的第八首乐曲是 L 或 H。',\n  'P 在 S 之前的某个时间演奏。',\n  '在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。']\nquestion = 'P 无法在第几首演奏'\nchoices = {'A': '第二首', 'B': '第三首', 'C': '第四首', 'D': '第六首', 'E': '第七首'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['P 在 S 之前的某个时间演奏。']\nnew_fact = infer_new_fact(selected) # 'P 必须在 S 之前演奏。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['演奏的第八首乐曲是 L 或 H。']\nnew_fact = infer_new_fact(selected) # '位置 8 已被 L 或 H 占用(并且只能是 L 或 H)。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['在一场音乐会上，共演奏八首乐曲', '(F、H、L、O、P、R、S 和 T)，', '每首乐曲只能连续演奏一次，', '一次演奏一首乐曲。', 'P 必须在 S 之前演奏。', '位置 8 已被 L 或 H 占用(并且只能是 L 或 H)。']\nnew_fact = infer_new_fact(selected) # '由于只有 8 个位置并且位置 8 不能是 S，因此 P 不能在位置 7。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['P 无法在第几首演奏', 'E) 第七首', '由于只有 8 个位置并且位置 8 不能是 S，因此 P 不能在位置 7。']\nnew_fact = infer_new_fact(selected) # '答案是 7。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 7。']\nnew_fact = infer_new_fact(selected) # 'The answer is E'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'E'"}
{"id": "AR-LSAT_13_42777d1f2b", "context": "At a concert, exactly eight compositions—F, H, L, O, P, R, S, and T—are to be performed exactly once each, consecutively and one composition at a time. The order of their performance must satisfy the following conditions: T is performed either immediately before F or immediately after R. At least two compositions are performed either after F and before R, or after R and before F. O is performed either first or fifth. The eighth composition performed is either L or H. P is performed at some time before S. At least one composition is performed either after O and before S, or after S and before O.", "options": ["fourth or seventh", "third or sixth", "third or fourth", "second or seventh", "first or fourth"], "answer": "A", "reasoning_graph_edges": [{"antecedents": [12], "consequent": 19}, {"antecedents": [8, 19], "consequent": 20}, {"antecedents": [11], "consequent": 21}, {"antecedents": [7, 20], "consequent": 22}, {"antecedents": [9, 22], "consequent": 23}, {"antecedents": [10, 23], "consequent": 24}, {"antecedents": [21, 24], "consequent": 25}, {"antecedents": [12, 13, 14, 25], "consequent": 26}, {"antecedents": [26], "consequent": 27}], "metadata": [], "linearized_output_en": "sent12 -> int1: T is performed fifth and F is performed 6th: ? ? ? ? T F ? ?; int1 & sent8 -> int2: Since slot 5 is occupied, O must be performed first: O ? ? ? T F ? ?; sent11 -> int3: S cannot be adjacent to O, so it cannot be in slot 2.; int2 & sent7 -> int4: At least 2 compositions must be performed between F and R, so R can be in slots 2 or 3: O (R) (R) ? T F ? ?; int4 & sent9 -> int5: Slot 8 must contain L or H: O (R) (R) ? T F ? (L/H); int5 & sent10 -> int6: Based on the fact that S must be performed after P, we know that P can occupy slots 2-4: O (R/P) (P/R) (P) T F ? (L/H); int3 & int6 -> int7: Using these positions, we know that S can only be in slots 4 or 7 (and L or H can fill a remaining slot): O (R/P) (P/R) (P/S) T F (S) (L/H); int7 & sent12 & sent13 & sent14 -> int8: The answer is A.; int8 -> int9: The answer is A);", "textual_logical_units": {"1": "在一场音乐会上，共演奏八首乐曲", "2": "(F、H、L、O、P、R、S 和 T)，", "3": "每首乐曲只能连续演奏一次，", "4": "一次演奏一首乐曲。", "5": "乐曲的演奏顺序必须遵循以下条件：", "6": "T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。", "7": "在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。", "8": "O 在第一首或第五首演奏。", "9": "演奏的第八首乐曲是 L 或 H。", "10": "P 在 S 之前的某个时间演奏。", "11": "在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。", "12": "如果 T 在第五首演奏，F 在第六首演奏，", "13": "则 S 必须在第几首演奏", "14": "A) 第四首或第七首", "15": "B) 第三首或第六首", "16": "C) 第三首或第四首", "17": "D) 第二首或第七首", "18": "E) 第一首或第四首", "19": "如果 T 在第五首演奏，F 在第六首演奏：? ? ? ? T F ? ?", "20": "由于位置 5 已被占用，必须先演奏 O： O ? ? ? T F ? ?", "21": "S 不能与 O 相邻，因此不能在位置 2。", "22": "F 和 R 之间必须演奏至少 2 首乐曲，因此 R 可以在位置 2 或 3： O (R) (R) ? T F ? ?", "23": "位置 8 必须是 L 或 H： O (R) (R) ? T F ? (L/H)", "24": "基于必须在 P 之后演奏 S 这一事实，我们知道 P 可以占用位置 2-4： O (R/P) (P/R) (P) T F ? (L/H)", "25": "使用这些位置，我们知道 S 只能在位置 4 或 7(而 L 或 H 可以填补剩余的位置)： O (R/P) (P/R) (P/S) T F (S) (L/H)", "26": "答案是 A。", "27": "The answer is A)"}, "human_translated": true, "code_input": "####\nfacts = [ '在一场音乐会上，共演奏八首乐曲',\n  '(F、H、L、O、P、R、S 和 T)，',\n  '每首乐曲只能连续演奏一次，',\n  '一次演奏一首乐曲。',\n  '乐曲的演奏顺序必须遵循以下条件：',\n  'T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。',\n  '在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。',\n  'O 在第一首或第五首演奏。',\n  '演奏的第八首乐曲是 L 或 H。',\n  'P 在 S 之前的某个时间演奏。',\n  '在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。',\n  '如果 T 在第五首演奏，F 在第六首演奏，']\nquestion = '则 S 必须在第几首演奏'\nchoices = {'A': '第四首或第七首', 'B': '第三首或第六首', 'C': '第三首或第四首', 'D': '第二首或第七首', 'E': '第一首或第四首'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['如果 T 在第五首演奏，F 在第六首演奏，']\nnew_fact = infer_new_fact(selected) # '如果 T 在第五首演奏，F 在第六首演奏：? ? ? ? T F ? ?'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['O 在第一首或第五首演奏。', '如果 T 在第五首演奏，F 在第六首演奏：? ? ? ? T F ? ?']\nnew_fact = infer_new_fact(selected) # '由于位置 5 已被占用，必须先演奏 O： O ? ? ? T F ? ?'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。']\nnew_fact = infer_new_fact(selected) # 'S 不能与 O 相邻，因此不能在位置 2。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。', '由于位置 5 已被占用，必须先演奏 O： O ? ? ? T F ? ?']\nnew_fact = infer_new_fact(selected) # 'F 和 R 之间必须演奏至少 2 首乐曲，因此 R 可以在位置 2 或 3： O (R) (R) ? T F ? ?'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['演奏的第八首乐曲是 L 或 H。', 'F 和 R 之间必须演奏至少 2 首乐曲，因此 R 可以在位置 2 或 3： O (R) (R) ? T F ? ?']\nnew_fact = infer_new_fact(selected) # '位置 8 必须是 L 或 H： O (R) (R) ? T F ? (L/H)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['P 在 S 之前的某个时间演奏。', '位置 8 必须是 L 或 H： O (R) (R) ? T F ? (L/H)']\nnew_fact = infer_new_fact(selected) # '基于必须在 P 之后演奏 S 这一事实，我们知道 P 可以占用位置 2-4： O (R/P) (P/R) (P) T F ? (L/H)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['S 不能与 O 相邻，因此不能在位置 2。', '基于必须在 P 之后演奏 S 这一事实，我们知道 P 可以占用位置 2-4： O (R/P) (P/R) (P) T F ? (L/H)']\nnew_fact = infer_new_fact(selected) # '使用这些位置，我们知道 S 只能在位置 4 或 7(而 L 或 H 可以填补剩余的位置)： O (R/P) (P/R) (P/S) T F (S) (L/H)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果 T 在第五首演奏，F 在第六首演奏，', '则 S 必须在第几首演奏', 'A) 第四首或第七首', '使用这些位置，我们知道 S 只能在位置 4 或 7(而 L 或 H 可以填补剩余的位置)： O (R/P) (P/R) (P/S) T F (S) (L/H)']\nnew_fact = infer_new_fact(selected) # '答案是 A。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 A。']\nnew_fact = infer_new_fact(selected) # 'The answer is A'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'A'"}
{"id": "AR-LSAT_14_10ce2e61ec", "context": "At a concert, exactly eight compositions—F, H, L, O, P, R, S, and T—are to be performed exactly once each, consecutively and one composition at a time. The order of their performance must satisfy the following conditions: T is performed either immediately before F or immediately after R. At least two compositions are performed either after F and before R, or after R and before F. O is performed either first or fifth. The eighth composition performed is either L or H. P is performed at some time before S. At least one composition is performed either after O and before S, or after S and before O.", "options": ["first or second", "second or third", "fourth or sixth", "fourth or seventh", "sixth or seventh"], "answer": "E", "reasoning_graph_edges": [{"antecedents": [8], "consequent": 19}, {"antecedents": [12, 19], "consequent": 20}, {"antecedents": [6, 20], "consequent": 21}, {"antecedents": [7, 21], "consequent": 22}, {"antecedents": [9, 21], "consequent": 23}, {"antecedents": [22, 23], "consequent": 24}, {"antecedents": [12, 13, 18, 24], "consequent": 25}, {"antecedents": [25], "consequent": 26}], "metadata": [], "linearized_output_en": "sent8 -> int1: O can only be in slot 1 or 5.; int1 & sent12 -> int2: O can only be performed immediately after T in slot 5: ? ? ? T O ? ? ?; int2 & sent6 -> int3: Since the slot after T is occupied, R must be performed immediately before T: ? ? R T O ? ? ?; int3 & sent7 -> int4: There must be at least 2 compositions played between R and F, so F cannot be in a lower number than R (3) in this case.; int3 & sent9 -> int5: Slot 8 must contain either L or H: ? ? R T O ? ? (L/H); int4 & int5 -> int6: Based on the leftover slots, F can be in slots 6 or 7: ? ? R T O (F) (F) (L/H); int6 & sent12 & sent13 & sent18 -> int7: Answer is E.; int7 -> int8: The answer is E);", "textual_logical_units": {"1": "在一场音乐会上，共演奏八首乐曲", "2": "(F、H、L、O、P、R、S 和 T)，", "3": "每首乐曲只能连续演奏一次，", "4": "一次演奏一首乐曲。", "5": "乐曲的演奏顺序必须遵循以下条件：", "6": "T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。", "7": "在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。", "8": "O 在第一首或第五首演奏。", "9": "演奏的第八首乐曲是 L 或 H。", "10": "P 在 S 之前的某个时间演奏。", "11": "在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。", "12": "如果 O 紧接在 T 之后演奏，", "13": "则 F 必须在第几首演奏", "14": "A) 第一首或第二首", "15": "B) 第二首或第三首", "16": "C) 第四首或第六首", "17": "D) 第四首或第七首", "18": "E) 第六首或第七首", "19": "O 只能在位置 1 或 5。", "20": "O 只能紧接在位置 5 的 T 之后演奏：? ? ? T O ? ? ?", "21": "由于 T 之后的位置已被占用，因此 R 必须紧接在 T 之前演奏：? ? R T O ? ? ?", "22": "R 和 F 之间必须至少演奏 2 首乐曲，因此在这种情况下 F 的编号不能小于 R (3)。", "23": "位置 8 必须是 L 或 H：? ? R T O ? ? (L/H)", "24": "根据剩余的位置，F 可以在位置 6 或 7：? ? R T O (F) (F) (L/H)", "25": "答案是 E。", "26": "The answer is E)"}, "human_translated": true, "code_input": "####\nfacts = [ '在一场音乐会上，共演奏八首乐曲',\n  '(F、H、L、O、P、R、S 和 T)，',\n  '每首乐曲只能连续演奏一次，',\n  '一次演奏一首乐曲。',\n  '乐曲的演奏顺序必须遵循以下条件：',\n  'T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。',\n  '在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。',\n  'O 在第一首或第五首演奏。',\n  '演奏的第八首乐曲是 L 或 H。',\n  'P 在 S 之前的某个时间演奏。',\n  '在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。',\n  '如果 O 紧接在 T 之后演奏，']\nquestion = '则 F 必须在第几首演奏'\nchoices = {'A': '第一首或第二首', 'B': '第二首或第三首', 'C': '第四首或第六首', 'D': '第四首或第七首', 'E': '第六首或第七首'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['O 在第一首或第五首演奏。']\nnew_fact = infer_new_fact(selected) # 'O 只能在位置 1 或 5。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果 O 紧接在 T 之后演奏，', 'O 只能在位置 1 或 5。']\nnew_fact = infer_new_fact(selected) # 'O 只能紧接在位置 5 的 T 之后演奏：? ? ? T O ? ? ?'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。', 'O 只能紧接在位置 5 的 T 之后演奏：? ? ? T O ? ? ?']\nnew_fact = infer_new_fact(selected) # '由于 T 之后的位置已被占用，因此 R 必须紧接在 T 之前演奏：? ? R T O ? ? ?'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。', '由于 T 之后的位置已被占用，因此 R 必须紧接在 T 之前演奏：? ? R T O ? ? ?']\nnew_fact = infer_new_fact(selected) # 'R 和 F 之间必须至少演奏 2 首乐曲，因此在这种情况下 F 的编号不能小于 R (3)。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['演奏的第八首乐曲是 L 或 H。', '由于 T 之后的位置已被占用，因此 R 必须紧接在 T 之前演奏：? ? R T O ? ? ?']\nnew_fact = infer_new_fact(selected) # '位置 8 必须是 L 或 H：? ? R T O ? ? (L/H)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['R 和 F 之间必须至少演奏 2 首乐曲，因此在这种情况下 F 的编号不能小于 R (3)。', '位置 8 必须是 L 或 H：? ? R T O ? ? (L/H)']\nnew_fact = infer_new_fact(selected) # '根据剩余的位置，F 可以在位置 6 或 7：? ? R T O (F) (F) (L/H)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果 O 紧接在 T 之后演奏，', '则 F 必须在第几首演奏', 'E) 第六首或第七首', '根据剩余的位置，F 可以在位置 6 或 7：? ? R T O (F) (F) (L/H)']\nnew_fact = infer_new_fact(selected) # '答案是 E。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 E。']\nnew_fact = infer_new_fact(selected) # 'The answer is E'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'E'"}
{"id": "AR-LSAT_15_8596dcfff2", "context": "At a concert, exactly eight compositions—F, H, L, O, P, R, S, and T—are to be performed exactly once each, consecutively and one composition at a time. The order of their performance must satisfy the following conditions: T is performed either immediately before F or immediately after R. At least two compositions are performed either after F and before R, or after R and before F. O is performed either first or fifth. The eighth composition performed is either L or H. P is performed at some time before S. At least one composition is performed either after O and before S, or after S and before O.", "options": ["F, H, P", "H, P. L", "O, P, R", "O, P, T", "P, R, T"], "answer": "C", "reasoning_graph_edges": [{"antecedents": [12], "consequent": 19}, {"antecedents": [8, 11], "consequent": 20}, {"antecedents": [19, 20], "consequent": 21}, {"antecedents": [14, 15, 18, 21], "consequent": 22}, {"antecedents": [10, 21], "consequent": 23}, {"antecedents": [6, 23], "consequent": 24}, {"antecedents": [17, 24], "consequent": 25}, {"antecedents": [12, 13, 16, 22, 25], "consequent": 26}, {"antecedents": [26], "consequent": 27}], "metadata": [], "linearized_output_en": "sent12 -> int1: S is in slot 4: ? ? ? S ? ? ? ?; sent11 & sent8 -> int2: O must be in slot 1 or 5, but cannot be adjacent to S,; int1 & int2 -> int3: so O must be in slot 1: O ? ? S; int3 & sent14 & sent15 & sent18 -> int4: We rule out options A, B, and E because they violate this ordering; int3 & sent10 -> int5: P must be performed before S: O (P) (P) S; int5 & sent6 -> int6: T must be performed immediately before F or immediately after R, so it cannot be in either slot 2 or 3.; int6 & sent17 -> int7: We rule out option D because T cannot be in slot 3.; int4 & int7 & sent12 & sent13 & sent16 -> int8: The answer is C.; int8 -> int9: The answer is C);", "textual_logical_units": {"1": "在一场音乐会上，共演奏八首乐曲", "2": "(F、H、L、O、P、R、S 和 T)，", "3": "每首乐曲只能连续演奏一次，", "4": "一次演奏一首乐曲。", "5": "乐曲的演奏顺序必须遵循以下条件：", "6": "T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。", "7": "在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。", "8": "O 在第一首或第五首演奏。", "9": "演奏的第八首乐曲是 L 或 H。", "10": "P 在 S 之前的某个时间演奏。", "11": "在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。", "12": "如果 S 在第四首演奏，", "13": "以下哪一项分别准确地列出了演奏的第一、第二和第三首曲目？", "14": "A) F、H、P", "15": "B) H、P、L", "16": "C) O、P、R", "17": "D) O、P、T", "18": "E) P、R、T", "19": "S 在位置 4：? ? ? S ? ? ? ?", "20": "O 必须在位置 1 或 5，但不能与 S 相邻，", "21": "因此 O 一定在位置 1： O ? ? S", "22": "我们排除了选项 A、B 和 E，因为它们违反了这个顺序", "23": "P 必须在 S 之前演奏： O (P) (P) S", "24": "T 必须紧接在 F 之前或紧接在 R 之后演奏，因此不能在位置 2 或 3。", "25": "我们排除了选项 D，因为 T 不能在位置 3。", "26": "答案是 C。", "27": "The answer is C)"}, "human_translated": true, "code_input": "####\nfacts = [ '在一场音乐会上，共演奏八首乐曲',\n  '(F、H、L、O、P、R、S 和 T)，',\n  '每首乐曲只能连续演奏一次，',\n  '一次演奏一首乐曲。',\n  '乐曲的演奏顺序必须遵循以下条件：',\n  'T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。',\n  '在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。',\n  'O 在第一首或第五首演奏。',\n  '演奏的第八首乐曲是 L 或 H。',\n  'P 在 S 之前的某个时间演奏。',\n  '在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。',\n  '如果 S 在第四首演奏，']\nquestion = '以下哪一项分别准确地列出了演奏的第一、第二和第三首曲目？'\nchoices = {'A': 'F、H、P', 'B': 'H、P、L', 'C': 'O、P、R', 'D': 'O、P、T', 'E': 'P、R、T'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['如果 S 在第四首演奏，']\nnew_fact = infer_new_fact(selected) # 'S 在位置 4：? ? ? S ? ? ? ?'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['O 在第一首或第五首演奏。', '在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。']\nnew_fact = infer_new_fact(selected) # 'O 必须在位置 1 或 5，但不能与 S 相邻，'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['S 在位置 4：? ? ? S ? ? ? ?', 'O 必须在位置 1 或 5，但不能与 S 相邻，']\nnew_fact = infer_new_fact(selected) # '因此 O 一定在位置 1： O ? ? S'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['A) F、H、P', 'B) H、P、L', 'E) P、R、T', '因此 O 一定在位置 1： O ? ? S']\nnew_fact = infer_new_fact(selected) # '我们排除了选项 A、B 和 E，因为它们违反了这个顺序'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['P 在 S 之前的某个时间演奏。', '因此 O 一定在位置 1： O ? ? S']\nnew_fact = infer_new_fact(selected) # 'P 必须在 S 之前演奏： O (P) (P) S'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。', 'P 必须在 S 之前演奏： O (P) (P) S']\nnew_fact = infer_new_fact(selected) # 'T 必须紧接在 F 之前或紧接在 R 之后演奏，因此不能在位置 2 或 3。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['D) O、P、T', 'T 必须紧接在 F 之前或紧接在 R 之后演奏，因此不能在位置 2 或 3。']\nnew_fact = infer_new_fact(selected) # '我们排除了选项 D，因为 T 不能在位置 3。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果 S 在第四首演奏，', '以下哪一项分别准确地列出了演奏的第一、第二和第三首曲目？', 'C) O、P、R', '我们排除了选项 A、B 和 E，因为它们违反了这个顺序', '我们排除了选项 D，因为 T 不能在位置 3。']\nnew_fact = infer_new_fact(selected) # '答案是 C。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 C。']\nnew_fact = infer_new_fact(selected) # 'The answer is C'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'C'"}
{"id": "AR-LSAT_16_7e0c88a103", "context": "At a concert, exactly eight compositions—F, H, L, O, P, R, S, and T—are to be performed exactly once each, consecutively and one composition at a time. The order of their performance must satisfy the following conditions: T is performed either immediately before F or immediately after R. At least two compositions are performed either after F and before R, or after R and before F. O is performed either first or fifth. The eighth composition performed is either L or H. P is performed at some time before S. At least one composition is performed either after O and before S, or after S and before O.", "options": ["F or H", "F or O", "F or T", "H or L", "O or R"], "answer": "C", "reasoning_graph_edges": [{"antecedents": [8, 11], "consequent": 19}, {"antecedents": [12], "consequent": 20}, {"antecedents": [19, 20], "consequent": 21}, {"antecedents": [9, 21], "consequent": 22}, {"antecedents": [7], "consequent": 23}, {"antecedents": [22, 23], "consequent": 24}, {"antecedents": [22, 23, 24], "consequent": 25}, {"antecedents": [6], "consequent": 26}, {"antecedents": [24, 26], "consequent": 27}, {"antecedents": [24, 27], "consequent": 28}, {"antecedents": [25, 26], "consequent": 29}, {"antecedents": [25, 29], "consequent": 30}, {"antecedents": [12, 13, 16, 28, 30], "consequent": 31}, {"antecedents": [31], "consequent": 32}], "metadata": [], "linearized_output_en": "sent11 & sent8 -> int1: O can be performed 1st or 5th, but cannot be adjacent to S.; sent12 -> int2: If P is performed 3rd and S is performed 6th,; int1 & int2 -> int3: then O must be performed 1st: O ? P ? ? S ? ?; int3 & sent9 -> int4: L or H must occupy slot 8: O ? P ? ? S ? (L/H); sent7 -> int5: F and R must be separated by at least 2 compositions, so we have the following possibilities:; int4 & int5 -> int6: 1) O (R/F) P ? (F/R) S ? (L/H); int4 & int5 & int6 -> int7: 2) O ? P (R/F) ? S (F/R) (L/H); sent6 -> int8: T must be immediately before F or immediately after R.; int6 & int8 -> int9: We know in possibility 1 that if F were in slot 2, there would be no space for T after F,; int6 & int9 -> int10: so R must be in slot 2 and F must be in slot 5: O R P T F S ? (L/H); int7 & int8 -> int11: We know if possibility 2 that if F were in slot 4, then there would be no space for T after F,; int11 & int7 -> int12: so R must be in slot 4, T must be in slot 5, and F must be in slot 7: O ? P R T S F (L/H); int10 & int12 & sent12 & sent13 & sent16 -> int13: The answer is C.; int13 -> int14: The answer is C);", "textual_logical_units": {"1": "在一场音乐会上，共演奏八首乐曲", "2": "(F、H、L、O、P、R、S 和 T)，", "3": "每首乐曲只能连续演奏一次，", "4": "一次演奏一首乐曲。", "5": "乐曲的演奏顺序必须遵循以下条件：", "6": "T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。", "7": "在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。", "8": "O 在第一首或第五首演奏。", "9": "演奏的第八首乐曲是 L 或 H。", "10": "P 在 S 之前的某个时间演奏。", "11": "在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。", "12": "如果 P 在第三首演奏，S 在第六首演奏，", "13": "第五首演奏的乐曲必须是", "14": "A) F 或 H", "15": "B) F 或 O", "16": "C) F 或 T", "17": "D) H 或 L", "18": "E) O 或 R", "19": "O 可以在第 1 首或第 5 首演奏，但不能与 S 相邻。", "20": "如果 P 在第 3 首演奏，S 在第 6 首演奏，", "21": "则 O 必须在第 1 首演奏： O ? P ? ? S ? ?", "22": "L 或 H 必须在位置 8： O ? P ? ? S ? (L/H)", "23": "F 和 R 之间必须至少间隔 2 首乐曲，因此位置有以下可能：", "24": "1) O (R/F) P ? (F/R) S ? (L/H)", "25": "2) O ? P (R/F) ? S (F/R) (L/H)", "26": "T 必须紧接在 F 之前或紧接在 R 之后演奏。", "27": "可能性 1，如果 F 在位置 2，则 F 之后将没有位置给 T，", "28": "因此 R 必须在位置 2，F 必须在位置 5： O R P T F S ? (L/H)", "29": "可能性 2，如果 F 在位置 4，则 F 之后将没有位置给 T，", "30": "因此 R 必须在位置 4，T 必须在位置 5，F 必须在位置 7： O ? P R T S F (L/H)", "31": "答案是 C。", "32": "The answer is C)"}, "human_translated": true, "code_input": "####\nfacts = [ '在一场音乐会上，共演奏八首乐曲',\n  '(F、H、L、O、P、R、S 和 T)，',\n  '每首乐曲只能连续演奏一次，',\n  '一次演奏一首乐曲。',\n  '乐曲的演奏顺序必须遵循以下条件：',\n  'T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。',\n  '在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。',\n  'O 在第一首或第五首演奏。',\n  '演奏的第八首乐曲是 L 或 H。',\n  'P 在 S 之前的某个时间演奏。',\n  '在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。',\n  '如果 P 在第三首演奏，S 在第六首演奏，']\nquestion = '第五首演奏的乐曲必须是'\nchoices = {'A': 'F 或 H', 'B': 'F 或 O', 'C': 'F 或 T', 'D': 'H 或 L', 'E': 'O 或 R'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['O 在第一首或第五首演奏。', '在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。']\nnew_fact = infer_new_fact(selected) # 'O 可以在第 1 首或第 5 首演奏，但不能与 S 相邻。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果 P 在第三首演奏，S 在第六首演奏，']\nnew_fact = infer_new_fact(selected) # '如果 P 在第 3 首演奏，S 在第 6 首演奏，'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['O 可以在第 1 首或第 5 首演奏，但不能与 S 相邻。', '如果 P 在第 3 首演奏，S 在第 6 首演奏，']\nnew_fact = infer_new_fact(selected) # '则 O 必须在第 1 首演奏： O ? P ? ? S ? ?'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['演奏的第八首乐曲是 L 或 H。', '则 O 必须在第 1 首演奏： O ? P ? ? S ? ?']\nnew_fact = infer_new_fact(selected) # 'L 或 H 必须在位置 8： O ? P ? ? S ? (L/H)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。']\nnew_fact = infer_new_fact(selected) # 'F 和 R 之间必须至少间隔 2 首乐曲，因此位置有以下可能：'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['L 或 H 必须在位置 8： O ? P ? ? S ? (L/H)', 'F 和 R 之间必须至少间隔 2 首乐曲，因此位置有以下可能：']\nnew_fact = infer_new_fact(selected) # '1) O (R/F) P ? (F/R) S ? (L/H)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['L 或 H 必须在位置 8： O ? P ? ? S ? (L/H)', 'F 和 R 之间必须至少间隔 2 首乐曲，因此位置有以下可能：', '1) O (R/F) P ? (F/R) S ? (L/H)']\nnew_fact = infer_new_fact(selected) # '2) O ? P (R/F) ? S (F/R) (L/H)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。']\nnew_fact = infer_new_fact(selected) # 'T 必须紧接在 F 之前或紧接在 R 之后演奏。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['1) O (R/F) P ? (F/R) S ? (L/H)', 'T 必须紧接在 F 之前或紧接在 R 之后演奏。']\nnew_fact = infer_new_fact(selected) # '可能性 1，如果 F 在位置 2，则 F 之后将没有位置给 T，'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['1) O (R/F) P ? (F/R) S ? (L/H)', '可能性 1，如果 F 在位置 2，则 F 之后将没有位置给 T，']\nnew_fact = infer_new_fact(selected) # '因此 R 必须在位置 2，F 必须在位置 5： O R P T F S ? (L/H)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['2) O ? P (R/F) ? S (F/R) (L/H)', 'T 必须紧接在 F 之前或紧接在 R 之后演奏。']\nnew_fact = infer_new_fact(selected) # '可能性 2，如果 F 在位置 4，则 F 之后将没有位置给 T，'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['2) O ? P (R/F) ? S (F/R) (L/H)', '可能性 2，如果 F 在位置 4，则 F 之后将没有位置给 T，']\nnew_fact = infer_new_fact(selected) # '因此 R 必须在位置 4，T 必须在位置 5，F 必须在位置 7： O ? P R T S F (L/H)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果 P 在第三首演奏，S 在第六首演奏，', '第五首演奏的乐曲必须是', 'C) F 或 T', '因此 R 必须在位置 2，F 必须在位置 5： O R P T F S ? (L/H)', '因此 R 必须在位置 4，T 必须在位置 5，F 必须在位置 7： O ? P R T S F (L/H)']\nnew_fact = infer_new_fact(selected) # '答案是 C。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 C。']\nnew_fact = infer_new_fact(selected) # 'The answer is C'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'C'"}
{"id": "AR-LSAT_17_c4915533c9", "context": "At a concert, exactly eight compositions—F, H, L, O, P, R, S, and T—are to be performed exactly once each, consecutively and one composition at a time. The order of their performance must satisfy the following conditions: T is performed either immediately before F or immediately after R. At least two compositions are performed either after F and before R, or after R and before F. O is performed either first or fifth. The eighth composition performed is either L or H. P is performed at some time before S. At least one composition is performed either after O and before S, or after S and before O.", "options": ["first", "third", "fourth", "sixth", "seventh"], "answer": "D", "reasoning_graph_edges": [{"antecedents": [8], "consequent": 19}, {"antecedents": [12, 19], "consequent": 20}, {"antecedents": [7, 20], "consequent": 21}, {"antecedents": [9, 21], "consequent": 22}, {"antecedents": [22], "consequent": 23}, {"antecedents": [6, 23], "consequent": 24}, {"antecedents": [11, 24], "consequent": 25}, {"antecedents": [10, 25], "consequent": 26}, {"antecedents": [12, 13, 17, 26], "consequent": 27}, {"antecedents": [27], "consequent": 28}], "metadata": [], "linearized_output_en": "sent8 -> int1: O can be in slots 1 or 5.; int1 & sent12 -> int2: If exactly 2 compositions are performed before O (and after F), O can only be in slot 5 (and F can only be in slot 2): ? F ? ? O ? ? ?; int2 & sent7 -> int3: There must be at least 2 compositions between R and F, but the closest possible slot (5) is occupied by O; int3 & sent9 -> int4: Also, Slot 8 must be occupied by L or H, so R can only be in slots 6 or 7: ? F ? ? O (R) (R) (L/H); int4 -> int5: Let's assume R is in slot 7: ? F ? ? O ? R (L/H); int5 & sent6 -> int6: Then T must be in slot 1: T F ? ? O ? R (L/H); int6 & sent11 -> int7: S cannot be adjacent to O, so it cannot be in slots 4 or 6, and so must be in slot 3: T F S ? O ? R (L/H); int7 & sent10 -> int8: But S must be performed after P, and this is not possible in this configuration, so R cannot be in slot 7.; int8 & sent12 & sent13 & sent17 -> int9: The answer is D.; int9 -> int10: The answer is D);", "textual_logical_units": {"1": "在一场音乐会上，共演奏八首乐曲", "2": "(F、H、L、O、P、R、S 和 T)，", "3": "每首乐曲只能连续演奏一次，", "4": "一次演奏一首乐曲。", "5": "乐曲的演奏顺序必须遵循以下条件：", "6": "T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。", "7": "在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。", "8": "O 在第一首或第五首演奏。", "9": "演奏的第八首乐曲是 L 或 H。", "10": "P 在 S 之前的某个时间演奏。", "11": "在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。", "12": "如果在 F 之后和 O 之前演奏了两首乐曲，", "13": "则 R 必须在第几首演奏", "14": "A) 第一首", "15": "B) 第三首", "16": "C) 第四首", "17": "D) 第六首", "18": "E) 第七首", "19": "O 可以在位置 1 或 5。", "20": "如果在 O 之前(和 F 之后)演奏了 2 首乐曲，则 O 只能在位置 5(F 只能在位置 2)：? F ? ? O ? ? ?", "21": "R 和 F 之间必须至少有 2 首乐曲，但最接近的位置 (5) 被 O 占用", "22": "此外，位置 8 必须由 L 或 H 占用，因此 R 只能在位置 6 或 7：? F ? ? O (R) (R) (L/H)", "23": "假设 R 在位置 7：? F ? ? O ? R (L/H)", "24": "则 T 必须在位置 1： T F ? ? O ? R (L/H)", "25": "S 不能与 O 相邻，因此不能在位置 4 或 6，因此必须在位置 3： T F S ? O ? R (L/H)", "26": "但是 S 必须在 P 之后演奏，在这种配置下这是不可能的，因此 R 不能在位置 7。", "27": "答案是 D。", "28": "The answer is D)"}, "human_translated": true, "code_input": "####\nfacts = [ '在一场音乐会上，共演奏八首乐曲',\n  '(F、H、L、O、P、R、S 和 T)，',\n  '每首乐曲只能连续演奏一次，',\n  '一次演奏一首乐曲。',\n  '乐曲的演奏顺序必须遵循以下条件：',\n  'T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。',\n  '在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。',\n  'O 在第一首或第五首演奏。',\n  '演奏的第八首乐曲是 L 或 H。',\n  'P 在 S 之前的某个时间演奏。',\n  '在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。',\n  '如果在 F 之后和 O 之前演奏了两首乐曲，']\nquestion = '则 R 必须在第几首演奏'\nchoices = {'A': '第一首', 'B': '第三首', 'C': '第四首', 'D': '第六首', 'E': '第七首'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['O 在第一首或第五首演奏。']\nnew_fact = infer_new_fact(selected) # 'O 可以在位置 1 或 5。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果在 F 之后和 O 之前演奏了两首乐曲，', 'O 可以在位置 1 或 5。']\nnew_fact = infer_new_fact(selected) # '如果在 O 之前(和 F 之后)演奏了 2 首乐曲，则 O 只能在位置 5(F 只能在位置 2)：? F ? ? O ? ? ?'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['在 F 之后和 R 之前，或者在 R 之后和 F 之前演奏至少两首乐曲。', '如果在 O 之前(和 F 之后)演奏了 2 首乐曲，则 O 只能在位置 5(F 只能在位置 2)：? F ? ? O ? ? ?']\nnew_fact = infer_new_fact(selected) # 'R 和 F 之间必须至少有 2 首乐曲，但最接近的位置 (5) 被 O 占用'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['演奏的第八首乐曲是 L 或 H。', 'R 和 F 之间必须至少有 2 首乐曲，但最接近的位置 (5) 被 O 占用']\nnew_fact = infer_new_fact(selected) # '此外，位置 8 必须由 L 或 H 占用，因此 R 只能在位置 6 或 7：? F ? ? O (R) (R) (L/H)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['此外，位置 8 必须由 L 或 H 占用，因此 R 只能在位置 6 或 7：? F ? ? O (R) (R) (L/H)']\nnew_fact = infer_new_fact(selected) # '假设 R 在位置 7：? F ? ? O ? R (L/H)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['T 要么紧接在 F 之前演奏，要么紧接在 R 之后演奏。', '假设 R 在位置 7：? F ? ? O ? R (L/H)']\nnew_fact = infer_new_fact(selected) # '则 T 必须在位置 1： T F ? ? O ? R (L/H)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['在 O 之后和 S 之前，或者在 S 之后和 O 之前演奏至少一首乐曲。', '则 T 必须在位置 1： T F ? ? O ? R (L/H)']\nnew_fact = infer_new_fact(selected) # 'S 不能与 O 相邻，因此不能在位置 4 或 6，因此必须在位置 3： T F S ? O ? R (L/H)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['P 在 S 之前的某个时间演奏。', 'S 不能与 O 相邻，因此不能在位置 4 或 6，因此必须在位置 3： T F S ? O ? R (L/H)']\nnew_fact = infer_new_fact(selected) # '但是 S 必须在 P 之后演奏，在这种配置下这是不可能的，因此 R 不能在位置 7。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果在 F 之后和 O 之前演奏了两首乐曲，', '则 R 必须在第几首演奏', 'D) 第六首', '但是 S 必须在 P 之后演奏，在这种配置下这是不可能的，因此 R 不能在位置 7。']\nnew_fact = infer_new_fact(selected) # '答案是 D。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 D。']\nnew_fact = infer_new_fact(selected) # 'The answer is D'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'D'"}
{"id": "AR-LSAT_18_fde7cfbaf2", "context": "On each of exactly seven consecutive days (day 1 though day 7), a pet shop features exactly one of three breeds of kitten—Himalayan, Manx, Siamese—and exactly one of three breeds of puppy—Greyhound, Newfoundland, Rottweiler. The following conditions must apply: Greyhounds are featured on day 1. No breed is featured on any two consecutive days. Any breed featured on day 1 is not featured on day 7. Himalayans are featured on exactly three days, but not on day 1. Rottweilers are not featured on day 7, nor on any day that features Himalayans.", "options": ["Himalayan, Manx, Siamese, Himalayan, Manx, Himalayan, Siamese", "Manx, Himalayan, Siamese, Himalayan, Manx Himalayan, Manx", "Manx, Himalayan, Manx, Himalayan, Siamese, Manx, Siamese", "Siamese, Himalayan, Manx, Himalayan, Siamese, Siamese, Himalayan", "Siamese, Himalayan, Siamese, Himalayan, Manx, Siamese, Himalayan"], "answer": "E", "reasoning_graph_edges": [{"antecedents": [10, 11, 16], "consequent": 21}, {"antecedents": [8, 19], "consequent": 22}, {"antecedents": [9, 17], "consequent": 23}, {"antecedents": [14, 15, 20, 21, 22, 23], "consequent": 24}, {"antecedents": [24], "consequent": 25}], "metadata": [], "linearized_output_en": "sent10 & sent11 & sent16 -> int1: Himalayans cannot be featured on day 1 and less than three days. A and C not answers; sent19 & sent8 -> int2: The same breed may not feature on consecutive days. D is not an answer.; sent17 & sent9 -> int3: Any breed featured on day 1 may not be featured on day 7. B is not an answer.; int1 & int2 & int3 & sent14 & sent15 & sent20 -> int4: The answer is E.; int4 -> int5: The answer is E);", "textual_logical_units": {"1": "连续七天(从第 1 天到第 7 天)的每一天，", "2": "宠物店都会展出三种品种的小猫", "3": "(喜马拉雅猫、马恩岛猫、暹罗猫)中的一种，", "4": "以及三种品种的小狗", "5": "(灵缇犬、纽芬兰犬、罗威纳犬)中的一种。", "6": "必须遵循以下条件：", "7": "灵缇犬在第 1 天展出。", "8": "任何品种不会连续两天展出。", "9": "第 1 天展出的任何品种均不会在第 7 天展出。", "10": "喜马拉雅猫的展出时间为三天，", "11": "但不在第 1 天展出。", "12": "罗威纳犬不在第 7 天展出，", "13": "也不在喜马拉雅猫展出的任何时间展出。", "14": "以下哪一项可能是宠物店中小猫品种", "15": "从第 1 天到第 7 天的展出顺序？", "16": "A) 喜马拉雅猫、马恩岛猫、暹罗猫、喜马拉雅猫、马恩岛猫、喜马拉雅猫、暹罗猫", "17": "B) 马恩岛猫、喜马拉雅猫、暹罗猫、喜马拉雅猫、马恩岛猫、喜马拉雅猫、马恩岛猫", "18": "C) 马恩岛猫、喜马拉雅猫、马恩岛猫、喜马拉雅猫、暹罗猫、马恩岛猫、暹罗猫", "19": "D) 暹罗猫、喜马拉雅猫、马恩岛猫、喜马拉雅猫、暹罗猫、喜马拉雅猫", "20": "E) 暹罗猫、喜马拉雅猫、暹罗猫、喜马拉雅猫、马恩岛猫、暹罗猫、喜马拉雅猫", "21": "喜马拉雅猫不能在第 1 天展出，并且展出时间不能少于三天。A 和 C 不是答案", "22": "同一品种不能连续几天展出。D 不是答案。", "23": "第 1 天展出的任何品种不能在第 7 天展出。B 不是答案。", "24": "答案是 E。", "25": "The answer is E)"}, "human_translated": true, "code_input": "####\nfacts = [ '连续七天(从第 1 天到第 7 天)的每一天，',\n  '宠物店都会展出三种品种的小猫',\n  '(喜马拉雅猫、马恩岛猫、暹罗猫)中的一种，',\n  '以及三种品种的小狗',\n  '(灵缇犬、纽芬兰犬、罗威纳犬)中的一种。',\n  '必须遵循以下条件：',\n  '灵缇犬在第 1 天展出。',\n  '任何品种不会连续两天展出。',\n  '第 1 天展出的任何品种均不会在第 7 天展出。',\n  '喜马拉雅猫的展出时间为三天，',\n  '但不在第 1 天展出。',\n  '罗威纳犬不在第 7 天展出，',\n  '也不在喜马拉雅猫展出的任何时间展出。',\n  '以下哪一项可能是宠物店中小猫品种']\nquestion = '从第 1 天到第 7 天的展出顺序？'\nchoices = { 'A': '喜马拉雅猫、马恩岛猫、暹罗猫、喜马拉雅猫、马恩岛猫、喜马拉雅猫、暹罗猫',\n  'B': '马恩岛猫、喜马拉雅猫、暹罗猫、喜马拉雅猫、马恩岛猫、喜马拉雅猫、马恩岛猫',\n  'C': '马恩岛猫、喜马拉雅猫、马恩岛猫、喜马拉雅猫、暹罗猫、马恩岛猫、暹罗猫',\n  'D': '暹罗猫、喜马拉雅猫、马恩岛猫、喜马拉雅猫、暹罗猫、喜马拉雅猫',\n  'E': '暹罗猫、喜马拉雅猫、暹罗猫、喜马拉雅猫、马恩岛猫、暹罗猫、喜马拉雅猫'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['喜马拉雅猫的展出时间为三天，', '但不在第 1 天展出。', 'A) 喜马拉雅猫、马恩岛猫、暹罗猫、喜马拉雅猫、马恩岛猫、喜马拉雅猫、暹罗猫']\nnew_fact = infer_new_fact(selected) # '喜马拉雅猫不能在第 1 天展出，并且展出时间不能少于三天。A 和 C 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['任何品种不会连续两天展出。', 'D) 暹罗猫、喜马拉雅猫、马恩岛猫、喜马拉雅猫、暹罗猫、喜马拉雅猫']\nnew_fact = infer_new_fact(selected) # '同一品种不能连续几天展出。D 不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['第 1 天展出的任何品种均不会在第 7 天展出。', 'B) 马恩岛猫、喜马拉雅猫、暹罗猫、喜马拉雅猫、马恩岛猫、喜马拉雅猫、马恩岛猫']\nnew_fact = infer_new_fact(selected) # '第 1 天展出的任何品种不能在第 7 天展出。B 不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一项可能是宠物店中小猫品种', '从第 1 天到第 7 天的展出顺序？', 'E) 暹罗猫、喜马拉雅猫、暹罗猫、喜马拉雅猫、马恩岛猫、暹罗猫、喜马拉雅猫', '喜马拉雅猫不能在第 1 天展出，并且展出时间不能少于三天。A 和 C 不是答案', '同一品种不能连续几天展出。D 不是答案。', '第 1 天展出的任何品种不能在第 7 天展出。B 不是答案。']\nnew_fact = infer_new_fact(selected) # '答案是 E。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 E。']\nnew_fact = infer_new_fact(selected) # 'The answer is E'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'E'"}
{"id": "AR-LSAT_19_d10171a1c1", "context": "On each of exactly seven consecutive days (day 1 though day 7), a pet shop features exactly one of three breeds of kitten—Himalayan, Manx, Siamese—and exactly one of three breeds of puppy—Greyhound, Newfoundland, Rottweiler. The following conditions must apply: Greyhounds are featured on day 1. No breed is featured on any two consecutive days. Any breed featured on day 1 is not featured on day 7. Himalayans are featured on exactly three days, but not on day 1. Rottweilers are not featured on day 7, nor on any day that features Himalayans.", "options": ["Manx are featured on day 3.", "Siamese are featured on day 4.", "Rottweilers are featured on day 5.", "Himalayans are featured on day 6.", "Greyhounds are featured on day 7."], "answer": "B", "reasoning_graph_edges": [{"antecedents": [10, 11, 14], "consequent": 21}, {"antecedents": [8, 19, 21], "consequent": 22}, {"antecedents": [12, 13, 21], "consequent": 23}, {"antecedents": [7, 9], "consequent": 24}, {"antecedents": [14, 17, 21, 22, 23, 24], "consequent": 25}, {"antecedents": [25], "consequent": 26}], "metadata": [], "linearized_output_en": "sent10 & sent11 & sent14 -> int1: The Himalayan will be featured on day 3, day 5 and day 7.; int1 & sent19 & sent8 -> int2: Since Himalayan cannot be featured on day 1 and no breed can feature on two consecutive days, A and D not answers.; int1 & sent12 & sent13 -> int3: Rottweilers and Himalayans cannot be featured on the same days. C is not an option.; sent7 & sent9 -> int4: Breeds featured on day 1 may not feature on day 7. E is not an answer.; int1 & int2 & int3 & int4 & sent14 & sent17 -> int5: The answer is B; int5 -> int6: The answer is B);", "textual_logical_units": {"1": "连续七天(从第 1 天到第 7 天)的每一天，", "2": "宠物店都会展出三种品种的小猫", "3": "(喜马拉雅猫、马恩岛猫、暹罗猫)中的一种，", "4": "以及三种品种的小狗", "5": "(灵缇犬、纽芬兰犬、罗威纳犬)中的一种。", "6": "必须遵循以下条件：", "7": "灵缇犬在第 1 天展出。", "8": "任何品种不会连续两天展出。", "9": "第 1 天展出的任何品种均不会在第 7 天展出。", "10": "喜马拉雅猫的展出时间为三天，", "11": "但不在第 1 天展出。", "12": "罗威纳犬不在第 7 天展出，", "13": "也不在喜马拉雅猫展出的任何时间展出。", "14": "如果喜马拉雅猫不在第 2 天展出，", "15": "则以下哪一项可能是正确的？", "16": "A) 马恩岛猫在第 3 天展出。", "17": "B) 暹罗猫在第 4 天展出。", "18": "C) 罗威纳犬在第 5 天展出。", "19": "D) 喜马拉雅猫在第 6 天展出。", "20": "E) 灵缇犬在第 7 天展出。", "21": "喜马拉雅猫在第 3 天、第 5 天和第 7 天展出。", "22": "由于喜马拉雅猫不在第 1 天展出，并且任何品种不会连续两天展出，因此 A 和 D 不是答案。", "23": "罗威纳犬和喜马拉雅猫不能在同一天展出。C 不是正确选项。", "24": "第 1 天展出的品种不能在第 7 天展出。E 不是答案。", "25": "答案是 B", "26": "The answer is B)"}, "human_translated": true, "code_input": "####\nfacts = [ '连续七天(从第 1 天到第 7 天)的每一天，',\n  '宠物店都会展出三种品种的小猫',\n  '(喜马拉雅猫、马恩岛猫、暹罗猫)中的一种，',\n  '以及三种品种的小狗',\n  '(灵缇犬、纽芬兰犬、罗威纳犬)中的一种。',\n  '必须遵循以下条件：',\n  '灵缇犬在第 1 天展出。',\n  '任何品种不会连续两天展出。',\n  '第 1 天展出的任何品种均不会在第 7 天展出。',\n  '喜马拉雅猫的展出时间为三天，',\n  '但不在第 1 天展出。',\n  '罗威纳犬不在第 7 天展出，',\n  '也不在喜马拉雅猫展出的任何时间展出。',\n  '如果喜马拉雅猫不在第 2 天展出，']\nquestion = '则以下哪一项可能是正确的？'\nchoices = {'A': '马恩岛猫在第 3 天展出。', 'B': '暹罗猫在第 4 天展出。', 'C': '罗威纳犬在第 5 天展出。', 'D': '喜马拉雅猫在第 6 天展出。', 'E': '灵缇犬在第 7 天展出。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['喜马拉雅猫的展出时间为三天，', '但不在第 1 天展出。', '如果喜马拉雅猫不在第 2 天展出，']\nnew_fact = infer_new_fact(selected) # '喜马拉雅猫在第 3 天、第 5 天和第 7 天展出。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['任何品种不会连续两天展出。', 'D) 喜马拉雅猫在第 6 天展出。', '喜马拉雅猫在第 3 天、第 5 天和第 7 天展出。']\nnew_fact = infer_new_fact(selected) # '由于喜马拉雅猫不在第 1 天展出，并且任何品种不会连续两天展出，因此 A 和 D 不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['罗威纳犬不在第 7 天展出，', '也不在喜马拉雅猫展出的任何时间展出。', '喜马拉雅猫在第 3 天、第 5 天和第 7 天展出。']\nnew_fact = infer_new_fact(selected) # '罗威纳犬和喜马拉雅猫不能在同一天展出。C 不是正确选项。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['灵缇犬在第 1 天展出。', '第 1 天展出的任何品种均不会在第 7 天展出。']\nnew_fact = infer_new_fact(selected) # '第 1 天展出的品种不能在第 7 天展出。E 不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果喜马拉雅猫不在第 2 天展出，', 'B) 暹罗猫在第 4 天展出。', '喜马拉雅猫在第 3 天、第 5 天和第 7 天展出。', '由于喜马拉雅猫不在第 1 天展出，并且任何品种不会连续两天展出，因此 A 和 D 不是答案。', '罗威纳犬和喜马拉雅猫不能在同一天展出。C 不是正确选项。', '第 1 天展出的品种不能在第 7 天展出。E 不是答案。']\nnew_fact = infer_new_fact(selected) # '答案是 B'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 B']\nnew_fact = infer_new_fact(selected) # 'The answer is B'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'B'"}
{"id": "AR-LSAT_20_4d385b334d", "context": "On each of exactly seven consecutive days (day 1 though day 7), a pet shop features exactly one of three breeds of kitten—Himalayan, Manx, Siamese—and exactly one of three breeds of puppy—Greyhound, Newfoundland, Rottweiler. The following conditions must apply: Greyhounds are featured on day 1. No breed is featured on any two consecutive days. Any breed featured on day 1 is not featured on day 7. Himalayans are featured on exactly three days, but not on day 1. Rottweilers are not featured on day 7, nor on any day that features Himalayans.", "options": ["Greyhounds and Siamese are both featured on day 2.", "Greyhounds and Himalayans are both featured on day 7.", "Rottweilers and Himalayans are both featured on day 4.", "Rottweilers and Manx are both featured on day 5.", "Newfoundlands and Manx are both featured on day 6."], "answer": "D", "reasoning_graph_edges": [{"antecedents": [7, 8, 9, 12, 15, 19], "consequent": 20}, {"antecedents": [7, 9], "consequent": 21}, {"antecedents": [12, 13], "consequent": 22}, {"antecedents": [14, 18, 20, 21, 22], "consequent": 23}, {"antecedents": [23], "consequent": 24}], "metadata": [], "linearized_output_en": "sent12 & sent15 & sent19 & sent7 & sent8 & sent9 -> int1: No breed may be featured on two consecutive days. A and E are not answers; sent7 & sent9 -> int2: Breeds featured on day 1 may not be featured on day 7. B is not an answer; sent12 & sent13 -> int3: Rottweilers and Himalayans may not feature on the same day. C is not an answer; int1 & int2 & int3 & sent14 & sent18 -> int4: The answer is D.; int4 -> int5: The answer is D);", "textual_logical_units": {"1": "连续七天(从第 1 天到第 7 天)的每一天，", "2": "宠物店都会展出三种品种的小猫", "3": "(喜马拉雅猫、马恩岛猫、暹罗猫)中的一种，", "4": "以及三种品种的小狗", "5": "(灵缇犬、纽芬兰犬、罗威纳犬)中的一种。", "6": "必须遵循以下条件：", "7": "灵缇犬在第 1 天展出。", "8": "任何品种不会连续两天展出。", "9": "第 1 天展出的任何品种均不会在第 7 天展出。", "10": "喜马拉雅猫的展出时间为三天，", "11": "但不在第 1 天展出。", "12": "罗威纳犬不在第 7 天展出，", "13": "也不在喜马拉雅猫展出的任何时间展出。", "14": "以下哪一项可能是正确的？", "15": "A) 灵缇犬和暹罗猫都在第 2 天展出。", "16": "B) 灵缇犬和喜马拉雅猫都在第 7 天展出。", "17": "C) 罗威纳犬和喜马拉雅猫都在第 4 天展出。", "18": "D) 罗威纳犬和马恩岛猫都在第 5 天展出。", "19": "E) 纽芬兰犬和马恩岛猫都在第 6 天展出。", "20": "任何品种不得连续两天展出。A 和 E 不是答案", "21": "第 1 天展出的品种不能在第 7 天展出。B 不是答案", "22": "罗威纳犬和喜马拉雅猫不能在同一天展出。C 不是答案", "23": "答案是 D。", "24": "The answer is D)"}, "human_translated": true, "code_input": "####\nfacts = [ '连续七天(从第 1 天到第 7 天)的每一天，',\n  '宠物店都会展出三种品种的小猫',\n  '(喜马拉雅猫、马恩岛猫、暹罗猫)中的一种，',\n  '以及三种品种的小狗',\n  '(灵缇犬、纽芬兰犬、罗威纳犬)中的一种。',\n  '必须遵循以下条件：',\n  '灵缇犬在第 1 天展出。',\n  '任何品种不会连续两天展出。',\n  '第 1 天展出的任何品种均不会在第 7 天展出。',\n  '喜马拉雅猫的展出时间为三天，',\n  '但不在第 1 天展出。',\n  '罗威纳犬不在第 7 天展出，',\n  '也不在喜马拉雅猫展出的任何时间展出。']\nquestion = '以下哪一项可能是正确的？'\nchoices = {'A': '灵缇犬和暹罗猫都在第 2 天展出。', 'B': '灵缇犬和喜马拉雅猫都在第 7 天展出。', 'C': '罗威纳犬和喜马拉雅猫都在第 4 天展出。', 'D': '罗威纳犬和马恩岛猫都在第 5 天展出。', 'E': '纽芬兰犬和马恩岛猫都在第 6 天展出。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['灵缇犬在第 1 天展出。', '任何品种不会连续两天展出。', '第 1 天展出的任何品种均不会在第 7 天展出。', '罗威纳犬不在第 7 天展出，', 'A) 灵缇犬和暹罗猫都在第 2 天展出。', 'E) 纽芬兰犬和马恩岛猫都在第 6 天展出。']\nnew_fact = infer_new_fact(selected) # '任何品种不得连续两天展出。A 和 E 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['灵缇犬在第 1 天展出。', '第 1 天展出的任何品种均不会在第 7 天展出。']\nnew_fact = infer_new_fact(selected) # '第 1 天展出的品种不能在第 7 天展出。B 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['罗威纳犬不在第 7 天展出，', '也不在喜马拉雅猫展出的任何时间展出。']\nnew_fact = infer_new_fact(selected) # '罗威纳犬和喜马拉雅猫不能在同一天展出。C 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一项可能是正确的？', 'D) 罗威纳犬和马恩岛猫都在第 5 天展出。', '任何品种不得连续两天展出。A 和 E 不是答案', '第 1 天展出的品种不能在第 7 天展出。B 不是答案', '罗威纳犬和喜马拉雅猫不能在同一天展出。C 不是答案']\nnew_fact = infer_new_fact(selected) # '答案是 D。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 D。']\nnew_fact = infer_new_fact(selected) # 'The answer is D'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'D'"}
{"id": "AR-LSAT_21_64005f09c3", "context": "On each of exactly seven consecutive days (day 1 though day 7), a pet shop features exactly one of three breeds of kitten—Himalayan, Manx, Siamese—and exactly one of three breeds of puppy—Greyhound, Newfoundland, Rottweiler. The following conditions must apply: Greyhounds are featured on day 1. No breed is featured on any two consecutive days. Any breed featured on day 1 is not featured on day 7. Himalayans are featured on exactly three days, but not on day 1. Rottweilers are not featured on day 7, nor on any day that features Himalayans.", "options": ["day 1 and day 3", "day 2 and day 6", "day 3 and day 5", "day 4 and day 6", "day 5 and day 7"], "answer": "B", "reasoning_graph_edges": [{"antecedents": [8, 10, 11, 14], "consequent": 22}, {"antecedents": [7, 8, 9, 12], "consequent": 23}, {"antecedents": [8, 12, 13], "consequent": 24}, {"antecedents": [14, 15, 16, 18, 22, 23, 24], "consequent": 25}, {"antecedents": [25], "consequent": 26}], "metadata": [], "linearized_output_en": "sent10 & sent11 & sent14 & sent8 -> int1: Possible days the Himalayan could be featured on are day 2, day 4 and, day 6; sent12 & sent7 & sent8 & sent9 -> int2: Breed featured on day 1 may not feature on day 7, therefore, puppy featured on day 7 is Newfoundland.; sent12 & sent13 & sent8 -> int3: Day 6 could therefore only feature Greyhound puppies and day 2 could feature Newfoundland puppies.; int1 & int2 & int3 & sent14 & sent15 & sent16 & sent18 -> int4: The answer is B; int4 -> int5: The answer is B);", "textual_logical_units": {"1": "连续七天(从第 1 天到第 7 天)的每一天，", "2": "宠物店都会展出三种品种的小猫", "3": "(喜马拉雅猫、马恩岛猫、暹罗猫)中的一种，", "4": "以及三种品种的小狗", "5": "(灵缇犬、纽芬兰犬、罗威纳犬)中的一种。", "6": "必须遵循以下条件：", "7": "灵缇犬在第 1 天展出。", "8": "任何品种不会连续两天展出。", "9": "第 1 天展出的任何品种均不会在第 7 天展出。", "10": "喜马拉雅猫的展出时间为三天，", "11": "但不在第 1 天展出。", "12": "罗威纳犬不在第 7 天展出，", "13": "也不在喜马拉雅猫展出的任何时间展出。", "14": "如果喜马拉雅猫不在第 7 天展出，", "15": "则以下哪两天不能同时展出同一品种的小猫和", "16": "同一品种的小狗？", "17": "A) 第 1 天和第 3 天", "18": "B) 第 2 天和第 6 天", "19": "C) 第 3 天和第 5 天", "20": "D) 第 4 天和第 6 天", "21": "E) 第 5 天和第 7 天", "22": "喜马拉雅猫可能在第 2 天、第 4 天和第 6 天展出", "23": "第 1 天展出的品种不能在第 7 天展出，因此第 7 天展出的小狗是纽芬兰犬。", "24": "因此，第 6 天只能展出灵缇犬，第 2 天可能展出纽芬兰犬。", "25": "答案是 B", "26": "The answer is B)"}, "human_translated": true, "code_input": "####\nfacts = [ '连续七天(从第 1 天到第 7 天)的每一天，',\n  '宠物店都会展出三种品种的小猫',\n  '(喜马拉雅猫、马恩岛猫、暹罗猫)中的一种，',\n  '以及三种品种的小狗',\n  '(灵缇犬、纽芬兰犬、罗威纳犬)中的一种。',\n  '必须遵循以下条件：',\n  '灵缇犬在第 1 天展出。',\n  '任何品种不会连续两天展出。',\n  '第 1 天展出的任何品种均不会在第 7 天展出。',\n  '喜马拉雅猫的展出时间为三天，',\n  '但不在第 1 天展出。',\n  '罗威纳犬不在第 7 天展出，',\n  '也不在喜马拉雅猫展出的任何时间展出。',\n  '如果喜马拉雅猫不在第 7 天展出，',\n  '则以下哪两天不能同时展出同一品种的小猫和']\nquestion = '同一品种的小狗？'\nchoices = {'A': '第 1 天和第 3 天', 'B': '第 2 天和第 6 天', 'C': '第 3 天和第 5 天', 'D': '第 4 天和第 6 天', 'E': '第 5 天和第 7 天'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['任何品种不会连续两天展出。', '喜马拉雅猫的展出时间为三天，', '但不在第 1 天展出。', '如果喜马拉雅猫不在第 7 天展出，']\nnew_fact = infer_new_fact(selected) # '喜马拉雅猫可能在第 2 天、第 4 天和第 6 天展出'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['灵缇犬在第 1 天展出。', '任何品种不会连续两天展出。', '第 1 天展出的任何品种均不会在第 7 天展出。', '罗威纳犬不在第 7 天展出，']\nnew_fact = infer_new_fact(selected) # '第 1 天展出的品种不能在第 7 天展出，因此第 7 天展出的小狗是纽芬兰犬。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['任何品种不会连续两天展出。', '罗威纳犬不在第 7 天展出，', '也不在喜马拉雅猫展出的任何时间展出。']\nnew_fact = infer_new_fact(selected) # '因此，第 6 天只能展出灵缇犬，第 2 天可能展出纽芬兰犬。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果喜马拉雅猫不在第 7 天展出，', '则以下哪两天不能同时展出同一品种的小猫和', '同一品种的小狗？', 'B) 第 2 天和第 6 天', '喜马拉雅猫可能在第 2 天、第 4 天和第 6 天展出', '第 1 天展出的品种不能在第 7 天展出，因此第 7 天展出的小狗是纽芬兰犬。', '因此，第 6 天只能展出灵缇犬，第 2 天可能展出纽芬兰犬。']\nnew_fact = infer_new_fact(selected) # '答案是 B'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 B']\nnew_fact = infer_new_fact(selected) # 'The answer is B'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'B'"}
{"id": "AR-LSAT_22_d5faf2083f", "context": "On each of exactly seven consecutive days (day 1 though day 7), a pet shop features exactly one of three breeds of kitten—Himalayan, Manx, Siamese—and exactly one of three breeds of puppy—Greyhound, Newfoundland, Rottweiler. The following conditions must apply: Greyhounds are featured on day 1. No breed is featured on any two consecutive days. Any breed featured on day 1 is not featured on day 7. Himalayans are featured on exactly three days, but not on day 1. Rottweilers are not featured on day 7, nor on any day that features Himalayans.", "options": ["There are exactly four breeds that are each featured on three days.", "Greyhounds are featured on every day that Himalayans are.", "Himalayans are featured on every day that Greyhounds are.", "Himalayans are featured on every day that Rottweilers are not.", "Rottweilers are featured on every day that Himalayans are not."], "answer": "A", "reasoning_graph_edges": [{"antecedents": [7, 9, 10, 18], "consequent": 20}, {"antecedents": [8, 19, 20], "consequent": 21}, {"antecedents": [7, 10, 11], "consequent": 22}, {"antecedents": [8, 10, 11, 16], "consequent": 23}, {"antecedents": [14, 15, 20, 21, 22, 23], "consequent": 24}, {"antecedents": [24], "consequent": 25}], "metadata": [], "linearized_output_en": "sent10 & sent18 & sent7 & sent9 -> int1: Himalayan is featured on exactly three days. Rottweiler feature on day 6. That leaves four days for Himalayan. D not an answer.; int1 & sent19 & sent8 -> int2: No breed may be featured on two consecutive days. E is not an anwer; sent10 & sent11 & sent7 -> int3: Himalayans may not be featured on day 1. C is not an answer; sent10 & sent11 & sent16 & sent8 -> int4: If Himalayan features on day 2, B is not an answer; int1 & int2 & int3 & int4 & sent14 & sent15 -> int5: The answer is A; int5 -> int6: The answer is A);", "textual_logical_units": {"1": "连续七天(从第 1 天到第 7 天)的每一天，", "2": "宠物店都会展出三种品种的小猫", "3": "(喜马拉雅猫、马恩岛猫、暹罗猫)中的一种，", "4": "以及三种品种的小狗", "5": "(灵缇犬、纽芬兰犬、罗威纳犬)中的一种。", "6": "必须遵循以下条件：", "7": "灵缇犬在第 1 天展出。", "8": "任何品种不会连续两天展出。", "9": "第 1 天展出的任何品种均不会在第 7 天展出。", "10": "喜马拉雅猫的展出时间为三天，", "11": "但不在第 1 天展出。", "12": "罗威纳犬不在第 7 天展出，", "13": "也不在喜马拉雅猫展出的任何时间展出。", "14": "以下哪一项可能是正确的？", "15": "A) 有四个品种的展出时间为三天。", "16": "B) 喜马拉雅猫展出的每天都会展出灵缇犬。", "17": "C) 灵缇犬展出的每天都会展出喜马拉雅猫。", "18": "D) 罗威纳犬不展出的每天都会展出喜马拉雅猫。", "19": "E) 喜马拉雅猫不展出的每天都会展出罗威纳犬。", "20": "喜马拉雅猫的展出时间为三天。罗威纳犬将在第 6 天展出。喜马拉雅猫的展出时间还剩四天。D 不是答案。", "21": "任何品种不得连续两天展出。E 不是答案", "22": "喜马拉雅猫不能在第 1 天展出。C 不是答案", "23": "如果喜马拉雅猫在第 2 天展出，则 B 不是答案", "24": "答案是 A", "25": "The answer is A)"}, "human_translated": true, "code_input": "####\nfacts = [ '连续七天(从第 1 天到第 7 天)的每一天，',\n  '宠物店都会展出三种品种的小猫',\n  '(喜马拉雅猫、马恩岛猫、暹罗猫)中的一种，',\n  '以及三种品种的小狗',\n  '(灵缇犬、纽芬兰犬、罗威纳犬)中的一种。',\n  '必须遵循以下条件：',\n  '灵缇犬在第 1 天展出。',\n  '任何品种不会连续两天展出。',\n  '第 1 天展出的任何品种均不会在第 7 天展出。',\n  '喜马拉雅猫的展出时间为三天，',\n  '但不在第 1 天展出。',\n  '罗威纳犬不在第 7 天展出，',\n  '也不在喜马拉雅猫展出的任何时间展出。']\nquestion = '以下哪一项可能是正确的？'\nchoices = {'A': '有四个品种的展出时间为三天。', 'B': '喜马拉雅猫展出的每天都会展出灵缇犬。', 'C': '灵缇犬展出的每天都会展出喜马拉雅猫。', 'D': '罗威纳犬不展出的每天都会展出喜马拉雅猫。', 'E': '喜马拉雅猫不展出的每天都会展出罗威纳犬。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['灵缇犬在第 1 天展出。', '第 1 天展出的任何品种均不会在第 7 天展出。', '喜马拉雅猫的展出时间为三天，', 'D) 罗威纳犬不展出的每天都会展出喜马拉雅猫。']\nnew_fact = infer_new_fact(selected) # '喜马拉雅猫的展出时间为三天。罗威纳犬将在第 6 天展出。喜马拉雅猫的展出时间还剩四天。D 不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['任何品种不会连续两天展出。', 'E) 喜马拉雅猫不展出的每天都会展出罗威纳犬。', '喜马拉雅猫的展出时间为三天。罗威纳犬将在第 6 天展出。喜马拉雅猫的展出时间还剩四天。D 不是答案。']\nnew_fact = infer_new_fact(selected) # '任何品种不得连续两天展出。E 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['灵缇犬在第 1 天展出。', '喜马拉雅猫的展出时间为三天，', '但不在第 1 天展出。']\nnew_fact = infer_new_fact(selected) # '喜马拉雅猫不能在第 1 天展出。C 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['任何品种不会连续两天展出。', '喜马拉雅猫的展出时间为三天，', '但不在第 1 天展出。', 'B) 喜马拉雅猫展出的每天都会展出灵缇犬。']\nnew_fact = infer_new_fact(selected) # '如果喜马拉雅猫在第 2 天展出，则 B 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一项可能是正确的？', 'A) 有四个品种的展出时间为三天。', '喜马拉雅猫的展出时间为三天。罗威纳犬将在第 6 天展出。喜马拉雅猫的展出时间还剩四天。D 不是答案。', '任何品种不得连续两天展出。E 不是答案', '喜马拉雅猫不能在第 1 天展出。C 不是答案', '如果喜马拉雅猫在第 2 天展出，则 B 不是答案']\nnew_fact = infer_new_fact(selected) # '答案是 A'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 A']\nnew_fact = infer_new_fact(selected) # 'The answer is A'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'A'"}
{"id": "AR-LSAT_23_0acffb8c53", "context": "On each of exactly seven consecutive days (day 1 though day 7), a pet shop features exactly one of three breeds of kitten—Himalayan, Manx, Siamese—and exactly one of three breeds of puppy—Greyhound, Newfoundland, Rottweiler. The following conditions must apply: Greyhounds are featured on day 1. No breed is featured on any two consecutive days. Any breed featured on day 1 is not featured on day 7. Himalayans are featured on exactly three days, but not on day 1. Rottweilers are not featured on day 7, nor on any day that features Himalayans.", "options": ["Greyhounds are featured on days 3 and 5.", "Newfoundlands are featured on day 3.", "Rottweilers are featured on day 6.", "Rottweilers are featured only on day 3.", "Rottweilers are featured on exactly three days."], "answer": "D", "reasoning_graph_edges": [{"antecedents": [1, 2, 10, 11, 12, 13, 20], "consequent": 21}, {"antecedents": [10, 12, 13, 14, 18], "consequent": 22}, {"antecedents": [7, 8, 12, 13, 14, 16, 17], "consequent": 23}, {"antecedents": [14, 15, 19, 21, 22, 23], "consequent": 24}, {"antecedents": [24], "consequent": 25}], "metadata": [], "linearized_output_en": "sent1 & sent10 & sent11 & sent12 & sent13 & sent2 & sent20 -> int1: Each day features exactly one breed of each animal type. Himalayan and Rottweiler may not be featured on the same day. That leaves two days for Rottweilers. E is not answer.; sent10 & sent12 & sent13 & sent14 & sent18 -> int2: Rottweilers and Himalayan may not feature on the same day. C is not an answer; sent12 & sent13 & sent14 & sent16 & sent17 & sent7 & sent8 -> int3: No breed may feature on two consecutive days. A and B are not answers.; int1 & int2 & int3 & sent14 & sent15 & sent19 -> int4: The answer is D; int4 -> int5: The answer is D);", "textual_logical_units": {"1": "连续七天(从第 1 天到第 7 天)的每一天，", "2": "宠物店都会展出三种品种的小猫", "3": "(喜马拉雅猫、马恩岛猫、暹罗猫)中的一种，", "4": "以及三种品种的小狗", "5": "(灵缇犬、纽芬兰犬、罗威纳犬)中的一种。", "6": "必须遵循以下条件：", "7": "灵缇犬在第 1 天展出。", "8": "任何品种不会连续两天展出。", "9": "第 1 天展出的任何品种均不会在第 7 天展出。", "10": "喜马拉雅猫的展出时间为三天，", "11": "但不在第 1 天展出。", "12": "罗威纳犬不在第 7 天展出，", "13": "也不在喜马拉雅猫展出的任何时间展出。", "14": "如果喜马拉雅猫不在第 7 天展出，", "15": "则以下哪一项可能是正确的？", "16": "A) 灵缇犬在第 3 天和第 5 天展出。", "17": "B) 纽芬兰犬在第 3 天展出。", "18": "C) 罗威纳犬在第 6 天展出。", "19": "D) 罗威纳犬仅在第 3 天展出。", "20": "E) 罗威纳犬的展出时间为三天。", "21": "每天每种动物有一个品种展出。喜马拉雅猫和罗威纳犬不能在同一天展出。罗威纳犬的展出时间还剩两天。E 不是答案。", "22": "罗威纳犬和喜马拉雅猫不能在同一天展出。C 不是答案", "23": "任何品种不得连续两天展出。A 和 B 不是答案。", "24": "答案是 D", "25": "The answer is D)"}, "human_translated": true, "code_input": "####\nfacts = [ '连续七天(从第 1 天到第 7 天)的每一天，',\n  '宠物店都会展出三种品种的小猫',\n  '(喜马拉雅猫、马恩岛猫、暹罗猫)中的一种，',\n  '以及三种品种的小狗',\n  '(灵缇犬、纽芬兰犬、罗威纳犬)中的一种。',\n  '必须遵循以下条件：',\n  '灵缇犬在第 1 天展出。',\n  '任何品种不会连续两天展出。',\n  '第 1 天展出的任何品种均不会在第 7 天展出。',\n  '喜马拉雅猫的展出时间为三天，',\n  '但不在第 1 天展出。',\n  '罗威纳犬不在第 7 天展出，',\n  '也不在喜马拉雅猫展出的任何时间展出。',\n  '如果喜马拉雅猫不在第 7 天展出，']\nquestion = '则以下哪一项可能是正确的？'\nchoices = {'A': '灵缇犬在第 3 天和第 5 天展出。', 'B': '纽芬兰犬在第 3 天展出。', 'C': '罗威纳犬在第 6 天展出。', 'D': '罗威纳犬仅在第 3 天展出。', 'E': '罗威纳犬的展出时间为三天。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['连续七天(从第 1 天到第 7 天)的每一天，', '宠物店都会展出三种品种的小猫', '喜马拉雅猫的展出时间为三天，', '但不在第 1 天展出。', '罗威纳犬不在第 7 天展出，', '也不在喜马拉雅猫展出的任何时间展出。', 'E) 罗威纳犬的展出时间为三天。']\nnew_fact = infer_new_fact(selected) # '每天每种动物有一个品种展出。喜马拉雅猫和罗威纳犬不能在同一天展出。罗威纳犬的展出时间还剩两天。E 不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['喜马拉雅猫的展出时间为三天，', '罗威纳犬不在第 7 天展出，', '也不在喜马拉雅猫展出的任何时间展出。', '如果喜马拉雅猫不在第 7 天展出，', 'C) 罗威纳犬在第 6 天展出。']\nnew_fact = infer_new_fact(selected) # '罗威纳犬和喜马拉雅猫不能在同一天展出。C 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['灵缇犬在第 1 天展出。', '任何品种不会连续两天展出。', '罗威纳犬不在第 7 天展出，', '也不在喜马拉雅猫展出的任何时间展出。', '如果喜马拉雅猫不在第 7 天展出，', 'A) 灵缇犬在第 3 天和第 5 天展出。', 'B) 纽芬兰犬在第 3 天展出。']\nnew_fact = infer_new_fact(selected) # '任何品种不得连续两天展出。A 和 B 不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果喜马拉雅猫不在第 7 天展出，', '则以下哪一项可能是正确的？', 'D) 罗威纳犬仅在第 3 天展出。', '每天每种动物有一个品种展出。喜马拉雅猫和罗威纳犬不能在同一天展出。罗威纳犬的展出时间还剩两天。E 不是答案。', '罗威纳犬和喜马拉雅猫不能在同一天展出。C 不是答案', '任何品种不得连续两天展出。A 和 B 不是答案。']\nnew_fact = infer_new_fact(selected) # '答案是 D'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 D']\nnew_fact = infer_new_fact(selected) # 'The answer is D'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'D'"}
{"id": "AR-LSAT_24_da322cc891", "context": "A panel of five scientists will be formed. The panelists will be selected from among three botanists—F, G, and H—three chemists—K, L, and M—and three zoologists—P, Q, and R. Selection is governed by the following conditions: The panel must include at least one scientist of each of the three types. If more than one botanist is selected, then at most one zoologist is selected. F and K cannot both be selected. K and M cannot both be selected. If M is selected, both P and R must be selected.", "options": ["F, G, K, P, Q", "G, H, K, L, M", "G, H, K, L, R", "H, K, M, P, R", "H, L, M, P, Q"], "answer": "C", "reasoning_graph_edges": [{"antecedents": [12, 16], "consequent": 21}, {"antecedents": [13, 17, 19], "consequent": 22}, {"antecedents": [14, 20], "consequent": 23}, {"antecedents": [15, 18, 21, 22, 23], "consequent": 24}, {"antecedents": [24], "consequent": 25}], "metadata": [], "linearized_output_en": "sent12 & sent16 -> int1: K and F cannot be in the team. A not an answer; sent13 & sent17 & sent19 -> int2: K and M cannot be in the team. B and D not answers; sent14 & sent20 -> int3: If M is selcted, both P and R must be selected. E not an answer.; int1 & int2 & int3 & sent15 & sent18 -> int4: The answer is C; int4 -> int5: The answer is C);", "textual_logical_units": {"1": "将成立一个由五位科学家组成的小组。", "2": "小组成员将从三位植物学家", "3": "(F、G 和 H)、", "4": "三位化学家", "5": "(K、L 和 M)", "6": "以及三位动物学家", "7": "(P、Q 和 R)中选出。", "8": "选择受以下条件的约束：", "9": "小组中必须包括三种类型中每种类型的至少一位科学家。", "10": "如果选择了不止一位植物学家，", "11": "则最多只能选择一位动物学家。", "12": "F 和 K 不能同时选择。", "13": "K 和 M 不能同时选择。", "14": "如果选择了 M，则必须同时选择 P 和 R。", "15": "以下哪一项是小组可以接受的科学家选择？", "16": "A) F、G、K、P、Q", "17": "B) G、H、K、L、M", "18": "C) G、H、K、L、R", "19": "D) H、K、M、P、R", "20": "E) H、L、M、P、Q", "21": "K 和 F 不能同时在小组内。A 不是答案", "22": "K 和 M 不能同时在小组内。B 和 D 不是答案", "23": "如果选择了 M，则必须同时选择 P 和 R。E 不是答案。", "24": "答案是 C", "25": "The answer is C)"}, "human_translated": true, "code_input": "####\nfacts = [ '将成立一个由五位科学家组成的小组。',\n  '小组成员将从三位植物学家',\n  '(F、G 和 H)、',\n  '三位化学家',\n  '(K、L 和 M)',\n  '以及三位动物学家',\n  '(P、Q 和 R)中选出。',\n  '选择受以下条件的约束：',\n  '小组中必须包括三种类型中每种类型的至少一位科学家。',\n  '如果选择了不止一位植物学家，',\n  '则最多只能选择一位动物学家。',\n  'F 和 K 不能同时选择。',\n  'K 和 M 不能同时选择。',\n  '如果选择了 M，则必须同时选择 P 和 R。']\nquestion = '以下哪一项是小组可以接受的科学家选择？'\nchoices = {'A': 'F、G、K、P、Q', 'B': 'G、H、K、L、M', 'C': 'G、H、K、L、R', 'D': 'H、K、M、P、R', 'E': 'H、L、M、P、Q'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['F 和 K 不能同时选择。', 'A) F、G、K、P、Q']\nnew_fact = infer_new_fact(selected) # 'K 和 F 不能同时在小组内。A 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['K 和 M 不能同时选择。', 'B) G、H、K、L、M', 'D) H、K、M、P、R']\nnew_fact = infer_new_fact(selected) # 'K 和 M 不能同时在小组内。B 和 D 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果选择了 M，则必须同时选择 P 和 R。', 'E) H、L、M、P、Q']\nnew_fact = infer_new_fact(selected) # '如果选择了 M，则必须同时选择 P 和 R。E 不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一项是小组可以接受的科学家选择？', 'C) G、H、K、L、R', 'K 和 F 不能同时在小组内。A 不是答案', 'K 和 M 不能同时在小组内。B 和 D 不是答案', '如果选择了 M，则必须同时选择 P 和 R。E 不是答案。']\nnew_fact = infer_new_fact(selected) # '答案是 C'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 C']\nnew_fact = infer_new_fact(selected) # 'The answer is C'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'C'"}
{"id": "AR-LSAT_25_b1bececf9e", "context": "A panel of five scientists will be formed. The panelists will be selected from among three botanists—F, G, and H—three chemists—K, L, and M—and three zoologists—P, Q, and R. Selection is governed by the following conditions: The panel must include at least one scientist of each of the three types. If more than one botanist is selected, then at most one zoologist is selected. F and K cannot both be selected. K and M cannot both be selected. If M is selected, both P and R must be selected.", "options": ["F and G are both selected.", "G and H are both selected.", "H and P are both selected.", "F, G, and H are all selected.", "P, Q, and R are all selected."], "answer": "E", "reasoning_graph_edges": [{"antecedents": [1, 14, 20], "consequent": 22}, {"antecedents": [10, 11, 14, 17, 18, 19], "consequent": 23}, {"antecedents": [15, 16, 21, 22, 23], "consequent": 24}, {"antecedents": [24], "consequent": 25}], "metadata": [], "linearized_output_en": "sent1 & sent14 & sent20 -> int1: The desire panel size is five scientist. D not an answer.; sent10 & sent11 & sent14 & sent17 & sent18 & sent19 -> int2: If more than one botanist is selected, then at most one zoologist may be selected. A, B, and C not answers; int1 & int2 & sent15 & sent16 & sent21 -> int3: The answer is E; int3 -> int4: The answer is E);", "textual_logical_units": {"1": "将成立一个由五位科学家组成的小组。", "2": "小组成员将从三位植物学家", "3": "(F、G 和 H)、", "4": "三位化学家", "5": "(K、L 和 M)", "6": "以及三位动物学家", "7": "(P、Q 和 R)中选出。", "8": "选择受以下条件的约束：", "9": "小组中必须包括三种类型中每种类型的至少一位科学家。", "10": "如果选择了不止一位植物学家，", "11": "则最多只能选择一位动物学家。", "12": "F 和 K 不能同时选择。", "13": "K 和 M 不能同时选择。", "14": "如果选择了 M，则必须同时选择 P 和 R。", "15": "如果 M 是小组中唯一被选中的化学家，", "16": "则以下哪一项一定是正确的？", "17": "A) F 和 G 都被选中。", "18": "B) G 和 H 都被选中。", "19": "C) H 和 P 都被选中。", "20": "D) F、G 和 H 都被选中。", "21": "E) P、Q 和 R 都被选中。", "22": "预期的小组规模是五位科学家。D 不是答案。", "23": "如果选择了不止一位植物学家，则最多可以选择一位动物学家。A、B 和 C 不是答案", "24": "答案是 E", "25": "The answer is E)"}, "human_translated": true, "code_input": "####\nfacts = [ '将成立一个由五位科学家组成的小组。',\n  '小组成员将从三位植物学家',\n  '(F、G 和 H)、',\n  '三位化学家',\n  '(K、L 和 M)',\n  '以及三位动物学家',\n  '(P、Q 和 R)中选出。',\n  '选择受以下条件的约束：',\n  '小组中必须包括三种类型中每种类型的至少一位科学家。',\n  '如果选择了不止一位植物学家，',\n  '则最多只能选择一位动物学家。',\n  'F 和 K 不能同时选择。',\n  'K 和 M 不能同时选择。',\n  '如果选择了 M，则必须同时选择 P 和 R。',\n  '如果 M 是小组中唯一被选中的化学家，']\nquestion = '则以下哪一项一定是正确的？'\nchoices = {'A': 'F 和 G 都被选中。', 'B': 'G 和 H 都被选中。', 'C': 'H 和 P 都被选中。', 'D': 'F、G 和 H 都被选中。', 'E': 'P、Q 和 R 都被选中。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['将成立一个由五位科学家组成的小组。', '如果选择了 M，则必须同时选择 P 和 R。', 'D) F、G 和 H 都被选中。']\nnew_fact = infer_new_fact(selected) # '预期的小组规模是五位科学家。D 不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果选择了不止一位植物学家，', '则最多只能选择一位动物学家。', '如果选择了 M，则必须同时选择 P 和 R。', 'A) F 和 G 都被选中。', 'B) G 和 H 都被选中。', 'C) H 和 P 都被选中。']\nnew_fact = infer_new_fact(selected) # '如果选择了不止一位植物学家，则最多可以选择一位动物学家。A、B 和 C 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果 M 是小组中唯一被选中的化学家，', '则以下哪一项一定是正确的？', 'E) P、Q 和 R 都被选中。', '预期的小组规模是五位科学家。D 不是答案。', '如果选择了不止一位植物学家，则最多可以选择一位动物学家。A、B 和 C 不是答案']\nnew_fact = infer_new_fact(selected) # '答案是 E'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 E']\nnew_fact = infer_new_fact(selected) # 'The answer is E'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'E'"}
{"id": "AR-LSAT_26_bb85290da4", "context": "A panel of five scientists will be formed. The panelists will be selected from among three botanists—F, G, and H—three chemists—K, L, and M—and three zoologists—P, Q, and R. Selection is governed by the following conditions: The panel must include at least one scientist of each of the three types. If more than one botanist is selected, then at most one zoologist is selected. F and K cannot both be selected. K and M cannot both be selected. If M is selected, both P and R must be selected.", "options": ["G", "H", "K", "M", "P"], "answer": "E", "reasoning_graph_edges": [{"antecedents": [10, 11, 15], "consequent": 22}, {"antecedents": [12], "consequent": 23}, {"antecedents": [1, 14], "consequent": 24}, {"antecedents": [15, 16, 21, 22, 23, 24], "consequent": 25}, {"antecedents": [25], "consequent": 26}], "metadata": [], "linearized_output_en": "sent10 & sent11 & sent15 -> int1: Two botanists are already selected, so G ot H cannot be selected.; sent12 -> int2: F is already selected. K cannot be selected.; sent1 & sent14 -> int3: When M is selected, so must P and R. That would exceed the desired panel size.; int1 & int2 & int3 & sent15 & sent16 & sent21 -> int4: The answer is E; int4 -> int5: The answer is E);", "textual_logical_units": {"1": "将成立一个由五位科学家组成的小组。", "2": "小组成员将从三位植物学家", "3": "(F、G 和 H)、", "4": "三位化学家", "5": "(K、L 和 M)", "6": "以及三位动物学家", "7": "(P、Q 和 R)中选出。", "8": "选择受以下条件的约束：", "9": "小组中必须包括三种类型中每种类型的至少一位科学家。", "10": "如果选择了不止一位植物学家，", "11": "则最多只能选择一位动物学家。", "12": "F 和 K 不能同时选择。", "13": "K 和 M 不能同时选择。", "14": "如果选择了 M，则必须同时选择 P 和 R。", "15": "如果已选择的四位科学家是 F、L、Q 和 R，", "16": "以下哪一位必须是第五位入选的科学家？", "17": "A) G", "18": "B) H", "19": "C) K", "20": "D) M", "21": "E) P", "22": "已经选择了两位植物学家，因此无法选择 G 或 H。", "23": "F 已被选择。无法选择 K。", "24": "选择 M 时，必须选择 P 和 R。这将超过预期的小组规模。", "25": "答案是 E", "26": "The answer is E)"}, "human_translated": true, "code_input": "####\nfacts = [ '将成立一个由五位科学家组成的小组。',\n  '小组成员将从三位植物学家',\n  '(F、G 和 H)、',\n  '三位化学家',\n  '(K、L 和 M)',\n  '以及三位动物学家',\n  '(P、Q 和 R)中选出。',\n  '选择受以下条件的约束：',\n  '小组中必须包括三种类型中每种类型的至少一位科学家。',\n  '如果选择了不止一位植物学家，',\n  '则最多只能选择一位动物学家。',\n  'F 和 K 不能同时选择。',\n  'K 和 M 不能同时选择。',\n  '如果选择了 M，则必须同时选择 P 和 R。',\n  '如果已选择的四位科学家是 F、L、Q 和 R，']\nquestion = '以下哪一位必须是第五位入选的科学家？'\nchoices = {'A': 'G', 'B': 'H', 'C': 'K', 'D': 'M', 'E': 'P'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['如果选择了不止一位植物学家，', '则最多只能选择一位动物学家。', '如果已选择的四位科学家是 F、L、Q 和 R，']\nnew_fact = infer_new_fact(selected) # '已经选择了两位植物学家，因此无法选择 G 或 H。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['F 和 K 不能同时选择。']\nnew_fact = infer_new_fact(selected) # 'F 已被选择。无法选择 K。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['将成立一个由五位科学家组成的小组。', '如果选择了 M，则必须同时选择 P 和 R。']\nnew_fact = infer_new_fact(selected) # '选择 M 时，必须选择 P 和 R。这将超过预期的小组规模。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果已选择的四位科学家是 F、L、Q 和 R，', '以下哪一位必须是第五位入选的科学家？', 'E) P', '已经选择了两位植物学家，因此无法选择 G 或 H。', 'F 已被选择。无法选择 K。', '选择 M 时，必须选择 P 和 R。这将超过预期的小组规模。']\nnew_fact = infer_new_fact(selected) # '答案是 E'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 E']\nnew_fact = infer_new_fact(selected) # 'The answer is E'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'E'"}
{"id": "AR-LSAT_27_79af00cbde", "context": "A panel of five scientists will be formed. The panelists will be selected from among three botanists—F, G, and H—three chemists—K, L, and M—and three zoologists—P, Q, and R. Selection is governed by the following conditions: The panel must include at least one scientist of each of the three types. If more than one botanist is selected, then at most one zoologist is selected. F and K cannot both be selected. K and M cannot both be selected. If M is selected, both P and R must be selected.", "options": ["If K is selected, G cannot be selected.", "If L is selected, F cannot be selected.", "If exactly one chemist is selected, it must be K.", "If exactly two chemists are selected, F cannot be selected.", "If exactly two chemists are selected, G cannot be selected."], "answer": "D", "reasoning_graph_edges": [{"antecedents": [9, 10, 11, 12, 13, 14, 17, 18], "consequent": 22}, {"antecedents": [1, 12, 15], "consequent": 23}, {"antecedents": [10, 11, 12, 13, 14, 21], "consequent": 24}, {"antecedents": [15, 16, 20, 22, 23, 24], "consequent": 25}, {"antecedents": [25], "consequent": 26}], "metadata": [], "linearized_output_en": "sent10 & sent11 & sent12 & sent13 & sent14 & sent17 & sent18 & sent9 -> int1: There are no conditions that restrict selection of K and G, or L and F; sent1 & sent12 & sent15 -> int2: If K is the only chemist selected, then all botanists must be chosen. However, F and K may not be selected.; sent10 & sent11 & sent12 & sent13 & sent14 & sent21 -> int3: There are no conditons restricting selection of G when two chemists are chosen. However, the remaining scientists are resticted.; int1 & int2 & int3 & sent15 & sent16 & sent20 -> int4: The answer D; int4 -> int5: The answer is D);", "textual_logical_units": {"1": "将成立一个由五位科学家组成的小组。", "2": "小组成员将从三位植物学家", "3": "(F、G 和 H)、", "4": "三位化学家", "5": "(K、L 和 M)", "6": "以及三位动物学家", "7": "(P、Q 和 R)中选出。", "8": "选择受以下条件的约束：", "9": "小组中必须包括三种类型中每种类型的至少一位科学家。", "10": "如果选择了不止一位植物学家，", "11": "则最多只能选择一位动物学家。", "12": "F 和 K 不能同时选择。", "13": "K 和 M 不能同时选择。", "14": "如果选择了 M，则必须同时选择 P 和 R。", "15": "如果 P 是唯一被选择的动物学家，", "16": "则以下哪一项一定是正确的？", "17": "A) 如果选择了 K，则无法选择 G。", "18": "B) 如果选择了 L，则无法选择 F。", "19": "C) 如果只选择了一位化学家，则必须是 K。", "20": "D) 如果选择了两位化学家，则无法选择 F。", "21": "E) 如果选择了两位化学家，则无法选择 G。", "22": "不存在限制选择 K 和 G 或 L 和 F 的条件", "23": "如果 K 是唯一被选择的化学家，则必须选择所有植物学家。但是，可能无法选择 F 和 K。", "24": "当选择两位化学家时，没有限制选择 G 的条件。但是，其余科学家的选择受到限制。", "25": "答案是 D", "26": "The answer is D)"}, "human_translated": true, "code_input": "####\nfacts = [ '将成立一个由五位科学家组成的小组。',\n  '小组成员将从三位植物学家',\n  '(F、G 和 H)、',\n  '三位化学家',\n  '(K、L 和 M)',\n  '以及三位动物学家',\n  '(P、Q 和 R)中选出。',\n  '选择受以下条件的约束：',\n  '小组中必须包括三种类型中每种类型的至少一位科学家。',\n  '如果选择了不止一位植物学家，',\n  '则最多只能选择一位动物学家。',\n  'F 和 K 不能同时选择。',\n  'K 和 M 不能同时选择。',\n  '如果选择了 M，则必须同时选择 P 和 R。',\n  '如果 P 是唯一被选择的动物学家，']\nquestion = '则以下哪一项一定是正确的？'\nchoices = {'A': '如果选择了 K，则无法选择 G。', 'B': '如果选择了 L，则无法选择 F。', 'C': '如果只选择了一位化学家，则必须是 K。', 'D': '如果选择了两位化学家，则无法选择 F。', 'E': '如果选择了两位化学家，则无法选择 G。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['小组中必须包括三种类型中每种类型的至少一位科学家。', '如果选择了不止一位植物学家，', '则最多只能选择一位动物学家。', 'F 和 K 不能同时选择。', 'K 和 M 不能同时选择。', '如果选择了 M，则必须同时选择 P 和 R。', 'A) 如果选择了 K，则无法选择 G。', 'B) 如果选择了 L，则无法选择 F。']\nnew_fact = infer_new_fact(selected) # '不存在限制选择 K 和 G 或 L 和 F 的条件'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['将成立一个由五位科学家组成的小组。', 'F 和 K 不能同时选择。', '如果 P 是唯一被选择的动物学家，']\nnew_fact = infer_new_fact(selected) # '如果 K 是唯一被选择的化学家，则必须选择所有植物学家。但是，可能无法选择 F 和 K。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果选择了不止一位植物学家，', '则最多只能选择一位动物学家。', 'F 和 K 不能同时选择。', 'K 和 M 不能同时选择。', '如果选择了 M，则必须同时选择 P 和 R。', 'E) 如果选择了两位化学家，则无法选择 G。']\nnew_fact = infer_new_fact(selected) # '当选择两位化学家时，没有限制选择 G 的条件。但是，其余科学家的选择受到限制。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果 P 是唯一被选择的动物学家，', '则以下哪一项一定是正确的？', 'D) 如果选择了两位化学家，则无法选择 F。', '不存在限制选择 K 和 G 或 L 和 F 的条件', '如果 K 是唯一被选择的化学家，则必须选择所有植物学家。但是，可能无法选择 F 和 K。', '当选择两位化学家时，没有限制选择 G 的条件。但是，其余科学家的选择受到限制。']\nnew_fact = infer_new_fact(selected) # '答案是 D'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 D']\nnew_fact = infer_new_fact(selected) # 'The answer is D'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'D'"}
{"id": "AR-LSAT_28_69c98c102d", "context": "A panel of five scientists will be formed. The panelists will be selected from among three botanists—F, G, and H—three chemists—K, L, and M—and three zoologists—P, Q, and R. Selection is governed by the following conditions: The panel must include at least one scientist of each of the three types. If more than one botanist is selected, then at most one zoologist is selected. F and K cannot both be selected. K and M cannot both be selected. If M is selected, both P and R must be selected.", "options": ["F or else K", "F or else M", "K or else M", "M or else Q", "P or else Q"], "answer": "A", "reasoning_graph_edges": [{"antecedents": [10, 11, 14, 15], "consequent": 22}, {"antecedents": [9, 10, 11, 12, 12, 14], "consequent": 23}, {"antecedents": [12, 15, 16, 17, 22, 23], "consequent": 24}, {"antecedents": [24], "consequent": 25}], "metadata": [], "linearized_output_en": "sent10 & sent11 & sent14 & sent15 -> int1: If more than one botanist are selected, no more than one zoologist may be selected. Options with M are not answers.; sent10 & sent11 & sent12 & sent12 & sent14 & sent9 -> int2: There are no conditions that restrict selection of P or Q.; int1 & int2 & sent12 & sent15 & sent16 & sent17 -> int3: The answer is A; int3 -> int4: The answer is A);", "textual_logical_units": {"1": "将成立一个由五位科学家组成的小组。", "2": "小组成员将从三位植物学家", "3": "(F、G 和 H)、", "4": "三位化学家", "5": "(K、L 和 M)", "6": "以及三位动物学家", "7": "(P、Q 和 R)中选出。", "8": "选择受以下条件的约束：", "9": "小组中必须包括三种类型中每种类型的至少一位科学家。", "10": "如果选择了不止一位植物学家，", "11": "则最多只能选择一位动物学家。", "12": "F 和 K 不能同时选择。", "13": "K 和 M 不能同时选择。", "14": "如果选择了 M，则必须同时选择 P 和 R。", "15": "如果 G 和 H 都是被选择的科学家，", "16": "则小组必须包括以下任一位科学家", "17": "A) F 或 K", "18": "B) F 或 M", "19": "C) K 或 M", "20": "D) M 或 Q", "21": "E) P 或 Q", "22": "如果选择了不止一位植物学家，则只能选择一位动物学家。包含 M 的选项不是答案。", "23": "不存在限制选择 P 或 Q 的条件。", "24": "答案是 A", "25": "The answer is A)"}, "human_translated": true, "code_input": "####\nfacts = [ '将成立一个由五位科学家组成的小组。',\n  '小组成员将从三位植物学家',\n  '(F、G 和 H)、',\n  '三位化学家',\n  '(K、L 和 M)',\n  '以及三位动物学家',\n  '(P、Q 和 R)中选出。',\n  '选择受以下条件的约束：',\n  '小组中必须包括三种类型中每种类型的至少一位科学家。',\n  '如果选择了不止一位植物学家，',\n  '则最多只能选择一位动物学家。',\n  'F 和 K 不能同时选择。',\n  'K 和 M 不能同时选择。',\n  '如果选择了 M，则必须同时选择 P 和 R。',\n  '如果 G 和 H 都是被选择的科学家，']\nquestion = '则小组必须包括以下任一位科学家'\nchoices = {'A': 'F 或 K', 'B': 'F 或 M', 'C': 'K 或 M', 'D': 'M 或 Q', 'E': 'P 或 Q'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['如果选择了不止一位植物学家，', '则最多只能选择一位动物学家。', '如果选择了 M，则必须同时选择 P 和 R。', '如果 G 和 H 都是被选择的科学家，']\nnew_fact = infer_new_fact(selected) # '如果选择了不止一位植物学家，则只能选择一位动物学家。包含 M 的选项不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['小组中必须包括三种类型中每种类型的至少一位科学家。', '如果选择了不止一位植物学家，', '则最多只能选择一位动物学家。', 'F 和 K 不能同时选择。', 'F 和 K 不能同时选择。', '如果选择了 M，则必须同时选择 P 和 R。']\nnew_fact = infer_new_fact(selected) # '不存在限制选择 P 或 Q 的条件。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['F 和 K 不能同时选择。', '如果 G 和 H 都是被选择的科学家，', '则小组必须包括以下任一位科学家', 'A) F 或 K', '如果选择了不止一位植物学家，则只能选择一位动物学家。包含 M 的选项不是答案。', '不存在限制选择 P 或 Q 的条件。']\nnew_fact = infer_new_fact(selected) # '答案是 A'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 A']\nnew_fact = infer_new_fact(selected) # 'The answer is A'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'A'"}
{"id": "AR-LSAT_29_64daa9725a", "context": "A loading dock consists of exactly six bays numbered 1 through 6 consecutively from one side of the dock to the other. Each bay is holding a different one of exactly six types of cargo—fuel, grain, livestock, machinery, produce, or textiles. The following apply: The bay holding grain has a higher number than the bay holding livestock. The bay holding livestock has a higher number than the bay holding textiles. The bay holding produce has a higher number than the bay holding fuel. The bay holding textiles is next to the bay holding produce.", "options": ["fuel, machinery, textiles", "grain, machinery, fuel", "machinery, livestock, fuel", "machinery, textiles, fuel", "machinery, textiles, produce"], "answer": "A", "reasoning_graph_edges": [{"antecedents": [0], "consequent": 16}, {"antecedents": [7], "consequent": 17}, {"antecedents": [8], "consequent": 18}, {"antecedents": [6, 17, 18], "consequent": 19}, {"antecedents": [5, 19], "consequent": 20}, {"antecedents": [12, 13, 14, 20], "consequent": 21}, {"antecedents": [15, 16, 20], "consequent": 22}, {"antecedents": [9, 10, 11, 21, 22], "consequent": 23}, {"antecedents": [23], "consequent": 24}], "metadata": [], "linearized_output_en": "sent0 -> int1: There are no restrictions on machinery, so it can go anywhere.; sent7 -> int2: Fuel (F) must be numbered lower than produce (P): F - P; sent8 -> int3: Produce (P) must be adjacent to textiles (T), meaning T may be numbered 1 lower or 1 higher than produce): (T)P(T); int2 & int3 & sent6 -> int4: Textiles (T) must be numbered lower than livestock (L): F - (T)P(T) - L; int4 & sent5 -> int5: Livestock (L) must be numbered lower than grain (G): F - (T)P(T) - L - G; int5 & sent12 & sent13 & sent14 -> int6: We rule out options B, C, and D because they all number fuel higher than a type of cargo that must be numbered higher than fuel (grain, livestock, and textiles, respectively); int1 & int5 & sent15 -> int7: We rule out option E because fuel must be numbered lower than textiles and produce, which would only be bay 1 (occupied by machinery) in this case.; int6 & int7 & sent10 & sent11 & sent9 -> int8: The answer is A.; int8 -> int9: The answer is A);", "textual_logical_units": {"1": "装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。", "2": "每个装卸区存放六种不同类型的货物：", "3": "燃料、谷物、牲畜、机械、农产品或纺织品。", "4": "遵循以下条件：", "5": "存放谷物的装卸区比存放牲畜的装卸区多。", "6": "存放牲畜的装卸区比存放纺织品的装卸区多。", "7": "存放农产品的装卸区比存放燃料的装卸区多。", "8": "存放纺织品的装卸区与存放农产品的装卸区相邻。", "9": "以下哪一个列表准确地识别出装卸码头前三个装卸区存放的货物", "10": "(按装卸区 1 到装卸区 3 的顺序列出)？", "11": "A) 燃料、机械、纺织品", "12": "B) 谷物、机械、燃料", "13": "C) 机械、牲畜、燃料", "14": "D) 机械、纺织品、燃料", "15": "E) 机械、纺织品、农产品", "16": "对机械没有限制，因此它可以在任何位置。", "17": "燃料 (F) 的编号必须小于农产品 (P)： F - P", "18": "农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)", "19": "纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L", "20": "牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G", "21": "我们排除了选项 B、C 和 D，因为这些选项中燃料的编号都大于编号必须大于燃料的货物(分别是谷物、牲畜和纺织品)", "22": "我们排除了选项 E，因为燃料的编号必须小于纺织品和农产品，在这种情况下，纺织品和农产品的位置只能是装卸区 1(被机械占用)。", "23": "答案是 A。", "24": "The answer is A)"}, "human_translated": true, "code_input": "####\nfacts = [ '装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。',\n  '每个装卸区存放六种不同类型的货物：',\n  '燃料、谷物、牲畜、机械、农产品或纺织品。',\n  '遵循以下条件：',\n  '存放谷物的装卸区比存放牲畜的装卸区多。',\n  '存放牲畜的装卸区比存放纺织品的装卸区多。',\n  '存放农产品的装卸区比存放燃料的装卸区多。',\n  '存放纺织品的装卸区与存放农产品的装卸区相邻。',\n  '以下哪一个列表准确地识别出装卸码头前三个装卸区存放的货物']\nquestion = '(按装卸区 1 到装卸区 3 的顺序列出)？'\nchoices = {'A': '燃料、机械、纺织品', 'B': '谷物、机械、燃料', 'C': '机械、牲畜、燃料', 'D': '机械、纺织品、燃料', 'E': '机械、纺织品、农产品'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "[]\nnew_fact = infer_new_fact(selected) # '对机械没有限制，因此它可以在任何位置。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放农产品的装卸区比存放燃料的装卸区多。']\nnew_fact = infer_new_fact(selected) # '燃料 (F) 的编号必须小于农产品 (P)： F - P'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放纺织品的装卸区与存放农产品的装卸区相邻。']\nnew_fact = infer_new_fact(selected) # '农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放牲畜的装卸区比存放纺织品的装卸区多。', '燃料 (F) 的编号必须小于农产品 (P)： F - P', '农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)']\nnew_fact = infer_new_fact(selected) # '纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放谷物的装卸区比存放牲畜的装卸区多。', '纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L']\nnew_fact = infer_new_fact(selected) # '牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['B) 谷物、机械、燃料', 'C) 机械、牲畜、燃料', 'D) 机械、纺织品、燃料', '牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G']\nnew_fact = infer_new_fact(selected) # '我们排除了选项 B、C 和 D，因为这些选项中燃料的编号都大于编号必须大于燃料的货物(分别是谷物、牲畜和纺织品)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['E) 机械、纺织品、农产品', '对机械没有限制，因此它可以在任何位置。', '牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G']\nnew_fact = infer_new_fact(selected) # '我们排除了选项 E，因为燃料的编号必须小于纺织品和农产品，在这种情况下，纺织品和农产品的位置只能是装卸区 1(被机械占用)。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一个列表准确地识别出装卸码头前三个装卸区存放的货物', '(按装卸区 1 到装卸区 3 的顺序列出)？', 'A) 燃料、机械、纺织品', '我们排除了选项 B、C 和 D，因为这些选项中燃料的编号都大于编号必须大于燃料的货物(分别是谷物、牲畜和纺织品)', '我们排除了选项 E，因为燃料的编号必须小于纺织品和农产品，在这种情况下，纺织品和农产品的位置只能是装卸区 1(被机械占用)。']\nnew_fact = infer_new_fact(selected) # '答案是 A。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 A。']\nnew_fact = infer_new_fact(selected) # 'The answer is A'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'A'"}
{"id": "AR-LSAT_30_4917e7827d", "context": "A loading dock consists of exactly six bays numbered 1 through 6 consecutively from one side of the dock to the other. Each bay is holding a different one of exactly six types of cargo—fuel, grain, livestock, machinery, produce, or textiles. The following apply: The bay holding grain has a higher number than the bay holding livestock. The bay holding livestock has a higher number than the bay holding textiles. The bay holding produce has a higher number than the bay holding fuel. The bay holding textiles is next to the bay holding produce.", "options": ["grain", "livestock", "machinery", "produce", "textiles"], "answer": "A", "reasoning_graph_edges": [{"antecedents": [0], "consequent": 15}, {"antecedents": [7], "consequent": 16}, {"antecedents": [8], "consequent": 17}, {"antecedents": [6, 16, 17], "consequent": 18}, {"antecedents": [5, 18], "consequent": 19}, {"antecedents": [1, 15, 19], "consequent": 20}, {"antecedents": [19, 20], "consequent": 21}, {"antecedents": [19, 20, 21], "consequent": 22}, {"antecedents": [9, 10, 22], "consequent": 23}, {"antecedents": [23], "consequent": 24}], "metadata": [], "linearized_output_en": "sent0 -> int1: There are no restrictions on machinery, so it can go anywhere.; sent7 -> int2: Fuel (F) must be numbered lower than produce (P): F - P; sent8 -> int3: Produce (P) must be adjacent to textiles (T), meaning T may be numbered 1 lower or 1 higher than produce): (T)P(T); int2 & int3 & sent6 -> int4: Textiles (T) must be numbered lower than livestock (L): F - (T)P(T) - L; int4 & sent5 -> int5: Livestock (L) must be numbered lower than grain (G): F - (T)P(T) - L - G; int1 & int5 & sent1 -> int6: Since the order dictates 5 out of 6 spaces, the cargo types at each end can only move one space in to fit M:; int5 & int6 -> int7: Fuel can only be in bay 1 or 2: (M/F) (F/M) (T/P) (P/T) L G; int5 & int6 & int7 -> int8: Grain can only be in bay 5 or 6: F (T/P) (P/T) L (M/G) (G/M); int8 & sent10 & sent9 -> int9: The answer is A.; int9 -> int10: The answer is A);", "textual_logical_units": {"1": "装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。", "2": "每个装卸区存放六种不同类型的货物：", "3": "燃料、谷物、牲畜、机械、农产品或纺织品。", "4": "遵循以下条件：", "5": "存放谷物的装卸区比存放牲畜的装卸区多。", "6": "存放牲畜的装卸区比存放纺织品的装卸区多。", "7": "存放农产品的装卸区比存放燃料的装卸区多。", "8": "存放纺织品的装卸区与存放农产品的装卸区相邻。", "9": "以下哪一项不能是装卸区 4 所存放的货物类型？", "10": "A) 谷物", "11": "B) 牲畜", "12": "C) 机械", "13": "D) 农产品", "14": "E) 纺织品", "15": "对机械没有限制，因此它可以在任何位置。", "16": "燃料 (F) 的编号必须小于农产品 (P)： F - P", "17": "农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)", "18": "纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L", "19": "牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G", "20": "由于顺序规定了 6 个位置中的 5 个，因此两端的货物类型只能向内移动一个位置以存放 M：", "21": "燃料只能在装卸区 1 或 2： (M/F) (F/M) (T/P) (P/T) L G", "22": "谷物只能在装卸区 5 或 6： F (T/P) (P/T) L (M/G) (G/M)", "23": "答案是 A。", "24": "The answer is A)"}, "human_translated": true, "code_input": "####\nfacts = [ '装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。',\n  '每个装卸区存放六种不同类型的货物：',\n  '燃料、谷物、牲畜、机械、农产品或纺织品。',\n  '遵循以下条件：',\n  '存放谷物的装卸区比存放牲畜的装卸区多。',\n  '存放牲畜的装卸区比存放纺织品的装卸区多。',\n  '存放农产品的装卸区比存放燃料的装卸区多。',\n  '存放纺织品的装卸区与存放农产品的装卸区相邻。']\nquestion = '以下哪一项不能是装卸区 4 所存放的货物类型？'\nchoices = {'A': '谷物', 'B': '牲畜', 'C': '机械', 'D': '农产品', 'E': '纺织品'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "[]\nnew_fact = infer_new_fact(selected) # '对机械没有限制，因此它可以在任何位置。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放农产品的装卸区比存放燃料的装卸区多。']\nnew_fact = infer_new_fact(selected) # '燃料 (F) 的编号必须小于农产品 (P)： F - P'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放纺织品的装卸区与存放农产品的装卸区相邻。']\nnew_fact = infer_new_fact(selected) # '农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放牲畜的装卸区比存放纺织品的装卸区多。', '燃料 (F) 的编号必须小于农产品 (P)： F - P', '农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)']\nnew_fact = infer_new_fact(selected) # '纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放谷物的装卸区比存放牲畜的装卸区多。', '纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L']\nnew_fact = infer_new_fact(selected) # '牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。', '对机械没有限制，因此它可以在任何位置。', '牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G']\nnew_fact = infer_new_fact(selected) # '由于顺序规定了 6 个位置中的 5 个，因此两端的货物类型只能向内移动一个位置以存放 M：'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G', '由于顺序规定了 6 个位置中的 5 个，因此两端的货物类型只能向内移动一个位置以存放 M：']\nnew_fact = infer_new_fact(selected) # '燃料只能在装卸区 1 或 2： (M/F) (F/M) (T/P) (P/T) L G'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G', '由于顺序规定了 6 个位置中的 5 个，因此两端的货物类型只能向内移动一个位置以存放 M：', '燃料只能在装卸区 1 或 2： (M/F) (F/M) (T/P) (P/T) L G']\nnew_fact = infer_new_fact(selected) # '谷物只能在装卸区 5 或 6： F (T/P) (P/T) L (M/G) (G/M)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一项不能是装卸区 4 所存放的货物类型？', 'A) 谷物', '谷物只能在装卸区 5 或 6： F (T/P) (P/T) L (M/G) (G/M)']\nnew_fact = infer_new_fact(selected) # '答案是 A。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 A。']\nnew_fact = infer_new_fact(selected) # 'The answer is A'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'A'"}
{"id": "AR-LSAT_31_1ab2740e34", "context": "A loading dock consists of exactly six bays numbered 1 through 6 consecutively from one side of the dock to the other. Each bay is holding a different one of exactly six types of cargo—fuel, grain, livestock, machinery, produce, or textiles. The following apply: The bay holding grain has a higher number than the bay holding livestock. The bay holding livestock has a higher number than the bay holding textiles. The bay holding produce has a higher number than the bay holding fuel. The bay holding textiles is next to the bay holding produce.", "options": ["two", "three", "four", "five", "six"], "answer": "C", "reasoning_graph_edges": [{"antecedents": [7], "consequent": 16}, {"antecedents": [8], "consequent": 17}, {"antecedents": [6, 16, 17], "consequent": 18}, {"antecedents": [5, 18], "consequent": 19}, {"antecedents": [9, 19], "consequent": 20}, {"antecedents": [1, 20], "consequent": 21}, {"antecedents": [19, 21], "consequent": 22}, {"antecedents": [20, 22], "consequent": 23}, {"antecedents": [16, 17, 22], "consequent": 24}, {"antecedents": [19, 23, 24], "consequent": 25}, {"antecedents": [9, 10, 13, 24, 25], "consequent": 26}, {"antecedents": [26], "consequent": 27}], "metadata": [], "linearized_output_en": "sent7 -> int1: Fuel (F) must be numbered lower than produce (P): F - P; sent8 -> int2: Produce (P) must be adjacent to textiles (T), meaning T may be numbered 1 lower or 1 higher than produce): (T)P(T); int1 & int2 & sent6 -> int3: Textiles (T) must be numbered lower than livestock (L): F - (T)P(T) - L; int3 & sent5 -> int4: Livestock (L) must be numbered lower than grain (G): F - (T)P(T) - L - G; int4 & sent9 -> int5: Normally, G can be in bay 5 or 6, but now it must be separated from machinery with 1 bay between them.; int5 & sent1 -> int6: So if we try putting G in bay 5, M must be in bay 3 (or 7, but 7 doesn't exist since there are only 6 bays); int4 & int6 -> int7: This creates an impossible configuration since we need to fit F, T, and P BEFORE M, but the only open bays are 1 and 2.; int5 & int7 -> int8: So G must be in bay 6 and M in bay 4: ? ? ? M ? G; int1 & int2 & int7 -> int9: Following the rules, we know that F must be in bay 1 to leave room for P and T, which have to be adjacent to each other,; int4 & int8 & int9 -> int10: and L has to be numbered lower than G, so now we have: F (P/T) (T/P) M L G; int10 & int9 & sent10 & sent13 & sent9 -> int11: The answer is C since T and P can switch places and both configurations are valid.; int11 -> int12: The answer is C);", "textual_logical_units": {"1": "装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。", "2": "每个装卸区存放六种不同类型的货物：", "3": "燃料、谷物、牲畜、机械、农产品或纺织品。", "4": "遵循以下条件：", "5": "存放谷物的装卸区比存放牲畜的装卸区多。", "6": "存放牲畜的装卸区比存放纺织品的装卸区多。", "7": "存放农产品的装卸区比存放燃料的装卸区多。", "8": "存放纺织品的装卸区与存放农产品的装卸区相邻。", "9": "如果在存放机械的装卸区与存放谷物的装卸区之间只有一个装卸区，", "10": "那么这六个装卸区中有多少个装卸区所存放的货物类型是完全确定的？", "11": "A) 两个", "12": "B) 三个", "13": "C) 四个", "14": "D) 五个", "15": "E) 六个", "16": "燃料 (F) 的编号必须小于农产品 (P)： F - P", "17": "农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)", "18": "纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L", "19": "牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G", "20": "通常，G 可以在装卸区 5 或 6，但现在它必须与机械分开，中间间隔 1 个装卸区。", "21": "因此，如果我们尝试将 G 放在装卸区 5，M 必须在装卸区 3(或 7，但是 7 不存在，因为只有 6 个装卸区)", "22": "这导致了一种不可能的配置，因为我们需要在 M 之前存放 F、T 和 P，但可用的装卸区只有 1 和 2。", "23": "所以 G 必须在装卸区 6，M 在装卸区 4：? ? ? M ? G", "24": "按照规则，我们知道 F 必须在装卸区 1 才能为 P 和 T 留出位置，因为它们必须彼此相邻，", "25": "同时 L 的编号必须小于 G，因此现在得出： F (P/T) (T/P) M L G", "26": "答案是 C，因为 T 和 P 可以对换位置，而且两种配置都是有效的。", "27": "The answer is C)"}, "human_translated": true, "code_input": "####\nfacts = [ '装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。',\n  '每个装卸区存放六种不同类型的货物：',\n  '燃料、谷物、牲畜、机械、农产品或纺织品。',\n  '遵循以下条件：',\n  '存放谷物的装卸区比存放牲畜的装卸区多。',\n  '存放牲畜的装卸区比存放纺织品的装卸区多。',\n  '存放农产品的装卸区比存放燃料的装卸区多。',\n  '存放纺织品的装卸区与存放农产品的装卸区相邻。',\n  '如果在存放机械的装卸区与存放谷物的装卸区之间只有一个装卸区，']\nquestion = '那么这六个装卸区中有多少个装卸区所存放的货物类型是完全确定的？'\nchoices = {'A': '两个', 'B': '三个', 'C': '四个', 'D': '五个', 'E': '六个'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['存放农产品的装卸区比存放燃料的装卸区多。']\nnew_fact = infer_new_fact(selected) # '燃料 (F) 的编号必须小于农产品 (P)： F - P'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放纺织品的装卸区与存放农产品的装卸区相邻。']\nnew_fact = infer_new_fact(selected) # '农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放牲畜的装卸区比存放纺织品的装卸区多。', '燃料 (F) 的编号必须小于农产品 (P)： F - P', '农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)']\nnew_fact = infer_new_fact(selected) # '纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放谷物的装卸区比存放牲畜的装卸区多。', '纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L']\nnew_fact = infer_new_fact(selected) # '牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果在存放机械的装卸区与存放谷物的装卸区之间只有一个装卸区，', '牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G']\nnew_fact = infer_new_fact(selected) # '通常，G 可以在装卸区 5 或 6，但现在它必须与机械分开，中间间隔 1 个装卸区。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。', '通常，G 可以在装卸区 5 或 6，但现在它必须与机械分开，中间间隔 1 个装卸区。']\nnew_fact = infer_new_fact(selected) # '因此，如果我们尝试将 G 放在装卸区 5，M 必须在装卸区 3(或 7，但是 7 不存在，因为只有 6 个装卸区)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G', '因此，如果我们尝试将 G 放在装卸区 5，M 必须在装卸区 3(或 7，但是 7 不存在，因为只有 6 个装卸区)']\nnew_fact = infer_new_fact(selected) # '这导致了一种不可能的配置，因为我们需要在 M 之前存放 F、T 和 P，但可用的装卸区只有 1 和 2。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['通常，G 可以在装卸区 5 或 6，但现在它必须与机械分开，中间间隔 1 个装卸区。', '这导致了一种不可能的配置，因为我们需要在 M 之前存放 F、T 和 P，但可用的装卸区只有 1 和 2。']\nnew_fact = infer_new_fact(selected) # '所以 G 必须在装卸区 6，M 在装卸区 4：? ? ? M ? G'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['燃料 (F) 的编号必须小于农产品 (P)： F - P', '农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)', '这导致了一种不可能的配置，因为我们需要在 M 之前存放 F、T 和 P，但可用的装卸区只有 1 和 2。']\nnew_fact = infer_new_fact(selected) # '按照规则，我们知道 F 必须在装卸区 1 才能为 P 和 T 留出位置，因为它们必须彼此相邻，'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G', '所以 G 必须在装卸区 6，M 在装卸区 4：? ? ? M ? G', '按照规则，我们知道 F 必须在装卸区 1 才能为 P 和 T 留出位置，因为它们必须彼此相邻，']\nnew_fact = infer_new_fact(selected) # '同时 L 的编号必须小于 G，因此现在得出： F (P/T) (T/P) M L G'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果在存放机械的装卸区与存放谷物的装卸区之间只有一个装卸区，', '那么这六个装卸区中有多少个装卸区所存放的货物类型是完全确定的？', 'C) 四个', '按照规则，我们知道 F 必须在装卸区 1 才能为 P 和 T 留出位置，因为它们必须彼此相邻，', '同时 L 的编号必须小于 G，因此现在得出： F (P/T) (T/P) M L G']\nnew_fact = infer_new_fact(selected) # '答案是 C，因为 T 和 P 可以对换位置，而且两种配置都是有效的。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 C，因为 T 和 P 可以对换位置，而且两种配置都是有效的。']\nnew_fact = infer_new_fact(selected) # 'The answer is C'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'C'"}
{"id": "AR-LSAT_32_b09492ce8b", "context": "A loading dock consists of exactly six bays numbered 1 through 6 consecutively from one side of the dock to the other. Each bay is holding a different one of exactly six types of cargo—fuel, grain, livestock, machinery, produce, or textiles. The following apply: The bay holding grain has a higher number than the bay holding livestock. The bay holding livestock has a higher number than the bay holding textiles. The bay holding produce has a higher number than the bay holding fuel. The bay holding textiles is next to the bay holding produce.", "options": ["bay 1", "bay 2", "bay 3", "bay 5", "bay 6"], "answer": "D", "reasoning_graph_edges": [{"antecedents": [0], "consequent": 15}, {"antecedents": [7], "consequent": 16}, {"antecedents": [8], "consequent": 17}, {"antecedents": [6, 16, 17], "consequent": 18}, {"antecedents": [5, 18], "consequent": 19}, {"antecedents": [1, 15, 19], "consequent": 20}, {"antecedents": [19, 20], "consequent": 21}, {"antecedents": [19, 20, 21], "consequent": 22}, {"antecedents": [21, 22], "consequent": 23}, {"antecedents": [9, 13, 23], "consequent": 24}, {"antecedents": [24], "consequent": 25}], "metadata": [], "linearized_output_en": "sent0 -> int1: There are no restrictions on machinery (M), so it can go anywhere.; sent7 -> int2: Fuel (F) must be numbered lower than produce (P): F - P; sent8 -> int3: Produce (P) must be adjacent to textiles (T), meaning T may be numbered 1 lower or 1 higher than produce): (T)P(T); int2 & int3 & sent6 -> int4: Textiles (T) must be numbered lower than livestock (L): F - (T)P(T) - L; int4 & sent5 -> int5: Livestock (L) must be numbered lower than grain (G): F - (T)P(T) - L - G; int1 & int5 & sent1 -> int6: Since the order dictates 5 out of 6 spaces, the cargo types at each end can only move one space in to fit M:; int5 & int6 -> int7: Fuel can only be in bay 1 or 2: (M/F) (F/M) (T/P) (P/T) L G; int5 & int6 & int7 -> int8: Grain can only be in bay 5 or 6: F (T/P) (P/T) L (M/G) (G/M); int7 & int8 -> int9: Based on the above configurations, livestock can only be in bays 4 or 5; int9 & sent13 & sent9 -> int10: The answer is D.; int10 -> int11: The answer is D);", "textual_logical_units": {"1": "装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。", "2": "每个装卸区存放六种不同类型的货物：", "3": "燃料、谷物、牲畜、机械、农产品或纺织品。", "4": "遵循以下条件：", "5": "存放谷物的装卸区比存放牲畜的装卸区多。", "6": "存放牲畜的装卸区比存放纺织品的装卸区多。", "7": "存放农产品的装卸区比存放燃料的装卸区多。", "8": "存放纺织品的装卸区与存放农产品的装卸区相邻。", "9": "以下哪一项可能是存放牲畜的装卸区？", "10": "A) 装卸区 1", "11": "B) 装卸区 2", "12": "C) 装卸区 3", "13": "D) 装卸区 5", "14": "E) 装卸区 6", "15": "对机械 (M) 没有限制，因此它可以在任何位置。", "16": "燃料 (F) 的编号必须小于农产品 (P)： F - P", "17": "农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)", "18": "纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L", "19": "牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G", "20": "由于顺序规定了 6 个位置中的 5 个，因此两端的货物类型只能向内移动一个位置以存放 M：", "21": "燃料只能在装卸区 1 或 2： (M/F) (F/M) (T/P) (P/T) L G", "22": "谷物只能在装卸区 5 或 6： F (T/P) (P/T) L (M/G) (G/M)", "23": "根据上述配置，牲畜只能在装卸区 4 或 5", "24": "答案是 D。", "25": "The answer is D)"}, "human_translated": true, "code_input": "####\nfacts = [ '装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。',\n  '每个装卸区存放六种不同类型的货物：',\n  '燃料、谷物、牲畜、机械、农产品或纺织品。',\n  '遵循以下条件：',\n  '存放谷物的装卸区比存放牲畜的装卸区多。',\n  '存放牲畜的装卸区比存放纺织品的装卸区多。',\n  '存放农产品的装卸区比存放燃料的装卸区多。',\n  '存放纺织品的装卸区与存放农产品的装卸区相邻。']\nquestion = '以下哪一项可能是存放牲畜的装卸区？'\nchoices = {'A': '装卸区 1', 'B': '装卸区 2', 'C': '装卸区 3', 'D': '装卸区 5', 'E': '装卸区 6'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "[]\nnew_fact = infer_new_fact(selected) # '对机械 (M) 没有限制，因此它可以在任何位置。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放农产品的装卸区比存放燃料的装卸区多。']\nnew_fact = infer_new_fact(selected) # '燃料 (F) 的编号必须小于农产品 (P)： F - P'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放纺织品的装卸区与存放农产品的装卸区相邻。']\nnew_fact = infer_new_fact(selected) # '农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放牲畜的装卸区比存放纺织品的装卸区多。', '燃料 (F) 的编号必须小于农产品 (P)： F - P', '农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)']\nnew_fact = infer_new_fact(selected) # '纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放谷物的装卸区比存放牲畜的装卸区多。', '纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L']\nnew_fact = infer_new_fact(selected) # '牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。', '对机械 (M) 没有限制，因此它可以在任何位置。', '牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G']\nnew_fact = infer_new_fact(selected) # '由于顺序规定了 6 个位置中的 5 个，因此两端的货物类型只能向内移动一个位置以存放 M：'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G', '由于顺序规定了 6 个位置中的 5 个，因此两端的货物类型只能向内移动一个位置以存放 M：']\nnew_fact = infer_new_fact(selected) # '燃料只能在装卸区 1 或 2： (M/F) (F/M) (T/P) (P/T) L G'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G', '由于顺序规定了 6 个位置中的 5 个，因此两端的货物类型只能向内移动一个位置以存放 M：', '燃料只能在装卸区 1 或 2： (M/F) (F/M) (T/P) (P/T) L G']\nnew_fact = infer_new_fact(selected) # '谷物只能在装卸区 5 或 6： F (T/P) (P/T) L (M/G) (G/M)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['燃料只能在装卸区 1 或 2： (M/F) (F/M) (T/P) (P/T) L G', '谷物只能在装卸区 5 或 6： F (T/P) (P/T) L (M/G) (G/M)']\nnew_fact = infer_new_fact(selected) # '根据上述配置，牲畜只能在装卸区 4 或 5'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一项可能是存放牲畜的装卸区？', 'D) 装卸区 5', '根据上述配置，牲畜只能在装卸区 4 或 5']\nnew_fact = infer_new_fact(selected) # '答案是 D。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 D。']\nnew_fact = infer_new_fact(selected) # 'The answer is D'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'D'"}
{"id": "AR-LSAT_33_1f094603db", "context": "A loading dock consists of exactly six bays numbered 1 through 6 consecutively from one side of the dock to the other. Each bay is holding a different one of exactly six types of cargo—fuel, grain, livestock, machinery, produce, or textiles. The following apply: The bay holding grain has a higher number than the bay holding livestock. The bay holding livestock has a higher number than the bay holding textiles. The bay holding produce has a higher number than the bay holding fuel. The bay holding textiles is next to the bay holding produce.", "options": ["The bay holding fuel is next to the bay holding machinery.", "The bay holding grain is next to the bay holding machinery.", "The bay holding livestock is next to the bay holding fuel.", "The bay holding produce is next to the bay holding livestock.", "The bay holding textiles is next to the bay holding fuel."], "answer": "C", "reasoning_graph_edges": [{"antecedents": [0], "consequent": 15}, {"antecedents": [7], "consequent": 16}, {"antecedents": [8], "consequent": 17}, {"antecedents": [6, 16, 17], "consequent": 18}, {"antecedents": [5, 18], "consequent": 19}, {"antecedents": [15, 19], "consequent": 20}, {"antecedents": [9, 12, 20], "consequent": 21}, {"antecedents": [21], "consequent": 22}], "metadata": [], "linearized_output_en": "sent0 -> int1: There are no restrictions on machinery, so it can go anywhere.; sent7 -> int2: Fuel (F) must be numbered lower than produce (P): F - P; sent8 -> int3: Produce (P) must be adjacent to textiles (T), meaning T may be numbered 1 lower or 1 higher than produce): (T)P(T); int2 & int3 & sent6 -> int4: Textiles (T) must be numbered lower than livestock (L): F - (T)P(T) - L; int4 & sent5 -> int5: Livestock (L) must be numbered lower than grain (G): F - (T)P(T) - L - G; int1 & int5 -> int6: Based on this required ordering, we see that fuel (F) can only be next to textiles (T) and produce (P) (or machinery (M)), but never next to livestock (L) or grain (G).; int6 & sent12 & sent9 -> int7: The answer is C.; int7 -> int8: The answer is C);", "textual_logical_units": {"1": "装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。", "2": "每个装卸区存放六种不同类型的货物：", "3": "燃料、谷物、牲畜、机械、农产品或纺织品。", "4": "遵循以下条件：", "5": "存放谷物的装卸区比存放牲畜的装卸区多。", "6": "存放牲畜的装卸区比存放纺织品的装卸区多。", "7": "存放农产品的装卸区比存放燃料的装卸区多。", "8": "存放纺织品的装卸区与存放农产品的装卸区相邻。", "9": "以下哪一项一定是错误的？", "10": "A) 存放燃料的装卸区与存放机械的装卸区相邻。", "11": "B) 存放谷物的装卸区与存放机械的装卸区相邻。", "12": "C) 存放牲畜的装卸区与存放燃料的装卸区相邻。", "13": "D) 存放农产品的装卸区与存放牲畜的装卸区相邻。", "14": "E) 存放纺织品的装卸区与存放燃料的装卸区相邻。", "15": "对机械没有限制，因此它可以在任何位置。", "16": "燃料 (F) 的编号必须小于农产品 (P)： F - P", "17": "农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)", "18": "纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L", "19": "牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G", "20": "根据这一必要的排序，我们发现燃料 (F) 只能与纺织品 (T) 和农产品 (P)(或机械 (M))相邻，而不能与牲畜 (L) 或谷物 (G) 相邻。", "21": "答案是 C。", "22": "The answer is C)"}, "human_translated": true, "code_input": "####\nfacts = [ '装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。',\n  '每个装卸区存放六种不同类型的货物：',\n  '燃料、谷物、牲畜、机械、农产品或纺织品。',\n  '遵循以下条件：',\n  '存放谷物的装卸区比存放牲畜的装卸区多。',\n  '存放牲畜的装卸区比存放纺织品的装卸区多。',\n  '存放农产品的装卸区比存放燃料的装卸区多。',\n  '存放纺织品的装卸区与存放农产品的装卸区相邻。']\nquestion = '以下哪一项一定是错误的？'\nchoices = {'A': '存放燃料的装卸区与存放机械的装卸区相邻。', 'B': '存放谷物的装卸区与存放机械的装卸区相邻。', 'C': '存放牲畜的装卸区与存放燃料的装卸区相邻。', 'D': '存放农产品的装卸区与存放牲畜的装卸区相邻。', 'E': '存放纺织品的装卸区与存放燃料的装卸区相邻。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "[]\nnew_fact = infer_new_fact(selected) # '对机械没有限制，因此它可以在任何位置。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放农产品的装卸区比存放燃料的装卸区多。']\nnew_fact = infer_new_fact(selected) # '燃料 (F) 的编号必须小于农产品 (P)： F - P'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放纺织品的装卸区与存放农产品的装卸区相邻。']\nnew_fact = infer_new_fact(selected) # '农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放牲畜的装卸区比存放纺织品的装卸区多。', '燃料 (F) 的编号必须小于农产品 (P)： F - P', '农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)']\nnew_fact = infer_new_fact(selected) # '纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放谷物的装卸区比存放牲畜的装卸区多。', '纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L']\nnew_fact = infer_new_fact(selected) # '牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['对机械没有限制，因此它可以在任何位置。', '牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G']\nnew_fact = infer_new_fact(selected) # '根据这一必要的排序，我们发现燃料 (F) 只能与纺织品 (T) 和农产品 (P)(或机械 (M))相邻，而不能与牲畜 (L) 或谷物 (G) 相邻。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一项一定是错误的？', 'C) 存放牲畜的装卸区与存放燃料的装卸区相邻。', '根据这一必要的排序，我们发现燃料 (F) 只能与纺织品 (T) 和农产品 (P)(或机械 (M))相邻，而不能与牲畜 (L) 或谷物 (G) 相邻。']\nnew_fact = infer_new_fact(selected) # '答案是 C。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 C。']\nnew_fact = infer_new_fact(selected) # 'The answer is C'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'C'"}
{"id": "AR-LSAT_34_27704433fb", "context": "A loading dock consists of exactly six bays numbered 1 through 6 consecutively from one side of the dock to the other. Each bay is holding a different one of exactly six types of cargo—fuel, grain, livestock, machinery, produce, or textiles. The following apply: The bay holding grain has a higher number than the bay holding livestock. The bay holding livestock has a higher number than the bay holding textiles. The bay holding produce has a higher number than the bay holding fuel. The bay holding textiles is next to the bay holding produce.", "options": ["Bay 2 is holding fuel.", "Bay 4 is holding produce.", "Bay 4 is holding textiles.", "Bay 5 is holding grain.", "Bay 5 is holding machinery."], "answer": "C", "reasoning_graph_edges": [{"antecedents": [0], "consequent": 16}, {"antecedents": [7], "consequent": 17}, {"antecedents": [8], "consequent": 18}, {"antecedents": [6, 17, 18], "consequent": 19}, {"antecedents": [5, 19], "consequent": 20}, {"antecedents": [9, 20], "consequent": 21}, {"antecedents": [16, 21], "consequent": 22}, {"antecedents": [22], "consequent": 23}, {"antecedents": [11, 12, 22, 23], "consequent": 24}, {"antecedents": [16, 21], "consequent": 25}, {"antecedents": [15, 25], "consequent": 26}, {"antecedents": [16, 21], "consequent": 27}, {"antecedents": [14, 27], "consequent": 28}, {"antecedents": [25, 27], "consequent": 29}, {"antecedents": [29], "consequent": 30}, {"antecedents": [9, 10, 13, 24, 26, 28, 30], "consequent": 31}, {"antecedents": [31], "consequent": 32}], "metadata": [], "linearized_output_en": "sent0 -> int1: There are no restrictions on machinery, so it can go anywhere.; sent7 -> int2: Fuel (F) must be numbered lower than produce (P): F - P; sent8 -> int3: Produce (P) must be adjacent to textiles (T), meaning T may be numbered 1 lower or 1 higher than produce): (T)P(T); int2 & int3 & sent6 -> int4: Textiles (T) must be numbered lower than livestock (L): F - (T)P(T) - L; int4 & sent5 -> int5: Livestock (L) must be numbered lower than grain (G): F - (T)P(T) - L - G; int5 & sent9 -> int6: Since the bay holding produce must be next to the bay holding livestock, we have the following configuration: F - T - P - L - G; int1 & int6 -> int7: If bay 1 holds machinery, then bay 2 will hold fuel: M - F - T - P - L - G; int7 -> int8: The same configuration has bay 4 holding produce.; int7 & int8 & sent11 & sent12 -> int9: We rule out options A and B since they provide valid possibilities; int1 & int6 -> int10: Bay 5 can hold machinery: F - T - P - L - M - G; int10 & sent15 -> int11: We rule out option E since it provides valid possibilities.; int1 & int6 -> int12: Bay 5 can also hold grain: F - T - P - L - G - M; int12 & sent14 -> int13: We rule out option D since it provides valid possibilities.; int10 & int12 -> int14: When machinery or grain is in bay 5, we see that textiles can be pushed back to bay 2.; int14 -> int15: We see that textiles can never occupy bay 4.; int11 & int13 & int15 & int9 & sent10 & sent13 & sent9 -> int16: The answer is C.; int16 -> int17: The answer is C);", "textual_logical_units": {"1": "装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。", "2": "每个装卸区存放六种不同类型的货物：", "3": "燃料、谷物、牲畜、机械、农产品或纺织品。", "4": "遵循以下条件：", "5": "存放谷物的装卸区比存放牲畜的装卸区多。", "6": "存放牲畜的装卸区比存放纺织品的装卸区多。", "7": "存放农产品的装卸区比存放燃料的装卸区多。", "8": "存放纺织品的装卸区与存放农产品的装卸区相邻。", "9": "如果存放农产品的装卸区与存放牲畜的装卸区相邻，", "10": "则除了以下哪一项，其他选项都是正确的：", "11": "A) 装卸区 2 存放燃料。", "12": "B) 装卸区 4 存放农产品。", "13": "C) 装卸区 4 存放纺织品。", "14": "D) 装卸区 5 存放谷物。", "15": "E) 装卸区 5 存放机械。", "16": "对机械没有限制，因此它可以在任何位置。", "17": "燃料 (F) 的编号必须小于农产品 (P)： F - P", "18": "农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)", "19": "纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L", "20": "牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G", "21": "由于存放农产品的装卸区必须与存放牲畜的装卸区相邻，因此得出以下配置： F - T - P - L - G", "22": "如果装卸区 1 存放机械，则装卸区 2 存放燃料： M - F - T - P - L - G", "23": "同样的配置中，装卸区 4 存放农产品。", "24": "我们排除了选项 A 和 B，因为这些选项提供了有效的可能性", "25": "装卸区 5 可以存放机械： F - T - P - L - M - G", "26": "我们排除了选项 E，因为此选项提供了有效的可能性。", "27": "装卸区 5 也可以存放谷物： F - T - P - L - G - M", "28": "我们排除了选项 D，因为此选项提供了有效的可能性。", "29": "当机械或谷物存放在装卸区 5 时，纺织品被推回装卸区 2。", "30": "我们看到，纺织品永远无法占用装卸区 4。", "31": "答案是 C。", "32": "The answer is C)"}, "human_translated": true, "code_input": "####\nfacts = [ '装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。',\n  '每个装卸区存放六种不同类型的货物：',\n  '燃料、谷物、牲畜、机械、农产品或纺织品。',\n  '遵循以下条件：',\n  '存放谷物的装卸区比存放牲畜的装卸区多。',\n  '存放牲畜的装卸区比存放纺织品的装卸区多。',\n  '存放农产品的装卸区比存放燃料的装卸区多。',\n  '存放纺织品的装卸区与存放农产品的装卸区相邻。',\n  '如果存放农产品的装卸区与存放牲畜的装卸区相邻，']\nquestion = '则除了以下哪一项，其他选项都是正确的：'\nchoices = {'A': '装卸区 2 存放燃料。', 'B': '装卸区 4 存放农产品。', 'C': '装卸区 4 存放纺织品。', 'D': '装卸区 5 存放谷物。', 'E': '装卸区 5 存放机械。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "[]\nnew_fact = infer_new_fact(selected) # '对机械没有限制，因此它可以在任何位置。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放农产品的装卸区比存放燃料的装卸区多。']\nnew_fact = infer_new_fact(selected) # '燃料 (F) 的编号必须小于农产品 (P)： F - P'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放纺织品的装卸区与存放农产品的装卸区相邻。']\nnew_fact = infer_new_fact(selected) # '农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放牲畜的装卸区比存放纺织品的装卸区多。', '燃料 (F) 的编号必须小于农产品 (P)： F - P', '农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)']\nnew_fact = infer_new_fact(selected) # '纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放谷物的装卸区比存放牲畜的装卸区多。', '纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L']\nnew_fact = infer_new_fact(selected) # '牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果存放农产品的装卸区与存放牲畜的装卸区相邻，', '牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G']\nnew_fact = infer_new_fact(selected) # '由于存放农产品的装卸区必须与存放牲畜的装卸区相邻，因此得出以下配置： F - T - P - L - G'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['对机械没有限制，因此它可以在任何位置。', '由于存放农产品的装卸区必须与存放牲畜的装卸区相邻，因此得出以下配置： F - T - P - L - G']\nnew_fact = infer_new_fact(selected) # '如果装卸区 1 存放机械，则装卸区 2 存放燃料： M - F - T - P - L - G'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果装卸区 1 存放机械，则装卸区 2 存放燃料： M - F - T - P - L - G']\nnew_fact = infer_new_fact(selected) # '同样的配置中，装卸区 4 存放农产品。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['A) 装卸区 2 存放燃料。', 'B) 装卸区 4 存放农产品。', '如果装卸区 1 存放机械，则装卸区 2 存放燃料： M - F - T - P - L - G', '同样的配置中，装卸区 4 存放农产品。']\nnew_fact = infer_new_fact(selected) # '我们排除了选项 A 和 B，因为这些选项提供了有效的可能性'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['对机械没有限制，因此它可以在任何位置。', '由于存放农产品的装卸区必须与存放牲畜的装卸区相邻，因此得出以下配置： F - T - P - L - G']\nnew_fact = infer_new_fact(selected) # '装卸区 5 可以存放机械： F - T - P - L - M - G'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['E) 装卸区 5 存放机械。', '装卸区 5 可以存放机械： F - T - P - L - M - G']\nnew_fact = infer_new_fact(selected) # '我们排除了选项 E，因为此选项提供了有效的可能性。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['对机械没有限制，因此它可以在任何位置。', '由于存放农产品的装卸区必须与存放牲畜的装卸区相邻，因此得出以下配置： F - T - P - L - G']\nnew_fact = infer_new_fact(selected) # '装卸区 5 也可以存放谷物： F - T - P - L - G - M'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['D) 装卸区 5 存放谷物。', '装卸区 5 也可以存放谷物： F - T - P - L - G - M']\nnew_fact = infer_new_fact(selected) # '我们排除了选项 D，因为此选项提供了有效的可能性。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['装卸区 5 可以存放机械： F - T - P - L - M - G', '装卸区 5 也可以存放谷物： F - T - P - L - G - M']\nnew_fact = infer_new_fact(selected) # '当机械或谷物存放在装卸区 5 时，纺织品被推回装卸区 2。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['当机械或谷物存放在装卸区 5 时，纺织品被推回装卸区 2。']\nnew_fact = infer_new_fact(selected) # '我们看到，纺织品永远无法占用装卸区 4。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果存放农产品的装卸区与存放牲畜的装卸区相邻，', '则除了以下哪一项，其他选项都是正确的：', 'C) 装卸区 4 存放纺织品。', '我们排除了选项 A 和 B，因为这些选项提供了有效的可能性', '我们排除了选项 E，因为此选项提供了有效的可能性。', '我们排除了选项 D，因为此选项提供了有效的可能性。', '我们看到，纺织品永远无法占用装卸区 4。']\nnew_fact = infer_new_fact(selected) # '答案是 C。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 C。']\nnew_fact = infer_new_fact(selected) # 'The answer is C'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'C'"}
{"id": "AR-LSAT_35_392ea1395f", "context": "A loading dock consists of exactly six bays numbered 1 through 6 consecutively from one side of the dock to the other. Each bay is holding a different one of exactly six types of cargo—fuel, grain, livestock, machinery, produce, or textiles. The following apply: The bay holding grain has a higher number than the bay holding livestock. The bay holding livestock has a higher number than the bay holding textiles. The bay holding produce has a higher number than the bay holding fuel. The bay holding textiles is next to the bay holding produce.", "options": ["two", "three", "four", "five", "six"], "answer": "C", "reasoning_graph_edges": [{"antecedents": [0], "consequent": 16}, {"antecedents": [7], "consequent": 17}, {"antecedents": [8], "consequent": 18}, {"antecedents": [6, 17, 18], "consequent": 19}, {"antecedents": [5, 19], "consequent": 20}, {"antecedents": [9, 20], "consequent": 21}, {"antecedents": [16, 21], "consequent": 22}, {"antecedents": [9, 10, 13, 22], "consequent": 23}, {"antecedents": [23], "consequent": 24}], "metadata": [], "linearized_output_en": "sent0 -> int1: There are no restrictions on machinery, so it can go anywhere.; sent7 -> int2: Fuel (F) must be numbered lower than produce (P): F - P; sent8 -> int3: Produce (P) must be adjacent to textiles (T), meaning T may be numbered 1 lower or 1 higher than produce): (T)P(T); int2 & int3 & sent6 -> int4: Textiles (T) must be numbered lower than livestock (L): F - (T)P(T) - L; int4 & sent5 -> int5: Livestock (L) must be numbered lower than grain (G): F - (T)P(T) - L - G; int5 & sent9 -> int6: If bay 4 holds produce, then cargo must be ordered according to the order we found: (M/F) (F/M) T P L G; int1 & int6 -> int7: We know 4 types of cargo are completely determined.; int7 & sent10 & sent13 & sent9 -> int8: Answer is C.; int8 -> int9: The answer is C);", "textual_logical_units": {"1": "装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。", "2": "每个装卸区存放六种不同类型的货物：", "3": "燃料、谷物、牲畜、机械、农产品或纺织品。", "4": "遵循以下条件：", "5": "存放谷物的装卸区比存放牲畜的装卸区多。", "6": "存放牲畜的装卸区比存放纺织品的装卸区多。", "7": "存放农产品的装卸区比存放燃料的装卸区多。", "8": "存放纺织品的装卸区与存放农产品的装卸区相邻。", "9": "如果装卸区 4 存放农产品，", "10": "那么这六个装卸区中有多少个装卸区所存放的货物类型是完全确定的？", "11": "A) 两个", "12": "B) 三个", "13": "C) 四个", "14": "D) 五个", "15": "E) 六个", "16": "对机械没有限制，因此它可以在任何位置。", "17": "燃料 (F) 的编号必须小于农产品 (P)： F - P", "18": "农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)", "19": "纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L", "20": "牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G", "21": "如果装卸区 4 存放农产品，那么货物必须按照我们发现的顺序排序： (M/F) (F/M) T P L G", "22": "我们已经完全确定了 4 种货物。", "23": "答案是 C。", "24": "The answer is C)"}, "human_translated": true, "code_input": "####\nfacts = [ '装卸码头包含六个装卸区，从码头的一侧到另一侧连续编号为 1 到 6。',\n  '每个装卸区存放六种不同类型的货物：',\n  '燃料、谷物、牲畜、机械、农产品或纺织品。',\n  '遵循以下条件：',\n  '存放谷物的装卸区比存放牲畜的装卸区多。',\n  '存放牲畜的装卸区比存放纺织品的装卸区多。',\n  '存放农产品的装卸区比存放燃料的装卸区多。',\n  '存放纺织品的装卸区与存放农产品的装卸区相邻。',\n  '如果装卸区 4 存放农产品，']\nquestion = '那么这六个装卸区中有多少个装卸区所存放的货物类型是完全确定的？'\nchoices = {'A': '两个', 'B': '三个', 'C': '四个', 'D': '五个', 'E': '六个'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "[]\nnew_fact = infer_new_fact(selected) # '对机械没有限制，因此它可以在任何位置。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放农产品的装卸区比存放燃料的装卸区多。']\nnew_fact = infer_new_fact(selected) # '燃料 (F) 的编号必须小于农产品 (P)： F - P'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放纺织品的装卸区与存放农产品的装卸区相邻。']\nnew_fact = infer_new_fact(selected) # '农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放牲畜的装卸区比存放纺织品的装卸区多。', '燃料 (F) 的编号必须小于农产品 (P)： F - P', '农产品 (P) 必须与纺织品 (T) 相邻，这意味着 T 的编号可以比农产品小于 1 或大于 1： (T)P(T)']\nnew_fact = infer_new_fact(selected) # '纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['存放谷物的装卸区比存放牲畜的装卸区多。', '纺织品 (T) 的编号必须小于牲畜 (L)： F - (T)P(T) - L']\nnew_fact = infer_new_fact(selected) # '牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果装卸区 4 存放农产品，', '牲畜 (L) 的编号必须小于谷物 (G)： F - (T)P(T) - L - G']\nnew_fact = infer_new_fact(selected) # '如果装卸区 4 存放农产品，那么货物必须按照我们发现的顺序排序： (M/F) (F/M) T P L G'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['对机械没有限制，因此它可以在任何位置。', '如果装卸区 4 存放农产品，那么货物必须按照我们发现的顺序排序： (M/F) (F/M) T P L G']\nnew_fact = infer_new_fact(selected) # '我们已经完全确定了 4 种货物。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果装卸区 4 存放农产品，', '那么这六个装卸区中有多少个装卸区所存放的货物类型是完全确定的？', 'C) 四个', '我们已经完全确定了 4 种货物。']\nnew_fact = infer_new_fact(selected) # '答案是 C。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 C。']\nnew_fact = infer_new_fact(selected) # 'The answer is C'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'C'"}
{"id": "AR-LSAT_36_a884934ae1", "context": "A bakery makes exactly three kinds of cookie—oatmeal, peanut butter, and sugar. Exactly three batches of each kind of cookie are made each week (Monday through Friday) and each batch is made, from start to finish, on a single day. The following conditions apply: No two batches of the same kind of cookie are made on the same day. At least one batch of cookies is made on Monday. The second batch of oatmeal cookies is made on the same day as the first batch of peanut butter cookies. The second batch of sugar cookies is made on Thursday.", "options": ["oatmeal: Monday, Wednesday, Thursday peanut butter: Wednesday, Thursday, Friday sugar: Monday, Thursday, Friday", "oatmeal: Monday, Tuesday, Thursday peanut butter: Tuesday, Wednesday, Thursday sugar: Monday, Wednesday, Thursday", "oatmeal: Tuesday, Wednesday, Thursday peanut butter: Wednesday, Thursday, Friday sugar: Tuesday, Thursday, Friday", "oatmeal: Monday, Tuesday, Thursday peanut butter: Monday, Wednesday, Thursday sugar: Monday, Thursday, Friday", "oatmeal: Monday, Thursday, Friday peanut butter: Tuesday, Wednesday, Thursday sugar: Monday, Thursday, Friday"], "answer": "A", "reasoning_graph_edges": [{"antecedents": [7, 14, 15], "consequent": 16}, {"antecedents": [6, 13], "consequent": 17}, {"antecedents": [8, 12], "consequent": 18}, {"antecedents": [9, 10, 11, 16, 17, 18], "consequent": 19}, {"antecedents": [19], "consequent": 20}], "metadata": [], "linearized_output_en": "sent14 & sent15 & sent7 -> int1: The 2nd batch of oatmeal cookies is made on the same day as the 1st batch of peanut butter cookies, so we rule out options D and E.; sent13 & sent6 -> int2: At least 1 batch has to be made on Monday, so we rule out option C.; sent12 & sent8 -> int3: The second batch of sugar cookies is made on Thursday, so we rule out option B.; int1 & int2 & int3 & sent10 & sent11 & sent9 -> int4: Answer is A.; int4 -> int5: The answer is A);", "textual_logical_units": {"1": "一家面包店制作三种口味的饼干：", "2": "燕麦饼干、花生酱饼干和糖霜饼干。", "3": "每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。", "4": "遵循以下条件：", "5": "同一天不会制作两批同种口味的饼干。", "6": "星期一至少制作一批饼干。", "7": "第二批燕麦饼干与第一批花生酱饼干在同一天制作。", "8": "第二批糖霜饼干在星期四制作。", "9": "以下哪一项完整准确地列出了", "10": "每种饼干每批的制作时间？", "11": "A) 燕麦饼干： 星期一、星期三、星期四；花生酱饼干： 星期三、星期四、星期五；糖霜饼干： 星期一、星期四、星期五", "12": "B) 燕麦饼干： 星期一、星期二、星期四；花生酱饼干： 星期二、星期三、星期四；糖霜饼干： 星期一、星期三、星期四", "13": "C) 燕麦饼干： 星期二、星期三、星期四；花生酱饼干： 星期三、星期四、星期五；糖霜饼干： 星期二、星期四、星期五", "14": "D) 燕麦饼干： 星期一、星期二、星期四；花生酱饼干： 星期一、星期三、星期四；糖霜饼干： 星期一、星期四、星期五", "15": "E) 燕麦饼干： 星期一、星期四、星期五；花生酱饼干： 星期二、星期三、星期四；糖霜饼干： 星期一、星期四、星期五", "16": "第 2 批燕麦饼干与第 1 批花生酱饼干在同一天制作，因此我们排除了选项 D 和 E。", "17": "星期一至少要制作 1 批饼干，因此我们排除了选项 C。", "18": "第二批糖霜饼干在星期四制作，因此我们排除了选项 B。", "19": "答案是 A。", "20": "The answer is A)"}, "human_translated": true, "code_input": "####\nfacts = [ '一家面包店制作三种口味的饼干：',\n  '燕麦饼干、花生酱饼干和糖霜饼干。',\n  '每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。',\n  '遵循以下条件：',\n  '同一天不会制作两批同种口味的饼干。',\n  '星期一至少制作一批饼干。',\n  '第二批燕麦饼干与第一批花生酱饼干在同一天制作。',\n  '第二批糖霜饼干在星期四制作。',\n  '以下哪一项完整准确地列出了']\nquestion = '每种饼干每批的制作时间？'\nchoices = { 'A': '燕麦饼干： 星期一、星期三、星期四；花生酱饼干： 星期三、星期四、星期五；糖霜饼干： 星期一、星期四、星期五',\n  'B': '燕麦饼干： 星期一、星期二、星期四；花生酱饼干： 星期二、星期三、星期四；糖霜饼干： 星期一、星期三、星期四',\n  'C': '燕麦饼干： 星期二、星期三、星期四；花生酱饼干： 星期三、星期四、星期五；糖霜饼干： 星期二、星期四、星期五',\n  'D': '燕麦饼干： 星期一、星期二、星期四；花生酱饼干： 星期一、星期三、星期四；糖霜饼干： 星期一、星期四、星期五',\n  'E': '燕麦饼干： 星期一、星期四、星期五；花生酱饼干： 星期二、星期三、星期四；糖霜饼干： 星期一、星期四、星期五'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['第二批燕麦饼干与第一批花生酱饼干在同一天制作。', 'D) 燕麦饼干： 星期一、星期二、星期四；花生酱饼干： 星期一、星期三、星期四；糖霜饼干： 星期一、星期四、星期五', 'E) 燕麦饼干： 星期一、星期四、星期五；花生酱饼干： 星期二、星期三、星期四；糖霜饼干： 星期一、星期四、星期五']\nnew_fact = infer_new_fact(selected) # '第 2 批燕麦饼干与第 1 批花生酱饼干在同一天制作，因此我们排除了选项 D 和 E。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['星期一至少制作一批饼干。', 'C) 燕麦饼干： 星期二、星期三、星期四；花生酱饼干： 星期三、星期四、星期五；糖霜饼干： 星期二、星期四、星期五']\nnew_fact = infer_new_fact(selected) # '星期一至少要制作 1 批饼干，因此我们排除了选项 C。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['第二批糖霜饼干在星期四制作。', 'B) 燕麦饼干： 星期一、星期二、星期四；花生酱饼干： 星期二、星期三、星期四；糖霜饼干： 星期一、星期三、星期四']\nnew_fact = infer_new_fact(selected) # '第二批糖霜饼干在星期四制作，因此我们排除了选项 B。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一项完整准确地列出了', '每种饼干每批的制作时间？', 'A) 燕麦饼干： 星期一、星期三、星期四；花生酱饼干： 星期三、星期四、星期五；糖霜饼干： 星期一、星期四、星期五', '第 2 批燕麦饼干与第 1 批花生酱饼干在同一天制作，因此我们排除了选项 D 和 E。', '星期一至少要制作 1 批饼干，因此我们排除了选项 C。', '第二批糖霜饼干在星期四制作，因此我们排除了选项 B。']\nnew_fact = infer_new_fact(selected) # '答案是 A。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 A。']\nnew_fact = infer_new_fact(selected) # 'The answer is A'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'A'"}
{"id": "AR-LSAT_37_ed09ff63ff", "context": "A bakery makes exactly three kinds of cookie—oatmeal, peanut butter, and sugar. Exactly three batches of each kind of cookie are made each week (Monday through Friday) and each batch is made, from start to finish, on a single day. The following conditions apply: No two batches of the same kind of cookie are made on the same day. At least one batch of cookies is made on Monday. The second batch of oatmeal cookies is made on the same day as the first batch of peanut butter cookies. The second batch of sugar cookies is made on Thursday.", "options": ["one", "two", "three", "four", "five"], "answer": "A", "reasoning_graph_edges": [{"antecedents": [6], "consequent": 16}, {"antecedents": [2, 3, 16], "consequent": 17}, {"antecedents": [7], "consequent": 18}, {"antecedents": [5, 17, 18], "consequent": 19}, {"antecedents": [9, 11, 19], "consequent": 20}, {"antecedents": [20], "consequent": 21}], "metadata": [], "linearized_output_en": "sent6 -> int1: Monday must have at least one batch of cookies made,; int1 & sent2 & sent3 -> int2: so at least oatmeal batch 1 (O1), peanut butter batch 1 (P1), or sugar batch 1 (S1) must be made on Monday.; sent7 -> int3: Because the second batch of oatmeal (O2) must be made on the same day as the first batch of peanut butter cookies (P1); int2 & int3 & sent5 -> int4: and no batches of the same cookie can be made on the same day, P1 cannot be made on Monday.; int4 & sent11 & sent9 -> int5: The answer is A.; int5 -> int6: The answer is A);", "textual_logical_units": {"1": "一家面包店制作三种口味的饼干：", "2": "燕麦饼干、花生酱饼干和糖霜饼干。", "3": "每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。", "4": "遵循以下条件：", "5": "同一天不会制作两批同种口味的饼干。", "6": "星期一至少制作一批饼干。", "7": "第二批燕麦饼干与第一批花生酱饼干在同一天制作。", "8": "第二批糖霜饼干在星期四制作。", "9": "从星期一到星期五，", "10": "有几天可以在一天内最多制作两批饼干？", "11": "A) 一天", "12": "B) 两天", "13": "C) 三天", "14": "D) 四天", "15": "E) 五天", "16": "星期一必须至少制作一批饼干，", "17": "因此，至少必须在星期一制作第 1 批燕麦饼干 (O1)、第 1 批花生酱饼干 (P1) 或第 1 批糖霜饼干 (S1)。", "18": "由于第二批燕麦饼干 (O2) 必须与第一批花生酱饼干 (P1) 在同一天制作，", "19": "并且不能在同一天制作不同批次的同种口味的饼干，因此 P1 不能在星期一制作。", "20": "答案是 A。", "21": "The answer is A)"}, "human_translated": true, "code_input": "####\nfacts = [ '一家面包店制作三种口味的饼干：',\n  '燕麦饼干、花生酱饼干和糖霜饼干。',\n  '每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。',\n  '遵循以下条件：',\n  '同一天不会制作两批同种口味的饼干。',\n  '星期一至少制作一批饼干。',\n  '第二批燕麦饼干与第一批花生酱饼干在同一天制作。',\n  '第二批糖霜饼干在星期四制作。',\n  '从星期一到星期五，']\nquestion = '有几天可以在一天内最多制作两批饼干？'\nchoices = {'A': '一天', 'B': '两天', 'C': '三天', 'D': '四天', 'E': '五天'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['星期一至少制作一批饼干。']\nnew_fact = infer_new_fact(selected) # '星期一必须至少制作一批饼干，'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['燕麦饼干、花生酱饼干和糖霜饼干。', '每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。', '星期一必须至少制作一批饼干，']\nnew_fact = infer_new_fact(selected) # '因此，至少必须在星期一制作第 1 批燕麦饼干 (O1)、第 1 批花生酱饼干 (P1) 或第 1 批糖霜饼干 (S1)。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['第二批燕麦饼干与第一批花生酱饼干在同一天制作。']\nnew_fact = infer_new_fact(selected) # '由于第二批燕麦饼干 (O2) 必须与第一批花生酱饼干 (P1) 在同一天制作，'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['同一天不会制作两批同种口味的饼干。', '因此，至少必须在星期一制作第 1 批燕麦饼干 (O1)、第 1 批花生酱饼干 (P1) 或第 1 批糖霜饼干 (S1)。', '由于第二批燕麦饼干 (O2) 必须与第一批花生酱饼干 (P1) 在同一天制作，']\nnew_fact = infer_new_fact(selected) # '并且不能在同一天制作不同批次的同种口味的饼干，因此 P1 不能在星期一制作。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['从星期一到星期五，', 'A) 一天', '并且不能在同一天制作不同批次的同种口味的饼干，因此 P1 不能在星期一制作。']\nnew_fact = infer_new_fact(selected) # '答案是 A。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 A。']\nnew_fact = infer_new_fact(selected) # 'The answer is A'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'A'"}
{"id": "AR-LSAT_38_ce1a5f7128", "context": "A bakery makes exactly three kinds of cookie—oatmeal, peanut butter, and sugar. Exactly three batches of each kind of cookie are made each week (Monday through Friday) and each batch is made, from start to finish, on a single day. The following conditions apply: No two batches of the same kind of cookie are made on the same day. At least one batch of cookies is made on Monday. The second batch of oatmeal cookies is made on the same day as the first batch of peanut butter cookies. The second batch of sugar cookies is made on Thursday.", "options": ["Two different kinds of cookie have their first batch made on Monday.", "Two different kinds of cookie have their first batch made on Tuesday.", "Two different kinds of cookie have their second batch made on Wednesday.", "Two different kinds of cookie have their second batch made on Thursday.", "Two different kinds of cookie have their third batch made on Friday."], "answer": "C", "reasoning_graph_edges": [{"antecedents": [7, 9], "consequent": 16}, {"antecedents": [5], "consequent": 17}, {"antecedents": [8, 17], "consequent": 18}, {"antecedents": [9, 10, 13, 16, 18], "consequent": 19}, {"antecedents": [19], "consequent": 20}], "metadata": [], "linearized_output_en": "sent7 & sent9 -> int1: If the first batch of peanut butter cookies (P1) are made on Tuesday, then oatmeal cookies batch 2 (O2) must also be made on Tuesday.; sent5 -> int2: 2 batches of the same type cannot be made on the same day.; int2 & sent8 -> int3: Sugar cookie batch 2 (S2) is made on Thursday, which indicates that sugar cookie batch 3 (S3) must be on Friday.; int1 & int3 & sent10 & sent13 & sent9 -> int4: We know the second batches of oatmeal and sugar cookies are already assigned (to Tuesday and Thursday, respectively), so the answer is C.; int4 -> int5: The answer is C);", "textual_logical_units": {"1": "一家面包店制作三种口味的饼干：", "2": "燕麦饼干、花生酱饼干和糖霜饼干。", "3": "每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。", "4": "遵循以下条件：", "5": "同一天不会制作两批同种口味的饼干。", "6": "星期一至少制作一批饼干。", "7": "第二批燕麦饼干与第一批花生酱饼干在同一天制作。", "8": "第二批糖霜饼干在星期四制作。", "9": "如果第一批花生酱饼干在星期二制作，", "10": "则除了以下哪一项，其他选项都是正确的：", "11": "A) 星期一制作两种不同口味饼干的第一批。", "12": "B) 星期二制作两种不同口味饼干的第一批。", "13": "C) 星期三制作两种不同口味饼干的第二批。", "14": "D) 星期四制作两种不同口味饼干的第二批。", "15": "E) 星期五制作两种不同口味饼干的第三批。", "16": "如果第一批花生酱饼干 (P1) 在星期二制作，则第 2 批燕麦饼干 (O2) 也必须在星期二制作。", "17": "同一天不能制作两批同种口味的饼干。", "18": "第 2 批糖霜饼干 (S2) 在星期四制作，这表明第 3 批糖霜饼干 (S3) 必须在星期五制作。", "19": "我们知道第二批燕麦饼干和糖霜饼干已经分配了时间(分别是星期二和星期四)，因此答案是 C。", "20": "The answer is C)"}, "human_translated": true, "code_input": "####\nfacts = [ '一家面包店制作三种口味的饼干：',\n  '燕麦饼干、花生酱饼干和糖霜饼干。',\n  '每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。',\n  '遵循以下条件：',\n  '同一天不会制作两批同种口味的饼干。',\n  '星期一至少制作一批饼干。',\n  '第二批燕麦饼干与第一批花生酱饼干在同一天制作。',\n  '第二批糖霜饼干在星期四制作。',\n  '如果第一批花生酱饼干在星期二制作，']\nquestion = '则除了以下哪一项，其他选项都是正确的：'\nchoices = {'A': '星期一制作两种不同口味饼干的第一批。', 'B': '星期二制作两种不同口味饼干的第一批。', 'C': '星期三制作两种不同口味饼干的第二批。', 'D': '星期四制作两种不同口味饼干的第二批。', 'E': '星期五制作两种不同口味饼干的第三批。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['第二批燕麦饼干与第一批花生酱饼干在同一天制作。', '如果第一批花生酱饼干在星期二制作，']\nnew_fact = infer_new_fact(selected) # '如果第一批花生酱饼干 (P1) 在星期二制作，则第 2 批燕麦饼干 (O2) 也必须在星期二制作。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['同一天不会制作两批同种口味的饼干。']\nnew_fact = infer_new_fact(selected) # '同一天不能制作两批同种口味的饼干。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['第二批糖霜饼干在星期四制作。', '同一天不能制作两批同种口味的饼干。']\nnew_fact = infer_new_fact(selected) # '第 2 批糖霜饼干 (S2) 在星期四制作，这表明第 3 批糖霜饼干 (S3) 必须在星期五制作。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果第一批花生酱饼干在星期二制作，', '则除了以下哪一项，其他选项都是正确的：', 'C) 星期三制作两种不同口味饼干的第二批。', '如果第一批花生酱饼干 (P1) 在星期二制作，则第 2 批燕麦饼干 (O2) 也必须在星期二制作。', '第 2 批糖霜饼干 (S2) 在星期四制作，这表明第 3 批糖霜饼干 (S3) 必须在星期五制作。']\nnew_fact = infer_new_fact(selected) # '我们知道第二批燕麦饼干和糖霜饼干已经分配了时间(分别是星期二和星期四)，因此答案是 C。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['我们知道第二批燕麦饼干和糖霜饼干已经分配了时间(分别是星期二和星期四)，因此答案是 C。']\nnew_fact = infer_new_fact(selected) # 'The answer is C'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'C'"}
{"id": "AR-LSAT_39_ca1c392dd8", "context": "A bakery makes exactly three kinds of cookie—oatmeal, peanut butter, and sugar. Exactly three batches of each kind of cookie are made each week (Monday through Friday) and each batch is made, from start to finish, on a single day. The following conditions apply: No two batches of the same kind of cookie are made on the same day. At least one batch of cookies is made on Monday. The second batch of oatmeal cookies is made on the same day as the first batch of peanut butter cookies. The second batch of sugar cookies is made on Thursday.", "options": ["Exactly three batches of cookies are made on Tuesday.", "Exactly three batches of cookies are made on Friday.", "At least two batches of cookies are made on Monday.", "At least two batches of cookies are made on Thursday.", "Fewer batches of cookies are made on Monday than on Tuesday."], "answer": "D", "reasoning_graph_edges": [{"antecedents": [7], "consequent": 16}, {"antecedents": [5, 16], "consequent": 17}, {"antecedents": [3, 16], "consequent": 18}, {"antecedents": [9, 16, 17, 18], "consequent": 19}, {"antecedents": [3, 5, 19], "consequent": 20}, {"antecedents": [3, 5, 8, 9], "consequent": 21}, {"antecedents": [16, 19, 20, 21], "consequent": 22}, {"antecedents": [9, 10, 13, 22], "consequent": 23}, {"antecedents": [23], "consequent": 24}], "metadata": [], "linearized_output_en": "sent7 -> int1: Since peanut butter batch 1 (P1) and oatmeal batch 2 (O2) must be made on the same day,; int1 & sent5 -> int2: P1 cannot be made on Monday.; int1 & sent3 -> int3: If P1 is made on Thursday or Friday, there will be no days to make peanut butter batch 3 (P3).; int1 & int2 & int3 & sent9 -> int4: P1 can only be made on Tuesday, so P2 must be made on Thursday and P3 must be made on Friday.; int4 & sent3 & sent5 -> int5: Since O2 can only be made on Tuesday, O1 can only be made on Monday and O3 can be made either on Thursday or Friday.; sent3 & sent5 & sent8 & sent9 -> int6: Since sugar cookie batch 2 (S2) must be made on Thursday, sugar cookie batch 3 (S3) can only be made on Friday and sugar cookie batch one (S1) can be made on either Monday or Tuesday.; int1 & int4 & int5 & int6 -> int7: We know from this that at least 2 batches must be made on Tuesday (O2, P1), Thursday (P2, S2), and Friday (P3, S3).; int7 & sent10 & sent13 & sent9 -> int8: the answer is C.; int8 -> int9: The answer is D);", "textual_logical_units": {"1": "一家面包店制作三种口味的饼干：", "2": "燕麦饼干、花生酱饼干和糖霜饼干。", "3": "每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。", "4": "遵循以下条件：", "5": "同一天不会制作两批同种口味的饼干。", "6": "星期一至少制作一批饼干。", "7": "第二批燕麦饼干与第一批花生酱饼干在同一天制作。", "8": "第二批糖霜饼干在星期四制作。", "9": "如果星期三没有制作饼干，", "10": "则以下哪一项一定是正确的？", "11": "A) 星期二制作三批饼干。", "12": "B) 星期五制作三批饼干。", "13": "C) 星期一至少制作两批饼干。", "14": "D) 星期四至少制作两批饼干。", "15": "E) 星期一制作的饼干批次数少于星期二。", "16": "由于第 1 批花生酱饼干 (P1) 和第 2 批燕麦饼干 (O2) 必须在同一天制作，", "17": "因此 P1 不能在星期一制作。", "18": "如果在星期四或星期五制作 P1，则没有几天时间可以制作第 3 批花生酱饼干 (P3)。", "19": "P1 只能在星期二制作，因此 P2 必须在星期四制作，P3 必须在星期五制作。", "20": "由于 O2 只能在星期二制作，因此 O1 只能在星期一制作，O3 可以在星期四或星期五制作。", "21": "由于第 2 批糖霜饼干 (S2) 必须在星期四制作，因此第 3 批糖霜饼干 (S3) 只能在星期五制作，而第 1 批糖霜饼干 (S1) 可以在星期一或星期二制作。", "22": "我们由此得知，必须在星期二(O2、P1)、星期四(P2、S2)和星期五(P3、S3)至少制作两批饼干。", "23": "答案是 C。", "24": "The answer is D)"}, "human_translated": true, "code_input": "####\nfacts = [ '一家面包店制作三种口味的饼干：',\n  '燕麦饼干、花生酱饼干和糖霜饼干。',\n  '每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。',\n  '遵循以下条件：',\n  '同一天不会制作两批同种口味的饼干。',\n  '星期一至少制作一批饼干。',\n  '第二批燕麦饼干与第一批花生酱饼干在同一天制作。',\n  '第二批糖霜饼干在星期四制作。',\n  '如果星期三没有制作饼干，']\nquestion = '则以下哪一项一定是正确的？'\nchoices = {'A': '星期二制作三批饼干。', 'B': '星期五制作三批饼干。', 'C': '星期一至少制作两批饼干。', 'D': '星期四至少制作两批饼干。', 'E': '星期一制作的饼干批次数少于星期二。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['第二批燕麦饼干与第一批花生酱饼干在同一天制作。']\nnew_fact = infer_new_fact(selected) # '由于第 1 批花生酱饼干 (P1) 和第 2 批燕麦饼干 (O2) 必须在同一天制作，'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['同一天不会制作两批同种口味的饼干。', '由于第 1 批花生酱饼干 (P1) 和第 2 批燕麦饼干 (O2) 必须在同一天制作，']\nnew_fact = infer_new_fact(selected) # '因此 P1 不能在星期一制作。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。', '由于第 1 批花生酱饼干 (P1) 和第 2 批燕麦饼干 (O2) 必须在同一天制作，']\nnew_fact = infer_new_fact(selected) # '如果在星期四或星期五制作 P1，则没有几天时间可以制作第 3 批花生酱饼干 (P3)。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果星期三没有制作饼干，', '由于第 1 批花生酱饼干 (P1) 和第 2 批燕麦饼干 (O2) 必须在同一天制作，', '因此 P1 不能在星期一制作。', '如果在星期四或星期五制作 P1，则没有几天时间可以制作第 3 批花生酱饼干 (P3)。']\nnew_fact = infer_new_fact(selected) # 'P1 只能在星期二制作，因此 P2 必须在星期四制作，P3 必须在星期五制作。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。', '同一天不会制作两批同种口味的饼干。', 'P1 只能在星期二制作，因此 P2 必须在星期四制作，P3 必须在星期五制作。']\nnew_fact = infer_new_fact(selected) # '由于 O2 只能在星期二制作，因此 O1 只能在星期一制作，O3 可以在星期四或星期五制作。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。', '同一天不会制作两批同种口味的饼干。', '第二批糖霜饼干在星期四制作。', '如果星期三没有制作饼干，']\nnew_fact = infer_new_fact(selected) # '由于第 2 批糖霜饼干 (S2) 必须在星期四制作，因此第 3 批糖霜饼干 (S3) 只能在星期五制作，而第 1 批糖霜饼干 (S1) 可以在星期一或星期二制作。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['由于第 1 批花生酱饼干 (P1) 和第 2 批燕麦饼干 (O2) 必须在同一天制作，', 'P1 只能在星期二制作，因此 P2 必须在星期四制作，P3 必须在星期五制作。', '由于 O2 只能在星期二制作，因此 O1 只能在星期一制作，O3 可以在星期四或星期五制作。', '由于第 2 批糖霜饼干 (S2) 必须在星期四制作，因此第 3 批糖霜饼干 (S3) 只能在星期五制作，而第 1 批糖霜饼干 (S1) 可以在星期一或星期二制作。']\nnew_fact = infer_new_fact(selected) # '我们由此得知，必须在星期二(O2、P1)、星期四(P2、S2)和星期五(P3、S3)至少制作两批饼干。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果星期三没有制作饼干，', '则以下哪一项一定是正确的？', 'C) 星期一至少制作两批饼干。', '我们由此得知，必须在星期二(O2、P1)、星期四(P2、S2)和星期五(P3、S3)至少制作两批饼干。']\nnew_fact = infer_new_fact(selected) # '答案是 C。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 C。']\nnew_fact = infer_new_fact(selected) # 'The answer is D'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'D'"}
{"id": "AR-LSAT_40_22f97be364", "context": "A bakery makes exactly three kinds of cookie—oatmeal, peanut butter, and sugar. Exactly three batches of each kind of cookie are made each week (Monday through Friday) and each batch is made, from start to finish, on a single day. The following conditions apply: No two batches of the same kind of cookie are made on the same day. At least one batch of cookies is made on Monday. The second batch of oatmeal cookies is made on the same day as the first batch of peanut butter cookies. The second batch of sugar cookies is made on Thursday.", "options": ["The first batch of sugar cookies is made on Monday.", "The first batch of oatmeal cookies is made on Tuesday.", "The third batch of oatmeal cookies is made on Friday.", "The first batch of peanut butter cookies is made on Wednesday.", "The second batch of peanut butter cookies is made on Tuesday."], "answer": "A", "reasoning_graph_edges": [{"antecedents": [5, 8], "consequent": 16}, {"antecedents": [3, 16], "consequent": 17}, {"antecedents": [9, 10, 11, 17], "consequent": 18}, {"antecedents": [18], "consequent": 19}], "metadata": [], "linearized_output_en": "sent5 & sent8 -> int1: Sugar cookie batch 2 must be made on Thursday, so sugar cookie batch 3 must be made on Friday.; int1 & sent3 -> int2: There are 3 days that sugar cookie batch 1 can be made: Monday, Tuesday, Wednesday.; int2 & sent10 & sent11 & sent9 -> int3: The answer is A.; int3 -> int4: The answer is A);", "textual_logical_units": {"1": "一家面包店制作三种口味的饼干：", "2": "燕麦饼干、花生酱饼干和糖霜饼干。", "3": "每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。", "4": "遵循以下条件：", "5": "同一天不会制作两批同种口味的饼干。", "6": "星期一至少制作一批饼干。", "7": "第二批燕麦饼干与第一批花生酱饼干在同一天制作。", "8": "第二批糖霜饼干在星期四制作。", "9": "如果星期五制作一批饼干，", "10": "则以下哪一项可能是正确的？", "11": "A) 第一批糖霜饼干在星期一制作。", "12": "B) 第一批燕麦饼干在星期二制作。", "13": "C) 第三批燕麦饼干在星期五制作。", "14": "D) 第一批花生酱饼干在星期三制作。", "15": "E) 第二批花生酱饼干在星期二制作。", "16": "第 2 批糖霜饼干必须在星期四制作，因此第 3 批糖霜饼干必须在星期五制作。", "17": "有 3 天可以制作第 1 批糖霜饼干： 星期一、星期二、星期三。", "18": "答案是 A。", "19": "The answer is A)"}, "human_translated": true, "code_input": "####\nfacts = [ '一家面包店制作三种口味的饼干：',\n  '燕麦饼干、花生酱饼干和糖霜饼干。',\n  '每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。',\n  '遵循以下条件：',\n  '同一天不会制作两批同种口味的饼干。',\n  '星期一至少制作一批饼干。',\n  '第二批燕麦饼干与第一批花生酱饼干在同一天制作。',\n  '第二批糖霜饼干在星期四制作。',\n  '如果星期五制作一批饼干，']\nquestion = '则以下哪一项可能是正确的？'\nchoices = {'A': '第一批糖霜饼干在星期一制作。', 'B': '第一批燕麦饼干在星期二制作。', 'C': '第三批燕麦饼干在星期五制作。', 'D': '第一批花生酱饼干在星期三制作。', 'E': '第二批花生酱饼干在星期二制作。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['同一天不会制作两批同种口味的饼干。', '第二批糖霜饼干在星期四制作。']\nnew_fact = infer_new_fact(selected) # '第 2 批糖霜饼干必须在星期四制作，因此第 3 批糖霜饼干必须在星期五制作。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。', '第 2 批糖霜饼干必须在星期四制作，因此第 3 批糖霜饼干必须在星期五制作。']\nnew_fact = infer_new_fact(selected) # '有 3 天可以制作第 1 批糖霜饼干： 星期一、星期二、星期三。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果星期五制作一批饼干，', '则以下哪一项可能是正确的？', 'A) 第一批糖霜饼干在星期一制作。', '有 3 天可以制作第 1 批糖霜饼干： 星期一、星期二、星期三。']\nnew_fact = infer_new_fact(selected) # '答案是 A。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 A。']\nnew_fact = infer_new_fact(selected) # 'The answer is A'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'A'"}
{"id": "AR-LSAT_41_4afc83f245", "context": "A bakery makes exactly three kinds of cookie—oatmeal, peanut butter, and sugar. Exactly three batches of each kind of cookie are made each week (Monday through Friday) and each batch is made, from start to finish, on a single day. The following conditions apply: No two batches of the same kind of cookie are made on the same day. At least one batch of cookies is made on Monday. The second batch of oatmeal cookies is made on the same day as the first batch of peanut butter cookies. The second batch of sugar cookies is made on Thursday.", "options": ["At least one batch of cookies is made on each of the five days.", "At least two batches of cookies are made on Wednesday.", "Exactly one batch of cookies is made on Monday.", "Exactly two batches of cookies are made on Tuesday.", "Exactly one batch of cookies is made on Friday."], "answer": "E", "reasoning_graph_edges": [{"antecedents": [5, 8], "consequent": 16}, {"antecedents": [3, 16], "consequent": 17}, {"antecedents": [9, 17], "consequent": 18}, {"antecedents": [5, 7], "consequent": 19}, {"antecedents": [19], "consequent": 20}, {"antecedents": [2, 6, 18, 20], "consequent": 21}, {"antecedents": [9, 18, 21], "consequent": 22}, {"antecedents": [3, 5, 7, 22], "consequent": 23}, {"antecedents": [16, 23], "consequent": 24}, {"antecedents": [9, 10, 15, 24], "consequent": 25}, {"antecedents": [25], "consequent": 26}], "metadata": [], "linearized_output_en": "sent5 & sent8 -> int1: Sugar cookie batch 2 (S2) must be made on Thursday, so sugar cookie batch 3 (S3) must be made on Friday.; int1 & sent3 -> int2: Sugar cookie batch 1 (S1) can be made on Monday, Tuesday, or Wednesday.; int2 & sent9 -> int3: If we want one kind of cookie's first batch to be made on the same day as another kind of cookie's third batch, let's say S1 was made on Wednesday.; sent5 & sent7 -> int4: Since no 2 batches of the same cookie type can be made on the same day and the 2nd batch of oatmeal cookies (O2) must be made on the same day as the 1st batch of peanut butter cookies (P1),; int4 -> int5: P1 cannot be made on Monday.; int3 & int5 & sent2 & sent6 -> int6: Thus, only oatmeal cookie batch 1 (O1) can be made on Monday to fulfill our requirement that 1 batch of cookies must be made on Monday.; int3 & int6 & sent9 -> int7: Because of this, O2 must be made on Tuesday, and O3 must be made on Wednesday (overlapping with S1 as we require).; int7 & sent3 & sent5 & sent7 -> int8: P1 is then made on Tuesday, and P2 can either be made on Wednesday or Thursday, which would dictate if P3 is made on Thursday or Friday.; int1 & int8 -> int9: We know that 2 cookie batches can be made on Friday (S3, P3).; int9 & sent10 & sent15 & sent9 -> int10: The answer is E.; int10 -> int11: The answer is E);", "textual_logical_units": {"1": "一家面包店制作三种口味的饼干：", "2": "燕麦饼干、花生酱饼干和糖霜饼干。", "3": "每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。", "4": "遵循以下条件：", "5": "同一天不会制作两批同种口味的饼干。", "6": "星期一至少制作一批饼干。", "7": "第二批燕麦饼干与第一批花生酱饼干在同一天制作。", "8": "第二批糖霜饼干在星期四制作。", "9": "如果一种饼干的第一批与另一种饼干的第三批是在同一天制作的，", "10": "则以下哪一项可能是错误的？", "11": "A) 在这五天中每天至少制作一批饼干。", "12": "B) 星期三至少制作两批饼干。", "13": "C) 星期一制作一批饼干。", "14": "D) 星期二制作两批饼干。", "15": "E) 星期五制作一批饼干。", "16": "第 2 批糖霜饼干 (S2) 必须在星期四制作，因此第 3 批糖霜饼干 (S3) 必须在星期五制作。", "17": "第 1 批糖霜饼干 (S1) 可以在星期一、星期二或星期三制作。", "18": "如果我们想让一种饼干的第一批与另一种饼干的第三批在同一天制作，假设 S1 是在星期三制作的。", "19": "由于不能在同一天制作两批同种口味的饼干，并且第二批燕麦饼干 (O2) 必须与第一批花生酱饼干 (P1) 在同一天制作，", "20": "因此 P1 不能在星期一制作。", "21": "因此，只有第 1 批燕麦饼干 (O1) 在星期一制作，才能满足在星期一必须制作 1 批饼干的要求。", "22": "因此，O2 必须在星期二制作，O3 必须在星期三制作(我们的要求与 S1 重叠)。", "23": "然后在星期二制作 P1，P2 可以在星期三或星期四制作，这将决定 P3 是在星期四还是星期五制作。", "24": "我们知道星期五可以制作两批饼干(S3、P3)。", "25": "答案是 E。", "26": "The answer is E)"}, "human_translated": true, "code_input": "####\nfacts = [ '一家面包店制作三种口味的饼干：',\n  '燕麦饼干、花生酱饼干和糖霜饼干。',\n  '每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。',\n  '遵循以下条件：',\n  '同一天不会制作两批同种口味的饼干。',\n  '星期一至少制作一批饼干。',\n  '第二批燕麦饼干与第一批花生酱饼干在同一天制作。',\n  '第二批糖霜饼干在星期四制作。',\n  '如果一种饼干的第一批与另一种饼干的第三批是在同一天制作的，']\nquestion = '则以下哪一项可能是错误的？'\nchoices = {'A': '在这五天中每天至少制作一批饼干。', 'B': '星期三至少制作两批饼干。', 'C': '星期一制作一批饼干。', 'D': '星期二制作两批饼干。', 'E': '星期五制作一批饼干。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['同一天不会制作两批同种口味的饼干。', '第二批糖霜饼干在星期四制作。']\nnew_fact = infer_new_fact(selected) # '第 2 批糖霜饼干 (S2) 必须在星期四制作，因此第 3 批糖霜饼干 (S3) 必须在星期五制作。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。', '第 2 批糖霜饼干 (S2) 必须在星期四制作，因此第 3 批糖霜饼干 (S3) 必须在星期五制作。']\nnew_fact = infer_new_fact(selected) # '第 1 批糖霜饼干 (S1) 可以在星期一、星期二或星期三制作。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果一种饼干的第一批与另一种饼干的第三批是在同一天制作的，', '第 1 批糖霜饼干 (S1) 可以在星期一、星期二或星期三制作。']\nnew_fact = infer_new_fact(selected) # '如果我们想让一种饼干的第一批与另一种饼干的第三批在同一天制作，假设 S1 是在星期三制作的。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['同一天不会制作两批同种口味的饼干。', '第二批燕麦饼干与第一批花生酱饼干在同一天制作。']\nnew_fact = infer_new_fact(selected) # '由于不能在同一天制作两批同种口味的饼干，并且第二批燕麦饼干 (O2) 必须与第一批花生酱饼干 (P1) 在同一天制作，'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['由于不能在同一天制作两批同种口味的饼干，并且第二批燕麦饼干 (O2) 必须与第一批花生酱饼干 (P1) 在同一天制作，']\nnew_fact = infer_new_fact(selected) # '因此 P1 不能在星期一制作。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['燕麦饼干、花生酱饼干和糖霜饼干。', '星期一至少制作一批饼干。', '如果我们想让一种饼干的第一批与另一种饼干的第三批在同一天制作，假设 S1 是在星期三制作的。', '因此 P1 不能在星期一制作。']\nnew_fact = infer_new_fact(selected) # '因此，只有第 1 批燕麦饼干 (O1) 在星期一制作，才能满足在星期一必须制作 1 批饼干的要求。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果一种饼干的第一批与另一种饼干的第三批是在同一天制作的，', '如果我们想让一种饼干的第一批与另一种饼干的第三批在同一天制作，假设 S1 是在星期三制作的。', '因此，只有第 1 批燕麦饼干 (O1) 在星期一制作，才能满足在星期一必须制作 1 批饼干的要求。']\nnew_fact = infer_new_fact(selected) # '因此，O2 必须在星期二制作，O3 必须在星期三制作(我们的要求与 S1 重叠)。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['每种饼干每周(星期一至星期五)制作三批，每批饼干从头到尾都是在一天内制作的。', '同一天不会制作两批同种口味的饼干。', '第二批燕麦饼干与第一批花生酱饼干在同一天制作。', '因此，O2 必须在星期二制作，O3 必须在星期三制作(我们的要求与 S1 重叠)。']\nnew_fact = infer_new_fact(selected) # '然后在星期二制作 P1，P2 可以在星期三或星期四制作，这将决定 P3 是在星期四还是星期五制作。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['第 2 批糖霜饼干 (S2) 必须在星期四制作，因此第 3 批糖霜饼干 (S3) 必须在星期五制作。', '然后在星期二制作 P1，P2 可以在星期三或星期四制作，这将决定 P3 是在星期四还是星期五制作。']\nnew_fact = infer_new_fact(selected) # '我们知道星期五可以制作两批饼干(S3、P3)。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果一种饼干的第一批与另一种饼干的第三批是在同一天制作的，', '则以下哪一项可能是错误的？', 'E) 星期五制作一批饼干。', '我们知道星期五可以制作两批饼干(S3、P3)。']\nnew_fact = infer_new_fact(selected) # '答案是 E。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 E。']\nnew_fact = infer_new_fact(selected) # 'The answer is E'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'E'"}
{"id": "AR-LSAT_42_f87ac6d25a", "context": "For the school paper, five students—Jiang, Kramer, Lopez, Megregian, and O'Neill—each review one or more of exactly three plays: Sunset, Tamerlane, and Undulation, but do not review any other plays. The following conditions must apply: Kramer and Lopez each review fewer of the plays than Megregian. Neither Lopez nor Megregian reviews any play Jiang reviews. Kramer and O'Neill both review Tamerlane. Exactly two of the students review exactly the same play or plays as each other.", "options": ["Lopez", "O'Neill", "Jiang, Lopez", "Kramer, O'Neill", "Lopez, Megregian"], "answer": "A", "reasoning_graph_edges": [{"antecedents": [8, 10, 11, 13, 15], "consequent": 17}, {"antecedents": [6, 10, 11, 16], "consequent": 18}, {"antecedents": [7, 14], "consequent": 19}, {"antecedents": [10, 11, 12, 17, 18, 19], "consequent": 20}, {"antecedents": [20], "consequent": 21}], "metadata": [], "linearized_output_en": "sent10 & sent11 & sent13 & sent15 & sent8 -> int1: Kramer and O'Neill review Tamerlane. B and D not options.; sent10 & sent11 & sent16 & sent6 -> int2: Kramer and Lopez must each review fewer plays that Megregian. Therefore Megregian reviews more than one. E not an answer.; sent14 & sent7 -> int3: Lopez may not review plays reviewed by Jiang. C not an answer.; int1 & int2 & int3 & sent10 & sent11 & sent12 -> int4: The answer is A; int4 -> int5: The answer is A);", "textual_logical_units": {"1": "在校报上，有五名学生", "2": "(江、克莱默、洛佩兹、梅格雷吉安和奥尼尔)", "3": "每人评论三部戏剧中的一部或多部：", "4": "《落日》、《帖木儿》和《起伏》，但不评论任何其他戏剧。", "5": "必须遵循以下条件：", "6": "克莱默和洛佩兹评论的戏剧少于梅格雷吉安。", "7": "洛佩兹和梅格雷吉安没有评论江评论过的戏剧。", "8": "克莱默和奥尼尔都评论了《帖木儿》。", "9": "有两名学生评论的戏剧完全相同。", "10": "以下哪一项准确完整地列出了", "11": "只评论了《落日》的学生？", "12": "A) 洛佩兹", "13": "B) 奥尼尔", "14": "C) 江、洛佩兹", "15": "D) 克莱默、奥尼尔", "16": "E) 洛佩兹、梅格雷吉安", "17": "克莱默和奥尼尔评论了《帖木儿》。B 和 D 不是正确选项。", "18": "克莱默和洛佩兹评论的戏剧必须少于梅格雷吉安。因此，梅格雷吉安评论了不止一部戏剧。E 不是答案。", "19": "洛佩兹不会评论江评论过的戏剧。C 不是答案。", "20": "答案是 A", "21": "The answer is A)"}, "human_translated": true, "code_input": "####\nfacts = [ '在校报上，有五名学生',\n  '(江、克莱默、洛佩兹、梅格雷吉安和奥尼尔)',\n  '每人评论三部戏剧中的一部或多部：',\n  '《落日》、《帖木儿》和《起伏》，但不评论任何其他戏剧。',\n  '必须遵循以下条件：',\n  '克莱默和洛佩兹评论的戏剧少于梅格雷吉安。',\n  '洛佩兹和梅格雷吉安没有评论江评论过的戏剧。',\n  '克莱默和奥尼尔都评论了《帖木儿》。',\n  '有两名学生评论的戏剧完全相同。',\n  '以下哪一项准确完整地列出了']\nquestion = '只评论了《落日》的学生？'\nchoices = {'A': '洛佩兹', 'B': '奥尼尔', 'C': '江、洛佩兹', 'D': '克莱默、奥尼尔', 'E': '洛佩兹、梅格雷吉安'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['克莱默和奥尼尔都评论了《帖木儿》。', '以下哪一项准确完整地列出了', '只评论了《落日》的学生？', 'B) 奥尼尔', 'D) 克莱默、奥尼尔']\nnew_fact = infer_new_fact(selected) # '克莱默和奥尼尔评论了《帖木儿》。B 和 D 不是正确选项。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['克莱默和洛佩兹评论的戏剧少于梅格雷吉安。', '以下哪一项准确完整地列出了', '只评论了《落日》的学生？', 'E) 洛佩兹、梅格雷吉安']\nnew_fact = infer_new_fact(selected) # '克莱默和洛佩兹评论的戏剧必须少于梅格雷吉安。因此，梅格雷吉安评论了不止一部戏剧。E 不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['洛佩兹和梅格雷吉安没有评论江评论过的戏剧。', 'C) 江、洛佩兹']\nnew_fact = infer_new_fact(selected) # '洛佩兹不会评论江评论过的戏剧。C 不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一项准确完整地列出了', '只评论了《落日》的学生？', 'A) 洛佩兹', '克莱默和奥尼尔评论了《帖木儿》。B 和 D 不是正确选项。', '克莱默和洛佩兹评论的戏剧必须少于梅格雷吉安。因此，梅格雷吉安评论了不止一部戏剧。E 不是答案。', '洛佩兹不会评论江评论过的戏剧。C 不是答案。']\nnew_fact = infer_new_fact(selected) # '答案是 A'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 A']\nnew_fact = infer_new_fact(selected) # 'The answer is A'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'A'"}
{"id": "AR-LSAT_43_5e82c8fb9f", "context": "For the school paper, five students—Jiang, Kramer, Lopez, Megregian, and O'Neill—each review one or more of exactly three plays: Sunset, Tamerlane, and Undulation, but do not review any other plays. The following conditions must apply: Kramer and Lopez each review fewer of the plays than Megregian. Neither Lopez nor Megregian reviews any play Jiang reviews. Kramer and O'Neill both review Tamerlane. Exactly two of the students review exactly the same play or plays as each other.", "options": ["Jiang reviews more of the plays than Lopez does.", "Megregian reviews more of the plays than Jiang does.", "Megregian reviews more of the plays than O'Neill does.", "O'Neill reviews more of the plays than Jiang does.", "O'Neill reviews more of the plays than Kramer does."], "answer": "B", "reasoning_graph_edges": [{"antecedents": [3], "consequent": 16}, {"antecedents": [7, 16], "consequent": 17}, {"antecedents": [6, 17], "consequent": 18}, {"antecedents": [10, 12, 18], "consequent": 19}, {"antecedents": [19], "consequent": 20}], "metadata": [], "linearized_output_en": "sent3 -> int1: The students must each review one or more of three exact plays.; int1 & sent7 -> int2: Megregian and Lopez may not review any play reviewed by Jiang. That leaves at most two plays for Megregian.; int2 & sent6 -> int3: Kramer and Lopez must each review fewer plays than Megregian. So, each would review one play.; int3 & sent10 & sent12 -> int4: The answer is B.; int4 -> int5: The answer is B);", "textual_logical_units": {"1": "在校报上，有五名学生", "2": "(江、克莱默、洛佩兹、梅格雷吉安和奥尼尔)", "3": "每人评论三部戏剧中的一部或多部：", "4": "《落日》、《帖木儿》和《起伏》，但不评论任何其他戏剧。", "5": "必须遵循以下条件：", "6": "克莱默和洛佩兹评论的戏剧少于梅格雷吉安。", "7": "洛佩兹和梅格雷吉安没有评论江评论过的戏剧。", "8": "克莱默和奥尼尔都评论了《帖木儿》。", "9": "有两名学生评论的戏剧完全相同。", "10": "以下哪一项一定是正确的？", "11": "A) 江评论的戏剧比洛佩兹多。", "12": "B) 梅格雷吉安评论的戏剧比江多。", "13": "C) 梅格雷吉安评论的戏剧比奥尼尔多。", "14": "D) 奥尼尔评论的戏剧比江多。", "15": "E) 奥尼尔评论的戏剧比克莱默多。", "16": "每名学生必须评论三部戏剧中的一部或多部。", "17": "洛佩兹和梅格雷吉安不会评论江评论过的任何戏剧。梅格雷吉安最多只剩下两部戏剧。", "18": "克莱默和洛佩兹评论的戏剧必须少于梅格雷吉安。因此，两人都评论一部戏剧。", "19": "答案是 B。", "20": "The answer is B)"}, "human_translated": true, "code_input": "####\nfacts = [ '在校报上，有五名学生',\n  '(江、克莱默、洛佩兹、梅格雷吉安和奥尼尔)',\n  '每人评论三部戏剧中的一部或多部：',\n  '《落日》、《帖木儿》和《起伏》，但不评论任何其他戏剧。',\n  '必须遵循以下条件：',\n  '克莱默和洛佩兹评论的戏剧少于梅格雷吉安。',\n  '洛佩兹和梅格雷吉安没有评论江评论过的戏剧。',\n  '克莱默和奥尼尔都评论了《帖木儿》。',\n  '有两名学生评论的戏剧完全相同。']\nquestion = '以下哪一项一定是正确的？'\nchoices = {'A': '江评论的戏剧比洛佩兹多。', 'B': '梅格雷吉安评论的戏剧比江多。', 'C': '梅格雷吉安评论的戏剧比奥尼尔多。', 'D': '奥尼尔评论的戏剧比江多。', 'E': '奥尼尔评论的戏剧比克莱默多。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['每人评论三部戏剧中的一部或多部：']\nnew_fact = infer_new_fact(selected) # '每名学生必须评论三部戏剧中的一部或多部。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['洛佩兹和梅格雷吉安没有评论江评论过的戏剧。', '每名学生必须评论三部戏剧中的一部或多部。']\nnew_fact = infer_new_fact(selected) # '洛佩兹和梅格雷吉安不会评论江评论过的任何戏剧。梅格雷吉安最多只剩下两部戏剧。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['克莱默和洛佩兹评论的戏剧少于梅格雷吉安。', '洛佩兹和梅格雷吉安不会评论江评论过的任何戏剧。梅格雷吉安最多只剩下两部戏剧。']\nnew_fact = infer_new_fact(selected) # '克莱默和洛佩兹评论的戏剧必须少于梅格雷吉安。因此，两人都评论一部戏剧。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一项一定是正确的？', 'B) 梅格雷吉安评论的戏剧比江多。', '克莱默和洛佩兹评论的戏剧必须少于梅格雷吉安。因此，两人都评论一部戏剧。']\nnew_fact = infer_new_fact(selected) # '答案是 B。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 B。']\nnew_fact = infer_new_fact(selected) # 'The answer is B'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'B'"}
{"id": "AR-LSAT_44_1ff4e8fcaf", "context": "For the school paper, five students—Jiang, Kramer, Lopez, Megregian, and O'Neill—each review one or more of exactly three plays: Sunset, Tamerlane, and Undulation, but do not review any other plays. The following conditions must apply: Kramer and Lopez each review fewer of the plays than Megregian. Neither Lopez nor Megregian reviews any play Jiang reviews. Kramer and O'Neill both review Tamerlane. Exactly two of the students review exactly the same play or plays as each other.", "options": ["Megregian does not review Undulation.", "O'Neill does not review Undulation.", "Jiang reviews Undulation.", "Lopez reviews Tamerlane.", "O'Neill reviews Sunset."], "answer": "E", "reasoning_graph_edges": [{"antecedents": [6, 7, 10, 14], "consequent": 17}, {"antecedents": [7, 10, 12], "consequent": 18}, {"antecedents": [6, 12, 18], "consequent": 19}, {"antecedents": [6, 7, 10, 13, 16], "consequent": 20}, {"antecedents": [6, 15], "consequent": 21}, {"antecedents": [10, 16, 17, 18, 19, 20, 21], "consequent": 22}, {"antecedents": [22], "consequent": 23}], "metadata": [], "linearized_output_en": "sent10 & sent14 & sent6 & sent7 -> int1: Megragian and Lopez may not review plays reviewed by Jiang. That means Kramer, Jiang and O'neill would review Undulation. That would mean that Kramer and Megregian both review two plays. C is not an answer; sent10 & sent12 & sent7 -> int2: If Megregian does not review Undulation, it means that Jiang, Lopez, and Kramer are options to review that play. However, Lopez cannot review a play reviewed by Jiang.; int2 & sent12 & sent6 -> int3: If lopez is not considered, then Kramer is an option and he would review two plays, an equal number to Megregian. A is not an answer.; sent10 & sent13 & sent16 & sent6 & sent7 -> int4: If O'Neill does not review Undulation, a combination of involving Jiang would rule out two students and Kramer and Megregian would review the same number of plays. B is not an answer.; sent15 & sent6 -> int5: If Lopez reviews Tamerlane, then he cannot review Undulation since he has to review less plays than Megregian. Similarly, the combination of Megregian, Kramer and O'Neill would not be possible because Kramer needs to review less plays than Megregian.; int1 & int2 & int3 & int4 & int5 & sent10 & sent16 -> int6: The answer is E; int6 -> int7: The answer is E);", "textual_logical_units": {"1": "在校报上，有五名学生", "2": "(江、克莱默、洛佩兹、梅格雷吉安和奥尼尔)", "3": "每人评论三部戏剧中的一部或多部：", "4": "《落日》、《帖木儿》和《起伏》，但不评论任何其他戏剧。", "5": "必须遵循以下条件：", "6": "克莱默和洛佩兹评论的戏剧少于梅格雷吉安。", "7": "洛佩兹和梅格雷吉安没有评论江评论过的戏剧。", "8": "克莱默和奥尼尔都评论了《帖木儿》。", "9": "有两名学生评论的戏剧完全相同。", "10": "如果有三名学生评论《起伏》，", "11": "则以下哪一项可能是正确的？", "12": "A) 梅格雷吉安没有评论《起伏》。", "13": "B) 奥尼尔没有评论《起伏》。", "14": "C) 江评论了《起伏》。", "15": "D) 洛佩兹评论了《帖木儿》。", "16": "E) 奥尼尔评论了《落日》。", "17": "梅格雷吉安和洛佩兹不会评论江评论过的戏剧。这意味着克莱默、江和奥尼尔都评论《起伏》。这意味着克莱默和梅格雷吉安都评论两部戏剧。C 不是答案", "18": "如果梅格雷吉安不评论《起伏》，那就意味着江、洛佩兹和克莱默可能评论这部戏剧。但是，洛佩兹不会评论江评论过的戏剧。", "19": "如果不考虑洛佩兹，还有可能是克莱默，他会评论两部戏剧，这个数量与梅格雷吉安相同。A 不是答案。", "20": "如果奥尼尔不评论《起伏》，那么有江在的组合将排除两名学生，而克莱默和梅格雷吉安评论的戏剧数量相同。B 不是答案。", "21": "如果洛佩兹评论《帖木儿》，那么他就无法评论《起伏》，因为他评论的戏剧要少于梅格雷吉安。同样，梅格雷吉安、克莱默和奥尼尔的组合是不可能的，因为克莱默需要评论的戏剧少于梅格雷吉安。", "22": "答案是 E", "23": "The answer is E)"}, "human_translated": true, "code_input": "####\nfacts = [ '在校报上，有五名学生',\n  '(江、克莱默、洛佩兹、梅格雷吉安和奥尼尔)',\n  '每人评论三部戏剧中的一部或多部：',\n  '《落日》、《帖木儿》和《起伏》，但不评论任何其他戏剧。',\n  '必须遵循以下条件：',\n  '克莱默和洛佩兹评论的戏剧少于梅格雷吉安。',\n  '洛佩兹和梅格雷吉安没有评论江评论过的戏剧。',\n  '克莱默和奥尼尔都评论了《帖木儿》。',\n  '有两名学生评论的戏剧完全相同。',\n  '如果有三名学生评论《起伏》，']\nquestion = '则以下哪一项可能是正确的？'\nchoices = {'A': '梅格雷吉安没有评论《起伏》。', 'B': '奥尼尔没有评论《起伏》。', 'C': '江评论了《起伏》。', 'D': '洛佩兹评论了《帖木儿》。', 'E': '奥尼尔评论了《落日》。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['克莱默和洛佩兹评论的戏剧少于梅格雷吉安。', '洛佩兹和梅格雷吉安没有评论江评论过的戏剧。', '如果有三名学生评论《起伏》，', 'C) 江评论了《起伏》。']\nnew_fact = infer_new_fact(selected) # '梅格雷吉安和洛佩兹不会评论江评论过的戏剧。这意味着克莱默、江和奥尼尔都评论《起伏》。这意味着克莱默和梅格雷吉安都评论两部戏剧。C 不是答案'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['洛佩兹和梅格雷吉安没有评论江评论过的戏剧。', '如果有三名学生评论《起伏》，', 'A) 梅格雷吉安没有评论《起伏》。']\nnew_fact = infer_new_fact(selected) # '如果梅格雷吉安不评论《起伏》，那就意味着江、洛佩兹和克莱默可能评论这部戏剧。但是，洛佩兹不会评论江评论过的戏剧。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['克莱默和洛佩兹评论的戏剧少于梅格雷吉安。', 'A) 梅格雷吉安没有评论《起伏》。', '如果梅格雷吉安不评论《起伏》，那就意味着江、洛佩兹和克莱默可能评论这部戏剧。但是，洛佩兹不会评论江评论过的戏剧。']\nnew_fact = infer_new_fact(selected) # '如果不考虑洛佩兹，还有可能是克莱默，他会评论两部戏剧，这个数量与梅格雷吉安相同。A 不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['克莱默和洛佩兹评论的戏剧少于梅格雷吉安。', '洛佩兹和梅格雷吉安没有评论江评论过的戏剧。', '如果有三名学生评论《起伏》，', 'B) 奥尼尔没有评论《起伏》。', 'E) 奥尼尔评论了《落日》。']\nnew_fact = infer_new_fact(selected) # '如果奥尼尔不评论《起伏》，那么有江在的组合将排除两名学生，而克莱默和梅格雷吉安评论的戏剧数量相同。B 不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['克莱默和洛佩兹评论的戏剧少于梅格雷吉安。', 'D) 洛佩兹评论了《帖木儿》。']\nnew_fact = infer_new_fact(selected) # '如果洛佩兹评论《帖木儿》，那么他就无法评论《起伏》，因为他评论的戏剧要少于梅格雷吉安。同样，梅格雷吉安、克莱默和奥尼尔的组合是不可能的，因为克莱默需要评论的戏剧少于梅格雷吉安。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果有三名学生评论《起伏》，', 'E) 奥尼尔评论了《落日》。', '梅格雷吉安和洛佩兹不会评论江评论过的戏剧。这意味着克莱默、江和奥尼尔都评论《起伏》。这意味着克莱默和梅格雷吉安都评论两部戏剧。C 不是答案', '如果梅格雷吉安不评论《起伏》，那就意味着江、洛佩兹和克莱默可能评论这部戏剧。但是，洛佩兹不会评论江评论过的戏剧。', '如果不考虑洛佩兹，还有可能是克莱默，他会评论两部戏剧，这个数量与梅格雷吉安相同。A 不是答案。', '如果奥尼尔不评论《起伏》，那么有江在的组合将排除两名学生，而克莱默和梅格雷吉安评论的戏剧数量相同。B 不是答案。', '如果洛佩兹评论《帖木儿》，那么他就无法评论《起伏》，因为他评论的戏剧要少于梅格雷吉安。同样，梅格雷吉安、克莱默和奥尼尔的组合是不可能的，因为克莱默需要评论的戏剧少于梅格雷吉安。']\nnew_fact = infer_new_fact(selected) # '答案是 E'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 E']\nnew_fact = infer_new_fact(selected) # 'The answer is E'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'E'"}
{"id": "AR-LSAT_45_1b1005bd06", "context": "For the school paper, five students—Jiang, Kramer, Lopez, Megregian, and O'Neill—each review one or more of exactly three plays: Sunset, Tamerlane, and Undulation, but do not review any other plays. The following conditions must apply: Kramer and Lopez each review fewer of the plays than Megregian. Neither Lopez nor Megregian reviews any play Jiang reviews. Kramer and O'Neill both review Tamerlane. Exactly two of the students review exactly the same play or plays as each other.", "options": ["Jiang, Kramer", "Kramer, O'Neill", "Kramer, Lopez, O'Neill", "Kramer, Megregian, O'Neill", "Lopez, Megregian, O'Neill"], "answer": "D", "reasoning_graph_edges": [{"antecedents": [8, 10, 11, 12, 16], "consequent": 17}, {"antecedents": [6, 7, 10, 11, 13, 14], "consequent": 18}, {"antecedents": [10, 11, 15, 17, 18], "consequent": 19}, {"antecedents": [19], "consequent": 20}], "metadata": [], "linearized_output_en": "sent10 & sent11 & sent12 & sent16 & sent8 -> int1: Kramer and O'Neill must be included in the complete list. A and E not answers.; sent10 & sent11 & sent13 & sent14 & sent6 & sent7 -> int2: Since Lopez and Megregian cannot review plays reviewed by Jiang and Kramer and Lopez must each review fewer plays than Megregian, B  and C are not answers.; int1 & int2 & sent10 & sent11 & sent15 -> int3: The answer is D; int3 -> int4: The answer is D);", "textual_logical_units": {"1": "在校报上，有五名学生", "2": "(江、克莱默、洛佩兹、梅格雷吉安和奥尼尔)", "3": "每人评论三部戏剧中的一部或多部：", "4": "《落日》、《帖木儿》和《起伏》，但不评论任何其他戏剧。", "5": "必须遵循以下条件：", "6": "克莱默和洛佩兹评论的戏剧少于梅格雷吉安。", "7": "洛佩兹和梅格雷吉安没有评论江评论过的戏剧。", "8": "克莱默和奥尼尔都评论了《帖木儿》。", "9": "有两名学生评论的戏剧完全相同。", "10": "以下哪一项准确完整地列出了", "11": "评论了《帖木儿》的学生？", "12": "A) 江、克莱默", "13": "B) 克莱默、奥尼尔", "14": "C) 克莱默、洛佩兹、奥尼尔", "15": "D) 克莱默、梅格雷吉安、奥尼尔", "16": "E) 洛佩兹、梅格雷吉安、奥尼尔", "17": "克莱默和奥尼尔必须包含在完整名单中。A 和 E 不是答案。", "18": "由于洛佩兹和梅格吉安不会评论江评论过的戏剧，克莱默和洛佩兹评论的戏剧必须少于梅格雷吉安，因此 B 和 C 不是答案。", "19": "答案是 D", "20": "The answer is D)"}, "human_translated": true, "code_input": "####\nfacts = [ '在校报上，有五名学生',\n  '(江、克莱默、洛佩兹、梅格雷吉安和奥尼尔)',\n  '每人评论三部戏剧中的一部或多部：',\n  '《落日》、《帖木儿》和《起伏》，但不评论任何其他戏剧。',\n  '必须遵循以下条件：',\n  '克莱默和洛佩兹评论的戏剧少于梅格雷吉安。',\n  '洛佩兹和梅格雷吉安没有评论江评论过的戏剧。',\n  '克莱默和奥尼尔都评论了《帖木儿》。',\n  '有两名学生评论的戏剧完全相同。',\n  '以下哪一项准确完整地列出了']\nquestion = '评论了《帖木儿》的学生？'\nchoices = {'A': '江、克莱默', 'B': '克莱默、奥尼尔', 'C': '克莱默、洛佩兹、奥尼尔', 'D': '克莱默、梅格雷吉安、奥尼尔', 'E': '洛佩兹、梅格雷吉安、奥尼尔'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['克莱默和奥尼尔都评论了《帖木儿》。', '以下哪一项准确完整地列出了', '评论了《帖木儿》的学生？', 'A) 江、克莱默', 'E) 洛佩兹、梅格雷吉安、奥尼尔']\nnew_fact = infer_new_fact(selected) # '克莱默和奥尼尔必须包含在完整名单中。A 和 E 不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['克莱默和洛佩兹评论的戏剧少于梅格雷吉安。', '洛佩兹和梅格雷吉安没有评论江评论过的戏剧。', '以下哪一项准确完整地列出了', '评论了《帖木儿》的学生？', 'B) 克莱默、奥尼尔', 'C) 克莱默、洛佩兹、奥尼尔']\nnew_fact = infer_new_fact(selected) # '由于洛佩兹和梅格吉安不会评论江评论过的戏剧，克莱默和洛佩兹评论的戏剧必须少于梅格雷吉安，因此 B 和 C 不是答案。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一项准确完整地列出了', '评论了《帖木儿》的学生？', 'D) 克莱默、梅格雷吉安、奥尼尔', '克莱默和奥尼尔必须包含在完整名单中。A 和 E 不是答案。', '由于洛佩兹和梅格吉安不会评论江评论过的戏剧，克莱默和洛佩兹评论的戏剧必须少于梅格雷吉安，因此 B 和 C 不是答案。']\nnew_fact = infer_new_fact(selected) # '答案是 D'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 D']\nnew_fact = infer_new_fact(selected) # 'The answer is D'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'D'"}
{"id": "AR-LSAT_46_eaf3c67b1a", "context": "For the school paper, five students—Jiang, Kramer, Lopez, Megregian, and O'Neill—each review one or more of exactly three plays: Sunset, Tamerlane, and Undulation, but do not review any other plays. The following conditions must apply: Kramer and Lopez each review fewer of the plays than Megregian. Neither Lopez nor Megregian reviews any play Jiang reviews. Kramer and O'Neill both review Tamerlane. Exactly two of the students review exactly the same play or plays as each other.", "options": ["Jiang reviews Sunset.", "Lopez reviews Undulation.", "Megregian reviews Sunset.", "Megregian reviews Tamerlane.", "O'Neill reviews Undulation."], "answer": "D", "reasoning_graph_edges": [{"antecedents": [6, 7, 10], "consequent": 17}, {"antecedents": [15, 17], "consequent": 18}, {"antecedents": [10, 11, 15, 18], "consequent": 19}, {"antecedents": [19], "consequent": 20}], "metadata": [], "linearized_output_en": "sent10 & sent6 & sent7 -> int1: Jiang and Megregian may not review the same plays and Kramer and Lopez must each review fewer plays than Megregian.; int1 & sent15 -> int2: Therefore, Megregian should review two plays, Tamerlane being one of them.; int2 & sent10 & sent11 & sent15 -> int3: The answer is D; int3 -> int4: The answer is D);", "textual_logical_units": {"1": "在校报上，有五名学生", "2": "(江、克莱默、洛佩兹、梅格雷吉安和奥尼尔)", "3": "每人评论三部戏剧中的一部或多部：", "4": "《落日》、《帖木儿》和《起伏》，但不评论任何其他戏剧。", "5": "必须遵循以下条件：", "6": "克莱默和洛佩兹评论的戏剧少于梅格雷吉安。", "7": "洛佩兹和梅格雷吉安没有评论江评论过的戏剧。", "8": "克莱默和奥尼尔都评论了《帖木儿》。", "9": "有两名学生评论的戏剧完全相同。", "10": "如果江不评论《帖木儿》，", "11": "则以下哪一项一定是正确的？", "12": "A) 江评论了《落日》。", "13": "B) 洛佩兹评论了《起伏》。", "14": "C) 梅格雷吉安评论了《落日》。", "15": "D) 梅格雷吉安评论了《帖木儿》。", "16": "E) 奥尼尔评论了《起伏》。", "17": "江和梅格雷吉安不会评论相同的戏剧，克莱默和洛佩兹评论的戏剧必须少于梅格雷吉安。", "18": "因此，梅格雷吉安应该评论两部戏剧，其中之一是《帖木儿》。", "19": "答案是 D", "20": "The answer is D)"}, "human_translated": true, "code_input": "####\nfacts = [ '在校报上，有五名学生',\n  '(江、克莱默、洛佩兹、梅格雷吉安和奥尼尔)',\n  '每人评论三部戏剧中的一部或多部：',\n  '《落日》、《帖木儿》和《起伏》，但不评论任何其他戏剧。',\n  '必须遵循以下条件：',\n  '克莱默和洛佩兹评论的戏剧少于梅格雷吉安。',\n  '洛佩兹和梅格雷吉安没有评论江评论过的戏剧。',\n  '克莱默和奥尼尔都评论了《帖木儿》。',\n  '有两名学生评论的戏剧完全相同。',\n  '如果江不评论《帖木儿》，']\nquestion = '则以下哪一项一定是正确的？'\nchoices = {'A': '江评论了《落日》。', 'B': '洛佩兹评论了《起伏》。', 'C': '梅格雷吉安评论了《落日》。', 'D': '梅格雷吉安评论了《帖木儿》。', 'E': '奥尼尔评论了《起伏》。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['克莱默和洛佩兹评论的戏剧少于梅格雷吉安。', '洛佩兹和梅格雷吉安没有评论江评论过的戏剧。', '如果江不评论《帖木儿》，']\nnew_fact = infer_new_fact(selected) # '江和梅格雷吉安不会评论相同的戏剧，克莱默和洛佩兹评论的戏剧必须少于梅格雷吉安。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['D) 梅格雷吉安评论了《帖木儿》。', '江和梅格雷吉安不会评论相同的戏剧，克莱默和洛佩兹评论的戏剧必须少于梅格雷吉安。']\nnew_fact = infer_new_fact(selected) # '因此，梅格雷吉安应该评论两部戏剧，其中之一是《帖木儿》。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果江不评论《帖木儿》，', '则以下哪一项一定是正确的？', 'D) 梅格雷吉安评论了《帖木儿》。', '因此，梅格雷吉安应该评论两部戏剧，其中之一是《帖木儿》。']\nnew_fact = infer_new_fact(selected) # '答案是 D'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 D']\nnew_fact = infer_new_fact(selected) # 'The answer is D'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'D'"}
{"id": "AR-LSAT_47_b4bbc39217", "context": "An administrator must assign parking spaces to six new employees: Robertson, Souza, Togowa, Vaughn, Xu, and Young. Each of the six employees must be assigned one of the following parking spaces: #1, #2, #3, #4, #5, or #6. No two employees can be assigned the same parking space. The following rules govern the assignment of parking spaces: Young must be assigned a higher-numbered parking space than Togowa. Xu must be assigned a higher-numbered parking space than Souza. Robertson must be assigned a higher-numbered parking space than Young. Robertson must be assigned parking space #1, #2, #3, or #4.", "options": ["#1: Young; #2: Souza; #3: Vaughn; #4: Robertson; #5: Togowa; #6: Xu", "#1: Vaughn; #2: Togowa; #3: Young; #4: Souza; #5: Robertson; #6: Xu", "#1: Togowa; #2: Young; #3: Xu; #4: Robertson; #5: Souza; #6: Vaughn", "#1: Togowa; #2: Robertson; #3: Young; #4: Souza; #5: Vaughn; #6: Xu", "#1: Souza; #2: Togowa; #3: Young; #4: Robertson; #5: Xu; #6: Vaughn"], "answer": "E", "reasoning_graph_edges": [{"antecedents": [7, 9], "consequent": 17}, {"antecedents": [8], "consequent": 18}, {"antecedents": [11, 16, 17, 18], "consequent": 19}, {"antecedents": [19], "consequent": 20}], "metadata": [], "linearized_output_en": "sent7 & sent9 -> int1: Togawa must be assigned before Young. Yount must come before Robertson. From this information we understand that the order would be Togowa > Young > Robertson; sent8 -> int2: Souza must come before Xu; int1 & int2 & sent11 & sent16 -> int3: Answer is E; int3 -> int4: The answer is E);", "textual_logical_units": {"1": "管理员需要为六名新员工分配停车位：", "2": "罗伯逊、苏萨、托戈瓦、沃恩、徐和杨。", "3": "需要为六名员工中的每一名分配以下停车位之一：", "4": "1 号、2 号、3 号、4 号、5 号或 6 号。", "5": "不能为两名员工分配同一个停车位。", "6": "停车位的分配遵循以下规则：", "7": "杨分配的停车位编号必须比托戈瓦分配的更大。", "8": "徐分配的停车位编号必须比苏萨分配的更大。", "9": "罗伯逊分配的停车位编号必须比杨分配的更大。", "10": "必须为罗伯逊分配停车位 1 号、2 号、3 号或 4 号。", "11": "以下哪一项可以作为新员工停车位的分配？", "12": "A) 1 号： 杨；2 号： 苏萨；3 号： 沃恩；4 号： 罗伯逊；5 号： 托戈瓦；6 号： 徐", "13": "B) 1 号： 沃恩；2 号： 托戈瓦；3 号： 杨；4 号： 苏萨；5 号： 罗伯逊；6 号： 徐", "14": "C) 1 号： 托戈瓦；2 号： 杨；3 号： 徐；4 号： 罗伯逊；5 号： 苏萨；6 号： 沃恩", "15": "D) 1 号： 托戈瓦；2 号： 罗伯逊；3 号： 杨；4 号： 苏萨；5 号： 沃恩；6 号： 徐", "16": "E) 1 号： 苏萨；2 号： 托戈瓦；3 号： 杨；4 号： 罗伯逊；5 号： 徐；6 号： 沃恩", "17": "托戈瓦分配的编号必须在杨之前。杨分配的编号必须在罗伯逊之前。根据这些信息，我们得出顺序是：托戈瓦 > 杨 > 罗伯逊", "18": "苏萨的编号必须在徐之前", "19": "答案是 E", "20": "The answer is E)"}, "human_translated": true, "code_input": "####\nfacts = [ '管理员需要为六名新员工分配停车位：',\n  '罗伯逊、苏萨、托戈瓦、沃恩、徐和杨。',\n  '需要为六名员工中的每一名分配以下停车位之一：',\n  '1 号、2 号、3 号、4 号、5 号或 6 号。',\n  '不能为两名员工分配同一个停车位。',\n  '停车位的分配遵循以下规则：',\n  '杨分配的停车位编号必须比托戈瓦分配的更大。',\n  '徐分配的停车位编号必须比苏萨分配的更大。',\n  '罗伯逊分配的停车位编号必须比杨分配的更大。',\n  '必须为罗伯逊分配停车位 1 号、2 号、3 号或 4 号。']\nquestion = '以下哪一项可以作为新员工停车位的分配？'\nchoices = { 'A': '1 号： 杨；2 号： 苏萨；3 号： 沃恩；4 号： 罗伯逊；5 号： 托戈瓦；6 号： 徐',\n  'B': '1 号： 沃恩；2 号： 托戈瓦；3 号： 杨；4 号： 苏萨；5 号： 罗伯逊；6 号： 徐',\n  'C': '1 号： 托戈瓦；2 号： 杨；3 号： 徐；4 号： 罗伯逊；5 号： 苏萨；6 号： 沃恩',\n  'D': '1 号： 托戈瓦；2 号： 罗伯逊；3 号： 杨；4 号： 苏萨；5 号： 沃恩；6 号： 徐',\n  'E': '1 号： 苏萨；2 号： 托戈瓦；3 号： 杨；4 号： 罗伯逊；5 号： 徐；6 号： 沃恩'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['杨分配的停车位编号必须比托戈瓦分配的更大。', '罗伯逊分配的停车位编号必须比杨分配的更大。']\nnew_fact = infer_new_fact(selected) # '托戈瓦分配的编号必须在杨之前。杨分配的编号必须在罗伯逊之前。根据这些信息，我们得出顺序是：托戈瓦 > 杨 > 罗伯逊'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['徐分配的停车位编号必须比苏萨分配的更大。']\nnew_fact = infer_new_fact(selected) # '苏萨的编号必须在徐之前'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['以下哪一项可以作为新员工停车位的分配？', 'E) 1 号： 苏萨；2 号： 托戈瓦；3 号： 杨；4 号： 罗伯逊；5 号： 徐；6 号： 沃恩', '托戈瓦分配的编号必须在杨之前。杨分配的编号必须在罗伯逊之前。根据这些信息，我们得出顺序是：托戈瓦 > 杨 > 罗伯逊', '苏萨的编号必须在徐之前']\nnew_fact = infer_new_fact(selected) # '答案是 E'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 E']\nnew_fact = infer_new_fact(selected) # 'The answer is E'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'E'"}
{"id": "AR-LSAT_48_280b5732d4", "context": "An administrator must assign parking spaces to six new employees: Robertson, Souza, Togowa, Vaughn, Xu, and Young. Each of the six employees must be assigned one of the following parking spaces: #1, #2, #3, #4, #5, or #6. No two employees can be assigned the same parking space. The following rules govern the assignment of parking spaces: Young must be assigned a higher-numbered parking space than Togowa. Xu must be assigned a higher-numbered parking space than Souza. Robertson must be assigned a higher-numbered parking space than Young. Robertson must be assigned parking space #1, #2, #3, or #4.", "options": ["Young is assigned parking space #2.", "Vaughn is assigned parking space #5.", "Togowa is assigned parking space #3.", "Souza is assigned parking space #2.", "Robertson is assigned parking space #3."], "answer": "B", "reasoning_graph_edges": [{"antecedents": [7, 8, 9, 10, 11], "consequent": 18}, {"antecedents": [2, 7, 8, 9, 10, 11, 18], "consequent": 19}, {"antecedents": [11, 12, 14, 19], "consequent": 20}, {"antecedents": [20], "consequent": 21}], "metadata": [], "linearized_output_en": "sent10 & sent11 & sent7 & sent8 & sent9 -> int1: We know the order of 5 people out of 6 employees. Togowa comes before Young who comes before Robertson. Souza must come before Xu and Togowa; int1 & sent10 & sent11 & sent2 & sent7 & sent8 & sent9 -> int2: We do not know the position of Vaughn. Given information we have so far, we can imagine the following formula : Souza > Xu or Togowa > Young > Robertson. Vaughn can squeeze in any of the spots as long as it does not violate the given formula.; int2 & sent11 & sent12 & sent14 -> int3: Answer is B; int3 -> int4: The answer is B);", "textual_logical_units": {"1": "管理员需要为六名新员工分配停车位：", "2": "罗伯逊、苏萨、托戈瓦、沃恩、徐和杨。", "3": "需要为六名员工中的每一名分配以下停车位之一：", "4": "1 号、2 号、3 号、4 号、5 号或 6 号。", "5": "不能为两名员工分配同一个停车位。", "6": "停车位的分配遵循以下规则：", "7": "杨分配的停车位编号必须比托戈瓦分配的更大。", "8": "徐分配的停车位编号必须比苏萨分配的更大。", "9": "罗伯逊分配的停车位编号必须比杨分配的更大。", "10": "必须为罗伯逊分配停车位 1 号、2 号、3 号或 4 号。", "11": "如果托戈瓦分配的停车位编号必须比苏萨分配的更大，", "12": "则以下哪一项可能是正确的？", "13": "A) 杨被分配了 2 号停车位。", "14": "B) 沃恩被分配了 5 号停车位。", "15": "C) 托戈瓦被分配了 3 号停车位。", "16": "D) 苏萨被分配了 2 号停车位。", "17": "E) 罗伯逊被分配了 3 号停车位。", "18": "我们知道 6 名员工中 5 名员工的顺序。托戈瓦的编号在杨之前，杨的编号在罗伯逊之前。苏萨的编号必须在徐和托戈瓦之前", "19": "我们不知道沃恩的位置。根据我们目前掌握的信息，我们可以想象以下公式： 苏萨 > 徐或托戈瓦 > 杨 > 罗伯逊。沃恩可以插入任何位置，只要不违反给定的公式。", "20": "答案是 B", "21": "The answer is B)"}, "human_translated": true, "code_input": "####\nfacts = [ '管理员需要为六名新员工分配停车位：',\n  '罗伯逊、苏萨、托戈瓦、沃恩、徐和杨。',\n  '需要为六名员工中的每一名分配以下停车位之一：',\n  '1 号、2 号、3 号、4 号、5 号或 6 号。',\n  '不能为两名员工分配同一个停车位。',\n  '停车位的分配遵循以下规则：',\n  '杨分配的停车位编号必须比托戈瓦分配的更大。',\n  '徐分配的停车位编号必须比苏萨分配的更大。',\n  '罗伯逊分配的停车位编号必须比杨分配的更大。',\n  '必须为罗伯逊分配停车位 1 号、2 号、3 号或 4 号。',\n  '如果托戈瓦分配的停车位编号必须比苏萨分配的更大，']\nquestion = '则以下哪一项可能是正确的？'\nchoices = {'A': '杨被分配了 2 号停车位。', 'B': '沃恩被分配了 5 号停车位。', 'C': '托戈瓦被分配了 3 号停车位。', 'D': '苏萨被分配了 2 号停车位。', 'E': '罗伯逊被分配了 3 号停车位。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['杨分配的停车位编号必须比托戈瓦分配的更大。', '徐分配的停车位编号必须比苏萨分配的更大。', '罗伯逊分配的停车位编号必须比杨分配的更大。', '必须为罗伯逊分配停车位 1 号、2 号、3 号或 4 号。', '如果托戈瓦分配的停车位编号必须比苏萨分配的更大，']\nnew_fact = infer_new_fact(selected) # '我们知道 6 名员工中 5 名员工的顺序。托戈瓦的编号在杨之前，杨的编号在罗伯逊之前。苏萨的编号必须在徐和托戈瓦之前'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['罗伯逊、苏萨、托戈瓦、沃恩、徐和杨。', '杨分配的停车位编号必须比托戈瓦分配的更大。', '徐分配的停车位编号必须比苏萨分配的更大。', '罗伯逊分配的停车位编号必须比杨分配的更大。', '必须为罗伯逊分配停车位 1 号、2 号、3 号或 4 号。', '如果托戈瓦分配的停车位编号必须比苏萨分配的更大，', '我们知道 6 名员工中 5 名员工的顺序。托戈瓦的编号在杨之前，杨的编号在罗伯逊之前。苏萨的编号必须在徐和托戈瓦之前']\nnew_fact = infer_new_fact(selected) # '我们不知道沃恩的位置。根据我们目前掌握的信息，我们可以想象以下公式： 苏萨 > 徐或托戈瓦 > 杨 > 罗伯逊。沃恩可以插入任何位置，只要不违反给定的公式。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果托戈瓦分配的停车位编号必须比苏萨分配的更大，', '则以下哪一项可能是正确的？', 'B) 沃恩被分配了 5 号停车位。', '我们不知道沃恩的位置。根据我们目前掌握的信息，我们可以想象以下公式： 苏萨 > 徐或托戈瓦 > 杨 > 罗伯逊。沃恩可以插入任何位置，只要不违反给定的公式。']\nnew_fact = infer_new_fact(selected) # '答案是 B'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案是 B']\nnew_fact = infer_new_fact(selected) # 'The answer is B'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'B'"}
{"id": "AR-LSAT_49_f8d1d00c99", "context": "An administrator must assign parking spaces to six new employees: Robertson, Souza, Togowa, Vaughn, Xu, and Young. Each of the six employees must be assigned one of the following parking spaces: #1, #2, #3, #4, #5, or #6. No two employees can be assigned the same parking space. The following rules govern the assignment of parking spaces: Young must be assigned a higher-numbered parking space than Togowa. Xu must be assigned a higher-numbered parking space than Souza. Robertson must be assigned a higher-numbered parking space than Young. Robertson must be assigned parking space #1, #2, #3, or #4.", "options": ["Souza is assigned parking space #1.", "Young is assigned parking space #2.", "Vaughn is assigned parking space #3.", "Robertson is assigned parking space #4.", "Xu is assigned parking space #5."], "answer": "C", "reasoning_graph_edges": [{"antecedents": [8], "consequent": 18}, {"antecedents": [7, 9], "consequent": 19}, {"antecedents": [10, 19], "consequent": 20}, {"antecedents": [0], "consequent": 21}, {"antecedents": [18, 19, 20, 21], "consequent": 22}, {"antecedents": [11, 12, 15, 22], "consequent": 23}, {"antecedents": [23], "consequent": 24}], "metadata": [], "linearized_output_en": "sent8 -> int1: Souza must be assigned to a lower numbered space than Xu.; sent7 & sent9 -> int2: Togowa (T) must be assigned to a lower numbered space than Young (Y), who must be assigned to a lower numbered space than Robertson (R): T < Y< R; int2 & sent10 -> int3: Robertson can only be assigned to spaces 1-4, but since at least 2 people must park in lower numbered spaces, he can only be assigned to spaces 3 and 4.; sent0 -> int4: Vaughn has no restrictions on parking assignment.; int1 & int2 & int3 & int4 -> int5: So if Vaughn is assigned to space 3, then Togowa must be assigned to space 1, Young must be assigned to space 2, Robertson must be assigned to space 4, and Souza and Xu must occupy spaces 5 and 6, respectively: T Y V R S X; int5 & sent11 & sent12 & sent15 -> int6: The answer has to be C.; int6 -> int7: The answer is C);", "textual_logical_units": {"1": "管理员需要为六名新员工分配停车位：", "2": "罗伯逊、苏萨、托戈瓦、沃恩、徐和杨。", "3": "需要为六名员工中的每一名分配以下停车位之一：", "4": "1 号、2 号、3 号、4 号、5 号或 6 号。", "5": "不能为两名员工分配同一个停车位。", "6": "停车位的分配遵循以下规则：", "7": "杨分配的停车位编号必须比托戈瓦分配的更大。", "8": "徐分配的停车位编号必须比苏萨分配的更大。", "9": "罗伯逊分配的停车位编号必须比杨分配的更大。", "10": "必须为罗伯逊分配停车位 1 号、2 号、3 号或 4 号。", "11": "如果以下哪一项为真，", "12": "则向每位新员工分配的停车位是完全且唯一确定的？", "13": "A) 苏萨被分配了 1 号停车位。", "14": "B) 杨被分配了 2 号停车位。", "15": "C) 沃恩被分配了 3 号停车位。", "16": "D) 罗伯逊被分配了 4 号停车位。", "17": "E) 徐被分配了 5 号停车位。", "18": "苏萨分配的停车位编号必须小于徐分配的。", "19": "托戈瓦 (T) 分配的停车位编号必须小于杨分配的 (Y)，杨分配的停车位编号必须小于罗伯逊 (R) 分配的： T < Y< R", "20": "罗伯逊只能分配到停车位 1-4，但由于必须至少有 2 人将车停在编号较小的停车位，因此只能将他分配到停车位 3 和 4。", "21": "沃恩对停车位分配没有限制。", "22": "因此，如果沃恩被分配到停车位 3，则必须将托戈瓦分配到停车位 1，杨必须分配到停车位 2，罗伯逊必须分配到停车位 4，苏萨和徐必须分别占用停车位 5 和 6： T Y V R S X", "23": "答案只能是 C。", "24": "The answer is C)"}, "human_translated": true, "code_input": "####\nfacts = [ '管理员需要为六名新员工分配停车位：',\n  '罗伯逊、苏萨、托戈瓦、沃恩、徐和杨。',\n  '需要为六名员工中的每一名分配以下停车位之一：',\n  '1 号、2 号、3 号、4 号、5 号或 6 号。',\n  '不能为两名员工分配同一个停车位。',\n  '停车位的分配遵循以下规则：',\n  '杨分配的停车位编号必须比托戈瓦分配的更大。',\n  '徐分配的停车位编号必须比苏萨分配的更大。',\n  '罗伯逊分配的停车位编号必须比杨分配的更大。',\n  '必须为罗伯逊分配停车位 1 号、2 号、3 号或 4 号。',\n  '如果以下哪一项为真，']\nquestion = '则向每位新员工分配的停车位是完全且唯一确定的？'\nchoices = {'A': '苏萨被分配了 1 号停车位。', 'B': '杨被分配了 2 号停车位。', 'C': '沃恩被分配了 3 号停车位。', 'D': '罗伯逊被分配了 4 号停车位。', 'E': '徐被分配了 5 号停车位。'}\nanswer = None\n# call select_facts and infer_new_fact until answer is set\nselected = select_facts(facts) # ", "code_output": "['徐分配的停车位编号必须比苏萨分配的更大。']\nnew_fact = infer_new_fact(selected) # '苏萨分配的停车位编号必须小于徐分配的。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['杨分配的停车位编号必须比托戈瓦分配的更大。', '罗伯逊分配的停车位编号必须比杨分配的更大。']\nnew_fact = infer_new_fact(selected) # '托戈瓦 (T) 分配的停车位编号必须小于杨分配的 (Y)，杨分配的停车位编号必须小于罗伯逊 (R) 分配的： T < Y< R'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['必须为罗伯逊分配停车位 1 号、2 号、3 号或 4 号。', '托戈瓦 (T) 分配的停车位编号必须小于杨分配的 (Y)，杨分配的停车位编号必须小于罗伯逊 (R) 分配的： T < Y< R']\nnew_fact = infer_new_fact(selected) # '罗伯逊只能分配到停车位 1-4，但由于必须至少有 2 人将车停在编号较小的停车位，因此只能将他分配到停车位 3 和 4。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # []\nnew_fact = infer_new_fact(selected) # '沃恩对停车位分配没有限制。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['苏萨分配的停车位编号必须小于徐分配的。', '托戈瓦 (T) 分配的停车位编号必须小于杨分配的 (Y)，杨分配的停车位编号必须小于罗伯逊 (R) 分配的： T < Y< R', '罗伯逊只能分配到停车位 1-4，但由于必须至少有 2 人将车停在编号较小的停车位，因此只能将他分配到停车位 3 和 4。', '沃恩对停车位分配没有限制。']\nnew_fact = infer_new_fact(selected) # '因此，如果沃恩被分配到停车位 3，则必须将托戈瓦分配到停车位 1，杨必须分配到停车位 2，罗伯逊必须分配到停车位 4，苏萨和徐必须分别占用停车位 5 和 6： T Y V R S X'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['如果以下哪一项为真，', '则向每位新员工分配的停车位是完全且唯一确定的？', 'C) 沃恩被分配了 3 号停车位。', '因此，如果沃恩被分配到停车位 3，则必须将托戈瓦分配到停车位 1，杨必须分配到停车位 2，罗伯逊必须分配到停车位 4，苏萨和徐必须分别占用停车位 5 和 6： T Y V R S X']\nnew_fact = infer_new_fact(selected) # '答案只能是 C。'\nis_solved(new_fact, choices) # False\nfacts.append(new_fact)\n\nselected = select_facts(facts) # ['答案只能是 C。']\nnew_fact = infer_new_fact(selected) # 'The answer is C'\nis_solved(new_fact, choices) # True\nanswer = make_choice(new_fact, choices) # 'C'"}
